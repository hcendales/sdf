----------------------------------------------
-- Export file for user SIMIT               --
-- Created by SEVEN on 11/07/2012, 16:51:37 --
----------------------------------------------

set define off
spool 02_CrearObjetos.log

prompt
prompt Creating table BANCO
prompt ====================
prompt
create table SIMIT.BANCO
(
  idbanco           CHAR(2) not null,
  nombre            VARCHAR2(50),
  responsable       VARCHAR2(100),
  cargo             VARCHAR2(50),
  correo            VARCHAR2(500),
  telefono          VARCHAR2(50),
  dircorres         VARCHAR2(500),
  cuentacontable    VARCHAR2(16),
  ctacontperiodoant VARCHAR2(16)
)
;
comment on column SIMIT.BANCO.idbanco
  is 'Codigo del banco';
comment on column SIMIT.BANCO.nombre
  is 'Nombre del banco';
comment on column SIMIT.BANCO.responsable
  is 'Responsable principal en el banco';
comment on column SIMIT.BANCO.cargo
  is 'Cargo del responsable en el banco';
comment on column SIMIT.BANCO.correo
  is 'Correo electronico del responsable';
comment on column SIMIT.BANCO.telefono
  is 'Telefono de contacto del responsable';
comment on column SIMIT.BANCO.dircorres
  is 'Direcci¿n de correspondencia';
comment on column SIMIT.BANCO.ctacontperiodoant
  is 'Cuenta contable para identificacion de partidas de periodos anteriores';
alter table SIMIT.BANCO
  add constraint PK_IDBANCO primary key (IDBANCO);

prompt
prompt Creating table CONCEPTO
prompt =======================
prompt
create table SIMIT.CONCEPTO
(
  idconcepto NUMBER not null,
  nombre     VARCHAR2(50)
)
;
comment on column SIMIT.CONCEPTO.idconcepto
  is 'Id concepto de liquidacion';
comment on column SIMIT.CONCEPTO.nombre
  is 'Nombre del concepto de liquidacion';
alter table SIMIT.CONCEPTO
  add constraint PK_IDCONCEPTO primary key (IDCONCEPTO);

prompt
prompt Creating table CONCEPTOSIDENTIFICAR
prompt ===================================
prompt
create table SIMIT.CONCEPTOSIDENTIFICAR
(
  idbanco  CHAR(2),
  concepto VARCHAR2(500)
)
;
comment on column SIMIT.CONCEPTOSIDENTIFICAR.idbanco
  is 'banco';
comment on column SIMIT.CONCEPTOSIDENTIFICAR.concepto
  is 'concepto a filtrar';

prompt
prompt Creating table CONCESIONARIO
prompt ============================
prompt
create table SIMIT.CONCESIONARIO
(
  idconcesionario          CHAR(2) not null,
  nit_c                    VARCHAR2(10),
  nombre                   VARCHAR2(50),
  correo                   VARCHAR2(500),
  cta_contable             VARCHAR2(16),
  cta_contable_liquidacion VARCHAR2(16),
  cta_contable_fondo       VARCHAR2(16),
  cta_cont_period_ant      VARCHAR2(16),
  cta_cont_period_antfcm   VARCHAR2(16)
)
;
comment on column SIMIT.CONCESIONARIO.idconcesionario
  is 'Identificacion del concesionario';
comment on column SIMIT.CONCESIONARIO.nit_c
  is 'Nit con digito del concesionario';
comment on column SIMIT.CONCESIONARIO.nombre
  is 'Nombre del concesionario';
comment on column SIMIT.CONCESIONARIO.correo
  is 'Correo electronico ';
comment on column SIMIT.CONCESIONARIO.cta_contable
  is 'Cuenta contable asignada (para futuro)';
comment on column SIMIT.CONCESIONARIO.cta_contable_liquidacion
  is 'Cuenta contable para liquidacion';
comment on column SIMIT.CONCESIONARIO.cta_contable_fondo
  is 'Cuenta contable para fondo';
comment on column SIMIT.CONCESIONARIO.cta_cont_period_ant
  is 'Cuenta contable para identificacionde periodos anteriores';
comment on column SIMIT.CONCESIONARIO.cta_cont_period_antfcm
  is 'Cuenta contable para identificacionde periodos anteriores fcm';
alter table SIMIT.CONCESIONARIO
  add constraint PK_IDCONCESIONARIO primary key (IDCONCESIONARIO);

prompt
prompt Creating table CTA_DISPERSION_CONCESIONARIO
prompt ===========================================
prompt
create table SIMIT.CTA_DISPERSION_CONCESIONARIO
(
  idconcepto      NUMBER not null,
  idconcesionario CHAR(2) not null,
  idbanco         CHAR(2),
  nit_c           VARCHAR2(10),
  tipocuenta      VARCHAR2(3),
  cuenta          VARCHAR2(250),
  idbancorec      CHAR(2) not null
)
;
comment on column SIMIT.CTA_DISPERSION_CONCESIONARIO.idconcepto
  is 'Id del concepto de liquidacion';
comment on column SIMIT.CTA_DISPERSION_CONCESIONARIO.idconcesionario
  is 'Id del concesionario';
comment on column SIMIT.CTA_DISPERSION_CONCESIONARIO.idbanco
  is 'Id del banco para dispersion';
comment on column SIMIT.CTA_DISPERSION_CONCESIONARIO.nit_c
  is 'Nit de la cuenta de dispersion';
comment on column SIMIT.CTA_DISPERSION_CONCESIONARIO.tipocuenta
  is 'Tipo de cuenta de dispersion (AHO: Ahorros, CTE:Corriente)';
comment on column SIMIT.CTA_DISPERSION_CONCESIONARIO.cuenta
  is 'Numero de cuenta de dispersion';
comment on column SIMIT.CTA_DISPERSION_CONCESIONARIO.idbancorec
  is 'id banco recaudador';
alter table SIMIT.CTA_DISPERSION_CONCESIONARIO
  add constraint PK_CTA_DISPERSION_CONCESION primary key (IDCONCEPTO, IDCONCESIONARIO, IDBANCOREC);
alter table SIMIT.CTA_DISPERSION_CONCESIONARIO
  add constraint FK_IDCONCEPTO_CDC foreign key (IDCONCEPTO)
  references SIMIT.CONCEPTO (IDCONCEPTO);
alter table SIMIT.CTA_DISPERSION_CONCESIONARIO
  add constraint FK_IDCONCESIONARIO_CDC foreign key (IDCONCESIONARIO)
  references SIMIT.CONCESIONARIO (IDCONCESIONARIO);
alter table SIMIT.CTA_DISPERSION_CONCESIONARIO
  add constraint CH_TIPOCUENTA_DP
  check (tipocuenta IN ('AHO','CTE'));

prompt
prompt Creating table CTA_DISPERSION_FCM
prompt =================================
prompt
create table SIMIT.CTA_DISPERSION_FCM
(
  nit_fcm                 VARCHAR2(10) not null,
  idbancorec              CHAR(2) not null,
  cta_disp_s_banco        CHAR(2),
  cta_disp_s_tipo_cta     VARCHAR2(3),
  cta_disp_s_cta          VARCHAR2(250),
  cta_disp_p_banco        CHAR(2),
  cta_disp_p_tipo_cta     VARCHAR2(3),
  cta_disp_p_cta          VARCHAR2(250),
  cta_disp_pa_banco       CHAR(2),
  cta_disp_pa_tipo_cta    VARCHAR2(3),
  cta_disp_pa_cta         VARCHAR2(250),
  cta_disp_ac_banco       CHAR(2),
  cta_disp_ac_tipo_cta    VARCHAR2(3),
  cta_disp_ac_cta         VARCHAR2(250),
  borrcta_disp_c_banco    CHAR(2),
  borrcta_disp_c_tipo_cta VARCHAR2(3),
  borrcta_disp_c_cta      VARCHAR2(16),
  cta_con_s               VARCHAR2(16),
  cta_con_p               VARCHAR2(16),
  cta_con_pa              VARCHAR2(16),
  cta_con_ac              VARCHAR2(16)
)
;
comment on column SIMIT.CTA_DISPERSION_FCM.nit_fcm
  is 'Nit FCM';
comment on column SIMIT.CTA_DISPERSION_FCM.idbancorec
  is 'Banco Recaudador';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_s_banco
  is 'SIMIT Banco dispersion';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_s_tipo_cta
  is 'SIMIT Tipo de cuenta';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_s_cta
  is 'SIMIT Numero de Cuenta';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_p_banco
  is 'POLCA Banco dispersion';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_p_tipo_cta
  is 'POLCA Tipo de cuenta';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_p_cta
  is 'POLCA Numero de Cuenta';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_pa_banco
  is '1.8 Banco dispersion';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_pa_tipo_cta
  is '1.8 Tipo de cuenta';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_pa_cta
  is '1.8 Numero de Cuenta';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_ac_banco
  is 'Banco Acuerdo de pago';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_ac_tipo_cta
  is 'Tipo Cuenta Acuerdo de Pago';
comment on column SIMIT.CTA_DISPERSION_FCM.cta_disp_ac_cta
  is 'Cuenta Acuerdo de pago';
comment on column SIMIT.CTA_DISPERSION_FCM.borrcta_disp_c_banco
  is 'Banco contravencional';
comment on column SIMIT.CTA_DISPERSION_FCM.borrcta_disp_c_tipo_cta
  is 'Tipo Cuenta contravencional';
comment on column SIMIT.CTA_DISPERSION_FCM.borrcta_disp_c_cta
  is 'Cuenta Contravencional';
alter table SIMIT.CTA_DISPERSION_FCM
  add constraint PK_CTA_DISPERSION_FCM primary key (NIT_FCM, IDBANCOREC);
alter table SIMIT.CTA_DISPERSION_FCM
  add constraint CH_DISP_PA_TIPO_CTA
  check (CTA_DISP_pa_TIPO_CTA IN ('AHO','CTE'));
alter table SIMIT.CTA_DISPERSION_FCM
  add constraint CH_DISP_P_TIPO_CTA
  check (CTA_DISP_p_TIPO_CTA IN ('AHO','CTE'));
alter table SIMIT.CTA_DISPERSION_FCM
  add constraint CH_DISP_S_TIPO_CTA
  check (CTA_DISP_S_TIPO_CTA IN ('AHO','CTE'));

prompt
prompt Creating table CTA_DISPERSION_TERCERO
prompt =====================================
prompt
create table SIMIT.CTA_DISPERSION_TERCERO
(
  idmunicipio CHAR(8) not null,
  nit_t       VARCHAR2(10) not null,
  idbanco     CHAR(2),
  tipocuenta  VARCHAR2(3),
  cuenta      VARCHAR2(16)
)
;
comment on column SIMIT.CTA_DISPERSION_TERCERO.idmunicipio
  is 'Divipo del municipio';
comment on column SIMIT.CTA_DISPERSION_TERCERO.nit_t
  is 'NIT del tercero';
comment on column SIMIT.CTA_DISPERSION_TERCERO.idbanco
  is 'Id banco de transferencia de tercero';
comment on column SIMIT.CTA_DISPERSION_TERCERO.tipocuenta
  is 'Tipo de cuenta de transferencia (AHO: Ahorros CTE: Corriente)';
comment on column SIMIT.CTA_DISPERSION_TERCERO.cuenta
  is 'Numero de cuenta de transferencia';
alter table SIMIT.CTA_DISPERSION_TERCERO
  add constraint PK_CTA_DISPERSION_TERCERO primary key (IDMUNICIPIO, NIT_T);
alter table SIMIT.CTA_DISPERSION_TERCERO
  add constraint CH_TIPOCUENTA_DT
  check (tipocuenta IN ('AHO','CTE'));

prompt
prompt Creating table CTA_RECAUDO_CONCESIONARIO
prompt ========================================
prompt
create table SIMIT.CTA_RECAUDO_CONCESIONARIO
(
  idconcesionario  CHAR(2) not null,
  idbanco          CHAR(2) not null,
  indtipo          VARCHAR2(5) not null,
  tipocuenta       VARCHAR2(3),
  cuenta           VARCHAR2(16) not null,
  comision_recaudo NUMBER,
  comision_ach     NUMBER,
  cta_contable     VARCHAR2(16),
  cta_contable_ing VARCHAR2(16),
  cta_contable_dev VARCHAR2(16)
)
;
comment on column SIMIT.CTA_RECAUDO_CONCESIONARIO.idconcesionario
  is 'Id concesionario';
comment on column SIMIT.CTA_RECAUDO_CONCESIONARIO.idbanco
  is 'Id Banco';
comment on column SIMIT.CTA_RECAUDO_CONCESIONARIO.indtipo
  is 'Tipo de recaudo (SIMIT, POLCA)';
comment on column SIMIT.CTA_RECAUDO_CONCESIONARIO.tipocuenta
  is 'Tipo de cuenta (AHO: Ahorros CTE: Corriente)';
comment on column SIMIT.CTA_RECAUDO_CONCESIONARIO.cuenta
  is 'Numero de cuenta';
comment on column SIMIT.CTA_RECAUDO_CONCESIONARIO.comision_recaudo
  is 'Comision de recuado con iva incluido';
comment on column SIMIT.CTA_RECAUDO_CONCESIONARIO.comision_ach
  is 'Comision de transferencias ACH con IVA incluido';
comment on column SIMIT.CTA_RECAUDO_CONCESIONARIO.cta_contable
  is 'Cuenta contable asignada';
alter table SIMIT.CTA_RECAUDO_CONCESIONARIO
  add constraint PK_CTA_RECAUDO_CONCESIONARIO primary key (IDCONCESIONARIO, IDBANCO, INDTIPO, CUENTA);
alter table SIMIT.CTA_RECAUDO_CONCESIONARIO
  add constraint FK_IDCONCESIONARIO_CRC foreign key (IDCONCESIONARIO)
  references SIMIT.CONCESIONARIO (IDCONCESIONARIO);
alter table SIMIT.CTA_RECAUDO_CONCESIONARIO
  add constraint CH_INDTIPO_R
  check (INDtipo IN ('SIMIT','POLCA'));
alter table SIMIT.CTA_RECAUDO_CONCESIONARIO
  add constraint CH_TIPOCUENTA_R
  check (tipocuenta IN ('AHO','CTE'));

prompt
prompt Creating table FCM
prompt ==================
prompt
create table SIMIT.FCM
(
  nit_fcm                  VARCHAR2(10) not null,
  correo                   VARCHAR2(500),
  cta_disp_s_banco         CHAR(2),
  cta_disp_s_tipo_cta      VARCHAR2(3),
  cta_disp_s_cta           VARCHAR2(16),
  cta_disp_p_banco         CHAR(2),
  cta_disp_p_tipo_cta      VARCHAR2(3),
  cta_disp_p_cta           VARCHAR2(16),
  iva                      NUMBER,
  retencion_fuente         NUMBER,
  impuesto_timbre_tercero  NUMBER,
  impuesto_timbre_fcm      NUMBER,
  director_ejecutivo       VARCHAR2(250),
  director_nacional        VARCHAR2(250),
  contador_general         VARCHAR2(250),
  coordinador_financiero   VARCHAR2(250),
  nit_polca                VARCHAR2(10),
  nit_sevial               VARCHAR2(10),
  ctacon_puente            VARCHAR2(16),
  ctacon_fondo_cobertura   VARCHAR2(16),
  ctacon_polca             VARCHAR2(16),
  ctacon_fcm               VARCHAR2(16),
  cta_disp_pa_banco        CHAR(2),
  cta_disp_pa_tipo_cta     VARCHAR2(3),
  cta_disp_pa_cta          VARCHAR2(16),
  ctacon_fcma              VARCHAR2(16),
  ctacon_ingreso           VARCHAR2(16),
  ctacon_impuestos         VARCHAR2(16),
  reteiva                  NUMBER,
  timbre_contravencional   NUMBER,
  ctacon_puente_ext        VARCHAR2(16),
  m_director_ejecutivo     VARCHAR2(250),
  m_director_nacional      VARCHAR2(250),
  m_contador_general       VARCHAR2(250),
  m_coordinador_financiero VARCHAR2(250),
  dias_activacion          NUMBER,
  cta_disp_ac_banco        CHAR(2),
  cta_disp_ac_tipo_cta     VARCHAR2(3),
  cta_disp_ac_cta          VARCHAR2(16),
  seguridad_integrada      NUMBER,
  url_seguridad            VARCHAR2(250),
  servidorsmtp             VARCHAR2(250),
  enviacorreo              NUMBER
)
;
comment on column SIMIT.FCM.nit_fcm
  is 'NIt FCM';
comment on column SIMIT.FCM.correo
  is 'Correo de responsable FCM';
comment on column SIMIT.FCM.cta_disp_s_banco
  is 'Banco de transferencias SIMIT';
comment on column SIMIT.FCM.cta_disp_s_tipo_cta
  is 'Tipo de cuenta de transferencias SIMIT (AHO, CTE)';
comment on column SIMIT.FCM.cta_disp_s_cta
  is 'Numero de cuenta para transferencias SIMIT';
comment on column SIMIT.FCM.cta_disp_p_banco
  is 'Banco de transferencias POLCA';
comment on column SIMIT.FCM.cta_disp_p_tipo_cta
  is 'Tipo de cuenta de transferencias POLCA (AHO, CTE)';
comment on column SIMIT.FCM.cta_disp_p_cta
  is 'Numero de cuento para transferencias POLCA';
comment on column SIMIT.FCM.iva
  is 'porcentaje de IVA ';
comment on column SIMIT.FCM.retencion_fuente
  is 'porcentaje de retencion en la fuente';
comment on column SIMIT.FCM.impuesto_timbre_tercero
  is 'Impuesto de timbre a terceros';
comment on column SIMIT.FCM.impuesto_timbre_fcm
  is 'Impuesto de timbre aplicado a FCM';
comment on column SIMIT.FCM.director_ejecutivo
  is 'Nombre del director ejecutivo';
comment on column SIMIT.FCM.director_nacional
  is 'Nombre del director nacional';
comment on column SIMIT.FCM.contador_general
  is 'Nombre Contador general';
comment on column SIMIT.FCM.coordinador_financiero
  is 'Nombre coordinador financiero';
comment on column SIMIT.FCM.nit_polca
  is 'Nit con digito de POLCA';
comment on column SIMIT.FCM.nit_sevial
  is 'Nit con digito de SEVIAL';
comment on column SIMIT.FCM.ctacon_puente
  is 'Cuenta contable puente';
comment on column SIMIT.FCM.ctacon_fondo_cobertura
  is 'Cuenta contable para fondo de cobertura';
comment on column SIMIT.FCM.ctacon_polca
  is 'Cuenta contable asignada a POLCA';
comment on column SIMIT.FCM.ctacon_fcm
  is 'Cuenta contable asignada a FCM';
comment on column SIMIT.FCM.cta_disp_pa_banco
  is 'Banco de cuenta financiera para transferencias del 1.8';
comment on column SIMIT.FCM.cta_disp_pa_tipo_cta
  is 'Tipo de cuenta financiera para transferencias del 1.8 (AHO, CTE)';
comment on column SIMIT.FCM.cta_disp_pa_cta
  is 'Numero cuenta financiera para transferencias del 1.8';
comment on column SIMIT.FCM.ctacon_fcma
  is 'Cuenta contable FCM 1.8';
comment on column SIMIT.FCM.ctacon_ingreso
  is 'Cuenta contable ingresos';
comment on column SIMIT.FCM.ctacon_impuestos
  is 'Cuenta contable impuestos';
comment on column SIMIT.FCM.reteiva
  is 'Porcentaje de reteiva';
comment on column SIMIT.FCM.timbre_contravencional
  is 'Porcentaje timbre contravencional';
comment on column SIMIT.FCM.ctacon_puente_ext
  is 'Cuenta contable puente par arecuado externo';
comment on column SIMIT.FCM.m_director_ejecutivo
  is 'Correo Del Director Ejecutivo';
comment on column SIMIT.FCM.m_director_nacional
  is 'Correo Del Director Ejecutivo';
comment on column SIMIT.FCM.m_contador_general
  is 'Correo Del Director Ejecutivo';
comment on column SIMIT.FCM.m_coordinador_financiero
  is 'Correo Del Director Ejecutivo';
comment on column SIMIT.FCM.dias_activacion
  is 'M¿nimo n¿mero de d¿as para la activaci¿n de una novedad';
comment on column SIMIT.FCM.cta_disp_ac_banco
  is 'Banco acuerdo pago';
comment on column SIMIT.FCM.cta_disp_ac_tipo_cta
  is 'Tipo cuenta acuerdo pago';
comment on column SIMIT.FCM.cta_disp_ac_cta
  is 'Cuenta acuerdo pago';
comment on column SIMIT.FCM.seguridad_integrada
  is '1: INTEGRADA 0: NO INTEGRADA';
comment on column SIMIT.FCM.url_seguridad
  is 'Url del wsdl que soporta la seguridad integrada';
comment on column SIMIT.FCM.servidorsmtp
  is 'ip del servidor smtp';
comment on column SIMIT.FCM.enviacorreo
  is '1: ENVIA CORREO, 0:NO ENVIA CORREO';
alter table SIMIT.FCM
  add constraint PK_NIT_FCM primary key (NIT_FCM);
alter table SIMIT.FCM
  add constraint CH_TIPOCTA_P_FCM
  check (CTA_DISP_P_TIPO_CTA IN ('AHO','CTE'));
alter table SIMIT.FCM
  add constraint CH_TIPOCTA_S_FCM
  check (CTA_DISP_S_TIPO_CTA IN ('AHO','CTE'));

prompt
prompt Creating table CTA_RECAUDO_FCM
prompt ==============================
prompt
create table SIMIT.CTA_RECAUDO_FCM
(
  nit_fcm          VARCHAR2(10) not null,
  idbanco          CHAR(2) not null,
  indtipo          VARCHAR2(5) not null,
  tipocuenta       VARCHAR2(3),
  cuenta           VARCHAR2(16),
  comision_recaudo NUMBER,
  comision_ach     NUMBER,
  cta_contable     VARCHAR2(16),
  cta_contable_pag VARCHAR2(16),
  cta_contable_ide VARCHAR2(16),
  cta_contable_ing VARCHAR2(16)
)
;
comment on column SIMIT.CTA_RECAUDO_FCM.nit_fcm
  is 'NIT de FCM';
comment on column SIMIT.CTA_RECAUDO_FCM.idbanco
  is 'Id banco';
comment on column SIMIT.CTA_RECAUDO_FCM.indtipo
  is 'Tipo de recuado (SIMIT , POLCA)';
comment on column SIMIT.CTA_RECAUDO_FCM.tipocuenta
  is 'Tipo de cuenta (AHO: Ahorros CTE: Corriente)';
comment on column SIMIT.CTA_RECAUDO_FCM.cuenta
  is 'Numero de cuenta';
comment on column SIMIT.CTA_RECAUDO_FCM.comision_recaudo
  is 'Comision de recaudo incluido iva)';
comment on column SIMIT.CTA_RECAUDO_FCM.comision_ach
  is 'Comision de transferencias ACH';
comment on column SIMIT.CTA_RECAUDO_FCM.cta_contable
  is 'Cuenta contable asignada';
comment on column SIMIT.CTA_RECAUDO_FCM.cta_contable_pag
  is 'Cuenta contable pago';
comment on column SIMIT.CTA_RECAUDO_FCM.cta_contable_ide
  is 'Cuenta contable identificacion';
comment on column SIMIT.CTA_RECAUDO_FCM.cta_contable_ing
  is 'Cuenta contable ingreso';
alter table SIMIT.CTA_RECAUDO_FCM
  add constraint PK_CTA_RECAUDO_FCM primary key (NIT_FCM, IDBANCO, INDTIPO);
alter table SIMIT.CTA_RECAUDO_FCM
  add constraint FK_NIT_FCM_CRF foreign key (NIT_FCM)
  references SIMIT.FCM (NIT_FCM);
alter table SIMIT.CTA_RECAUDO_FCM
  add constraint CH_INDTIPO_FCM
  check (INDtipo IN ('SIMIT','POLCA'));
alter table SIMIT.CTA_RECAUDO_FCM
  add constraint CH_TIPOCUENTA_FCM
  check (tipocuenta IN ('AHO','CTE'));

prompt
prompt Creating table DEPARTAMENTO
prompt ===========================
prompt
create table SIMIT.DEPARTAMENTO
(
  iddepartamento CHAR(2) not null,
  nombre         VARCHAR2(50)
)
;
comment on column SIMIT.DEPARTAMENTO.iddepartamento
  is 'Digitos asignados al departamento por el DANE';
comment on column SIMIT.DEPARTAMENTO.nombre
  is 'Nombre del departamento';
alter table SIMIT.DEPARTAMENTO
  add constraint PK_IDDEPARTAMENTO primary key (IDDEPARTAMENTO);

prompt
prompt Creating table MUNICIPIO
prompt ========================
prompt
create table SIMIT.MUNICIPIO
(
  idmunicipio         CHAR(8) not null,
  nit_m               VARCHAR2(10),
  nombre              VARCHAR2(50),
  iddepartamento      CHAR(2),
  idconcesionario     CHAR(2),
  correo              VARCHAR2(500),
  indretroactividad   NUMBER,
  idbanco             CHAR(2),
  tipocuenta          VARCHAR2(3),
  cuenta              VARCHAR2(250),
  nit_cta             VARCHAR2(10),
  indliq_s_ext        NUMBER,
  indliq_s_local      NUMBER,
  indliq_p_ext        NUMBER,
  indliq_p_local      NUMBER,
  indacuerdopago_2002 NUMBER
)
;
comment on column SIMIT.MUNICIPIO.idmunicipio
  is 'Divipo del municipio';
comment on column SIMIT.MUNICIPIO.nit_m
  is 'it del municipio';
comment on column SIMIT.MUNICIPIO.nombre
  is 'Nombre del municipio';
comment on column SIMIT.MUNICIPIO.iddepartamento
  is 'Id del departamento';
comment on column SIMIT.MUNICIPIO.idconcesionario
  is 'Id del concesionario asignado al municipio';
comment on column SIMIT.MUNICIPIO.correo
  is 'Correo de contacto del municipio';
comment on column SIMIT.MUNICIPIO.indretroactividad
  is 'Indicador de retroactividad de salario minimo';
comment on column SIMIT.MUNICIPIO.idbanco
  is 'Id del banco para transferencias';
comment on column SIMIT.MUNICIPIO.tipocuenta
  is 'Tipo de cuenta para transferecias (AHO, CTE)';
comment on column SIMIT.MUNICIPIO.cuenta
  is 'Numero de cuenta para transferencias';
comment on column SIMIT.MUNICIPIO.nit_cta
  is 'Nit de la cuenta para ransferencias';
comment on column SIMIT.MUNICIPIO.indliq_s_ext
  is 'Indicador de liquidacion simit externo';
comment on column SIMIT.MUNICIPIO.indliq_s_local
  is 'Indicador de liquidacion simit local';
comment on column SIMIT.MUNICIPIO.indliq_p_ext
  is 'Indicador de liquidacion polca externo';
comment on column SIMIT.MUNICIPIO.indliq_p_local
  is 'Indicador de liquidacion polca local';
comment on column SIMIT.MUNICIPIO.indacuerdopago_2002
  is 'Indicador de Acuerdo Pago 2002';
alter table SIMIT.MUNICIPIO
  add constraint PK_IDMUNICIPIO primary key (IDMUNICIPIO);
alter table SIMIT.MUNICIPIO
  add constraint FK_IDBANCO_M foreign key (IDBANCO)
  references SIMIT.BANCO (IDBANCO);
alter table SIMIT.MUNICIPIO
  add constraint FK_IDCONCESIONARIO_M foreign key (IDCONCESIONARIO)
  references SIMIT.CONCESIONARIO (IDCONCESIONARIO);
alter table SIMIT.MUNICIPIO
  add constraint FK_IDDEPARTAMENTO_M foreign key (IDDEPARTAMENTO)
  references SIMIT.DEPARTAMENTO (IDDEPARTAMENTO);
alter table SIMIT.MUNICIPIO
  add constraint CH_TIPOCUENTA_M
  check (tipocuenta IN ('AHO','CTE'));

prompt
prompt Creating table DIAS_DISPERSION
prompt ==============================
prompt
create table SIMIT.DIAS_DISPERSION
(
  idmunicipio        CHAR(8) not null,
  idbanco            CHAR(2) not null,
  dias_dispersion_sl NUMBER,
  frec_dispersion_sl NUMBER,
  dias_dispersion_pl NUMBER,
  frec_dispersion_pl NUMBER,
  dias_dispersion_se NUMBER,
  frec_dispersion_se NUMBER,
  dias_dispersion_pe NUMBER,
  frec_dispersion_pe NUMBER
)
;
comment on column SIMIT.DIAS_DISPERSION.idmunicipio
  is 'Divipo del municipio';
comment on column SIMIT.DIAS_DISPERSION.idbanco
  is 'Id banco';
comment on column SIMIT.DIAS_DISPERSION.dias_dispersion_sl
  is 'Dias dispersion simit local';
comment on column SIMIT.DIAS_DISPERSION.frec_dispersion_sl
  is 'Frecuencia dispersion simit local';
comment on column SIMIT.DIAS_DISPERSION.dias_dispersion_pl
  is 'Dias dispersion polca local';
comment on column SIMIT.DIAS_DISPERSION.frec_dispersion_pl
  is 'Frecuencia dispersion polca local';
comment on column SIMIT.DIAS_DISPERSION.dias_dispersion_se
  is 'Dias dispersion simit externo';
comment on column SIMIT.DIAS_DISPERSION.frec_dispersion_se
  is 'Frecuencia dispersion simit externo';
comment on column SIMIT.DIAS_DISPERSION.dias_dispersion_pe
  is 'Dias dispersion polca externo';
comment on column SIMIT.DIAS_DISPERSION.frec_dispersion_pe
  is 'Frecuencia dispersion polca externo';
alter table SIMIT.DIAS_DISPERSION
  add constraint PK_DIAS_DISPERSION_MUNI_BANCO primary key (IDMUNICIPIO, IDBANCO);
alter table SIMIT.DIAS_DISPERSION
  add constraint FK_IDBANCO_DD foreign key (IDBANCO)
  references SIMIT.BANCO (IDBANCO);
alter table SIMIT.DIAS_DISPERSION
  add constraint FK_IDMUNICIPIO_DD foreign key (IDMUNICIPIO)
  references SIMIT.MUNICIPIO (IDMUNICIPIO);

prompt
prompt Creating table ERRORS
prompt =====================
prompt
create table SIMIT.ERRORS
(
  id_errors NUMBER not null,
  fecha     DATE,
  sqlcode   NUMBER,
  message   VARCHAR2(255)
)
;
comment on table SIMIT.ERRORS
  is 'Contiene los errores presentados en cualquier proceso';
comment on column SIMIT.ERRORS.id_errors
  is 'id error autoincremental';
comment on column SIMIT.ERRORS.fecha
  is 'fecha del error sql';
comment on column SIMIT.ERRORS.sqlcode
  is 'codigo sql del error';
comment on column SIMIT.ERRORS.message
  is 'mensaje del motor de base de datos';
alter table SIMIT.ERRORS
  add constraint PK_ID_ERRORS primary key (ID_ERRORS);

prompt
prompt Creating table FECHA_NO_HABIL
prompt =============================
prompt
create table SIMIT.FECHA_NO_HABIL
(
  fecha VARCHAR2(8) not null
)
;
comment on column SIMIT.FECHA_NO_HABIL.fecha
  is 'Fecha no habil';
alter table SIMIT.FECHA_NO_HABIL
  add constraint PK_FECHA primary key (FECHA);

prompt
prompt Creating table FUNCIONARIOS_CONCESIONARIO
prompt =========================================
prompt
create table SIMIT.FUNCIONARIOS_CONCESIONARIO
(
  idconcesionario CHAR(2),
  idperson        NUMBER,
  activo          NUMBER
)
;
comment on column SIMIT.FUNCIONARIOS_CONCESIONARIO.idconcesionario
  is 'Concesionario';
comment on column SIMIT.FUNCIONARIOS_CONCESIONARIO.idperson
  is 'Funcionario autorizado para identificacion de depositos';
comment on column SIMIT.FUNCIONARIOS_CONCESIONARIO.activo
  is '1: esta activo 0:inactivo';

prompt
prompt Creating table GRUPO_CORREO
prompt ===========================
prompt
create table SIMIT.GRUPO_CORREO
(
  idgrupo     NUMBER,
  correo      VARCHAR2(500),
  descripcion VARCHAR2(250)
)
;
comment on column SIMIT.GRUPO_CORREO.idgrupo
  is 'numero del grupo';
comment on column SIMIT.GRUPO_CORREO.correo
  is 'correo electronico';
comment on column SIMIT.GRUPO_CORREO.descripcion
  is 'descripcion del grupo';

prompt
prompt Creating table HIST_VOBO
prompt ========================
prompt
create table SIMIT.HIST_VOBO
(
  idvobo      NUMBER not null,
  tipo        VARCHAR2(50),
  accion      VARCHAR2(50),
  usuario     NUMBER,
  fecha       DATE,
  referencia1 VARCHAR2(50),
  referencia2 VARCHAR2(50),
  referencia3 NUMBER,
  referencia4 NUMBER
)
;
comment on column SIMIT.HIST_VOBO.idvobo
  is 'numero unico de vobo';
comment on column SIMIT.HIST_VOBO.tipo
  is 'tipo de vobo';
comment on column SIMIT.HIST_VOBO.accion
  is 'APROBO O RECHAZO';
comment on column SIMIT.HIST_VOBO.usuario
  is 'usuario del vobo';
comment on column SIMIT.HIST_VOBO.fecha
  is 'fecha del vobo';
comment on column SIMIT.HIST_VOBO.referencia1
  is 'referencia 1';
comment on column SIMIT.HIST_VOBO.referencia2
  is 'referencia 2';
comment on column SIMIT.HIST_VOBO.referencia3
  is 'referencia 3';
comment on column SIMIT.HIST_VOBO.referencia4
  is 'referencia 4';
alter table SIMIT.HIST_VOBO
  add constraint PK_HIST_VOBO primary key (IDVOBO);

prompt
prompt Creating table IDEMASIVO_TEMP
prompt =============================
prompt
create table SIMIT.IDEMASIVO_TEMP
(
  concesionario  VARCHAR2(50),
  estado         VARCHAR2(50),
  periodo        VARCHAR2(50),
  cuenta         VARCHAR2(50),
  municipioprop  VARCHAR2(400),
  divipoprop     VARCHAR2(50),
  tipoprop       VARCHAR2(50),
  porcentajeprop VARCHAR2(50),
  divipoasig     VARCHAR2(50),
  municipioasig  VARCHAR2(400),
  tipoasig       VARCHAR2(50),
  porcentajeasig NUMBER,
  valortrn       VARCHAR2(50),
  banco          VARCHAR2(50),
  cuentatrn      VARCHAR2(50),
  periodotrn     VARCHAR2(50),
  fechatrn       VARCHAR2(50),
  descripciontrn VARCHAR2(250),
  oficinatrn     VARCHAR2(250),
  secuenciatrn   NUMBER
)
;

prompt
prompt Creating table LOG
prompt ==================
prompt
create table SIMIT.LOG
(
  fecha   DATE,
  usuario VARCHAR2(100),
  proceso VARCHAR2(100),
  accion  VARCHAR2(1000)
)
;
comment on column SIMIT.LOG.fecha
  is 'fecha de la novedad';
comment on column SIMIT.LOG.usuario
  is 'usuario que realizo la novedad';
comment on column SIMIT.LOG.proceso
  is 'novedad realizada';
comment on column SIMIT.LOG.accion
  is 'accion realizada en la novedad';

prompt
prompt Creating table MENU
prompt ===================
prompt
create table SIMIT.MENU
(
  idmenu     NUMBER,
  namemenu   VARCHAR2(100),
  page       VARCHAR2(100),
  padreid    NUMBER,
  enablemenu NUMBER
)
;
comment on column SIMIT.MENU.idmenu
  is 'Id del menu';
comment on column SIMIT.MENU.namemenu
  is 'Nombre del menu';
comment on column SIMIT.MENU.page
  is 'pagina que se invoca en el menu';
comment on column SIMIT.MENU.padreid
  is 'id del padre jerarquico del menu';
comment on column SIMIT.MENU.enablemenu
  is 'menu activo';

prompt
prompt Creating table MENUXROL
prompt =======================
prompt
create table SIMIT.MENUXROL
(
  menuid NUMBER,
  rolid  NUMBER
)
;
comment on column SIMIT.MENUXROL.menuid
  is 'Id del menu';
comment on column SIMIT.MENUXROL.rolid
  is 'Id rol';

prompt
prompt Creating table MOTIVOAJUSTE
prompt ===========================
prompt
create table SIMIT.MOTIVOAJUSTE
(
  idmotivo NUMBER not null,
  motivo   VARCHAR2(200)
)
;
alter table SIMIT.MOTIVOAJUSTE
  add constraint PK_MOTIVO primary key (IDMOTIVO);

prompt
prompt Creating table MVTOAGRARIO
prompt ==========================
prompt
create table SIMIT.MVTOAGRARIO
(
  numerocuenta          VARCHAR2(16),
  periodo               CHAR(6),
  fecha                 DATE,
  codigotransaccion     VARCHAR2(50),
  descripcionmovimiento VARCHAR2(250),
  referencia            VARCHAR2(50),
  debito                NUMBER,
  credito               NUMBER,
  impuestogmf           NUMBER,
  oficina               VARCHAR2(250),
  numerotrx             NUMBER
)
;
comment on column SIMIT.MVTOAGRARIO.numerocuenta
  is 'numero de cuenta';
comment on column SIMIT.MVTOAGRARIO.periodo
  is 'periodo de mvto';
comment on column SIMIT.MVTOAGRARIO.fecha
  is 'fecha mvtos';
comment on column SIMIT.MVTOAGRARIO.codigotransaccion
  is 'codigo transaccion';
comment on column SIMIT.MVTOAGRARIO.descripcionmovimiento
  is 'descripcion movimiento';
comment on column SIMIT.MVTOAGRARIO.referencia
  is 'referencia';
comment on column SIMIT.MVTOAGRARIO.debito
  is 'valor debito';
comment on column SIMIT.MVTOAGRARIO.credito
  is 'valor credito';
comment on column SIMIT.MVTOAGRARIO.impuestogmf
  is 'valor gmf';
comment on column SIMIT.MVTOAGRARIO.oficina
  is 'nombre oficina mvto';
comment on column SIMIT.MVTOAGRARIO.numerotrx
  is 'numero de transaccion';

prompt
prompt Creating table MVTOAGRARIO_TEMP
prompt ===============================
prompt
create table SIMIT.MVTOAGRARIO_TEMP
(
  numerocuenta          VARCHAR2(16),
  periodo               CHAR(6),
  fecha                 DATE,
  codigotransaccion     VARCHAR2(50),
  descripcionmovimiento VARCHAR2(250),
  referencia            VARCHAR2(50),
  debito                NUMBER,
  credito               NUMBER,
  impuestogmf           NUMBER,
  oficina               VARCHAR2(250)
)
;

prompt
prompt Creating table MVTOAVVILLAS
prompt ===========================
prompt
create table SIMIT.MVTOAVVILLAS
(
  numerocuenta     VARCHAR2(16),
  periodo          CHAR(6),
  fechaaplicacion  DATE,
  fechatransaccion DATE,
  descripcion      VARCHAR2(250),
  documento        VARCHAR2(20),
  origen           VARCHAR2(250),
  valortotal       NUMBER,
  valorefectivo    NUMBER,
  valorcheque      NUMBER,
  debitocredito    VARCHAR2(5),
  codigotrn        VARCHAR2(50),
  numerotrx        NUMBER,
  quincena         CHAR(2)
)
;
comment on column SIMIT.MVTOAVVILLAS.numerocuenta
  is 'numero cuenta';
comment on column SIMIT.MVTOAVVILLAS.periodo
  is 'fecha del periodo';
comment on column SIMIT.MVTOAVVILLAS.fechaaplicacion
  is 'fecha de aplicacion';
comment on column SIMIT.MVTOAVVILLAS.fechatransaccion
  is 'fecha de transaccion';
comment on column SIMIT.MVTOAVVILLAS.descripcion
  is 'descripcion transaccion';
comment on column SIMIT.MVTOAVVILLAS.documento
  is 'documento de la operacion';
comment on column SIMIT.MVTOAVVILLAS.origen
  is 'oficina origen de la transaccion';
comment on column SIMIT.MVTOAVVILLAS.valortotal
  is 'valor total';
comment on column SIMIT.MVTOAVVILLAS.valorefectivo
  is 'valor efectivo';
comment on column SIMIT.MVTOAVVILLAS.valorcheque
  is 'valor cheque';
comment on column SIMIT.MVTOAVVILLAS.debitocredito
  is 'debito o credito';
comment on column SIMIT.MVTOAVVILLAS.codigotrn
  is 'codigo transaccion';
comment on column SIMIT.MVTOAVVILLAS.numerotrx
  is 'numero de transaccion';
comment on column SIMIT.MVTOAVVILLAS.quincena
  is 'quincena del mvto';

prompt
prompt Creating table MVTOAVVILLAS_TEMP
prompt ================================
prompt
create table SIMIT.MVTOAVVILLAS_TEMP
(
  numerocuenta     VARCHAR2(16),
  periodo          CHAR(6),
  fechaaplicacion  DATE,
  fechatransaccion DATE,
  descripcion      VARCHAR2(250),
  documento        VARCHAR2(20),
  origen           VARCHAR2(250),
  valortotal       NUMBER,
  valorefectivo    NUMBER,
  valorcheque      NUMBER,
  debitocredito    VARCHAR2(5),
  codigotrn        VARCHAR2(50),
  quincena         CHAR(2)
)
;

prompt
prompt Creating table MVTOBANCAFE
prompt ==========================
prompt
create table SIMIT.MVTOBANCAFE
(
  numerocuenta     VARCHAR2(16),
  periodo          CHAR(6),
  tipodoc          CHAR(1),
  numerodocumento  VARCHAR2(16),
  codigoaplicacion CHAR(1),
  numerocta        VARCHAR2(16),
  fechaproceso     DATE,
  fechatrx         DATE,
  codigotrx        CHAR(4),
  descripciontrx   VARCHAR2(250),
  oficinasede      CHAR(5),
  oficinareceptora CHAR(5),
  nombreoficina    VARCHAR2(250),
  nrodocumento     VARCHAR2(16),
  tipoespecie      CHAR(2),
  valortrx         NUMBER,
  saldoanterior    NUMBER,
  tiporecaudo      CHAR(1),
  fuentetrx        VARCHAR2(16),
  codigoiac        VARCHAR2(16),
  referencia1      VARCHAR2(100),
  referencia2      VARCHAR2(100),
  secuencia        VARCHAR2(16),
  tipotrx          CHAR(1),
  numerotrx        NUMBER
)
;

prompt
prompt Creating table MVTOBANCAFE_TEMP
prompt ===============================
prompt
create table SIMIT.MVTOBANCAFE_TEMP
(
  numerocuenta     VARCHAR2(16),
  periodo          CHAR(6),
  tipodoc          CHAR(1),
  numerodocumento  VARCHAR2(16),
  codigoaplicacion CHAR(1),
  numerocta        VARCHAR2(16),
  fechaproceso     DATE,
  fechatrx         DATE,
  codigotrx        CHAR(4),
  descripciontrx   VARCHAR2(250),
  oficinasede      CHAR(5),
  oficinareceptora CHAR(5),
  nombreoficina    VARCHAR2(250),
  nrodocumento     VARCHAR2(16),
  tipoespecie      CHAR(2),
  valortrx         NUMBER,
  saldoanterior    NUMBER,
  tiporecaudo      CHAR(1),
  fuentetrx        VARCHAR2(16),
  codigoiac        VARCHAR2(16),
  referencia1      VARCHAR2(100),
  referencia2      VARCHAR2(100),
  secuencia        VARCHAR2(16),
  tipotrx          CHAR(1)
)
;

prompt
prompt Creating table MVTODAVIVIENDA
prompt =============================
prompt
create table SIMIT.MVTODAVIVIENDA
(
  numerocuenta           VARCHAR2(16),
  periodo                CHAR(6),
  tipo                   CHAR(4),
  fechaproceso           DATE,
  cuenta                 VARCHAR2(16),
  fechareal              DATE,
  hora                   CHAR(6),
  terminal               CHAR(6),
  talon                  CHAR(8),
  valorcheque            NUMBER,
  valortotal             NUMBER,
  valorunidad            NUMBER,
  oficinarecaudo         CHAR(4),
  motivo                 CHAR(4),
  referencia1            CHAR(16),
  referencia2            CHAR(16),
  saldoantes             NUMBER,
  indicadorexcento       CHAR(2),
  valorexcento           NUMBER,
  canal                  CHAR(2),
  causaldevolucion       CHAR(4),
  jornada                CHAR(1),
  nombretipo             VARCHAR2(250),
  nombrecausaldevolucion VARCHAR2(250),
  numerotrx              NUMBER
)
;

prompt
prompt Creating table MVTODAVIVIENDA_TEMP
prompt ==================================
prompt
create table SIMIT.MVTODAVIVIENDA_TEMP
(
  numerocuenta     VARCHAR2(16),
  periodo          CHAR(6),
  tipo             CHAR(4),
  fechaproceso     DATE,
  cuenta           VARCHAR2(16),
  fechareal        DATE,
  hora             CHAR(6),
  terminal         CHAR(6),
  talon            CHAR(8),
  valorcheque      NUMBER,
  valortotal       NUMBER,
  valorunidad      NUMBER,
  oficinarecaudo   CHAR(4),
  motivo           CHAR(4),
  referencia1      CHAR(16),
  referencia2      CHAR(16),
  saldoantes       NUMBER,
  indicadorexcento CHAR(2),
  valorexcento     NUMBER,
  canal            CHAR(2),
  causaldevolucion CHAR(4),
  jornada          CHAR(1)
)
;

prompt
prompt Creating table MVTOPOPULAR
prompt ==========================
prompt
create table SIMIT.MVTOPOPULAR
(
  numerocuenta     VARCHAR2(16),
  periodo          CHAR(6),
  fechaaplicacion  DATE,
  hora             CHAR(5),
  fechatransaccion DATE,
  transaccion      VARCHAR2(20),
  causal           VARCHAR2(20),
  descripcion      VARCHAR2(250),
  documento        VARCHAR2(20),
  origen           VARCHAR2(250),
  valortotal       NUMBER,
  valorefectivo    NUMBER,
  valorcheque      NUMBER,
  debitocredito    CHAR(1),
  numerotrx        NUMBER
)
;
comment on column SIMIT.MVTOPOPULAR.numerocuenta
  is 'numero cuenta';
comment on column SIMIT.MVTOPOPULAR.periodo
  is 'periodo de mvto';
comment on column SIMIT.MVTOPOPULAR.fechaaplicacion
  is 'fecha ';
comment on column SIMIT.MVTOPOPULAR.hora
  is 'hora mvto';
comment on column SIMIT.MVTOPOPULAR.fechatransaccion
  is 'fecha transaccion';
comment on column SIMIT.MVTOPOPULAR.transaccion
  is 'codigo transaccion';
comment on column SIMIT.MVTOPOPULAR.causal
  is 'causal transaccion';
comment on column SIMIT.MVTOPOPULAR.descripcion
  is 'descripcion mvto';
comment on column SIMIT.MVTOPOPULAR.documento
  is 'documento';
comment on column SIMIT.MVTOPOPULAR.origen
  is 'oficina origen';
comment on column SIMIT.MVTOPOPULAR.valortotal
  is 'valor total';
comment on column SIMIT.MVTOPOPULAR.valorefectivo
  is 'valor efectivo';
comment on column SIMIT.MVTOPOPULAR.valorcheque
  is 'valor cheque';
comment on column SIMIT.MVTOPOPULAR.debitocredito
  is 'debito credito';
comment on column SIMIT.MVTOPOPULAR.numerotrx
  is 'numero de transaccion';

prompt
prompt Creating table MVTOPOPULAR_TEMP
prompt ===============================
prompt
create table SIMIT.MVTOPOPULAR_TEMP
(
  numerocuenta     VARCHAR2(16),
  periodo          CHAR(6),
  fechaaplicacion  DATE,
  hora             CHAR(5),
  fechatransaccion DATE,
  transaccion      VARCHAR2(20),
  causal           VARCHAR2(20),
  descripcion      VARCHAR2(250),
  documento        VARCHAR2(20),
  origen           VARCHAR2(250),
  valortotal       NUMBER,
  valorefectivo    NUMBER,
  valorcheque      NUMBER,
  debitocredito    CHAR(1)
)
;

prompt
prompt Creating table NOVDEVOLUCION
prompt ============================
prompt
create table SIMIT.NOVDEVOLUCION
(
  tipoidentificacion   CHAR(1) not null,
  identificacion       NUMBER not null,
  nombre               VARCHAR2(50) not null,
  idbanco              CHAR(2) not null,
  tipocuenta           VARCHAR2(3) not null,
  cuenta               VARCHAR2(16) not null,
  idconcesionario      CHAR(2) not null,
  indtipo              CHAR(5) not null,
  idmunicipio          CHAR(8) not null,
  motivo               VARCHAR2(50) not null,
  vdevolucion          NUMBER not null,
  vconcesionario       NUMBER not null,
  vfcm                 NUMBER not null,
  vfondocoberturafcm   NUMBER not null,
  vfondocoberturaliq   NUMBER not null,
  vequilibrioeconomico NUMBER not null,
  vsevial              NUMBER not null,
  vfcmpolca            NUMBER not null,
  vmunicipio           NUMBER not null,
  vfcmcontravencional  NUMBER not null,
  vconcontravencional  NUMBER not null,
  tiponov              CHAR(2) not null,
  numeronov            NUMBER not null,
  fechanov             DATE not null,
  usuarionov           NUMBER not null,
  usuarioval           NUMBER,
  fechaval             DATE,
  fechaact             DATE,
  estadonov            VARCHAR2(16),
  firma1               VARCHAR2(250),
  firma2               VARCHAR2(250),
  usuarioanul          NUMBER,
  fechaanul            DATE,
  fechaaplicacion      DATE,
  vpolca               NUMBER,
  cuentarec            VARCHAR2(16),
  dnsgranbanco         VARCHAR2(16),
  dnsavvillas          VARCHAR2(16),
  indcobro             NUMBER,
  fechacobro           DATE,
  referenciatrf        NUMBER,
  observaciones        VARCHAR2(250),
  vadicional           NUMBER,
  fechacobro2          DATE,
  vivacontrconc        NUMBER,
  vivacontrfcm         NUMBER,
  vretecontr           NUMBER,
  indiva               CHAR(1),
  indrete              CHAR(1),
  numliquidacion       VARCHAR2(10),
  tipoidentificacion1  CHAR(1),
  identificacion1      NUMBER,
  idbancorec           CHAR(2),
  idconcesionariozon   CHAR(2),
  vsevial27            NUMBER,
  vivasevial27         NUMBER,
  vivafcmpolca         NUMBER,
  fecpagliq            DATE,
  vtimbre              NUMBER,
  vretef               NUMBER,
  vsevialneto          NUMBER,
  vfcmpolcaneto        NUMBER,
  vfcmconneto          NUMBER,
  vopeconneto          NUMBER,
  vmunneto             NUMBER,
  vpolcaneto           NUMBER
)
;
comment on column SIMIT.NOVDEVOLUCION.vconcesionario
  is 'Valor en polca 3.25';
comment on column SIMIT.NOVDEVOLUCION.vfcm
  is 'Valos en polca 1.25 + 2 = 3.25';
comment on column SIMIT.NOVDEVOLUCION.vfondocoberturafcm
  is 'Valor en polca 0.25';
comment on column SIMIT.NOVDEVOLUCION.vfondocoberturaliq
  is 'Valor en polca 0.25';
comment on column SIMIT.NOVDEVOLUCION.vequilibrioeconomico
  is 'Valor en polca  simit capital 1.77 + 2 = 3.77';
comment on column SIMIT.NOVDEVOLUCION.vsevial
  is 'Valor sevial 3';
comment on column SIMIT.NOVDEVOLUCION.vfcmpolca
  is 'Valor 1.8';
comment on column SIMIT.NOVDEVOLUCION.vmunicipio
  is 'Valor municipio descontado los valores contravencionales, sin incluir impuestos';
comment on column SIMIT.NOVDEVOLUCION.vfcmcontravencional
  is 'Valor 9.5';
comment on column SIMIT.NOVDEVOLUCION.vconcontravencional
  is 'Valor 9.5';
comment on column SIMIT.NOVDEVOLUCION.vpolca
  is 'Valor 40.5';
comment on column SIMIT.NOVDEVOLUCION.vivacontrconc
  is 'Iva del 9.5';
comment on column SIMIT.NOVDEVOLUCION.vivacontrfcm
  is 'Iva del 9.5';
comment on column SIMIT.NOVDEVOLUCION.vretecontr
  is 'Retefuente del 9.5';
comment on column SIMIT.NOVDEVOLUCION.vsevial27
  is 'Valor sevial 2.7';
comment on column SIMIT.NOVDEVOLUCION.vivasevial27
  is 'Iva del 2.7';
comment on column SIMIT.NOVDEVOLUCION.vivafcmpolca
  is 'Iva del 1.8';
comment on column SIMIT.NOVDEVOLUCION.fecpagliq
  is 'Fecha original cuando se pago la liquidacion';
comment on column SIMIT.NOVDEVOLUCION.vtimbre
  is 'Timbre del  sevial 2.7';
comment on column SIMIT.NOVDEVOLUCION.vretef
  is 'Retefuente de sevial 2.7';
comment on column SIMIT.NOVDEVOLUCION.vsevialneto
  is '3 + 2.7 - 1.5%*2.7 - 11%*2.7 + 2.7*16%';
comment on column SIMIT.NOVDEVOLUCION.vfcmpolcaneto
  is '1.8 + 1.8*16% + 1.5%*2.7 + 11%2.7';
comment on column SIMIT.NOVDEVOLUCION.vfcmconneto
  is '9.5 + 9.5*16% + 9.5*11% ';
comment on column SIMIT.NOVDEVOLUCION.vopeconneto
  is '9.5 + 9.5*16% - 9.5*11% ';
comment on column SIMIT.NOVDEVOLUCION.vmunneto
  is ' -IVA19 + Vadicional';
comment on column SIMIT.NOVDEVOLUCION.vpolcaneto
  is ' 40.5 - 16%*2.7 - 16%*1.8';
alter table SIMIT.NOVDEVOLUCION
  add constraint PK_NOVDEVOLUCION primary key (TIPONOV, NUMERONOV);
alter table SIMIT.NOVDEVOLUCION
  add constraint FK_NOVDEVBANCO foreign key (IDBANCO)
  references SIMIT.BANCO (IDBANCO);
alter table SIMIT.NOVDEVOLUCION
  add constraint FK_NOVDEVCONCES foreign key (IDCONCESIONARIO)
  references SIMIT.CONCESIONARIO (IDCONCESIONARIO);
alter table SIMIT.NOVDEVOLUCION
  add constraint FK_NOVDEVMUNICIPIO foreign key (IDMUNICIPIO)
  references SIMIT.MUNICIPIO (IDMUNICIPIO);
alter table SIMIT.NOVDEVOLUCION
  add constraint CH_NOVDEVTIPCOM
  check (indtipo in ('SIMIT', 'POLCA'));
alter table SIMIT.NOVDEVOLUCION
  add constraint CH_NOVDEVTIPCTA
  check (tipocuenta IN ('AHO','CTE'));

prompt
prompt Creating table NOVDIAS_DISPERSION
prompt =================================
prompt
create table SIMIT.NOVDIAS_DISPERSION
(
  idmunicipio        CHAR(8) not null,
  idbanco            CHAR(2) not null,
  dias_dispersion_sl NUMBER,
  frec_dispersion_sl NUMBER,
  dias_dispersion_pl NUMBER,
  frec_dispersion_pl NUMBER,
  dias_dispersion_se NUMBER,
  frec_dispersion_se NUMBER,
  dias_dispersion_pe NUMBER,
  frec_dispersion_pe NUMBER,
  tiponov            CHAR(2) not null,
  numeronov          NUMBER not null,
  fechanov           DATE not null,
  usuarionov         NUMBER not null,
  usuarioval         NUMBER,
  fechaval           DATE,
  fechaact           DATE not null,
  estadonov          VARCHAR2(16) not null,
  firma1             VARCHAR2(250) not null,
  firma2             VARCHAR2(250) not null,
  usuarioanul        NUMBER,
  fechaanul          DATE,
  dnsavvillas        VARCHAR2(16),
  dnsgranbanco       VARCHAR2(16),
  fechaaplicacion    DATE,
  nombre             VARCHAR2(250)
)
;
comment on column SIMIT.NOVDIAS_DISPERSION.idmunicipio
  is 'Divipo del municipio';
comment on column SIMIT.NOVDIAS_DISPERSION.idbanco
  is 'Id banco';
comment on column SIMIT.NOVDIAS_DISPERSION.dias_dispersion_sl
  is 'Dias dispersion simit local';
comment on column SIMIT.NOVDIAS_DISPERSION.frec_dispersion_sl
  is 'Frecuencia dispersion simit local';
comment on column SIMIT.NOVDIAS_DISPERSION.dias_dispersion_pl
  is 'Dias dispersion polca local';
comment on column SIMIT.NOVDIAS_DISPERSION.frec_dispersion_pl
  is 'Frecuencia dispersion polca local';
comment on column SIMIT.NOVDIAS_DISPERSION.dias_dispersion_se
  is 'Dias dispersion simit externo';
comment on column SIMIT.NOVDIAS_DISPERSION.frec_dispersion_se
  is 'Frecuencia dispersion simit externo';
comment on column SIMIT.NOVDIAS_DISPERSION.dias_dispersion_pe
  is 'Dias dispersion polca externo';
comment on column SIMIT.NOVDIAS_DISPERSION.frec_dispersion_pe
  is 'Frecuencia dispersion polca externo';
comment on column SIMIT.NOVDIAS_DISPERSION.tiponov
  is 'Tipo de Novedad 06-Adicionar Dias, 07:Actualizar Dias; 08: Eliminar dias';
comment on column SIMIT.NOVDIAS_DISPERSION.numeronov
  is 'Numero de novedad';
comment on column SIMIT.NOVDIAS_DISPERSION.fechanov
  is 'Fecha de novedad';
comment on column SIMIT.NOVDIAS_DISPERSION.usuarionov
  is 'Usuario que reporta novedad';
comment on column SIMIT.NOVDIAS_DISPERSION.usuarioval
  is 'Usuario que valida novedad';
comment on column SIMIT.NOVDIAS_DISPERSION.fechaval
  is 'Fecha validacion novedad';
comment on column SIMIT.NOVDIAS_DISPERSION.fechaact
  is 'FechaActivacionNovedad';
comment on column SIMIT.NOVDIAS_DISPERSION.estadonov
  is 'Estado Novedad: INGRESADA, VALIDADA, ACTIVA,ANULADA';
comment on column SIMIT.NOVDIAS_DISPERSION.firma1
  is 'Nombre de la primera firma';
comment on column SIMIT.NOVDIAS_DISPERSION.firma2
  is 'Nombre de la segunda firma';
comment on column SIMIT.NOVDIAS_DISPERSION.usuarioanul
  is 'Usuario que anula la novedad';
comment on column SIMIT.NOVDIAS_DISPERSION.fechaanul
  is 'Fecha anulacion novedad';
comment on column SIMIT.NOVDIAS_DISPERSION.dnsavvillas
  is 'Dns avvillas';
comment on column SIMIT.NOVDIAS_DISPERSION.dnsgranbanco
  is 'Dns Granbanco';
comment on column SIMIT.NOVDIAS_DISPERSION.fechaaplicacion
  is 'Fecha aplicacion de la novedad';
comment on column SIMIT.NOVDIAS_DISPERSION.nombre
  is 'Nombre municipio';
alter table SIMIT.NOVDIAS_DISPERSION
  add constraint PK_IDNOVDD primary key (IDMUNICIPIO, TIPONOV, NUMERONOV);

prompt
prompt Creating table NOVMUNICIPIO
prompt ===========================
prompt
create table SIMIT.NOVMUNICIPIO
(
  idmunicipio              CHAR(8) not null,
  nit_m                    VARCHAR2(10),
  nombre                   VARCHAR2(50),
  iddepartamento           CHAR(2),
  idconcesionario          CHAR(2),
  correo                   VARCHAR2(500),
  indretroactividad        NUMBER,
  idbanco                  CHAR(2),
  tipocuenta               VARCHAR2(3),
  cuenta                   VARCHAR2(250),
  nit_cta                  VARCHAR2(10),
  indliq_s_ext             NUMBER,
  indliq_s_local           NUMBER,
  indliq_p_ext             NUMBER,
  indliq_p_local           NUMBER,
  indacuerdopago_2002      NUMBER,
  tiponov                  CHAR(2) not null,
  numeronov                NUMBER not null,
  fechanov                 DATE not null,
  usuarionov               NUMBER not null,
  usuarioval               NUMBER,
  fechaval                 DATE,
  fechaact                 DATE not null,
  estadonov                VARCHAR2(16) not null,
  firma1                   VARCHAR2(250) not null,
  firma2                   VARCHAR2(250) not null,
  municipio_s              NUMBER not null,
  fcm_contravencional_s    NUMBER not null,
  conces_contravencional_s NUMBER not null,
  acuerdopago_s            NUMBER not null,
  municipio_p              NUMBER not null,
  fcm_contravencional_p    NUMBER not null,
  conces_contravencional_p NUMBER not null,
  acuerdopago_p            NUMBER not null,
  usuarioanul              NUMBER,
  fechaanul                DATE,
  dnsavvillas              VARCHAR2(16),
  dnsgranbanco             VARCHAR2(16),
  fechaaplicacion          DATE
)
;
comment on column SIMIT.NOVMUNICIPIO.idmunicipio
  is 'Divipo del NOVMUNICIPIO';
comment on column SIMIT.NOVMUNICIPIO.nit_m
  is 'it del NOVMUNICIPIO';
comment on column SIMIT.NOVMUNICIPIO.nombre
  is 'Nombre del NOVMUNICIPIO';
comment on column SIMIT.NOVMUNICIPIO.iddepartamento
  is 'Id del departamento';
comment on column SIMIT.NOVMUNICIPIO.idconcesionario
  is 'Id del concesionario asignado al NOVMUNICIPIO';
comment on column SIMIT.NOVMUNICIPIO.correo
  is 'Correo de contacto del NOVMUNICIPIO';
comment on column SIMIT.NOVMUNICIPIO.indretroactividad
  is 'Indicador de retroactividad de salario minimo';
comment on column SIMIT.NOVMUNICIPIO.idbanco
  is 'Id del banco para transferencias';
comment on column SIMIT.NOVMUNICIPIO.tipocuenta
  is 'Tipo de cuenta para transferecias (AHO, CTE)';
comment on column SIMIT.NOVMUNICIPIO.cuenta
  is 'Numero de cuenta para transferencias';
comment on column SIMIT.NOVMUNICIPIO.nit_cta
  is 'Nit de la cuenta para ransferencias';
comment on column SIMIT.NOVMUNICIPIO.indliq_s_ext
  is 'Indicador de liquidacion simit externo';
comment on column SIMIT.NOVMUNICIPIO.indliq_s_local
  is 'Indicador de liquidacion simit local';
comment on column SIMIT.NOVMUNICIPIO.indliq_p_ext
  is 'Indicador de liquidacion polca externo';
comment on column SIMIT.NOVMUNICIPIO.indliq_p_local
  is 'Indicador de liquidacion polca local';
comment on column SIMIT.NOVMUNICIPIO.indacuerdopago_2002
  is 'Indicador de Acuerdo Pago 2002';
comment on column SIMIT.NOVMUNICIPIO.tiponov
  is 'Tipo de Novedad 01-Adicionar Municipio, 02:Actualizar Municipio';
comment on column SIMIT.NOVMUNICIPIO.numeronov
  is 'Numero de novedad';
comment on column SIMIT.NOVMUNICIPIO.fechanov
  is 'Fecha de novedad';
comment on column SIMIT.NOVMUNICIPIO.usuarionov
  is 'Usuario que reporta novedad';
comment on column SIMIT.NOVMUNICIPIO.usuarioval
  is 'Usuario que valida novedad';
comment on column SIMIT.NOVMUNICIPIO.fechaval
  is 'Fecha validacion novedad';
comment on column SIMIT.NOVMUNICIPIO.fechaact
  is 'FechaActivacionNovedad';
comment on column SIMIT.NOVMUNICIPIO.estadonov
  is 'Estado Novedad: INGRESADA, VALIDADA, ACTIVA';
comment on column SIMIT.NOVMUNICIPIO.firma1
  is 'Nombre de la primera firma';
comment on column SIMIT.NOVMUNICIPIO.firma2
  is 'Nombre de la segunda firma';
comment on column SIMIT.NOVMUNICIPIO.municipio_s
  is 'Porcentaje simit 90%';
comment on column SIMIT.NOVMUNICIPIO.fcm_contravencional_s
  is 'Porcentaje fcm contravencional  simit 90%';
comment on column SIMIT.NOVMUNICIPIO.conces_contravencional_s
  is 'Porcentaje concesionario contravencional  simit 90%';
comment on column SIMIT.NOVMUNICIPIO.acuerdopago_s
  is 'Porcentaje acuerdo  simit 90%';
comment on column SIMIT.NOVMUNICIPIO.municipio_p
  is 'Porcentaje municipio polca 45%';
comment on column SIMIT.NOVMUNICIPIO.fcm_contravencional_p
  is 'Porcentaje fcm contravencional  polca 90%';
comment on column SIMIT.NOVMUNICIPIO.conces_contravencional_p
  is 'Porcentaje concesionario contravencional  polca 90%';
comment on column SIMIT.NOVMUNICIPIO.acuerdopago_p
  is 'Porcentaje acuerdo polca 90%';
comment on column SIMIT.NOVMUNICIPIO.usuarioanul
  is 'Usuario que anula la novedad';
comment on column SIMIT.NOVMUNICIPIO.fechaanul
  is 'Fecha anulacion novedad';
alter table SIMIT.NOVMUNICIPIO
  add constraint PK_IDNOVMUNICIPIO primary key (IDMUNICIPIO, TIPONOV, NUMERONOV);
alter table SIMIT.NOVMUNICIPIO
  add constraint FK_IDCONCESIONARIO_NOVM foreign key (IDCONCESIONARIO)
  references SIMIT.CONCESIONARIO (IDCONCESIONARIO);
alter table SIMIT.NOVMUNICIPIO
  add constraint FK_IDDEPARTAMENTO_NOVM foreign key (IDDEPARTAMENTO)
  references SIMIT.DEPARTAMENTO (IDDEPARTAMENTO);
alter table SIMIT.NOVMUNICIPIO
  add constraint CH_TIPOCUENTA_NOVM
  check (tipocuenta IN ('AHO','CTE'));

prompt
prompt Creating table NOVTERCERO
prompt =========================
prompt
create table SIMIT.NOVTERCERO
(
  idmunicipio     CHAR(8) not null,
  nit_t           CHAR(10) not null,
  nombre          VARCHAR2(50),
  idbanco         CHAR(2),
  tipocuenta      VARCHAR2(3),
  cuenta          VARCHAR2(250),
  base_s          NUMBER,
  base_p          NUMBER,
  ind_base        NUMBER,
  num_tercero     NUMBER not null,
  correotercero   VARCHAR2(50),
  tiponov         CHAR(2) not null,
  numeronov       NUMBER not null,
  fechanov        DATE not null,
  usuarionov      NUMBER not null,
  usuarioval      NUMBER,
  fechaval        DATE,
  fechaact        DATE not null,
  estadonov       VARCHAR2(16) not null,
  firma1          VARCHAR2(250) not null,
  firma2          VARCHAR2(250) not null,
  usuarioanul     NUMBER,
  fechaanul       DATE,
  fechaaplicacion DATE,
  dnsavvillas     VARCHAR2(16),
  dnsgranbanco    VARCHAR2(16)
)
;
comment on column SIMIT.NOVTERCERO.idmunicipio
  is 'municipio';
comment on column SIMIT.NOVTERCERO.nit_t
  is 'nit del tercero';
comment on column SIMIT.NOVTERCERO.nombre
  is 'nombre del tercero';
comment on column SIMIT.NOVTERCERO.idbanco
  is 'banco ';
comment on column SIMIT.NOVTERCERO.tipocuenta
  is 'tipo de cuenta (AHO; CTE)';
comment on column SIMIT.NOVTERCERO.cuenta
  is 'cuenta ';
comment on column SIMIT.NOVTERCERO.base_s
  is 'porcentaje base simit';
comment on column SIMIT.NOVTERCERO.base_p
  is 'porcentaje base polca';
comment on column SIMIT.NOVTERCERO.ind_base
  is 'indicador de base';
comment on column SIMIT.NOVTERCERO.num_tercero
  is 'numero de tercero';
comment on column SIMIT.NOVTERCERO.correotercero
  is 'correo tercero';
comment on column SIMIT.NOVTERCERO.tiponov
  is 'Tipo de Novedad 03-Adicionar Tercero, 04:Actualizar Tercero; 05:Eliminar Tercero';
comment on column SIMIT.NOVTERCERO.numeronov
  is 'Numero de novedad';
comment on column SIMIT.NOVTERCERO.fechanov
  is 'Fecha de novedad';
comment on column SIMIT.NOVTERCERO.usuarionov
  is 'Usuario que reporta novedad';
comment on column SIMIT.NOVTERCERO.usuarioval
  is 'Usuario que valida novedad';
comment on column SIMIT.NOVTERCERO.fechaval
  is 'Fecha validacion novedad';
comment on column SIMIT.NOVTERCERO.fechaact
  is 'FechaActivacionNovedad';
comment on column SIMIT.NOVTERCERO.estadonov
  is 'Estado Novedad: INGRESADA, VALIDADA, ACTIVA,ANULADA';
comment on column SIMIT.NOVTERCERO.firma1
  is 'Nombre de la primera firma';
comment on column SIMIT.NOVTERCERO.firma2
  is 'Nombre de la segunda firma';
comment on column SIMIT.NOVTERCERO.usuarioanul
  is 'Usuario que anula la novedad';
comment on column SIMIT.NOVTERCERO.fechaanul
  is 'Fecha anulacion novedad';
comment on column SIMIT.NOVTERCERO.fechaaplicacion
  is 'Fecha Aplicacion';
comment on column SIMIT.NOVTERCERO.dnsavvillas
  is 'Dns Avvillas';
comment on column SIMIT.NOVTERCERO.dnsgranbanco
  is 'Dns Granbanco';
alter table SIMIT.NOVTERCERO
  add constraint PK_NOVTERCERO primary key (TIPONOV, NUMERONOV);
alter table SIMIT.NOVTERCERO
  add constraint CH_TIPOCUENTA_NOVT
  check (tipocuenta IN ('AHO','CTE'));

prompt
prompt Creating table NOVVALIDADOR_FECHA
prompt =================================
prompt
create table SIMIT.NOVVALIDADOR_FECHA
(
  idmunicipio              CHAR(8) not null,
  idvalidador              CHAR(3) not null,
  fecha_ini                DATE,
  fecha_fin                DATE,
  indtipo                  VARCHAR2(5) not null,
  p_municipio              NUMBER,
  p_fcm_contravencional    NUMBER,
  p_conces_contravencional NUMBER,
  p_acuerdopago            NUMBER,
  nit_tercero1             VARCHAR2(10),
  base_tercero1            NUMBER,
  ind_base_tercero1        NUMBER,
  nit_tercero2             VARCHAR2(10),
  base_tercero2            NUMBER,
  ind_base_tercero2        NUMBER,
  tiponov                  CHAR(2) not null,
  numeronov                NUMBER not null,
  fechanov                 DATE not null,
  usuarionov               NUMBER not null,
  usuarioval               NUMBER,
  fechaval                 DATE,
  fechaact                 DATE not null,
  estadonov                CHAR(10) not null,
  firma1                   VARCHAR2(250) not null,
  firma2                   VARCHAR2(250) not null,
  usuarioanul              NUMBER,
  fechaanul                DATE
)
;
comment on column SIMIT.NOVVALIDADOR_FECHA.idmunicipio
  is 'Municipio';
comment on column SIMIT.NOVVALIDADOR_FECHA.idvalidador
  is 'validador';
comment on column SIMIT.NOVVALIDADOR_FECHA.fecha_ini
  is 'fecha inicial';
comment on column SIMIT.NOVVALIDADOR_FECHA.fecha_fin
  is 'fecha final';
comment on column SIMIT.NOVVALIDADOR_FECHA.indtipo
  is 'tipo comparendo (SIMIT, POLCA)';
comment on column SIMIT.NOVVALIDADOR_FECHA.p_municipio
  is 'porcentaje municipio';
comment on column SIMIT.NOVVALIDADOR_FECHA.p_fcm_contravencional
  is 'porcentaje fcm contravencional';
comment on column SIMIT.NOVVALIDADOR_FECHA.p_conces_contravencional
  is 'porcentaje concesionario contravencional';
comment on column SIMIT.NOVVALIDADOR_FECHA.p_acuerdopago
  is 'porcentaje de acuerdo de pago';
comment on column SIMIT.NOVVALIDADOR_FECHA.nit_tercero1
  is 'nit tercero 1';
comment on column SIMIT.NOVVALIDADOR_FECHA.base_tercero1
  is 'base tercero 1';
comment on column SIMIT.NOVVALIDADOR_FECHA.ind_base_tercero1
  is 'indicador base tercero 1';
comment on column SIMIT.NOVVALIDADOR_FECHA.nit_tercero2
  is 'nit tercero 2';
comment on column SIMIT.NOVVALIDADOR_FECHA.base_tercero2
  is 'base tercero 2';
comment on column SIMIT.NOVVALIDADOR_FECHA.ind_base_tercero2
  is 'base tercero 2';
comment on column SIMIT.NOVVALIDADOR_FECHA.tiponov
  is 'Tipo de Novedad 01-Adicionar Municipio, 02:Actualizar Municipio';
comment on column SIMIT.NOVVALIDADOR_FECHA.fechanov
  is 'Fecha de novedad';
comment on column SIMIT.NOVVALIDADOR_FECHA.usuarionov
  is 'Usuario que reporta novedad';
comment on column SIMIT.NOVVALIDADOR_FECHA.usuarioval
  is 'Usuario que valida novedad';
comment on column SIMIT.NOVVALIDADOR_FECHA.fechaval
  is 'Fecha validacion novedad';
comment on column SIMIT.NOVVALIDADOR_FECHA.fechaact
  is 'FechaActivacionNovedad';
comment on column SIMIT.NOVVALIDADOR_FECHA.estadonov
  is 'Estado Novedad: INGRESADA, VALIDADA, ACTIVA,ANULADA';
comment on column SIMIT.NOVVALIDADOR_FECHA.firma1
  is 'Nombre de la primera firma';
comment on column SIMIT.NOVVALIDADOR_FECHA.firma2
  is 'Nombre de la segunda firma';
comment on column SIMIT.NOVVALIDADOR_FECHA.usuarioanul
  is 'Usuario que anula la novedad';
comment on column SIMIT.NOVVALIDADOR_FECHA.fechaanul
  is 'Fecha anulacion novedad';
alter table SIMIT.NOVVALIDADOR_FECHA
  add constraint PK_NOVVALIDADOR_FECHA primary key (TIPONOV, NUMERONOV);
alter table SIMIT.NOVVALIDADOR_FECHA
  add constraint CH_INDTIPO_NOVVF
  check (INDTIPO IN ('SIMIT','POLCA'));

prompt
prompt Creating table OFICINABANCO
prompt ===========================
prompt
create table SIMIT.OFICINABANCO
(
  idbanco     CHAR(2),
  idoficina   VARCHAR2(250),
  nombre      VARCHAR2(250),
  idmunicipio CHAR(8)
)
;
comment on column SIMIT.OFICINABANCO.idbanco
  is 'codigo de banco';
comment on column SIMIT.OFICINABANCO.idoficina
  is 'codigo de oficina';
comment on column SIMIT.OFICINABANCO.nombre
  is 'nombre de oficina';
comment on column SIMIT.OFICINABANCO.idmunicipio
  is 'divipo del municipio';
alter table SIMIT.OFICINABANCO
  add constraint FK_OFICINABANCOMUN foreign key (IDMUNICIPIO)
  references SIMIT.MUNICIPIO (IDMUNICIPIO);

prompt
prompt Creating table PADRE
prompt ====================
prompt
create table SIMIT.PADRE
(
  idpadre     NUMBER,
  namepadre   VARCHAR2(100),
  enablepadre NUMBER
)
;
comment on column SIMIT.PADRE.idpadre
  is 'identificacion autoincremental';
comment on column SIMIT.PADRE.namepadre
  is 'Nombre del padre de los menus';
comment on column SIMIT.PADRE.enablepadre
  is 'Indicador de activo';

prompt
prompt Creating table PAR_CONTA
prompt ========================
prompt
create table SIMIT.PAR_CONTA
(
  idparametro VARCHAR2(50) not null,
  parametro   VARCHAR2(250),
  descripcion VARCHAR2(250)
)
;
comment on column SIMIT.PAR_CONTA.idparametro
  is 'Id parametro';
comment on column SIMIT.PAR_CONTA.parametro
  is 'valor del parametro';
comment on column SIMIT.PAR_CONTA.descripcion
  is 'descripcion del parametro';
alter table SIMIT.PAR_CONTA
  add constraint PK_PARCONTA primary key (IDPARAMETRO);

prompt
prompt Creating table P_DISPERSION_CONCESIONARIO
prompt =========================================
prompt
create table SIMIT.P_DISPERSION_CONCESIONARIO
(
  idconcesionario               CHAR(2) not null,
  concesionario_s               NUMBER,
  fondo_cob_concesionario_s     NUMBER,
  fondo_cob_simit_s             NUMBER,
  simit_s                       NUMBER,
  equilibrio_economico_s        NUMBER,
  concesionario_pm              NUMBER,
  fondo_cob_concesionario_pm    NUMBER,
  fondo_cob_simit_pm            NUMBER,
  equilibrio_economico_pm       NUMBER,
  simit_pp                      NUMBER,
  sevial_pp                     NUMBER,
  equilibrio_economico_pp       NUMBER,
  polca_cp                      NUMBER,
  fcm_cp                        NUMBER,
  sevial_cp                     NUMBER,
  equilibrio_economico_cp       NUMBER,
  concesionario_s_cc            VARCHAR2(16),
  fondo_cob_concesionario_s_cc  VARCHAR2(16),
  fondo_cob_simit_s_cc          VARCHAR2(16),
  simit_s_cc                    VARCHAR2(16),
  equilibrio_economico_s_cc     VARCHAR2(16),
  concesionario_pm_cc           VARCHAR2(16),
  fondo_cob_concesionario_pm_cc VARCHAR2(16),
  fondo_cob_simit_pm_cc         VARCHAR2(16),
  equilibrio_economico_pm_cc    VARCHAR2(16),
  simit_pp_cc                   VARCHAR2(16),
  sevial_pp_cc                  VARCHAR2(16),
  equilibrio_economico_pp_cc    VARCHAR2(16),
  polca_cp_cc                   VARCHAR2(16),
  fcm_cp_cc                     VARCHAR2(16),
  sevial_cp_cc                  VARCHAR2(16),
  equilibrio_economico_cp_cc    VARCHAR2(16),
  simit_pm                      NUMBER,
  simit_pm_cc                   VARCHAR2(16),
  ctacon_gas                    VARCHAR2(16),
  ctacon_ing                    VARCHAR2(16),
  concesionario_s_cc_ext        VARCHAR2(16),
  foncob_conces_s_cc_ext        VARCHAR2(16),
  foncob_simit_s_cc_ext         VARCHAR2(16),
  simit_s_cc_ext                VARCHAR2(16),
  equil_econ_s_cc_ext           VARCHAR2(16),
  concesionario_pm_cc_ext       VARCHAR2(16),
  foncob_conces_pm_cc_ext       VARCHAR2(16),
  foncob_simit_pm_cc_ext        VARCHAR2(16),
  equil_econ_pm_cc_ext          VARCHAR2(16),
  simit_pp_cc_ext               VARCHAR2(16),
  sevial_pp_cc_ext              VARCHAR2(16),
  equil_econ_pp_cc_ext          VARCHAR2(16),
  polca_cp_cc_ext               VARCHAR2(16),
  fcm_cp_cc_ext                 VARCHAR2(16),
  sevial_cp_cc_ext              VARCHAR2(16),
  equil_econ_cp_cc_ext          VARCHAR2(16),
  simit_pm_cc_ext               VARCHAR2(16)
)
;
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.idconcesionario
  is 'id concesionario';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.concesionario_s
  is 'porcentaje  concesionario simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fondo_cob_concesionario_s
  is 'porcentaje  fondo cobertura simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fondo_cob_simit_s
  is 'porcentaje  fondo cobertura fcm simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.simit_s
  is 'porcentaje fcm simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equilibrio_economico_s
  is 'porcentaje equilibrio economico simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.concesionario_pm
  is 'porcentaje  concesionario polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fondo_cob_concesionario_pm
  is 'porcentaje  fondo concesionario polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fondo_cob_simit_pm
  is 'porcentaje  fondo cobertura polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equilibrio_economico_pm
  is 'porcentaje  equilibrio economico polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.simit_pp
  is 'porcentaje simit polca polca 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.sevial_pp
  is 'porcentaje sevial polca polca 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equilibrio_economico_pp
  is 'porcentaje equilibrio economico polca polca 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.polca_cp
  is 'porcentaje polca convenio polca 45%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fcm_cp
  is 'porcentaje fcm convenio polca 45%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.sevial_cp
  is 'porcentaje sevial convenio polca 45%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equilibrio_economico_cp
  is 'porcentaje equilibrio ecomico convenio polca 45%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.concesionario_s_cc
  is 'centro costo  concesionario simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fondo_cob_concesionario_s_cc
  is 'centro costo  fondo cobertura simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fondo_cob_simit_s_cc
  is 'centro costo  fondo cobertura fcm simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.simit_s_cc
  is 'centro costo fcm simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equilibrio_economico_s_cc
  is 'centro costo equilibrio economico simit 10%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.concesionario_pm_cc
  is 'centro costo  concesionario polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fondo_cob_concesionario_pm_cc
  is 'centro costo  fondo cobertura concesionario polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fondo_cob_simit_pm_cc
  is 'centro costo  fondo cobertura fcm concesionario polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equilibrio_economico_pm_cc
  is 'centro costo equilibrio concesionario polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.simit_pp_cc
  is 'centro costo simit polca polca 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.sevial_pp_cc
  is 'centro costo sevial polca polca 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equilibrio_economico_pp_cc
  is 'centro costo equilibrio polca polca 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.polca_cp_cc
  is 'centro costo polca convenio polca 45%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fcm_cp_cc
  is 'centro costo fcm convenio polca 45%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.sevial_cp_cc
  is 'centro costo sevial convenio polca 45%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equilibrio_economico_cp_cc
  is 'centro costo equilibrio convenio polca 45%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.simit_pm
  is 'porcentaje FCM polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.simit_pm_cc
  is 'centro costo FCM polca municipio 5%';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.ctacon_gas
  is 'Cuenta contable gastos';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.ctacon_ing
  is 'Cuenta contable ingresos';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.concesionario_s_cc_ext
  is 'centro costo  concesionario simit 10% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.foncob_conces_s_cc_ext
  is 'centro costo  fondo cobertura simit 10% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.foncob_simit_s_cc_ext
  is 'centro costo  fondo cobertura fcm simit 10% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.simit_s_cc_ext
  is 'centro costo fcm simit 10% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equil_econ_s_cc_ext
  is 'centro costo equilibrio economico simit 10% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.concesionario_pm_cc_ext
  is 'centro costo  concesionario polca municipio 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.foncob_conces_pm_cc_ext
  is 'centro costo  fondo cobertura concesionario polca municipio 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.foncob_simit_pm_cc_ext
  is 'centro costo  fondo cobertura fcm concesionario polca municipio 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equil_econ_pm_cc_ext
  is 'centro costo equilibrio concesionario polca municipio 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.simit_pp_cc_ext
  is 'centro costo simit polca polca 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.sevial_pp_cc_ext
  is 'centro costo sevial polca polca 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equil_econ_pp_cc_ext
  is 'centro costo equilibrio polca polca 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.polca_cp_cc_ext
  is 'centro costo polca convenio polca 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.fcm_cp_cc_ext
  is 'centro costo fcm convenio polca 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.sevial_cp_cc_ext
  is 'centro costo sevial convenio polca 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.equil_econ_cp_cc_ext
  is 'centro costo equilibrio convenio polca 5% externo';
comment on column SIMIT.P_DISPERSION_CONCESIONARIO.simit_pm_cc_ext
  is 'centro costo FCM polca polca 5% externo';
alter table SIMIT.P_DISPERSION_CONCESIONARIO
  add constraint PK_P_DISPERSION_CONCESIONARIO primary key (IDCONCESIONARIO);
alter table SIMIT.P_DISPERSION_CONCESIONARIO
  add constraint FK_IDCONCESIONARIO_PDC foreign key (IDCONCESIONARIO)
  references SIMIT.CONCESIONARIO (IDCONCESIONARIO);

prompt
prompt Creating table P_DISPERSION_MUNICIPIO
prompt =====================================
prompt
create table SIMIT.P_DISPERSION_MUNICIPIO
(
  idmunicipio              CHAR(8) not null,
  municipio_s              NUMBER,
  fcm_contravencional_s    NUMBER,
  conces_contravencional_s NUMBER,
  acuerdopago_s            NUMBER,
  municipio_p              NUMBER,
  fcm_contravencional_p    NUMBER,
  conces_contravencional_p NUMBER,
  acuerdopago_p            NUMBER
)
;
comment on column SIMIT.P_DISPERSION_MUNICIPIO.idmunicipio
  is 'id municipio';
comment on column SIMIT.P_DISPERSION_MUNICIPIO.municipio_s
  is 'Porcentaje simit 90%';
comment on column SIMIT.P_DISPERSION_MUNICIPIO.fcm_contravencional_s
  is 'Porcentaje fcm contravencional  simit 90%';
comment on column SIMIT.P_DISPERSION_MUNICIPIO.conces_contravencional_s
  is 'Porcentaje concesionario contravencional  simit 90%';
comment on column SIMIT.P_DISPERSION_MUNICIPIO.acuerdopago_s
  is 'Porcentaje acuerdo  simit 90%';
comment on column SIMIT.P_DISPERSION_MUNICIPIO.municipio_p
  is 'Porcentaje municipio polca 45%';
comment on column SIMIT.P_DISPERSION_MUNICIPIO.fcm_contravencional_p
  is 'Porcentaje fcm contravencional polca 45%';
comment on column SIMIT.P_DISPERSION_MUNICIPIO.conces_contravencional_p
  is 'Porcentaje concesionario contravencional polca 45%';
comment on column SIMIT.P_DISPERSION_MUNICIPIO.acuerdopago_p
  is 'Porcentaje acuerdo polca 45%';
alter table SIMIT.P_DISPERSION_MUNICIPIO
  add constraint PK_P_DISPERSION_MUNICIPIO primary key (IDMUNICIPIO);
alter table SIMIT.P_DISPERSION_MUNICIPIO
  add constraint FK_IDMUNICIPIO_PDM foreign key (IDMUNICIPIO)
  references SIMIT.MUNICIPIO (IDMUNICIPIO);

prompt
prompt Creating table PERSON
prompt =====================
prompt
create table SIMIT.PERSON
(
  idperson     NUMBER,
  nameperson   VARCHAR2(100),
  jobtitle     VARCHAR2(100),
  enableperson NUMBER,
  lastupdate   DATE,
  mail         VARCHAR2(100),
  password     VARCHAR2(16)
)
;
comment on column SIMIT.PERSON.idperson
  is 'id del funcionario';
comment on column SIMIT.PERSON.nameperson
  is 'nombre del funcionario';
comment on column SIMIT.PERSON.jobtitle
  is 'cargo del funcinario';
comment on column SIMIT.PERSON.enableperson
  is 'funcionario activo';
comment on column SIMIT.PERSON.lastupdate
  is 'ultima actualizacion';
comment on column SIMIT.PERSON.mail
  is 'correo electronico';
comment on column SIMIT.PERSON.password
  is 'clave';

prompt
prompt Creating table RECAUDO_EXT_DISP_TOT_CON_FEC
prompt ===========================================
prompt
create table SIMIT.RECAUDO_EXT_DISP_TOT_CON_FEC
(
  fec_corte_ini        DATE,
  fec_corte_fin        DATE,
  fec_dispersion       DATE,
  id_concesionario_liq CHAR(2),
  orden                NUMBER,
  concepto             VARCHAR2(250),
  ori_idbanco          CHAR(2),
  ori_tipocuenta       VARCHAR2(3),
  ori_cuenta           VARCHAR2(16),
  ori_nit              VARCHAR2(10),
  des_idbanco          CHAR(2),
  des_tipocuenta       VARCHAR2(3),
  des_cuenta           VARCHAR2(16),
  des_nit              VARCHAR2(10),
  indtipo              VARCHAR2(5),
  usuario_proceso      VARCHAR2(20),
  fecha_proceso        DATE,
  valor                NUMBER,
  deb_cta_con          VARCHAR2(16),
  deb_cen_cos          VARCHAR2(16),
  deb_nit_ter          VARCHAR2(16),
  cre_cta_con          VARCHAR2(16),
  cre_cen_cos          VARCHAR2(16),
  cre_nit_ter          VARCHAR2(16),
  concepto_con         VARCHAR2(250),
  id_concesionario_pro CHAR(2),
  idmunicipio          CHAR(8)
)
;

prompt
prompt Creating table RECAUDO_EXTERNO
prompt ==============================
prompt
create table SIMIT.RECAUDO_EXTERNO
(
  id_recaudo_externo  NUMBER not null,
  idbanco             CHAR(2),
  cta_recaudo         VARCHAR2(16),
  fec_corte           DATE,
  fec_tran            DATE,
  oficina_origen      VARCHAR2(250),
  valor_efectivo      NUMBER,
  valor_cheque        NUMBER,
  valor_total         NUMBER,
  idmunicipio         CHAR(8),
  valor_adicional     NUMBER,
  validador_fecha     CHAR(3),
  indfecha2002        CHAR(1),
  num_liquidacion     VARCHAR2(15),
  tipo_identificacion NUMBER,
  identificacion      VARCHAR2(15),
  nombre_infractor    VARCHAR2(100),
  apellido_infractor  VARCHAR2(100),
  num_comparendo      VARCHAR2(20),
  fec_comparendo      DATE,
  num_resolucion      NUMBER,
  fec_resolucion      DATE,
  iddepartamento      CHAR(2)
)
;
comment on column SIMIT.RECAUDO_EXTERNO.id_recaudo_externo
  is 'autonumerico';
comment on column SIMIT.RECAUDO_EXTERNO.idbanco
  is 'banco recaudador';
comment on column SIMIT.RECAUDO_EXTERNO.cta_recaudo
  is 'cuenta de recaudo';
comment on column SIMIT.RECAUDO_EXTERNO.fec_corte
  is 'fecha de corte';
comment on column SIMIT.RECAUDO_EXTERNO.fec_tran
  is 'fecha de transaccion';
comment on column SIMIT.RECAUDO_EXTERNO.oficina_origen
  is 'oficina origen';
comment on column SIMIT.RECAUDO_EXTERNO.valor_efectivo
  is 'valor efectivo';
comment on column SIMIT.RECAUDO_EXTERNO.valor_cheque
  is 'valor cheque';
comment on column SIMIT.RECAUDO_EXTERNO.valor_total
  is 'valor total';
comment on column SIMIT.RECAUDO_EXTERNO.idmunicipio
  is 'divipo del recaudo';
comment on column SIMIT.RECAUDO_EXTERNO.valor_adicional
  is 'valor adicional';
comment on column SIMIT.RECAUDO_EXTERNO.validador_fecha
  is 'validador de fecha';
comment on column SIMIT.RECAUDO_EXTERNO.indfecha2002
  is 'indicador de retroactividad';
comment on column SIMIT.RECAUDO_EXTERNO.num_liquidacion
  is 'numero liquidacion';
comment on column SIMIT.RECAUDO_EXTERNO.tipo_identificacion
  is 'tipo de identificacion';
comment on column SIMIT.RECAUDO_EXTERNO.identificacion
  is 'identificacion';
comment on column SIMIT.RECAUDO_EXTERNO.nombre_infractor
  is 'nombre infractor';
comment on column SIMIT.RECAUDO_EXTERNO.apellido_infractor
  is 'apellido infractor';
comment on column SIMIT.RECAUDO_EXTERNO.num_comparendo
  is 'numero de comparendo';
comment on column SIMIT.RECAUDO_EXTERNO.fec_comparendo
  is 'fecha de comparendo';
comment on column SIMIT.RECAUDO_EXTERNO.num_resolucion
  is 'numero de resolucion';
comment on column SIMIT.RECAUDO_EXTERNO.fec_resolucion
  is 'fecha de resolucion';
comment on column SIMIT.RECAUDO_EXTERNO.iddepartamento
  is 'id departamento';
alter table SIMIT.RECAUDO_EXTERNO
  add constraint PK_RECAUDO_EXTERNO primary key (ID_RECAUDO_EXTERNO);

prompt
prompt Creating table RECAUDO_EXTERNO_CAUSACION
prompt ========================================
prompt
create table SIMIT.RECAUDO_EXTERNO_CAUSACION
(
  operacion       VARCHAR2(10),
  fec_corte_ini   DATE,
  fec_corte_fin   DATE,
  ori_idbanco     CHAR(2),
  ori_cuenta      VARCHAR2(16),
  idconcesionario CHAR(2),
  valor_debito    NUMBER,
  valor_credito   NUMBER,
  deb_cta_con     VARCHAR2(16),
  deb_cen_cos     VARCHAR2(16),
  deb_nit_ter     VARCHAR2(16),
  cre_cta_con     VARCHAR2(16),
  cre_cen_cos     VARCHAR2(16),
  cre_nit_ter     VARCHAR2(16),
  orden           NUMBER,
  concepto_con    VARCHAR2(250),
  usuario_proceso VARCHAR2(20),
  fecha_proceso   DATE,
  indtipo         CHAR(5)
)
;
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.operacion
  is 'Tipo de operacion (Causacion , Ingreso)';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.fec_corte_ini
  is 'Fecha de corte inicial';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.fec_corte_fin
  is 'Fecha de corte final';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.ori_idbanco
  is 'banco origen';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.ori_cuenta
  is 'cuenta de recaudo origen';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.idconcesionario
  is 'concesionario del recaudo';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.valor_debito
  is 'valor debito';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.valor_credito
  is 'valor credito';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.deb_cta_con
  is 'cuenta contable debito';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.deb_cen_cos
  is 'centro de costo debito';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.deb_nit_ter
  is 'nit tercero debito';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.cre_cta_con
  is 'cuenta contable credito';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.cre_cen_cos
  is 'centro de costo credito';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.cre_nit_ter
  is 'nit tercero credito';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.orden
  is 'orden en el comprobante';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.concepto_con
  is 'concepto contable';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.usuario_proceso
  is 'usuario que genero la causacion';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.fecha_proceso
  is 'fecha de proceso';
comment on column SIMIT.RECAUDO_EXTERNO_CAUSACION.indtipo
  is 'tipo de recaudo (SIMIT,POLCA)';

prompt
prompt Creating table RECAUDO_EXTERNO_CONTABILIDAD
prompt ===========================================
prompt
create table SIMIT.RECAUDO_EXTERNO_CONTABILIDAD
(
  fechadoc            CHAR(8),
  clasedoc            CHAR(2),
  sociedad            CHAR(4),
  fechacontable       CHAR(8),
  periodo             CHAR(2),
  moneda              CHAR(3),
  referencia          CHAR(16),
  textocabezera       CHAR(25),
  clavecontable       CHAR(2),
  cuenta              CHAR(17),
  importe             NUMBER,
  indicadorimpuesto   CHAR(2),
  centrocosto         CHAR(10),
  centrobeneficio     CHAR(10),
  fechavalor          CHAR(8),
  asignacion          CHAR(18),
  textocabezera2      CHAR(50),
  segmento            CHAR(10),
  nittercero          CHAR(12),
  cuentadivergente    CHAR(10),
  fechabase           CHAR(8),
  condicionpago       CHAR(4),
  receptoralternativo CHAR(10),
  fechageneracion     DATE,
  idperson            NUMBER,
  tipocontable        CHAR(3),
  idconcesionariozon  CHAR(2),
  cuentarec           VARCHAR2(16)
)
;
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.fechadoc
  is 'Fecha de cierre del recaudo ddMMyyyy';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.clasedoc
  is 'Valor fijo ZT';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.sociedad
  is 'Valor PFC1 (FCM1 si es 1.8 o 2.7 mas iva)';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.fechacontable
  is 'Fecha de cierre del recaudo ddMMyyyy';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.periodo
  is 'Mes de la fecha de cierre';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.moneda
  is 'Valor fijo COP';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.referencia
  is 'Numero de liquidacion (Para cuentas 11:Bancos, 24_29:CXP, 14:CXC)';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.textocabezera
  is 'Concepto de partida';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.clavecontable
  is 'Valor que indica si la partida es debito o credito';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.cuenta
  is 'Cuenta contable';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.importe
  is 'Valor de la partida';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.indicadorimpuesto
  is 'Valor fijo espacios';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.centrocosto
  is 'Centro de costo (aplica para cuentas 5)';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.centrobeneficio
  is 'Centro de beneficio (aplica para cuentas 4)';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.fechavalor
  is 'Fecha de cierre del recaudo ddMMyyyy';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.asignacion
  is 'Texto fijo: Recaudo ctaRecaudo';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.textocabezera2
  is 'Concepto de partida';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.segmento
  is 'Valor fijo: SIMIT';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.nittercero
  is 'Nit municipio, Concesionario';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.cuentadivergente
  is 'Cuenta Divergente';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.fechabase
  is 'Fecha de dispersion cuentas 24_29:CXP';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.condicionpago
  is 'Valor fijo 0001';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.receptoralternativo
  is 'Nit de tercero';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.fechageneracion
  is 'Fecha de generacion del registro';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.idperson
  is 'Id funcionario de generacion del registro';
comment on column SIMIT.RECAUDO_EXTERNO_CONTABILIDAD.tipocontable
  is 'Tipo de contabilidad REC:Recaudo, DIS:Dispersion';

prompt
prompt Creating table RECAUDO_EXTERNO_CONTABILIDAD_C
prompt =============================================
prompt
create table SIMIT.RECAUDO_EXTERNO_CONTABILIDAD_C
(
  numreg              NUMBER,
  fechadoc            CHAR(8),
  clasedoc            CHAR(2),
  sociedad            CHAR(4),
  fechacontable       CHAR(8),
  periodo             CHAR(2),
  moneda              CHAR(3),
  referencia          CHAR(16),
  textocabezera       CHAR(25),
  clavecontable       CHAR(2),
  cuenta              CHAR(17),
  importe             NUMBER,
  indicadorimpuesto   CHAR(2),
  centrocosto         CHAR(10),
  centrobeneficio     CHAR(10),
  fechavalor          CHAR(8),
  asignacion          CHAR(18),
  textocabezera2      CHAR(50),
  segmento            CHAR(10),
  nittercero          CHAR(12),
  cuentadivergente    CHAR(10),
  fechabase           CHAR(8),
  condicionpago       CHAR(4),
  receptoralternativo CHAR(10),
  fechageneracion     DATE,
  idperson            NUMBER,
  tipocontable        CHAR(3),
  idconcesionariozon  CHAR(2),
  cuentarec           VARCHAR2(16)
)
;

prompt
prompt Creating table RECAUDO_EXTERNO_DISP
prompt ===================================
prompt
create table SIMIT.RECAUDO_EXTERNO_DISP
(
  fec_corte_ini        DATE,
  fec_corte_fin        DATE,
  fec_dispersion       DATE,
  id_concesionario_liq CHAR(2),
  orden                NUMBER,
  concepto             VARCHAR2(250),
  ori_idbanco          CHAR(2),
  ori_tipocuenta       VARCHAR2(3),
  ori_cuenta           VARCHAR2(16),
  ori_nit              VARCHAR2(10),
  des_idbanco          CHAR(2),
  des_tipocuenta       VARCHAR2(3),
  des_cuenta           VARCHAR2(250),
  des_nit              VARCHAR2(10),
  indtipo              VARCHAR2(5),
  usuario_proceso      VARCHAR2(20),
  fecha_proceso        DATE,
  valor                NUMBER,
  deb_cta_con          VARCHAR2(16),
  deb_cen_cos          VARCHAR2(16),
  deb_nit_ter          VARCHAR2(16),
  cre_cta_con          VARCHAR2(16),
  cre_cen_cos          VARCHAR2(16),
  cre_nit_ter          VARCHAR2(16),
  concepto_con         VARCHAR2(250),
  id_concesionario_pro CHAR(2) default '00',
  idmunicipio          CHAR(8) default '00000000'
)
;
comment on column SIMIT.RECAUDO_EXTERNO_DISP.fec_corte_ini
  is 'fecha de corte inicial';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.fec_corte_fin
  is 'fecha de corte final';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.fec_dispersion
  is 'fecha de dispersion';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.id_concesionario_liq
  is 'concesionario liquidador';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.orden
  is 'orden en el comprobante';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.concepto
  is 'concepto contable';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.ori_idbanco
  is 'banco origen';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.ori_tipocuenta
  is 'tipo de cuenta origen (AHO, CTE)';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.ori_cuenta
  is 'cuenta origen';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.ori_nit
  is 'nit cuenta origen';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.des_idbanco
  is 'banco destino';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.des_tipocuenta
  is 'tipo de cuenta destino (AHO, CTE)';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.des_cuenta
  is 'cuenta destino';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.des_nit
  is 'nit cuenta destino';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.indtipo
  is 'tipo de recuado (SIMIT, POLCA)';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.usuario_proceso
  is 'usuario que proceso';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.fecha_proceso
  is 'fecha de proceso';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.valor
  is 'valor transferencia';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.deb_cta_con
  is 'cuenta contable debito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.deb_cen_cos
  is 'centro de costo debito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.deb_nit_ter
  is 'nit tercero debito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.cre_cta_con
  is 'cuenta contable credito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.cre_cen_cos
  is 'centro de costo credito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.cre_nit_ter
  is 'nit tercero credito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.concepto_con
  is 'concepto contable';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.id_concesionario_pro
  is 'concecionario propietario';
comment on column SIMIT.RECAUDO_EXTERNO_DISP.idmunicipio
  is 'municipio';

prompt
prompt Creating table RECAUDO_EXTERNO_DISP_TOT
prompt =======================================
prompt
create table SIMIT.RECAUDO_EXTERNO_DISP_TOT
(
  fec_corte_ini        DATE,
  fec_corte_fin        DATE,
  fec_dispersion       DATE,
  id_concesionario_liq CHAR(2),
  orden                NUMBER,
  concepto             VARCHAR2(250),
  ori_idbanco          CHAR(2),
  ori_tipocuenta       VARCHAR2(3),
  ori_cuenta           VARCHAR2(16),
  ori_nit              VARCHAR2(10),
  des_idbanco          CHAR(2),
  des_tipocuenta       VARCHAR2(3),
  des_cuenta           VARCHAR2(250),
  des_nit              VARCHAR2(10),
  indtipo              VARCHAR2(5),
  usuario_proceso      VARCHAR2(20),
  fecha_proceso        DATE,
  valor                NUMBER,
  deb_cta_con          VARCHAR2(16),
  deb_cen_cos          VARCHAR2(16),
  deb_nit_ter          VARCHAR2(16),
  cre_cta_con          VARCHAR2(16),
  cre_cen_cos          VARCHAR2(16),
  cre_nit_ter          VARCHAR2(16),
  concepto_con         VARCHAR2(250),
  id_concesionario_pro CHAR(2),
  idmunicipio          CHAR(8),
  enviadobanco         NUMBER,
  referenciatrf        NUMBER,
  estadotrf            CHAR(3),
  fechaenvio           DATE,
  fechaconfirmada      DATE,
  fechadevolucion      DATE,
  motivodevolucion     VARCHAR2(100),
  codigodevolucion     VARCHAR2(7),
  fechaenvioach        DATE,
  fechaactreeenvio     DATE,
  fechareenvio         DATE,
  indreenvio           CHAR(1),
  vlrdisp              NUMBER,
  des_idbancorev       CHAR(2),
  des_tipocuentarev    VARCHAR2(3),
  des_cuentarev        VARCHAR2(250),
  des_nitrev           VARCHAR2(10),
  referenciatrfori     NUMBER
)
;
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.fec_corte_ini
  is 'fecha de corte inicial';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.fec_corte_fin
  is 'fecha de corte final';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.fec_dispersion
  is 'fecha de dispersion';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.id_concesionario_liq
  is 'concesionario liquidador';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.orden
  is 'orden en el comprobante';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.concepto
  is 'concepto contable';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.ori_idbanco
  is 'banco origen';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.ori_tipocuenta
  is 'tipo de cuenta origen (AHO, CTE)';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.ori_cuenta
  is 'cuenta origen';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.ori_nit
  is 'nit cuenta origen';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.des_idbanco
  is 'banco destino';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.des_tipocuenta
  is 'tipo de cuenta destino (AHO, CTE)';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.des_cuenta
  is 'cuenta destino';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.des_nit
  is 'nit cuenta destino';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.indtipo
  is 'tipo de recuado (SIMIT, POLCA)';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.usuario_proceso
  is 'usuario que proceso';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.fecha_proceso
  is 'fecha de proceso';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.valor
  is 'valor transferencia';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.deb_cta_con
  is 'cuenta contable debito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.deb_cen_cos
  is 'centro de costo debito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.deb_nit_ter
  is 'nit tercero debito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.cre_cta_con
  is 'cuenta contable credito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.cre_cen_cos
  is 'centro de costo credito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.cre_nit_ter
  is 'nit tercero credito';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.concepto_con
  is 'concepto contable';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.id_concesionario_pro
  is 'concecionario propietario';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.idmunicipio
  is 'municipio';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.estadotrf
  is 'ENV: Enviada a banco;  ACH:Enviada a ACH  EXI: Exitosa; REC:Rechazada';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.fechaenvio
  is 'Fecha enviada a banco';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.fechaconfirmada
  is 'Fecha Confirmada';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.fechadevolucion
  is 'Fecha Devolucion';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.motivodevolucion
  is 'Motivo Devolucion';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.codigodevolucion
  is 'Codigo Devolucion';
comment on column SIMIT.RECAUDO_EXTERNO_DISP_TOT.fechaenvioach
  is 'fecha de envio a ach';

prompt
prompt Creating table RECAUDO_EXTERNO_LIQUIDACION
prompt ==========================================
prompt
create table SIMIT.RECAUDO_EXTERNO_LIQUIDACION
(
  id_recaudo_externo_liquidacion NUMBER not null,
  id_recaudo_externo             NUMBER,
  id_concesionario_pro           CHAR(2),
  id_concesionario_liq           CHAR(2),
  indtipo                        CHAR(5),
  usuario_proceso                VARCHAR2(20),
  fecha_proceso                  DATE,
  idmunicipio                    CHAR(8),
  fec_corte                      DATE,
  ind_proceso                    NUMBER,
  num_liquidacion                VARCHAR2(15),
  dias_dispersion                NUMBER,
  frec_dispersion                NUMBER,
  fec_dispersion                 DATE,
  idbanco                        CHAR(2),
  smdlv                          NUMBER,
  indretroactividad              NUMBER,
  valor_total                    NUMBER,
  valor_adicional                NUMBER,
  validador_fecha                CHAR(3),
  indfecha2002                   CHAR(1),
  s_valor_0                      NUMBER default 0,
  s_valor_1                      NUMBER default 0,
  s_valor_2                      NUMBER default 0,
  s_valor_3                      NUMBER default 0,
  s_valor_4                      NUMBER default 0,
  s_valor_5                      NUMBER default 0,
  s_valor_6                      NUMBER default 0,
  s_valor_7                      NUMBER default 0,
  s_valor_8                      NUMBER default 0,
  s_valor_9                      NUMBER default 0,
  s_valor_10                     NUMBER default 0,
  s_valor_11                     NUMBER default 0,
  s_valor_12                     NUMBER default 0,
  s_valor_13                     NUMBER default 0,
  s_valor_14                     NUMBER default 0,
  s_valor_15                     NUMBER default 0,
  s_valor_16                     NUMBER default 0,
  s_valor_17                     NUMBER default 0,
  s_valor_18                     NUMBER default 0,
  s_valor_19                     NUMBER default 0,
  s_valor_20                     NUMBER default 0,
  s_valor_21                     NUMBER default 0,
  s_valor_22                     NUMBER default 0,
  s_valor_23                     NUMBER default 0,
  s_valor_24                     NUMBER default 0,
  s_valor_25                     NUMBER default 0,
  s_valor_26                     NUMBER default 0,
  s_valor_27                     NUMBER default 0,
  s_valor_28                     NUMBER default 0,
  cta_recaudo                    VARCHAR2(16),
  ind_base_ter1                  NUMBER,
  ind_base_ter2                  NUMBER,
  ind_base_ter3                  NUMBER,
  ind_base_ter4                  NUMBER,
  por_base_ter1                  NUMBER,
  por_base_ter2                  NUMBER,
  por_base_ter3                  NUMBER,
  por_base_ter4                  NUMBER,
  s_valor_29                     NUMBER,
  nom_ter1                       VARCHAR2(50),
  nom_ter2                       VARCHAR2(50),
  nom_ter3                       VARCHAR2(50),
  nom_ter4                       VARCHAR2(50),
  p_valor_1                      NUMBER default 0,
  p_valor_2                      NUMBER default 0,
  p_valor_3                      NUMBER default 0,
  p_valor_4                      NUMBER default 0,
  p_valor_5                      NUMBER default 0,
  p_valor_6                      NUMBER default 0,
  p_valor_7                      NUMBER default 0,
  p_valor_8                      NUMBER default 0,
  p_valor_9                      NUMBER default 0,
  p_valor_10                     NUMBER default 0,
  p_valor_11                     NUMBER default 0,
  p_valor_12                     NUMBER default 0,
  p_valor_13                     NUMBER default 0,
  p_valor_14                     NUMBER default 0,
  p_valor_15                     NUMBER default 0,
  p_valor_16                     NUMBER default 0,
  p_valor_17                     NUMBER default 0,
  p_valor_18                     NUMBER default 0,
  p_valor_19                     NUMBER default 0,
  p_valor_20                     NUMBER default 0,
  p_valor_21                     NUMBER default 0,
  p_valor_22                     NUMBER default 0,
  p_valor_23                     NUMBER default 0,
  p_valor_24                     NUMBER default 0,
  p_valor_25                     NUMBER default 0,
  p_valor_26                     NUMBER default 0,
  p_valor_27                     NUMBER default 0,
  p_valor_28                     NUMBER default 0,
  p_valor_29                     NUMBER default 0,
  p_valor_30                     NUMBER default 0,
  p_valor_31                     NUMBER default 0,
  p_valor_32                     NUMBER default 0,
  p_valor_33                     NUMBER default 0,
  p_valor_34                     NUMBER default 0,
  p_valor_35                     NUMBER default 0,
  p_valor_36                     NUMBER default 0,
  p_valor_37                     NUMBER default 0,
  p_valor_38                     NUMBER default 0,
  p_valor_39                     NUMBER default 0,
  p_valor_40                     NUMBER default 0,
  p_valor_41                     NUMBER default 0,
  p_valor_42                     NUMBER default 0,
  p_valor_43                     NUMBER default 0,
  s_valor_30                     NUMBER default 0,
  p_valor_44                     NUMBER default 0,
  fec_dispersion_con             DATE,
  nit_municipio                  VARCHAR2(10),
  nit_tercero1                   VARCHAR2(10),
  nit_tercero2                   VARCHAR2(10),
  nit_tercero3                   VARCHAR2(10),
  nit_tercero4                   VARCHAR2(10),
  nit_concesionario              VARCHAR2(10),
  nit_fondo                      VARCHAR2(10),
  nit_concesionariozon           VARCHAR2(10),
  idbancomun                     CHAR(2),
  tipocuentamun                  CHAR(3),
  ctamun                         VARCHAR2(250)
)
;
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.id_recaudo_externo_liquidacion
  is 'identificador unico';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.id_recaudo_externo
  is 'id recuado externo';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.id_concesionario_pro
  is 'concesionario propietario';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.id_concesionario_liq
  is 'concesionario liquidador';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.indtipo
  is 'tipo de comparendo (SIMIT, POLCA)';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.usuario_proceso
  is 'usuario proceso';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.fecha_proceso
  is 'fecha de proceso';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.idmunicipio
  is 'municipio';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.fec_corte
  is 'fecha de corte';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.ind_proceso
  is 'indicador proceso';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.num_liquidacion
  is 'numero de liquidacion';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.dias_dispersion
  is 'dias de dispersion';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.frec_dispersion
  is 'frecuencia de dispersion';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.fec_dispersion
  is 'fecha de dispersion';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.idbanco
  is 'banco recaudo';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.smdlv
  is 'salario minimo diario';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.indretroactividad
  is 'indicador de retroactividad';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.valor_total
  is 'valor total del recaudo';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.valor_adicional
  is 'valor adicional del recaudo';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.validador_fecha
  is 'validador fecha';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.indfecha2002
  is 'indicador de fecha < nov-2002';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_0
  is 'comison recaudo';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_1
  is 'valor base';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_2
  is 'valor simit base';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_3
  is 'valor simit';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_4
  is 'valor concesionario liquidador';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_5
  is 'valor fondo cobertura concesonario';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_6
  is 'valor fondo cobertura simit';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_7
  is 'equilibrio economico';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_8
  is 'valor base organsmo transito';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_9
  is 'valor base contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_10
  is 'valor acuerdo de pago';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_11
  is 'valor operador contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_12
  is 'valor fcm contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_13
  is 'valor base municipio';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_14
  is 'iva contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_15
  is 'impuesto timbre contravencioanl';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_16
  is 'retencion en la fuente contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_17
  is 'reteiva contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_18
  is 'valor base tercero 1';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_19
  is 'valor tercero 1';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_20
  is 'valor base tercero 2';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_21
  is 'valor tercero 2';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_22
  is 'valor base tercero 3';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_23
  is 'valor tercero 3';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_24
  is 'valor base tercero 4';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_25
  is 'valor tercero 4';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_26
  is 'valor neto municipio';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_27
  is 'valor neto concesionario propietario';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_28
  is 'valor neto concesioanrio liquidador';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.cta_recaudo
  is 'cuenta de recaudo';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.ind_base_ter1
  is 'indicador base tercero 1';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.ind_base_ter2
  is 'indicador base tercero 2';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.ind_base_ter3
  is 'indicador base tercero 3';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.ind_base_ter4
  is 'indicador base tercero 4';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.por_base_ter1
  is 'porcentaje base tercero 1';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.por_base_ter2
  is 'porcentaje base tercero 2';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.por_base_ter3
  is 'porcentaje base tercero 3';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.por_base_ter4
  is 'porcentaje base tercero 4';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_29
  is 'valor neto fcm';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.nom_ter1
  is 'nombre tercero 1';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.nom_ter2
  is 'nombre tercero 2';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.nom_ter3
  is 'nombre tercero 3';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.nom_ter4
  is 'nombre tercero 4';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_1
  is 'valor base';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_2
  is 'valor simit base';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_3
  is 'valor simit pm';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_4
  is 'valor concesionario liquidador';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_5
  is 'valor fondo cobertura concesionario';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_6
  is 'valor fondo cobertura simit';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_7
  is 'equilibrio economico pm';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_8
  is 'valor simit pp';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_9
  is 'valor sevial pp';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_10
  is 'equilibrio economico pp';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_11
  is 'valor base polca';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_12
  is 'valor polca';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_13
  is 'valor fcm cp';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_14
  is 'valor sevial cp';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_15
  is 'equilibrio economico cp';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_16
  is 'iva fcm';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_17
  is 'timbre fcm';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_18
  is 'iva sevial';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_19
  is 'retencion sevial';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_20
  is 'timbre sevial';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_21
  is 'valor base ot';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_22
  is 'valor base contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_23
  is 'valor acuerdo pago';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_24
  is 'valor operador contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_25
  is 'valor fcm contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_26
  is 'valor base municipio';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_27
  is 'iva contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_28
  is 'impuesto timbre contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_29
  is 'retencion contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_30
  is 'reteiva contravencional';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_31
  is 'valor base tercero 1';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_32
  is 'valor tercero 1';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_33
  is 'valor base tercero 2';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_34
  is 'valor tercero 2';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_35
  is 'valor base tercero 3';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_36
  is 'valor tercero 3';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_37
  is 'valor base tercero 4';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_38
  is 'valor tercero 4';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_39
  is 'valor neto municipio';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_40
  is 'valor neto concesionario propietario';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_41
  is 'valor neto concesionario liquidador';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_42
  is 'valor neto fcm';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_43
  is 'valor neto sevial';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.s_valor_30
  is 'valor Timbre Contravenvencional Concesionario';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.p_valor_44
  is 'Valor timbre contravencional concesionario';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.idbancomun
  is 'Banco de consignacion del municipio';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.tipocuentamun
  is 'Tipo cuenta consignacion municipio';
comment on column SIMIT.RECAUDO_EXTERNO_LIQUIDACION.ctamun
  is 'Cuenta de consignacion municipio';
alter table SIMIT.RECAUDO_EXTERNO_LIQUIDACION
  add constraint PK_RECAUDO_EXTERNO_LIQUIDACION primary key (ID_RECAUDO_EXTERNO_LIQUIDACION);

prompt
prompt Creating table RECAUDO_EXTERNO_TEMP
prompt ===================================
prompt
create table SIMIT.RECAUDO_EXTERNO_TEMP
(
  id_recaudo_externo  NUMBER not null,
  idbanco             CHAR(2),
  cta_recaudo         VARCHAR2(16),
  fec_corte           DATE,
  fec_tran            DATE,
  oficina_origen      VARCHAR2(250),
  valor_efectivo      NUMBER,
  valor_cheque        NUMBER,
  valor_total         NUMBER,
  idmunicipio         CHAR(8),
  valor_adicional     NUMBER,
  validador_fecha     CHAR(3),
  indfecha2002        CHAR(1),
  num_liquidacion     VARCHAR2(15),
  tipo_identificacion NUMBER,
  identificacion      VARCHAR2(15),
  nombre_infractor    VARCHAR2(100),
  apellido_infractor  VARCHAR2(100),
  num_comparendo      VARCHAR2(15),
  fec_comparendo      DATE,
  num_resolucion      NUMBER,
  fec_resolucion      DATE,
  iddepartamento      CHAR(2)
)
;
alter table SIMIT.RECAUDO_EXTERNO_TEMP
  add constraint PK_RECAUDO_EXTERNO_TEMP primary key (ID_RECAUDO_EXTERNO);

prompt
prompt Creating table RECAUDO_LOCAL
prompt ============================
prompt
create table SIMIT.RECAUDO_LOCAL
(
  idbanco        CHAR(2),
  cta_recaudo    VARCHAR2(16),
  indtipo        VARCHAR2(5),
  fec_corte      DATE,
  fec_tran       DATE,
  oficina_origen VARCHAR2(250),
  valor_efectivo NUMBER,
  valor_cheque   NUMBER,
  valor_total    NUMBER,
  nit_m          VARCHAR2(10),
  idmunicipio    CHAR(8),
  p_consignado   NUMBER
)
;
comment on column SIMIT.RECAUDO_LOCAL.idbanco
  is 'Banco recaudo';
comment on column SIMIT.RECAUDO_LOCAL.cta_recaudo
  is 'cuenta de recaudo';
comment on column SIMIT.RECAUDO_LOCAL.indtipo
  is 'tipo de recaudo (SIMIT, POLCA)';
comment on column SIMIT.RECAUDO_LOCAL.fec_corte
  is 'fecha de corte';
comment on column SIMIT.RECAUDO_LOCAL.fec_tran
  is 'fecha de transaccion';
comment on column SIMIT.RECAUDO_LOCAL.oficina_origen
  is 'oficina origen';
comment on column SIMIT.RECAUDO_LOCAL.valor_efectivo
  is 'valor efectivo';
comment on column SIMIT.RECAUDO_LOCAL.valor_cheque
  is 'valor cheque';
comment on column SIMIT.RECAUDO_LOCAL.valor_total
  is 'valor total';
comment on column SIMIT.RECAUDO_LOCAL.nit_m
  is 'nit municipio';
comment on column SIMIT.RECAUDO_LOCAL.idmunicipio
  is 'municipio recaudo';
comment on column SIMIT.RECAUDO_LOCAL.p_consignado
  is 'porcentaje consignado';

prompt
prompt Creating table RECAUDO_LOCAL_AJUSTES
prompt ====================================
prompt
create table SIMIT.RECAUDO_LOCAL_AJUSTES
(
  idbanco                  CHAR(2),
  cta_recaudo              VARCHAR2(16),
  indtipo                  VARCHAR2(5),
  fec_corte                DATE,
  fec_tran                 DATE,
  valor_total              NUMBER,
  idmunicipio              CHAR(8),
  periodo                  CHAR(6),
  id_recaudo_local_ajustes NUMBER not null,
  p_consignado             NUMBER,
  motivo                   VARCHAR2(500)
)
;
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.idbanco
  is 'Banco';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.cta_recaudo
  is 'cuenta de recaudo';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.indtipo
  is 'tipo de recaudo (SIMIT, POLCA)';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.fec_corte
  is 'fecha de corte';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.fec_tran
  is 'fecha de transaccion';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.valor_total
  is 'valor total del ajuste';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.idmunicipio
  is 'municipio del recaudo';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.periodo
  is 'periodo de consignacion';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.id_recaudo_local_ajustes
  is 'autonumerico';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.p_consignado
  is 'porcentaje consignado';
comment on column SIMIT.RECAUDO_LOCAL_AJUSTES.motivo
  is 'Motivo del ajuste';
alter table SIMIT.RECAUDO_LOCAL_AJUSTES
  add constraint PK_IDRECUADO_LOCAL_AJUSTES primary key (ID_RECAUDO_LOCAL_AJUSTES);

prompt
prompt Creating table RECAUDO_LOCAL_CAUSACION
prompt ======================================
prompt
create table SIMIT.RECAUDO_LOCAL_CAUSACION
(
  operacion       VARCHAR2(10),
  fec_corte_ini   DATE,
  fec_corte_fin   DATE,
  ori_idbanco     CHAR(2),
  ori_cuenta      VARCHAR2(16),
  idconcesionario CHAR(2),
  valor_debito    NUMBER,
  valor_credito   NUMBER,
  deb_cta_con     VARCHAR2(16),
  deb_cen_cos     VARCHAR2(16),
  deb_nit_ter     VARCHAR2(16),
  cre_cta_con     VARCHAR2(16),
  cre_cen_cos     VARCHAR2(16),
  cre_nit_ter     VARCHAR2(16),
  orden           NUMBER,
  concepto_con    VARCHAR2(250),
  usuario_proceso VARCHAR2(20),
  fecha_proceso   DATE,
  indtipo         CHAR(5)
)
;
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.operacion
  is 'Operacion realizada (Ingreso, Gasto)';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.fec_corte_ini
  is 'Fecha de corte incial';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.fec_corte_fin
  is 'Fecha de corte final';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.ori_idbanco
  is 'banco origen';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.ori_cuenta
  is 'cuenta origen';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.idconcesionario
  is 'concesioanrio';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.valor_debito
  is 'valor debito';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.valor_credito
  is 'valor credito';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.deb_cta_con
  is 'cuenta contable debito';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.deb_cen_cos
  is 'centro de costo debito';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.deb_nit_ter
  is 'nit tercero debito';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.cre_cta_con
  is 'cuenta contable credito';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.cre_cen_cos
  is 'centro de costo credito';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.cre_nit_ter
  is 'nit tercero credito';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.orden
  is 'orden en el comprobante';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.concepto_con
  is 'concepto contable';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.usuario_proceso
  is 'usuario proceso';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.fecha_proceso
  is 'fecha proceso';
comment on column SIMIT.RECAUDO_LOCAL_CAUSACION.indtipo
  is 'tipo comaprendo (SIMIT, POLCA)';

prompt
prompt Creating table RECAUDO_LOCAL_DISP
prompt =================================
prompt
create table SIMIT.RECAUDO_LOCAL_DISP
(
  fec_corte            DATE,
  fec_dispersion       DATE,
  idconcesionario      CHAR(2),
  orden                NUMBER,
  concepto             VARCHAR2(250),
  ori_idbanco          CHAR(2),
  ori_tipocuenta       VARCHAR2(3),
  ori_cuenta           VARCHAR2(16),
  ori_nit              VARCHAR2(10),
  des_idbanco          CHAR(2),
  des_tipocuenta       VARCHAR2(3),
  des_cuenta           VARCHAR2(250),
  des_nit              VARCHAR2(10),
  indtipo              VARCHAR2(5),
  usuario_proceso      VARCHAR2(20),
  fecha_proceso        DATE,
  valor                NUMBER,
  deb_cta_con          VARCHAR2(16),
  deb_cen_cos          VARCHAR2(16),
  deb_nit_ter          VARCHAR2(16),
  cre_cta_con          VARCHAR2(16),
  cre_cen_cos          VARCHAR2(16),
  cre_nit_ter          VARCHAR2(16),
  concepto_con         VARCHAR2(250),
  fec_corte_ini        DATE,
  fec_corte_fin        DATE,
  id_concesionario_liq CHAR(2)
)
;
comment on column SIMIT.RECAUDO_LOCAL_DISP.fec_corte
  is 'Fecha corte';
comment on column SIMIT.RECAUDO_LOCAL_DISP.fec_dispersion
  is 'fecha dispersion';
comment on column SIMIT.RECAUDO_LOCAL_DISP.idconcesionario
  is 'concesionario liquidador';
comment on column SIMIT.RECAUDO_LOCAL_DISP.orden
  is 'orden del comprobante';
comment on column SIMIT.RECAUDO_LOCAL_DISP.concepto
  is 'concepto contable';
comment on column SIMIT.RECAUDO_LOCAL_DISP.ori_idbanco
  is 'banco origen';
comment on column SIMIT.RECAUDO_LOCAL_DISP.ori_tipocuenta
  is 'tipo de cuenta (Aho, Cte)';
comment on column SIMIT.RECAUDO_LOCAL_DISP.ori_cuenta
  is 'cuenta origen';
comment on column SIMIT.RECAUDO_LOCAL_DISP.ori_nit
  is 'nit cuenta origen';
comment on column SIMIT.RECAUDO_LOCAL_DISP.des_idbanco
  is 'banco destino';
comment on column SIMIT.RECAUDO_LOCAL_DISP.des_tipocuenta
  is 'tipo de cuenta destino';
comment on column SIMIT.RECAUDO_LOCAL_DISP.des_cuenta
  is 'cuenta destino';
comment on column SIMIT.RECAUDO_LOCAL_DISP.des_nit
  is 'nit destino';
comment on column SIMIT.RECAUDO_LOCAL_DISP.indtipo
  is 'tipo de comaprendo (SIMIT, POLCA)';
comment on column SIMIT.RECAUDO_LOCAL_DISP.usuario_proceso
  is 'usuario proceso';
comment on column SIMIT.RECAUDO_LOCAL_DISP.fecha_proceso
  is 'fecha proceso';
comment on column SIMIT.RECAUDO_LOCAL_DISP.valor
  is 'valor';
comment on column SIMIT.RECAUDO_LOCAL_DISP.deb_cta_con
  is 'cuenta contable debito';
comment on column SIMIT.RECAUDO_LOCAL_DISP.deb_cen_cos
  is 'centro de costo debito';
comment on column SIMIT.RECAUDO_LOCAL_DISP.deb_nit_ter
  is 'nit tercero debito';
comment on column SIMIT.RECAUDO_LOCAL_DISP.cre_cta_con
  is 'cuenta contable credito';
comment on column SIMIT.RECAUDO_LOCAL_DISP.cre_cen_cos
  is 'centro de costo credito';
comment on column SIMIT.RECAUDO_LOCAL_DISP.cre_nit_ter
  is 'nit tercero credito';
comment on column SIMIT.RECAUDO_LOCAL_DISP.concepto_con
  is 'concepto contable';
comment on column SIMIT.RECAUDO_LOCAL_DISP.fec_corte_ini
  is 'fecha corete inciial';
comment on column SIMIT.RECAUDO_LOCAL_DISP.fec_corte_fin
  is 'fecha corte final';
comment on column SIMIT.RECAUDO_LOCAL_DISP.id_concesionario_liq
  is 'concesionario';

prompt
prompt Creating table RECAUDO_LOCAL_DISP_TOT
prompt =====================================
prompt
create table SIMIT.RECAUDO_LOCAL_DISP_TOT
(
  fec_corte_ini        DATE,
  fec_corte_fin        DATE,
  fec_dispersion       DATE,
  concepto             VARCHAR2(250),
  ori_idbanco          CHAR(2),
  ori_tipocuenta       VARCHAR2(3),
  ori_cuenta           VARCHAR2(16),
  ori_nit              VARCHAR2(10),
  des_idbanco          CHAR(2),
  des_tipocuenta       VARCHAR2(3),
  des_cuenta           VARCHAR2(250),
  des_nit              VARCHAR2(10),
  valor                NUMBER,
  enviadobanco         NUMBER,
  referenciatrf        NUMBER,
  estadotrf            CHAR(3),
  fechaenvio           DATE,
  fechaconfirmada      DATE,
  fechadevolucion      DATE,
  motivodevolucion     VARCHAR2(100),
  codigodevolucion     VARCHAR2(7),
  fechaenvioach        DATE,
  orden                NUMBER,
  id_concesionario_liq CHAR(2),
  indtipo              CHAR(5)
)
;

prompt
prompt Creating table RECAUDO_LOCAL_LIQ_HIS
prompt ====================================
prompt
create table SIMIT.RECAUDO_LOCAL_LIQ_HIS
(
  consecutivo_recaudo  NUMBER(8) not null,
  id_estado_recaudo    VARCHAR2(2),
  id_tipo_recaudo      VARCHAR2(2),
  id_secretaria_origen VARCHAR2(10),
  fecha_contable       DATE,
  total_recaudo        NUMBER(12),
  numero_referencia    VARCHAR2(15),
  identificacion       VARCHAR2(15),
  fecha_desde_mvto     DATE,
  fecha_hasta_mvto     DATE,
  fecha_ins_upt        DATE default SYSDATE,
  p_55                 NUMBER,
  p_fcm                NUMBER,
  p_mun                NUMBER
)
;
alter table SIMIT.RECAUDO_LOCAL_LIQ_HIS
  add constraint PK_REC_LOC_LIQ_HIS primary key (CONSECUTIVO_RECAUDO);

prompt
prompt Creating table RECAUDO_LOCAL_LIQUIDACION
prompt ========================================
prompt
create table SIMIT.RECAUDO_LOCAL_LIQUIDACION
(
  idrecaudo_local_liquidacion NUMBER,
  idbanco                     CHAR(2),
  cta_recaudo                 VARCHAR2(16),
  indtipo                     VARCHAR2(5),
  fec_corte                   DATE,
  fec_tran                    DATE,
  oficina_origen              VARCHAR2(250),
  valor_efectivo              NUMBER,
  valor_cheque                NUMBER,
  valor_total                 NUMBER,
  nit_m                       VARCHAR2(10),
  idmunicipio                 CHAR(8),
  iddepartamento              CHAR(2),
  usuario_proceso             VARCHAR2(20),
  fecha_proceso               DATE,
  ind_proceso                 NUMBER,
  indorigen                   CHAR(3),
  idconcesionario             CHAR(2),
  dias_dispersion             NUMBER,
  frec_dispersion             NUMBER,
  fec_dispersion              DATE,
  s_valor_0                   NUMBER default 0,
  s_valor_1                   NUMBER default 0,
  s_valor_2                   NUMBER default 0,
  s_valor_3                   NUMBER default 0,
  s_valor_4                   NUMBER default 0,
  s_valor_5                   NUMBER default 0,
  s_valor_6                   NUMBER default 0,
  p_valor_7                   NUMBER default 0,
  p_valor_8                   NUMBER default 0,
  p_valor_9                   NUMBER default 0,
  p_valor_10                  NUMBER default 0,
  p_valor_11                  NUMBER default 0,
  p_valor_12                  NUMBER default 0,
  p_valor_13                  NUMBER default 0,
  p_valor_14                  NUMBER default 0,
  p_valor_15                  NUMBER default 0,
  p_valor_16                  NUMBER default 0,
  p_valor_17                  NUMBER default 0,
  p_valor_18                  NUMBER default 0,
  p_valor_19                  NUMBER default 0,
  p_valor_20                  NUMBER default 0,
  p_valor_21                  NUMBER default 0,
  p_valor_22                  NUMBER default 0,
  p_valor_23                  NUMBER default 0,
  p_valor_24                  NUMBER default 0,
  p_valor_25                  NUMBER default 0,
  p_valor_26                  NUMBER default 0,
  p_valor_27                  NUMBER default 0,
  p_valor_28                  NUMBER default 0,
  p_consignado                NUMBER,
  idrecaudolocal_liquidacion  NUMBER,
  nit_concesionario           CHAR(10),
  nit_fondo                   CHAR(10)
)
;
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.idrecaudo_local_liquidacion
  is 'autonumerico';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.idbanco
  is 'banco';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.cta_recaudo
  is 'cuenta recaudo';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.indtipo
  is 'tipo de recuado (SIMIT, POLCA)';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.fec_corte
  is 'fecha de corte';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.fec_tran
  is 'fecha de transaccion';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.oficina_origen
  is 'oficina origen';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.valor_efectivo
  is 'valor efectivo';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.valor_cheque
  is 'valor cheque';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.valor_total
  is 'valor total';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.nit_m
  is 'nit municipio';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.idmunicipio
  is 'municipio';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.iddepartamento
  is 'departamento';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.usuario_proceso
  is 'usuario proceso';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.fecha_proceso
  is 'fecha de proceso';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.ind_proceso
  is 'indicador de proceso';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.indorigen
  is 'indicador origen (REC, AJU)';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.idconcesionario
  is 'concesionario';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.dias_dispersion
  is 'dias de dispersion';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.frec_dispersion
  is 'frecuencia de dispersion';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.fec_dispersion
  is 'fecha de dispersion';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.s_valor_0
  is 'comsion recaudo';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.s_valor_1
  is 'valor simit';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.s_valor_2
  is 'valor concesionario';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.s_valor_3
  is 'valro fondo cobertura concesionario';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.s_valor_4
  is 'valor fondo cobertura simit';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.s_valor_5
  is 'equilibrio economico';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.s_valor_6
  is 'valor neto concesionario';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_7
  is 'valor simit pm';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_8
  is 'valor concesionario';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_9
  is 'valor fondo cobertura concesioanrio';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_10
  is 'valor fondo cobertura simit';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_11
  is 'equilibrio economico pm';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_12
  is 'valor simit pp';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_13
  is 'valor sevial ';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_14
  is 'equilibrio economico pp';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_15
  is 'polca';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_16
  is 'fcm';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_17
  is 'sevial';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_18
  is 'equilibrio economico cp';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_19
  is 'iva fcm';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_20
  is 'iva sevial';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_21
  is 'retencion sevial';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_22
  is 'timbre sevial';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_23
  is 'timbre fcm';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_24
  is 'valor neto sevial';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_25
  is 'valor neto concesionario';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_26
  is 'valor neto fcm';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_27
  is 'valor neto simit';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_valor_28
  is 'valor neto equilibrio economico';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.p_consignado
  is 'porcentaje consignado';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.idrecaudolocal_liquidacion
  is 'REFEREFENCIA PARA CONTABILIZAR';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.nit_concesionario
  is 'NIT CONCESIONARIO';
comment on column SIMIT.RECAUDO_LOCAL_LIQUIDACION.nit_fondo
  is 'Nit fondo';

prompt
prompt Creating table RECAUDO_LOCAL_TEMP
prompt =================================
prompt
create table SIMIT.RECAUDO_LOCAL_TEMP
(
  idbanco        CHAR(2),
  cta_recaudo    VARCHAR2(16),
  indtipo        VARCHAR2(5),
  fec_corte      DATE,
  fec_tran       DATE,
  oficina_origen VARCHAR2(250),
  valor_efectivo NUMBER,
  valor_cheque   NUMBER,
  valor_total    NUMBER,
  nit_m          VARCHAR2(10),
  idmunicipio    CHAR(8),
  p_consignado   NUMBER
)
;
comment on column SIMIT.RECAUDO_LOCAL_TEMP.idbanco
  is 'banco';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.cta_recaudo
  is 'cuenta de recaudo';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.indtipo
  is 'tipo de recaudo (Simit , Polca)';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.fec_corte
  is 'Fecha de corte';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.fec_tran
  is 'fecha de transaccion';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.oficina_origen
  is 'oficina origen';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.valor_efectivo
  is 'valor efectivo';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.valor_cheque
  is 'valor cheque';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.valor_total
  is 'valor total';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.nit_m
  is 'nit municipio';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.idmunicipio
  is 'municipio';
comment on column SIMIT.RECAUDO_LOCAL_TEMP.p_consignado
  is 'porcentaje consignado';

prompt
prompt Creating table REC_LOC_HIST
prompt ===========================
prompt
create table SIMIT.REC_LOC_HIST
(
  consecutivo_recaudo  NUMBER(8) not null,
  id_secretaria_origen VARCHAR2(10),
  id_tipo_doc          VARCHAR2(1),
  identificacion       VARCHAR2(15) not null,
  numero_referencia    VARCHAR2(20),
  fecha_transaccion    DATE,
  fecha_contable       DATE,
  valor_recaudo        NUMBER,
  valor_adicional      NUMBER,
  suma_pagos           NUMBER,
  valor_com            NUMBER,
  fecha_com            DATE,
  cod_infraccion       VARCHAR2(5),
  total_recaudo        NUMBER,
  polca                VARCHAR2(1),
  id_tipo_recaudo      VARCHAR2(2),
  id_estado_recaudo    VARCHAR2(2),
  fecha_mov_desde      DATE,
  fecha_mov_hasta      DATE,
  obs                  VARCHAR2(10),
  fecha_ejecucion      DATE,
  novedad              VARCHAR2(1),
  fecha_carga          DATE,
  no_comp              VARCHAR2(20),
  x55                  NUMBER,
  xfcm                 NUMBER,
  xmun                 NUMBER,
  id_secretaria_deuda  VARCHAR2(10),
  x45                  NUMBER
)
;

prompt
prompt Creating table REC_LOC_HIST_BQUILLA
prompt ===================================
prompt
create table SIMIT.REC_LOC_HIST_BQUILLA
(
  consecutivo_recaudo  NUMBER(8) not null,
  id_secretaria_origen VARCHAR2(10),
  id_tipo_doc          VARCHAR2(1),
  identificacion       VARCHAR2(15) not null,
  numero_referencia    VARCHAR2(15),
  fecha_transaccion    DATE,
  fecha_contable       DATE,
  valor_recaudo        NUMBER,
  valor_adicional      NUMBER,
  suma_pagos           NUMBER,
  valor_com            NUMBER,
  fecha_com            DATE,
  cod_infraccion       VARCHAR2(5),
  total_recaudo        NUMBER,
  polca                VARCHAR2(1),
  id_tipo_recaudo      VARCHAR2(2),
  id_estado_recaudo    VARCHAR2(2),
  fecha_mov_desde      DATE,
  fecha_mov_hasta      DATE,
  obs                  VARCHAR2(10),
  fecha_ejecucion      DATE,
  novedad              VARCHAR2(1),
  fecha_carga          DATE,
  no_comp              VARCHAR2(15),
  x55                  NUMBER,
  xfcm                 NUMBER,
  xmun                 NUMBER
)
;

prompt
prompt Creating table REC_LOC_HIST_PAGO
prompt ================================
prompt
create table SIMIT.REC_LOC_HIST_PAGO
(
  consecutivo        NUMBER not null,
  divipo             VARCHAR2(8),
  valor_recaudo      NUMBER,
  cedula_funcionario VARCHAR2(50),
  tipo_pago          VARCHAR2(40),
  polca              CHAR(1) not null
)
;
alter table SIMIT.REC_LOC_HIST_PAGO
  add constraint PK_REC_LOC_HIST_PAGO primary key (CONSECUTIVO, POLCA);

prompt
prompt Creating table REC_LOC_HIST_PAGO_TEMP
prompt =====================================
prompt
create table SIMIT.REC_LOC_HIST_PAGO_TEMP
(
  consecutivo   NUMBER not null,
  divipo        VARCHAR2(8),
  valor_recaudo NUMBER,
  anho          VARCHAR2(50),
  tipo_pago     VARCHAR2(40),
  polca         CHAR(1) not null
)
;
alter table SIMIT.REC_LOC_HIST_PAGO_TEMP
  add constraint PK_REC_LOC_HIST_PAGO_T primary key (CONSECUTIVO, POLCA);

prompt
prompt Creating table REC_LOC_HIST_1
prompt =============================
prompt
create table SIMIT.REC_LOC_HIST_1
(
  consecutivo_recaudo  NUMBER(8) not null,
  id_secretaria_origen VARCHAR2(10),
  id_tipo_doc          VARCHAR2(1),
  identificacion       VARCHAR2(15) not null,
  numero_referencia    VARCHAR2(20),
  fecha_transaccion    DATE,
  fecha_contable       DATE,
  valor_recaudo        NUMBER,
  valor_adicional      NUMBER,
  suma_pagos           NUMBER,
  valor_com            NUMBER,
  fecha_com            DATE,
  cod_infraccion       VARCHAR2(5),
  total_recaudo        NUMBER,
  polca                VARCHAR2(1),
  id_tipo_recaudo      VARCHAR2(2),
  id_estado_recaudo    VARCHAR2(2),
  fecha_mov_desde      DATE,
  fecha_mov_hasta      DATE,
  x55                  NUMBER,
  xfcm                 NUMBER,
  xmun                 NUMBER,
  obs                  VARCHAR2(10),
  fecha_ejecucion      DATE default SYSDATE,
  novedad              VARCHAR2(1),
  fecha_carga          DATE,
  no_comp              VARCHAR2(20),
  id_secretaria_deuda  VARCHAR2(10)
)
;
alter table SIMIT.REC_LOC_HIST_1
  add primary key (CONSECUTIVO_RECAUDO);

prompt
prompt Creating table REC_LOC_HIST_2
prompt =============================
prompt
create table SIMIT.REC_LOC_HIST_2
(
  consecutivo_recaudo  NUMBER(8) not null,
  id_secretaria_origen VARCHAR2(10),
  id_tipo_doc          VARCHAR2(1),
  identificacion       VARCHAR2(15) not null,
  numero_referencia    VARCHAR2(20),
  fecha_transaccion    DATE,
  fecha_contable       DATE,
  valor_recaudo        NUMBER,
  valor_adicional      NUMBER,
  suma_pagos           NUMBER,
  valor_com            NUMBER,
  fecha_com            DATE,
  cod_infraccion       VARCHAR2(5),
  total_recaudo        NUMBER,
  polca                VARCHAR2(1),
  id_tipo_recaudo      VARCHAR2(2),
  id_estado_recaudo    VARCHAR2(2),
  fecha_mov_desde      DATE,
  fecha_mov_hasta      DATE,
  obs                  VARCHAR2(10),
  fecha_ejecucion      DATE,
  novedad              VARCHAR2(1),
  fecha_carga          DATE,
  no_comp              VARCHAR2(20),
  x55                  NUMBER,
  xfcm                 NUMBER,
  xmun                 NUMBER,
  id_secretaria_deuda  VARCHAR2(10)
)
;

prompt
prompt Creating table REPROCESO
prompt ========================
prompt
create table SIMIT.REPROCESO
(
  fechareg DATE not null,
  fecha    DATE,
  tipo     CHAR(1),
  usuario  NUMBER,
  motivo   VARCHAR2(500)
)
;
comment on column SIMIT.REPROCESO.fechareg
  is 'Fecha en la que se registro el reproceso';
comment on column SIMIT.REPROCESO.fecha
  is 'Fecha a reprocesar';
comment on column SIMIT.REPROCESO.tipo
  is 'Tipo de reproceso';
comment on column SIMIT.REPROCESO.usuario
  is 'Usuario que autoriza el reproceso';
comment on column SIMIT.REPROCESO.motivo
  is 'Motivo del reproceso';
alter table SIMIT.REPROCESO
  add constraint PK_REPROCESO primary key (FECHAREG);

prompt
prompt Creating table RESULPROCTRF
prompt ===========================
prompt
create table SIMIT.RESULPROCTRF
(
  fechaproceso                DATE,
  numeroregistro              NUMBER,
  referencia                  VARCHAR2(16),
  bancoorigen                 CHAR(2),
  tipodecuentaorigen          CHAR(3),
  numerodecuentaorigen        VARCHAR2(16),
  valortransferencia          NUMBER,
  bancodestino                CHAR(2),
  tipodecuentadestino         CHAR(3),
  numerodecuentadestino       VARCHAR2(16),
  tipoidentificaciondestino   CHAR(1),
  numeroidentificaciondestino VARCHAR2(16),
  mensajederespuesta          VARCHAR2(100),
  codigoderespuesta           VARCHAR2(7),
  fechacargue                 DATE,
  usuariocargue               NUMBER,
  tipocargue                  CHAR(3),
  regcruzo                    VARCHAR2(20)
)
;

prompt
prompt Creating table ROL
prompt ==================
prompt
create table SIMIT.ROL
(
  rolid     NUMBER,
  namerol   VARCHAR2(100),
  enablerol NUMBER,
  enablemod NUMBER
)
;
comment on column SIMIT.ROL.rolid
  is 'autonumerico';
comment on column SIMIT.ROL.namerol
  is 'nombre del rol';
comment on column SIMIT.ROL.enablerol
  is 'activo';
comment on column SIMIT.ROL.enablemod
  is 'Modificar datos';

prompt
prompt Creating table ROLXPERSON
prompt =========================
prompt
create table SIMIT.ROLXPERSON
(
  rolid    NUMBER,
  personid NUMBER
)
;
comment on column SIMIT.ROLXPERSON.rolid
  is 'rol';
comment on column SIMIT.ROLXPERSON.personid
  is 'funcionario';

prompt
prompt Creating table RPT1
prompt ===================
prompt
create table SIMIT.RPT1
(
  idmunicipio      CHAR(8),
  municipio_nombre VARCHAR2(50),
  tiporec          VARCHAR2(8),
  ind_tipo         VARCHAR2(5),
  concesionario1   NUMBER,
  concesionario2   NUMBER,
  concesionario3   NUMBER,
  concesionario4   NUMBER,
  concesionario5   NUMBER,
  valor_total      NUMBER,
  valor_ot         NUMBER
)
;

prompt
prompt Creating table RTAACHTXDAV
prompt ==========================
prompt
create table SIMIT.RTAACHTXDAV
(
  nitdestino         NUMBER,
  numeroreferencia   NUMBER,
  cuentadestino      NUMBER,
  tipocuentadestino  VARCHAR2(2),
  codigobancodestin  NUMBER,
  valortraslado      NUMBER,
  numerotalonario    NUMBER,
  tiddestino         NUMBER,
  validaridentificac NUMBER,
  respuestatraslado  NUMBER,
  mensaje            VARCHAR2(44),
  valoracumulado     NUMBER,
  fechaaplicacion    NUMBER,
  oficinarecdet      NUMBER,
  motivonota         NUMBER,
  sucursalfm         NUMBER,
  nvoindalttarj      NUMBER,
  tipocuenta         VARCHAR2(2)
)
;

prompt
prompt Creating table RTAPRETXDAV
prompt ==========================
prompt
create table SIMIT.RTAPRETXDAV
(
  fechaproceso           VARCHAR2(6),
  númerodeidentificación VARCHAR2(12),
  tipodecuenta           VARCHAR2(2),
  númerodecuentaemp      VARCHAR2(16),
  númerodecuentades      VARCHAR2(16),
  valor                  VARCHAR2(18),
  códigodelerror         VARCHAR2(7)
)
;

prompt
prompt Creating table RTATXVILLAS_CTR
prompt ==============================
prompt
create table SIMIT.RTATXVILLAS_CTR
(
  tiporegistro            VARCHAR2(1),
  fechageneracion         VARCHAR2(8),
  numeroregistros         VARCHAR2(8),
  valortotaltransferencia VARCHAR2(18),
  filler                  VARCHAR2(215)
)
;

prompt
prompt Creating table RTATXVILLAS_DET
prompt ==============================
prompt
create table SIMIT.RTATXVILLAS_DET
(
  tiporegistro                VARCHAR2(1),
  fechageneracion             VARCHAR2(8),
  numeroregistro              VARCHAR2(8),
  referencia                  VARCHAR2(16),
  bancoorigen                 VARCHAR2(3),
  tipodecuentaorigen          VARCHAR2(1),
  numerodecuentaorigen        VARCHAR2(16),
  valortransferencia          VARCHAR2(18),
  bancodestino                VARCHAR2(3),
  tipodecuentadestino         VARCHAR2(1),
  numerodecuentadestino       VARCHAR2(16),
  tipoidentificaciondestino   VARCHAR2(1),
  numeroidentificaciondestino VARCHAR2(16),
  mensajederespuesta          VARCHAR2(100),
  codigoderespuesta           VARCHAR2(3),
  filler                      VARCHAR2(41)
)
;

prompt
prompt Creating table SALARIO_MINIMO
prompt =============================
prompt
create table SIMIT.SALARIO_MINIMO
(
  anho  NUMBER not null,
  valor NUMBER
)
;
comment on column SIMIT.SALARIO_MINIMO.anho
  is 'ano';
comment on column SIMIT.SALARIO_MINIMO.valor
  is 'medio salario minimo diario legal vigente';
alter table SIMIT.SALARIO_MINIMO
  add constraint PK_ANHO primary key (ANHO);
alter table SIMIT.SALARIO_MINIMO
  add constraint CH_VALOR
  check (VALOR > 0);

prompt
prompt Creating table SOPORTEAJUSTESRECLOC
prompt ===================================
prompt
create table SIMIT.SOPORTEAJUSTESRECLOC
(
  id_recaudo_local_ajustes NUMBER,
  id_documento             NUMBER not null,
  nombredocumento          VARCHAR2(500),
  nombrearchivo            VARCHAR2(1000),
  extensionarchivo         VARCHAR2(10),
  datosarchivo             BLOB,
  usuariocargue            NUMBER,
  fechacargue              DATE
)
;
comment on column SIMIT.SOPORTEAJUSTESRECLOC.id_recaudo_local_ajustes
  is 'identificacion Ajsute recaudo local';
comment on column SIMIT.SOPORTEAJUSTESRECLOC.id_documento
  is 'numero de documento';
comment on column SIMIT.SOPORTEAJUSTESRECLOC.nombredocumento
  is 'nombre documento';
comment on column SIMIT.SOPORTEAJUSTESRECLOC.nombrearchivo
  is 'nombre del archivo';
comment on column SIMIT.SOPORTEAJUSTESRECLOC.extensionarchivo
  is 'extencion del archivo';
comment on column SIMIT.SOPORTEAJUSTESRECLOC.datosarchivo
  is 'contenido del archivo';
comment on column SIMIT.SOPORTEAJUSTESRECLOC.usuariocargue
  is 'usuario que carga';
comment on column SIMIT.SOPORTEAJUSTESRECLOC.fechacargue
  is 'fecha de carga';
alter table SIMIT.SOPORTEAJUSTESRECLOC
  add constraint PK_SOPORTEAJUSTERECLOC primary key (ID_DOCUMENTO);
alter table SIMIT.SOPORTEAJUSTESRECLOC
  add constraint FK_AJUSTERECLOC foreign key (ID_RECAUDO_LOCAL_AJUSTES)
  references SIMIT.RECAUDO_LOCAL_AJUSTES (ID_RECAUDO_LOCAL_AJUSTES);

prompt
prompt Creating table TERCERO
prompt ======================
prompt
create table SIMIT.TERCERO
(
  idmunicipio   CHAR(8) not null,
  nit_t         CHAR(10) not null,
  nombre        VARCHAR2(50),
  idbanco       CHAR(2),
  tipocuenta    VARCHAR2(3),
  cuenta        VARCHAR2(250),
  base_s        NUMBER,
  base_p        NUMBER,
  ind_base      NUMBER,
  num_tercero   NUMBER not null,
  correotercero VARCHAR2(50)
)
;
comment on column SIMIT.TERCERO.idmunicipio
  is 'municipio';
comment on column SIMIT.TERCERO.nit_t
  is 'nir del tercero';
comment on column SIMIT.TERCERO.nombre
  is 'nombre del tercero';
comment on column SIMIT.TERCERO.idbanco
  is 'banco ';
comment on column SIMIT.TERCERO.tipocuenta
  is 'tipo de cuenta (AHO; CTE)';
comment on column SIMIT.TERCERO.cuenta
  is 'cuenta ';
comment on column SIMIT.TERCERO.base_s
  is 'porcentaje base simit';
comment on column SIMIT.TERCERO.base_p
  is 'porcentaje base polca';
comment on column SIMIT.TERCERO.ind_base
  is 'indicador de base';
comment on column SIMIT.TERCERO.num_tercero
  is 'numero de tercero';
comment on column SIMIT.TERCERO.correotercero
  is 'correo tercero';
alter table SIMIT.TERCERO
  add constraint PK_TERCERO primary key (IDMUNICIPIO, NUM_TERCERO);
alter table SIMIT.TERCERO
  add constraint FK_IDBANCO_T foreign key (IDBANCO)
  references SIMIT.BANCO (IDBANCO);
alter table SIMIT.TERCERO
  add constraint FK_IDMUNICIPIO_T foreign key (IDMUNICIPIO)
  references SIMIT.MUNICIPIO (IDMUNICIPIO);
alter table SIMIT.TERCERO
  add constraint CH_TIPOCUENTA_T
  check (tipocuenta IN ('AHO','CTE'));

prompt
prompt Creating table TIPOMVTO
prompt =======================
prompt
create table SIMIT.TIPOMVTO
(
  tipo        CHAR(4),
  descripcion VARCHAR2(250)
)
;

prompt
prompt Creating table TRXSINIDENTIFICAR
prompt ================================
prompt
create table SIMIT.TRXSINIDENTIFICAR
(
  idbanco               CHAR(2),
  cuenta                VARCHAR2(16),
  periodo               CHAR(6),
  numerotrx             NUMBER,
  fechatrx              DATE,
  descripciontrx        VARCHAR2(250),
  valortrx              NUMBER,
  oficinaorigen         VARCHAR2(250),
  indtipo               CHAR(5),
  idmunicipio           CHAR(8),
  p_consignado          NUMBER,
  fechacargue           DATE,
  usuariocargue         NUMBER,
  fechaidentificacion   DATE,
  usuarioidentificacion NUMBER,
  indtipoiden           CHAR(5),
  idmunicipioiden       CHAR(8),
  p_consignadoiden      NUMBER,
  observaciones         VARCHAR2(500),
  numsecuenciareg       NUMBER not null,
  estadoiden            CHAR(2),
  concesionariozon      CHAR(2),
  referencia            VARCHAR2(250),
  quincena              CHAR(2),
  fechaliq              DATE
)
;
comment on column SIMIT.TRXSINIDENTIFICAR.idbanco
  is 'banco';
comment on column SIMIT.TRXSINIDENTIFICAR.cuenta
  is 'cuenta';
comment on column SIMIT.TRXSINIDENTIFICAR.periodo
  is 'periodo';
comment on column SIMIT.TRXSINIDENTIFICAR.numerotrx
  is 'numero de trx';
comment on column SIMIT.TRXSINIDENTIFICAR.fechatrx
  is 'fecha de transaccion';
comment on column SIMIT.TRXSINIDENTIFICAR.descripciontrx
  is 'descripcion de transaccion';
comment on column SIMIT.TRXSINIDENTIFICAR.valortrx
  is 'valor transaccion';
comment on column SIMIT.TRXSINIDENTIFICAR.oficinaorigen
  is 'oficina origen';
comment on column SIMIT.TRXSINIDENTIFICAR.indtipo
  is 'indicador tipo';
comment on column SIMIT.TRXSINIDENTIFICAR.idmunicipio
  is 'divipo propuesto';
comment on column SIMIT.TRXSINIDENTIFICAR.p_consignado
  is 'porcentaje consignado';
comment on column SIMIT.TRXSINIDENTIFICAR.fechacargue
  is 'fecha de cargue del registro';
comment on column SIMIT.TRXSINIDENTIFICAR.usuariocargue
  is 'usuario de cargue del registro';
comment on column SIMIT.TRXSINIDENTIFICAR.fechaidentificacion
  is 'fecha de identificacion';
comment on column SIMIT.TRXSINIDENTIFICAR.usuarioidentificacion
  is 'usuario que realizo la identificacion';
comment on column SIMIT.TRXSINIDENTIFICAR.indtipoiden
  is 'indicador tipo identificado';
comment on column SIMIT.TRXSINIDENTIFICAR.idmunicipioiden
  is 'municipio identificado';
comment on column SIMIT.TRXSINIDENTIFICAR.p_consignadoiden
  is 'porcentaje identificado';
comment on column SIMIT.TRXSINIDENTIFICAR.observaciones
  is 'observaciones sobre la identificacion';
comment on column SIMIT.TRXSINIDENTIFICAR.numsecuenciareg
  is 'secuencia de la identificacion';
comment on column SIMIT.TRXSINIDENTIFICAR.estadoiden
  is 'SI: Sin identificar, ID: Identificado, AN:Anulado';
comment on column SIMIT.TRXSINIDENTIFICAR.concesionariozon
  is 'Concesionario zonal';
comment on column SIMIT.TRXSINIDENTIFICAR.referencia
  is 'Referencia de transaccion';
comment on column SIMIT.TRXSINIDENTIFICAR.quincena
  is 'Quincena del movimiento de avvillas';
comment on column SIMIT.TRXSINIDENTIFICAR.fechaliq
  is 'fecha liquidacion';
alter table SIMIT.TRXSINIDENTIFICAR
  add constraint PK_TRXSINIDENTIFICAR primary key (NUMSECUENCIAREG);

prompt
prompt Creating table UPLOAD
prompt =====================
prompt
create table SIMIT.UPLOAD
(
  uploadid INTEGER not null,
  filename VARCHAR2(255),
  usuario  VARCHAR2(100),
  fecha    DATE,
  valida   NUMBER,
  cfile    CLOB
)
;
comment on column SIMIT.UPLOAD.uploadid
  is 'Autonumerico';
comment on column SIMIT.UPLOAD.filename
  is 'archivo';
comment on column SIMIT.UPLOAD.usuario
  is 'usuario';
comment on column SIMIT.UPLOAD.fecha
  is 'fecha';
comment on column SIMIT.UPLOAD.valida
  is 'valida';
comment on column SIMIT.UPLOAD.cfile
  is 'contenido archivo';

prompt
prompt Creating table UPLOADBIN
prompt ========================
prompt
create table SIMIT.UPLOADBIN
(
  uploadid INTEGER not null,
  filename VARCHAR2(255),
  usuario  VARCHAR2(100),
  fecha    DATE,
  valida   NUMBER,
  bfile    BLOB
)
;
alter table SIMIT.UPLOADBIN
  add constraint PK_UPLOADBIN primary key (UPLOADID);

prompt
prompt Creating table VALIDADOR_FECHA
prompt ==============================
prompt
create table SIMIT.VALIDADOR_FECHA
(
  idmunicipio              CHAR(8) not null,
  idvalidador              CHAR(3) not null,
  fecha_ini                DATE,
  fecha_fin                DATE,
  indtipo                  VARCHAR2(5) not null,
  p_municipio              NUMBER,
  p_fcm_contravencional    NUMBER,
  p_conces_contravencional NUMBER,
  p_acuerdopago            NUMBER,
  nit_tercero1             VARCHAR2(10),
  base_tercero1            NUMBER,
  ind_base_tercero1        NUMBER,
  nit_tercero2             VARCHAR2(10),
  base_tercero2            NUMBER,
  ind_base_tercero2        NUMBER
)
;
comment on column SIMIT.VALIDADOR_FECHA.idmunicipio
  is 'Municipio';
comment on column SIMIT.VALIDADOR_FECHA.idvalidador
  is 'validador';
comment on column SIMIT.VALIDADOR_FECHA.fecha_ini
  is 'fecha inicial';
comment on column SIMIT.VALIDADOR_FECHA.fecha_fin
  is 'fecha final';
comment on column SIMIT.VALIDADOR_FECHA.indtipo
  is 'tipo comparendo (SIMIT, POLCA)';
comment on column SIMIT.VALIDADOR_FECHA.p_municipio
  is 'porcentaje municipio';
comment on column SIMIT.VALIDADOR_FECHA.p_fcm_contravencional
  is 'porcentaje fcm contravencional';
comment on column SIMIT.VALIDADOR_FECHA.p_conces_contravencional
  is 'porcentaje concesionario contravencional';
comment on column SIMIT.VALIDADOR_FECHA.p_acuerdopago
  is 'porcentaje de acuerdo de pago';
comment on column SIMIT.VALIDADOR_FECHA.nit_tercero1
  is 'nit tercero 1';
comment on column SIMIT.VALIDADOR_FECHA.base_tercero1
  is 'base tercero 1';
comment on column SIMIT.VALIDADOR_FECHA.ind_base_tercero1
  is 'indicador base tercero 1';
comment on column SIMIT.VALIDADOR_FECHA.nit_tercero2
  is 'nit tercero 2';
comment on column SIMIT.VALIDADOR_FECHA.base_tercero2
  is 'base tercero 2';
comment on column SIMIT.VALIDADOR_FECHA.ind_base_tercero2
  is 'base tercero 2';
alter table SIMIT.VALIDADOR_FECHA
  add constraint PK_VALIDADOR_FECHA primary key (IDMUNICIPIO, IDVALIDADOR, INDTIPO);
alter table SIMIT.VALIDADOR_FECHA
  add constraint CH_INDTIPO_VF
  check (INDTIPO IN ('SIMIT','POLCA'));

prompt
prompt Creating table VISTOBUENO
prompt =========================
prompt
create table SIMIT.VISTOBUENO
(
  fecharegistro   DATE,
  usuarioregistro NUMBER,
  tiporecaudo     CHAR(1),
  tipoproceso     CHAR(1),
  fechainicio     DATE,
  fechafin        DATE,
  banco           CHAR(2),
  observaciones   VARCHAR2(500),
  interventoria   CHAR(1)
)
;
comment on column SIMIT.VISTOBUENO.fecharegistro
  is 'Fecha de registro';
comment on column SIMIT.VISTOBUENO.usuarioregistro
  is 'usuario que dio visto bueno';
comment on column SIMIT.VISTOBUENO.tiporecaudo
  is 'tipo de recaudo. L: Local, E:Externo';
comment on column SIMIT.VISTOBUENO.tipoproceso
  is 'tipo de proceso. D:Distribucion T:Transferencia';
comment on column SIMIT.VISTOBUENO.fechainicio
  is 'fecha de inicio';
comment on column SIMIT.VISTOBUENO.fechafin
  is 'fecha de fin';
comment on column SIMIT.VISTOBUENO.banco
  is 'banco recaudador';
comment on column SIMIT.VISTOBUENO.observaciones
  is 'observaciones';
comment on column SIMIT.VISTOBUENO.interventoria
  is 'interventoria que da el visto bueno: S:Simit, P:POLCA';

prompt
prompt Creating sequence SEQ_C
prompt =======================
prompt
create sequence SIMIT.SEQ_C
minvalue 1
maxvalue 999999999999999999999999999
start with 177421
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_ERRORS
prompt ============================
prompt
create sequence SIMIT.SEQ_ERRORS
minvalue 1
maxvalue 999999999999999999999999999
start with 12567
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_IDE
prompt =========================
prompt
create sequence SIMIT.SEQ_IDE
minvalue 1
maxvalue 999999999999999999999999999
start with 321
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_MENU
prompt ==========================
prompt
create sequence SIMIT.SEQ_MENU
minvalue 1
maxvalue 999999999999999999999999999
start with 551
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_MVTO
prompt ==========================
prompt
create sequence SIMIT.SEQ_MVTO
minvalue 1
maxvalue 999999999999999999999999999
start with 3101
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_NOVEDAD
prompt =============================
prompt
create sequence SIMIT.SEQ_NOVEDAD
minvalue 1
maxvalue 999999999999999999999999999
start with 911
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_RECAUDO_EXTERNO
prompt =====================================
prompt
create sequence SIMIT.SEQ_RECAUDO_EXTERNO
minvalue 1
maxvalue 999999999999999999999999999
start with 1816790
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_RECAUDO_EXTERNO_LIQ
prompt =========================================
prompt
create sequence SIMIT.SEQ_RECAUDO_EXTERNO_LIQ
minvalue 1
maxvalue 999999999999999999999999999
start with 1499755
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_RECAUDO_EXTERNO_TEMP
prompt ==========================================
prompt
create sequence SIMIT.SEQ_RECAUDO_EXTERNO_TEMP
minvalue 1
maxvalue 999999999999999999999999999
start with 23021
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_RECAUDO_LOCAL_AJUSTES
prompt ===========================================
prompt
create sequence SIMIT.SEQ_RECAUDO_LOCAL_AJUSTES
minvalue 1
maxvalue 999999999999999999999999999
start with 1538
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_RECAUDO_LOCAL_LIQUIDACION
prompt ===============================================
prompt
create sequence SIMIT.SEQ_RECAUDO_LOCAL_LIQUIDACION
minvalue 1
maxvalue 999999999999999999999999999
start with 1531595
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_ROL
prompt =========================
prompt
create sequence SIMIT.SEQ_ROL
minvalue 1
maxvalue 999999999999999999999999999
start with 269
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_TRANSFERENCIA
prompt ===================================
prompt
create sequence SIMIT.SEQ_TRANSFERENCIA
minvalue 1
maxvalue 999999999999999999999999999
start with 123555
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_UPLOADS
prompt =============================
prompt
create sequence SIMIT.SEQ_UPLOADS
minvalue 1
maxvalue 999999999999999999999999999
start with 6285
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_VOBO
prompt ==========================
prompt
create sequence SIMIT.SEQ_VOBO
minvalue 1
maxvalue 999999999999999999999999999
start with 1377
increment by 1
cache 20;

prompt
prompt Creating view VW_CARGOS
prompt =======================
prompt
create or replace force view simit.vw_cargos as
select ' Seleccione'as Cargo, ' Seleccione' as Nombre
    from fcm f
  union
  select 'Director Ejecutivo'as Cargo, f.director_ejecutivo as Nombre
    from fcm f
  union
  select 'Director Nacional' as Cargo,f.director_nacional as Nombre
    from fcm f
  union
  select 'Contador General' as Cargo,f.contador_general as Nombre
    from fcm f
  union
  select 'Coordinador Financiero' as Cargo,f.coordinador_financiero as Nombre
    from fcm f;

prompt
prompt Creating view VW_CAUSAGASPOLCAEXTERNO
prompt =====================================
prompt
create or replace force view simit.vw_causagaspolcaexterno as
select
operacion,
fec_corte_ini,
fec_corte_fin,
ori_idbanco,
bori.nombre "banco",
ori_cuenta,
valor_debito,
valor_credito,
deb_cta_con,
deb_cen_cos,
deb_nit_ter,
cre_cta_con,
cre_cen_cos,
cre_nit_ter,
orden,
concepto_con,
usuario_proceso,
fecha_proceso
   from RECAUDO_externo_causacion r, banco bori
   where OPERACION = 'GASTO'
   and indtipo = 'POLCA'
   and r.ori_idbanco = bori.idbanco
   and ( r.valor_debito <> 0 or r.valor_credito <> 0 )
   order by r.ori_idbanco, r.orden, r.idconcesionario;

prompt
prompt Creating view VW_CAUSAGASPOLCALOCAL
prompt ===================================
prompt
create or replace force view simit.vw_causagaspolcalocal as
select
operacion,
fec_corte_ini,
fec_corte_fin,
ori_idbanco,
bori.nombre "banco",
ori_cuenta,
valor_debito,
valor_credito,
deb_cta_con,
deb_cen_cos,
deb_nit_ter,
cre_cta_con,
cre_cen_cos,
cre_nit_ter,
orden,
concepto_con,
usuario_proceso,
fecha_proceso
   from RECAUDO_LOCAL_causacion r, banco bori
   where OPERACION = 'GASTO'
   and indtipo = 'POLCA'
   and r.ori_idbanco = bori.idbanco
   order by r.ori_idbanco, r.orden, r.idconcesionario;

prompt
prompt Creating view VW_CAUSAGASSIMITEXTERNO
prompt =====================================
prompt
create or replace force view simit.vw_causagassimitexterno as
select
operacion,
fec_corte_ini,
fec_corte_fin,
ori_idbanco,
bori.nombre "banco",
ori_cuenta,
valor_debito,
valor_credito,
deb_cta_con,
deb_cen_cos,
deb_nit_ter,
cre_cta_con,
cre_cen_cos,
cre_nit_ter,
orden,
concepto_con,
usuario_proceso,
fecha_proceso
   from RECAUDO_EXTERNO_causacion r, banco bori
   where OPERACION = 'GASTO'
   and indtipo = 'SIMIT'
   and r.ori_idbanco = bori.idbanco
   and ( r.valor_debito <> 0 or r.valor_credito <> 0 )
   order by r.ori_idbanco, orden, r.idconcesionario;

prompt
prompt Creating view VW_CAUSAGASSIMITLOCAL
prompt ===================================
prompt
create or replace force view simit.vw_causagassimitlocal as
select
operacion,
fec_corte_ini,
fec_corte_fin,
ori_idbanco,
bori.nombre "banco",
ori_cuenta,
valor_debito,
valor_credito,
deb_cta_con,
deb_cen_cos,
deb_nit_ter,
cre_cta_con,
cre_cen_cos,
cre_nit_ter,
orden,
concepto_con,
usuario_proceso,
fecha_proceso
   from RECAUDO_LOCAL_causacion r, banco bori
   where OPERACION = 'GASTO'
   and indtipo = 'SIMIT'
   and r.ori_idbanco = bori.idbanco
   order by r.ori_idbanco, orden, r.idconcesionario;

prompt
prompt Creating view VW_CAUSAINGPOLCAEXTERNO
prompt =====================================
prompt
create or replace force view simit.vw_causaingpolcaexterno as
select
operacion,
fec_corte_ini,
fec_corte_fin,
ori_idbanco,
bori.nombre "banco",
ori_cuenta,
valor_debito,
valor_credito,
deb_cta_con,
deb_cen_cos,
deb_nit_ter,
cre_cta_con,
cre_cen_cos,
cre_nit_ter,
orden,
concepto_con,
usuario_proceso,
fecha_proceso
   from RECAUDO_externo_causacion r, banco bori
   where OPERACION = 'INGRESO'
   and indtipo = 'POLCA'
   and r.ori_idbanco = bori.idbanco
   and ( r.valor_debito <> 0 or r.valor_credito <> 0 )
   order by r.ori_idbanco, r.ori_cuenta, r.orden;

prompt
prompt Creating view VW_CAUSAINGPOLCALOCAL
prompt ===================================
prompt
create or replace force view simit.vw_causaingpolcalocal as
select
operacion,
fec_corte_ini,
fec_corte_fin,
ori_idbanco,
bori.nombre "banco",
ori_cuenta,
valor_debito,
valor_credito,
deb_cta_con,
deb_cen_cos,
deb_nit_ter,
cre_cta_con,
cre_cen_cos,
cre_nit_ter,
orden,
concepto_con,
usuario_proceso,
fecha_proceso
   from RECAUDO_LOCAL_causacion r, banco bori
   where OPERACION = 'INGRESO'
   and indtipo = 'POLCA'
   and r.ori_idbanco = bori.idbanco
   order by r.ori_idbanco, orden;

prompt
prompt Creating view VW_CAUSAINGSIMITEXTERNO
prompt =====================================
prompt
create or replace force view simit.vw_causaingsimitexterno as
select
operacion,
fec_corte_ini,
fec_corte_fin,
ori_idbanco,
bori.nombre "banco",
ori_cuenta,
valor_debito,
valor_credito,
deb_cta_con,
deb_cen_cos,
deb_nit_ter,
cre_cta_con,
cre_cen_cos,
cre_nit_ter,
orden,
concepto_con,
usuario_proceso,
fecha_proceso
   from RECAUDO_externo_causacion r, banco bori
   where OPERACION = 'INGRESO'
   and indtipo = 'SIMIT'
   and r.ori_idbanco = bori.idbanco
   and ( r.valor_debito <> 0 or r.valor_credito <> 0 )
   order by r.ori_idbanco, r.ori_cuenta, r.orden;

prompt
prompt Creating view VW_CAUSAINGSIMITLOCAL
prompt ===================================
prompt
create or replace force view simit.vw_causaingsimitlocal as
select
operacion,
fec_corte_ini,
fec_corte_fin,
ori_idbanco,
bori.nombre "banco",
ori_cuenta,
valor_debito,
valor_credito,
deb_cta_con,
deb_cen_cos,
deb_nit_ter,
cre_cta_con,
cre_cen_cos,
cre_nit_ter,
orden,
concepto_con,
usuario_proceso,
fecha_proceso
   from RECAUDO_LOCAL_causacion r, banco bori
   where OPERACION = 'INGRESO'
   and indtipo = 'SIMIT'
   and r.ori_idbanco = bori.idbanco
   order by r.ori_idbanco, orden;

prompt
prompt Creating view VW_COBROSDEV
prompt ==========================
prompt
create or replace force view simit.vw_cobrosdev as
select n."TIPOIDENTIFICACION",n."IDENTIFICACION",n."NOMBRE",n."IDBANCO",n."TIPOCUENTA",n."CUENTA",n."IDCONCESIONARIO",n."INDTIPO",n."IDMUNICIPIO",n."MOTIVO",n."VDEVOLUCION",n."VCONCESIONARIO",n."VFCM",n."VFONDOCOBERTURAFCM",n."VFONDOCOBERTURALIQ",n."VEQUILIBRIOECONOMICO",n."VSEVIAL",n."VFCMPOLCA",n."VMUNICIPIO",n."VFCMCONTRAVENCIONAL",n."VCONCONTRAVENCIONAL",n."TIPONOV",n."NUMERONOV",n."FECHANOV",n."USUARIONOV",n."USUARIOVAL",n."FECHAVAL",n."FECHAACT",n."ESTADONOV",n."FIRMA1",n."FIRMA2",n."USUARIOANUL",n."FECHAANUL",n."FECHAAPLICACION",n."VPOLCA",n."CUENTAREC",n."DNSGRANBANCO",n."DNSAVVILLAS",n."INDCOBRO",n."FECHACOBRO",n."REFERENCIATRF",n."OBSERVACIONES",n."VADICIONAL", m.nombre as nomMunicipio, decode(n.indcobro,0,'PENDIENTE DE COBRO','COBRO EJECUTADO') AS nomIndCobro from novDevolucion n, municipio m
where n.idmunicipio = m.idmunicipio
and n.indcobro in (0,1);

prompt
prompt Creating view VW_CONCEPTOPAGO
prompt =============================
prompt
create or replace force view simit.vw_conceptopago as
select distinct concepto
from simit.recaudo_externo_disp_tot
order by Concepto;

prompt
prompt Creating view VW_CONCEPTOPAGOLOC
prompt ================================
prompt
create or replace force view simit.vw_conceptopagoloc as
select 'TODOS' concepto from dual
union
select distinct concepto
from simit.recaudo_local_disp_tot
order by Concepto desc;

prompt
prompt Creating view VW_CONCESIONARIOTRF
prompt =================================
prompt
create or replace force view simit.vw_concesionariotrf as
select '99' as idcon, '  TODOS' as nombre from dual
  union
select '00' as idCon, ' SIN CONCESIONARIO' as nombre from dual
UNION
  select c.idconcesionario as idCon, c.idconcesionario || '-' || c.nombre as nombre
  from concesionario c
  where c.idconcesionario <> '00'
  order by 2  ASC;

prompt
prompt Creating view VW_CUENTAORIGEN
prompt =============================
prompt
create or replace force view simit.vw_cuentaorigen as
select distinct ori_cuenta
from simit.recaudo_externo_disp_tot
order by ori_cuenta;

prompt
prompt Creating view VW_CUENTAORIGENDEV
prompt ================================
prompt
create or replace force view simit.vw_cuentaorigendev as
select
r.ori_cuenta as cuenta,
r.ori_cuenta || '-' || r.indtipo || '-EXTERNO-' || b.nombre as nomCuenta
from recaudo_externo_disp_tot r, banco b
where r.ori_idbanco = b.idbanco
group by r.ori_idbanco, r.ori_cuenta, r.indtipo, b.nombre
union
select c.cuenta as cuenta,
c.cuenta || '-' || c.indtipo || '-EXTERNO-' || b.nombre as nomCuenta
from cta_recaudo_concesionario c,  banco b
where c.idbanco = b.idbanco
order by 1;

prompt
prompt Creating view VW_CUENTAORIGENLOC
prompt ================================
prompt
create or replace force view simit.vw_cuentaorigenloc as
select '999999999' as ori_cuenta, 'TODOS' as nombre from dual
union
select ori_cuenta, ( b.nombre || '-' ||  r.indtipo || '-' || r.ori_cuenta) as nombre
from recaudo_local_disp r, banco b
where r.ori_idbanco = b.idbanco
order by 2  desc;

prompt
prompt Creating function SEGURIDAD_DESENCRIPTAR
prompt ========================================
prompt
CREATE OR REPLACE FUNCTION SIMIT."SEGURIDAD_DESENCRIPTAR" (cadena IN STRING, semilla IN STRING)
RETURN VARCHAR2 IS
LANGUAGE JAVA
NAME 'Seguridad.DesEncriptar(java.lang.String,java.lang.String) return String';
/

prompt
prompt Creating package PK_AUTEN
prompt =========================
prompt
CREATE OR REPLACE PACKAGE SIMIT."PK_AUTEN" is

  -- Author  : Ricardo Buitrago Lizarazo
  -- Created : 28/12/2007 10:14:23 a.m.
  -- Purpose :

  -- Public type declarations
  TYPE cursor_t_salida IS REF CURSOR;

  -- Public variable declarations
  v_error   NUMBER := 0;
  v_message VARCHAR2(255);

  MSG_UPD_OK VARCHAR2(255) := 'Registro Actualizado Correctamente';
  MSG_INS_OK VARCHAR2(255) := 'Registro Insertado Correctamente';
  MSG_DEL_OK VARCHAR2(255) := 'Registro Eliminado Correctamente';

  SEMILLA_ENCRIPCION VARCHAR2(255) := 'FEDERACION COLOMBIANA DE MUNICIPIOS';

  FUNCTION darSemilla return varchar2;

  -- Public function and procedure declarations
  PROCEDURE i_usuario(p_idperson     varchar2,
                      p_nameperson   varchar2,
                      p_jobtitle     varchar2,
                      p_enableperson varchar2,
                      p_mail         varchar2,
                      p_clave        varchar2,
                      p_usuario      varchar2,
                      p_error        OUT VARCHAR2);
  PROCEDURE u_usuario(p_idperson     varchar2,
                      p_nameperson   varchar2,
                      p_jobtitle     varchar2,
                      p_enableperson varchar2,
                      p_mail         varchar2,
                      p_clave        varchar2,
                      p_usuario      varchar2,
                    p_error        OUT VARCHAR2);
  PROCEDURE i_rolxusuario(p_personid varchar2,
                          p_rolid    varchar2,
                          p_usuario  varchar2,
                          p_error    OUT VARCHAR2);

  PROCEDURE d_rolxusuario(p_personid varchar2,
                          p_rolid    varchar2,
                          p_usuario  varchar2,
                          p_error    OUT VARCHAR2);
  PROCEDURE u_rolxusuario(p_personid varchar2,
                          p_rolnew   varchar2,
                          p_usuario  varchar2,
                          p_error    OUT VARCHAR2);

  PROCEDURE i_rol(p_rolid        varchar2,
                  p_namerol      varchar2,
                  p_enablerol    varchar2,
                  p_enablemod    varchar2,

                  p_usuario      varchar2,
                  p_error        OUT VARCHAR2);
  PROCEDURE u_rol(p_rolid        varchar2,
                  p_namerol      varchar2,
                  p_enablerol    varchar2,
                  p_enablemod    varchar2,

                  p_usuario      varchar2,
                  p_error        OUT VARCHAR2);
  PROCEDURE u_menuxrol(p_rolid varchar2,
                          p_menunew   varchar2,
                          p_usuario  varchar2,
                          p_error    OUT VARCHAR2);

  PROCEDURE i_menu(p_idmenu      varchar2,
                   p_namemenu    varchar2,
                   p_page        varchar2,
                   p_padreid     varchar2,
                   p_enablemenu  varchar2,
                   p_usuario     varchar2,
                   p_error       OUT VARCHAR2);
  PROCEDURE u_menu(p_idmenu      varchar2,
                   p_namemenu    varchar2,
                   p_page        varchar2,
                   p_padreid     varchar2,
                   p_enablemenu  varchar2,
                   p_usuario     varchar2,
                   p_error       OUT VARCHAR2);

  PROCEDURE q_usuario(p_usuario         number,
                      p_clave            varchar2,
                      p_semilla         varchar2,
                      p_error    OUT VARCHAR2,
                    p_nombre    OUT VARCHAR2);

  PROCEDURE d_usuario(p_idperson   number,
                      p_usuario    varchar2,
                      p_error      OUT VARCHAR2);

  PROCEDURE d_rol(p_rolid      number,
                         p_usuario    varchar2,
                         p_error      OUT VARCHAR2);

  PROCEDURE d_menu(p_idmenu      number,
                         p_usuario    varchar2,
                         p_error      OUT VARCHAR2);

PROCEDURE invoca_Seguridad(p_usuario         number,
                      p_clave            varchar2,
                      p_error    OUT VARCHAR2,
                      p_nombre    OUT VARCHAR2);

end pk_auten;
/

prompt
prompt Creating function DESENCRIPTAR
prompt ==============================
prompt
CREATE OR REPLACE FUNCTION SIMIT."DESENCRIPTAR" (cadena varchar2) return varchar2 is
  Result varchar2(250);
begin

  Result := seguridad_desencriptar(cadena, pk_auten.darsemilla );

  return(Result);
end desencriptar;
/

prompt
prompt Creating view VW_CUENTAS
prompt ========================
prompt
create or replace force view simit.vw_cuentas as
select distinct
'CTA DISPERSION CONCESIONARIO' AS  concepto,
ct.idconcesionario as codigo,
( c.nombre || ' ' ||  cp.nombre) as nombre,
ct.idbanco,
b.nombre as banco,
ct.tipocuenta,
desencriptar(ct.cuenta) as cuenta,
ct.nit_c as nitCuenta
from cta_dispersion_concesionario ct, concesionario c, concepto cp, banco b
where ct.idconcesionario = c.idconcesionario
and ct.idconcepto = cp.idconcepto
and ct.idbanco = b.idbanco
union
select distinct
'CTA DISPERSION FCM' AS  concepto,
ct.idbancorec as codigo,
'FCM DISPERSION LIBRE DISPOSICION SIMIT' as combre,
ct.cta_disp_s_banco,
b.nombre as banco,
CT.CTA_DISP_S_TIPO_CTA,
desencriptar(CT.CTA_DISP_S_CTA),
'8000826650' as nit
FROM cta_dispersion_fcm ct , banco b
where ct.cta_disp_s_banco = b.idbanco
union
select distinct
'CTA DISPERSION FCM' AS  concepto,
ct.idbancorec as codigo,
'FCM DISPERSION LIBRE DISPOSICION POLCA' as combre,
ct.cta_disp_s_banco,
b.nombre as banco,
CT.CTA_DISP_P_TIPO_CTA,
desencriptar(CT.CTA_DISP_P_CTA),
'8000826650' as nit
FROM cta_dispersion_fcm ct , banco b
where ct.cta_disp_p_banco = b.idbanco
union
select distinct
'CTA DISPERSION FCM' AS  concepto,
ct.idbancorec as codigo,
'FCM DISPERSION LIBRE DISPOSICION 1.8 ' as combre,
ct.cta_disp_pa_banco,
b.nombre as banco,
CT.CTA_DISP_PA_TIPO_CTA,
desencriptar(CT.CTA_DISP_PA_CTA),
'8000826650' as nit
FROM cta_dispersion_fcm ct , banco b
where ct.cta_disp_pa_banco = b.idbanco
union
select distinct
'CTA DISPERSION FCM' AS  concepto,
ct.idbancorec as codigo,
'FCM DISPERSION ACUERDO PAGO' as combre,
ct.cta_disp_ac_banco,
b.nombre as banco,
CT.CTA_DISP_ac_TIPO_CTA,
desencriptar(CT.CTA_DISP_ac_CTA),
'8000826650' as nit
FROM cta_dispersion_fcm ct , banco b
where ct.cta_disp_ac_banco = b.idbanco
union
select distinct
'CTA RECAUDO EXTERNO CONCESIONARIO' as concepto,
ct.idconcesionario as codigo,
('CTA RECAUDO ' || c.nombre || ' ' || CT.INDTIPO ) as combre,
ct.idbanco,
b.nombre as banco,
ct.tipocuenta,
ct.cuenta,
c.nit_c as nit
from cta_recaudo_concesionario ct, concesionario c , banco b
where ct.idconcesionario = c.idconcesionario
and ct.idbanco = b.idbanco
union
select distinct
'CTA RECAUDO LOCAL FCM' as concepto,
ct.idbanco as codigo,
'CTA RECAUDO LOCAL FCM ' || ct.indtipo  as combre,
ct.idbanco,
b.nombre as banco,
ct.tipocuenta,
ct.cuenta,
ct.nit_fcm as nit
from cta_recaudo_fcm ct, banco b
where ct.idbanco = b.idbanco
union
select distinct
'CTA DISPERSION MUNICIPIO' as concepto,
m.idmunicipio,
'CTA DISPERSION ' || m.idmunicipio || ' ' || m.nombre as concepto,
m.idbanco,
b.nombre,
m.tipocuenta,
desencriptar(m.cuenta),
m.nit_cta
FROM municipio m, banco b
where m.idbanco = b.idbanco
and m.idmunicipio <> '00000000'
union
select distinct
'CTA DISPERSION TERCERO' as concepto,
t.nit_t,
'CTA DISPERSION ' || t.nombre as concepto,
t.idbanco,
b.nombre,
t.tipocuenta,
desencriptar(t.cuenta),
t.nit_t
FROM TERCERO t, banco b
where t.idbanco = b.idbanco;

prompt
prompt Creating view VW_CUENTATRF
prompt ==========================
prompt
create or replace force view simit.vw_cuentatrf as
select '999999999' as cta, 'TODOS' as nombre from dual
  union
  select c.cuenta as cta, ( b.nombre || '-' || c.indtipo || '-' || c.cuenta ) as nombre
  from cta_recaudo_fcm c, banco b
  where c.idbanco = b.idbanco
  order by 2  desc;

prompt
prompt Creating view VW_DEVOLUCIONESACH
prompt ================================
prompt
create or replace force view simit.vw_devolucionesach as
select d.fec_dispersion,
       d.concepto,
       d.ori_idbanco,
       bo.nombre bancoOrigen,
       d.ori_cuenta,
       des_idbanco,
       bd.nombre bancoDestino,
       d.des_tipocuenta,
       simit.desencriptar(d.des_cuenta) cuentaDestino,
       d.des_nit,
       d.indtipo,
       d.valor,
       d.idmunicipio,

       (case
         when d.estadotrf is null then
          'ENV'
         else
          d.estadotrf
       end) as estadoTrf,

       d.fechaenvio,
       d.fechaconfirmada,
       d.fechadevolucion,
       d.motivodevolucion,
       d.codigodevolucion,

       (case
         when estadotrf is null then
          'Enviado sin confirmar'
         when estadotrf = 'ENV' then
          'Enviado sin confirmar'
         when estadotrf = 'EXI' then
          'Confirmada exitosamente'
         when estadotrf = 'REC' then
          motivodevolucion
         else
          'estado no definido'
       end) mensajeEstado,

       (case
         when estadotrf is null then
          d.fec_Dispersion
         when estadotrf = 'ENV' then
          d.fechaenvio
         when estadotrf = 'EXI' then
          d.Fechaconfirmada
         when estadotrf = 'REC' then
          d.fechadevolucion
         else
          null
       end) fechaEstado,

       decode(referenciatrfori,null,referenciatrf,referenciatrfori) as referenciatrf

  from recaudo_externo_disp_tot d, banco bo, banco bd
 where --enviadobanco = 1 and
       bo.idbanco = d.ori_idbanco
   and bd.idbanco = d.des_idbanco
union
select fechaproceso as fec_dispersion,
       'OPERACION ACH NO REGISTRADA EN SDF' as concepto,
       bancoorigen as ori_idbanco,
       bo.nombre bancoOrigen,
       numerodecuentaorigen as ori_cuenta,
       bancodestino as des_idbanco,
       bd.nombre bancoDestino,
       tipodecuentadestino as des_tipocuenta,
       numerodecuentadestino as cuentaDestino,
       numeroidentificaciondestino as des_nit,
       '' as indtipo,
       valortransferencia as valor,
       '' as idmunicipio,
       'REC' as estadoTrf,
       null as fechaenvio,
       null as fechaconfirmada,
       fechaproceso as fechadevolucion,
       mensajederespuesta as motivodevolucion,
       codigoderespuesta as codigodevolucion,
       mensajederespuesta as mensajeEstado,
       fechaproceso as fechaEstado,
       0 as referenciatrf
  from resulproctrf, banco bo, banco bd
 where tipocargue = 'ACH'
   and regcruzo is null
   and bo.idbanco = bancoorigen
   and bd.idbanco = bancodestino;

prompt
prompt Creating view VW_DISPOLCAEXTERNO
prompt ================================
prompt
create or replace force view simit.vw_dispolcaexterno as
select
      fec_corte_ini,
      fec_corte_fin,
      fec_dispersion,
      r.id_concesionario_liq "idconcesionario",
      orden,
      concepto,
      ori_idbanco,
      ori_tipocuenta,
      ori_cuenta,
      ori_nit,
      des_idbanco,
      des_tipocuenta,
      des_cuenta,
      des_nit,
      indtipo,
      usuario_proceso,
      fecha_proceso,
      valor,
      c.nombre "Concesionario",
      bdes.nombre "BancoDes",
      bori.nombre "BancoOri",
      deb_cta_con,
      deb_cen_cos,
      deb_nit_ter,
      cre_cta_con,
      cre_cen_cos,
      cre_nit_ter,
      concepto_con
    from RECAUDO_externo_DISP r, concesionario c, banco bdes, banco bori
   where INDTIPO = 'POLCA'
   and r.id_concesionario_liq = c.idconcesionario
   and r.ori_idbanco = bori.idbanco
   and r.des_idbanco = bdes.idbanco
   and r.valor <> 0.0
   order by r.fec_dispersion, r.id_concesionario_liq,orden;

prompt
prompt Creating view VW_DISSIMITEXTERNO
prompt ================================
prompt
create or replace force view simit.vw_dissimitexterno as
select
      fec_corte_ini,
      fec_corte_fin,
      fec_dispersion,
      r.id_concesionario_liq,
      orden,
      concepto,
      ori_idbanco,
      ori_tipocuenta,
      ori_cuenta,
      ori_nit,
      des_idbanco,
      des_tipocuenta,
      desencriptar(des_cuenta) as des_cuenta,
      des_nit,
      indtipo,
      usuario_proceso,
      fecha_proceso,
      valor,
      c.nombre as Concesionario,
      bdes.nombre as BancoDes,
      bori.nombre as BancoOri,
      r.idmunicipio
from RECAUDO_externo_DISP r, concesionario c, banco bdes, banco bori
where r.id_concesionario_liq = c.idconcesionario
and r.ori_idbanco = bori.idbanco
and r.des_idbanco = bdes.idbanco;

prompt
prompt Creating function FN_OBT_FECHA_PAGO
prompt ===================================
prompt
create or replace function simit.FN_OBT_FECHA_PAGO(fecDisp date) return date is
  Result Date;
begin

  select max(fechaenvio)
  into Result
  from recaudo_externo_disp_tot
  where fec_dispersion = fecDisp;

  return(Result);

end FN_OBT_FECHA_PAGO;
/

prompt
prompt Creating view VW_DISTOTDETALLADO
prompt ================================
prompt
create or replace force view simit.vw_distotdetallado as
select l."ID_RECAUDO_EXTERNO_LIQUIDACION",l."ID_RECAUDO_EXTERNO",l."ID_CONCESIONARIO_PRO",l."ID_CONCESIONARIO_LIQ",l."INDTIPO",l."USUARIO_PROCESO",l."FECHA_PROCESO",l."IDMUNICIPIO",l."FEC_CORTE",l."IND_PROCESO",l."NUM_LIQUIDACION",l."DIAS_DISPERSION",l."FREC_DISPERSION",l."FEC_DISPERSION",l."IDBANCO",l."SMDLV",l."INDRETROACTIVIDAD",l."VALOR_TOTAL",l."VALOR_ADICIONAL",l."VALIDADOR_FECHA",l."INDFECHA2002",l."S_VALOR_0",l."S_VALOR_1",l."S_VALOR_2",l."S_VALOR_3",l."S_VALOR_4",l."S_VALOR_5",l."S_VALOR_6",l."S_VALOR_7",l."S_VALOR_8",l."S_VALOR_9",l."S_VALOR_10",l."S_VALOR_11",l."S_VALOR_12",l."S_VALOR_13",l."S_VALOR_14",l."S_VALOR_15",l."S_VALOR_16",l."S_VALOR_17",l."S_VALOR_18",l."S_VALOR_19",l."S_VALOR_20",l."S_VALOR_21",l."S_VALOR_22",l."S_VALOR_23",l."S_VALOR_24",l."S_VALOR_25",l."S_VALOR_26",l."S_VALOR_27",l."S_VALOR_28",l."CTA_RECAUDO",l."IND_BASE_TER1",l."IND_BASE_TER2",l."IND_BASE_TER3",l."IND_BASE_TER4",l."POR_BASE_TER1",l."POR_BASE_TER2",l."POR_BASE_TER3",
l."POR_BASE_TER4",l."S_VALOR_29",l."NOM_TER1",l."NOM_TER2",l."NOM_TER3",l."NOM_TER4",l."P_VALOR_1",l."P_VALOR_2",l."P_VALOR_3",l."P_VALOR_4",l."P_VALOR_5",l."P_VALOR_6",l."P_VALOR_7",l."P_VALOR_8",l."P_VALOR_9",l."P_VALOR_10",l."P_VALOR_11",l."P_VALOR_12",l."P_VALOR_13",l."P_VALOR_14",l."P_VALOR_15",l."P_VALOR_16",l."P_VALOR_17",l."P_VALOR_18",l."P_VALOR_19",l."P_VALOR_20",l."P_VALOR_21",l."P_VALOR_22",l."P_VALOR_23",l."P_VALOR_24",l."P_VALOR_25",l."P_VALOR_26",l."P_VALOR_27",l."P_VALOR_28",l."P_VALOR_29",l."P_VALOR_30",l."P_VALOR_31",l."P_VALOR_32",l."P_VALOR_33",l."P_VALOR_34",l."P_VALOR_35",l."P_VALOR_36",l."P_VALOR_37",l."P_VALOR_38",l."P_VALOR_39",l."P_VALOR_40",l."P_VALOR_41",l."P_VALOR_42",l."P_VALOR_43",l."S_VALOR_30",l."P_VALOR_44",l."FEC_DISPERSION_CON",l."NIT_MUNICIPIO",l."NIT_TERCERO1",l."NIT_TERCERO2",l."NIT_TERCERO3",l."NIT_TERCERO4",l."NIT_CONCESIONARIO",l."NIT_FONDO",l."NIT_CONCESIONARIOZON",
b.nombre as nomBanco,
c.nombre as nomConcesionario,
m.nombre as nomMunicipio,
(s_valor_26 + p_valor_39) as v_municipio,
(s_valor_19 + p_valor_32) as VTercero1,
(s_valor_21 + p_valor_34) as VTercero2,
r.identificacion,
r.num_comparendo,
l.idbancomun bancoMun,
bm.nombre nomBancoMun,
desencriptar(l.ctamun) as ctaMunicipio,
l.tipocuentamun as tipoctaMun,
fn_obt_fecha_pago(l.FEC_DISPERSION) as fechaPago,
r.fec_tran as fechaRecaudo
from
recaudo_externo_liquidacion l, banco b, concesionario c, municipio m, recaudo_externo r ,
banco bm
where l.idbanco = b.idbanco and l.ID_CONCESIONARIO_LIQ = c.idconcesionario and l.idmunicipio = m.idmunicipio and l.id_recaudo_externo = r.id_recaudo_externo
and l.idbancomun = bm.idbanco;

prompt
prompt Creating view VW_RECAUDO_EXTERNO_DISP_TOT
prompt =========================================
prompt
create or replace force view simit.vw_recaudo_externo_disp_tot as
select "FEC_CORTE_INI","FEC_CORTE_FIN","FEC_DISPERSION","ID_CONCESIONARIO_LIQ","ORDEN","CONCEPTO","ORI_IDBANCO","ORI_TIPOCUENTA","ORI_CUENTA","ORI_NIT","DES_IDBANCO","DES_TIPOCUENTA","DES_CUENTA","DES_NIT","INDTIPO","USUARIO_PROCESO","FECHA_PROCESO","VALOR","DEB_CTA_CON","DEB_CEN_COS","DEB_NIT_TER","CRE_CTA_CON","CRE_CEN_COS","CRE_NIT_TER","CONCEPTO_CON","ID_CONCESIONARIO_PRO","IDMUNICIPIO","REFERENCIATRF","ENVIADOBANCO", "REFERENCIATRFORI"
    from recaudo_externo_disp_tot;

prompt
prompt Creating view VW_DISTRFSIMITEXTERNO
prompt ===================================
prompt
create or replace force view simit.vw_distrfsimitexterno as
select
      fec_corte_ini,
      fec_corte_fin,
      fec_dispersion,
      r.id_concesionario_liq,
      orden,
      concepto,
      ori_idbanco,
      ori_tipocuenta,
      ori_cuenta,
      ori_nit,
      des_idbanco,
      des_tipocuenta,
      desencriptar(des_cuenta) as des_cuenta,
      des_nit,
      indtipo,
      usuario_proceso,
      fecha_proceso,
      valor,
      c.nombre as Concesionario,
      bdes.nombre as BancoDes,
      bori.nombre as BancoOri,
      r.idmunicipio,
      decode(r.referenciatrfori,null,r.referenciatrf,r.referenciatrfori) as referenciatrf
from vw_RECAUDO_externo_DISP_TOT r, concesionario c, banco bdes, banco bori
where r.id_concesionario_liq = c.idconcesionario
and r.ori_idbanco = bori.idbanco
and r.des_idbanco = bdes.idbanco;

prompt
prompt Creating view VW_RECAUDO_EXTERNO_DISP
prompt =====================================
prompt
create or replace force view simit.vw_recaudo_externo_disp as
select "FEC_CORTE_INI","FEC_CORTE_FIN","FEC_DISPERSION","ID_CONCESIONARIO_LIQ","ORDEN","CONCEPTO","ORI_IDBANCO","ORI_TIPOCUENTA","ORI_CUENTA","ORI_NIT","DES_IDBANCO","DES_TIPOCUENTA","DES_CUENTA","DES_NIT","INDTIPO","USUARIO_PROCESO","FECHA_PROCESO","VALOR","DEB_CTA_CON","DEB_CEN_COS","DEB_NIT_TER","CRE_CTA_CON","CRE_CEN_COS","CRE_NIT_TER","CONCEPTO_CON","ID_CONCESIONARIO_PRO","IDMUNICIPIO"
    from recaudo_externo_disp;

prompt
prompt Creating view VW_DISTRFSIMITEXTERNOFEC
prompt ======================================
prompt
create or replace force view simit.vw_distrfsimitexternofec as
select
      fec_corte_ini,
      fec_corte_fin,
      fec_dispersion,
      r.id_concesionario_liq,
      orden,
      concepto,
      ori_idbanco,
      ori_tipocuenta,
      ori_cuenta,
      ori_nit,
      des_idbanco,
      des_tipocuenta,
      desencriptar(des_cuenta) as des_cuenta ,
      des_nit,
      indtipo,
      usuario_proceso,
      fecha_proceso,
      valor,
      c.nombre as Concesionario,
      bdes.nombre as BancoDes,
      bori.nombre as BancoOri,
      r.idmunicipio
from vw_recaudo_externo_disp r, concesionario c, banco bdes, banco bori
where r.id_concesionario_liq = c.idconcesionario
and r.ori_idbanco = bori.idbanco
and r.des_idbanco = bdes.idbanco;

prompt
prompt Creating view VW_IDENTDEV
prompt =========================
prompt
create or replace force view simit.vw_identdev as
select 0 as identificacion, ' TODOS ' as nombre from dual
  union
  select identificacion, ( identificacion  || '-' || nombre ) as nombre
    from novdevolucion
    order by 1;

prompt
prompt Creating view VW_INDTIPO
prompt ========================
prompt
create or replace force view simit.vw_indtipo as
select 'POLCA' as indTipo, 'POLCA' as nombre

    from dual

union

  select 'SIMIT' as indTipo, 'SIMIT' as nombre

    from dual;

prompt
prompt Creating view VW_LIQSIMITEXTERNO
prompt ================================
prompt
create or replace force view simit.vw_liqsimitexterno as
select
       a.cta_recaudo "CuentaRecaudo",
       b.fec_tran "FechaRecaudo",
       a.fec_corte "FechaProceso",
       a.fec_dispersion "FechaDispersion",
       a.fec_dispersion_con "FecDispCon",
       b.oficina_origen "Oficina",
       a.num_liquidacion "NumeroLiquidacion",
       ('''' || b.num_comparendo) "Comparendo",
       b.fec_comparendo "FechaComp",
       b.identificacion "Identificacion",
       a.idmunicipio "Divipo",
       m.nombre "Municipio",
       d.nombre "Departamento",
       a.indtipo "TipoRecaudo",
       a.id_concesionario_liq "IdConcesionarioLiquidador",
       a.id_concesionario_pro "IdConcesionarioZon",
       a.validador_fecha "Validador",
       a.indfecha2002 "Fecha2002",
       a.valor_total "VRecaudo",
       a.valor_adicional "VAdicional",
       a.s_valor_1 "VBase",
       a.s_valor_2 "VSimitBase",
       a.s_valor_4 "VCLiquidador",
       a.s_valor_3 "VSimit",
       a.s_valor_6 "VFCSimt",
       a.s_valor_5 "VFCConcesionario",
       a.s_valor_7 "VEquilibrio",
       0 "EE18",
       0 "EE2",
       0 "VSevial3",
       0 "VSevial27",
       0 "VIva27",
       0 "VFCM18",
       0 "VIva18",
       0 "VPolca",
       0 "VTimbre27",
       0 "VTimbre27_18",
       0 "VRetencion27",
       a.s_valor_11 "VOperadorCon",
       a.s_valor_12 "VFCMCon",
       a.s_valor_19 "VTercero1",
       a.s_valor_21 "VTercero2",
       a.s_valor_23 "VTercero3",
       a.s_valor_26 "VMunicipio",
       a.s_valor_10 "VAcuerdo",
       a.s_valor_14 "VIVACon",
       a.s_valor_15 "VTimbreCon",
       a.s_valor_16 "VRetencionContConc",
       a.s_valor_30 "VTimbreContConc",
       a.idbanco "BancoRec"
from recaudo_externo_liquidacion a, recaudo_externo b, municipio m, departamento d
where a.id_recaudo_externo = b.id_recaudo_externo
and m.idmunicipio = a.idmunicipio
and m.iddepartamento = d.iddepartamento
and a.indtipo = 'SIMIT'
union
select
       a.cta_recaudo "CuentaRecaudo",
       b.fec_tran "FechaRecaudo",
       a.fec_corte "FechaProceso",
       a.fec_dispersion "FechaDispersion",
       a.fec_dispersion_con "FecDispCon",
       b.oficina_origen "Oficina",
       a.num_liquidacion "NumeroLiquidacion",
       ('''' || b.num_comparendo) "Comparendo",
       b.fec_comparendo "FechaComp",
       b.identificacion "Identificacion",
       a.idmunicipio "Divipo",
       m.nombre "Municipio",
       d.nombre "Departamento",
       a.indtipo "TipoRecaudo",
       a.id_concesionario_liq "IdConcesionarioLiquidador",
       a.id_concesionario_pro "IdConcesionarioZon",
       a.validador_fecha "Validador",
       a.indfecha2002 "Fecha2002",
       a.valor_total "VRecaudo",
       a.valor_adicional "VAdicional",
       a.p_valor_1 "VBase",
       a.p_valor_2 "VSimitBase",
       a.p_valor_4 "VCLiquidador",
       a.p_valor_3 + a.p_valor_8 "VSimit",
       a.p_valor_6 "VFCSimt",
       a.p_valor_5 "VFCConcesionario",
       decode(a.id_concesionario_liq,5, 0, a.p_valor_7 ) "VEquilibrio",
       decode(a.id_concesionario_liq,5, a.p_valor_7,  0 ) "EE18",
       a.p_valor_10 "EE2",
       a.p_valor_9 "VSevial3",
       a.p_valor_14 "VSevial27",
       a.p_valor_18 "VIva27",
       a.p_valor_13 "VFCM18",
       a.p_valor_16 "VIva18",
       a.p_valor_12 - a.p_valor_18 - a.p_valor_16 "VPolca",
       a.p_valor_20 "VTimbre27",
       a.p_valor_17 "VTimbre27_18",
       a.p_valor_19 "VRetencion27",
       a.p_valor_24 "VOperadorCon",
       a.p_valor_25 "VFCMCon",
       a.p_valor_32 "VTercero1",
       a.p_valor_34 "VTercero2",
       a.p_valor_36 "VTercero3",
       a.p_valor_39 "VMunicipio",
       a.p_valor_23 "VAcuerdo",
       a.p_valor_27 "VIVACon",
       a.p_valor_28 "VTimbreCon",
       a.p_valor_29 "VRetencionContConc",
       a.p_valor_44 "VTimbreContConc",
       a.idbanco "BancoRec"
from recaudo_externo_liquidacion a, recaudo_externo b, municipio m, departamento d
where a.id_recaudo_externo = b.id_recaudo_externo
and m.idmunicipio = a.idmunicipio
and m.iddepartamento = d.iddepartamento
and a.indtipo = 'POLCA';

prompt
prompt Creating view VW_LIQSIMITEXTERNO_VOBO
prompt =====================================
prompt
create or replace force view simit.vw_liqsimitexterno_vobo as
select "CuentaRecaudo","FechaRecaudo","FechaProceso","FechaDispersion","FecDispCon","Oficina","NumeroLiquidacion","Comparendo","FechaComp","Identificacion","Divipo","Municipio","Departamento","TipoRecaudo","IdConcesionarioLiquidador","IdConcesionarioZon","Validador","Fecha2002","VRecaudo","VAdicional","VBase","VSimitBase","VCLiquidador","VSimit","VFCSimt","VFCConcesionario","VEquilibrio","EE18","EE2","VSevial3","VSevial27","VIva27","VFCM18","VIva18","VPolca","VTimbre27","VTimbre27_18","VRetencion27","VOperadorCon","VFCMCon","VTercero1","VTercero2","VTercero3","VMunicipio","VAcuerdo","VIVACon","VTimbreCon","VRetencionContConc","VTimbreContConc","BancoRec" from vw_liqsimitexterno;

prompt
prompt Creating view VW_MUNICIPIO_NOV
prompt ==============================
prompt
CREATE OR REPLACE FORCE VIEW SIMIT.VW_MUNICIPIO_NOV AS
SELECT SIMIT.MUNICIPIO.IDMUNICIPIO,
(  SIMIT.MUNICIPIO.NOMBRE || ' - ' ||  simit.departamento.nombre || ' - ' || SIMIT.MUNICIPIO.IDMUNICIPIO  ) NOMBRE
FROM SIMIT.MUNICIPIO, simit.departamento
where simit.municipio.iddepartamento = simit.departamento.iddepartamento
union
select n.idmunicipio,
(n.nombre || ' - ' ||  d.nombre || ' - ' || n.idmunicipio ) nombre
from novmunicipio n , departamento d
where n.iddepartamento = d.iddepartamento
and n.tiponov = '01'
and n.fechaaplicacion is null
order by nombre;

prompt
prompt Creating view VW_MUNICIPIOTRF
prompt =============================
prompt
create or replace force view simit.vw_municipiotrf as
select 'TODOS' as idMunicipio, '   TODOS' as nombre from dual
  union
  select 'SIN MUNICIPIO' as idMunicipio, '  SIN MUNICIPIO' as nombre from dual
  union
  select '00000001' as idMunicipio, ' IGNORAR DEPOSITO' as nombre from dual
  union
  select m.idmunicipio, ( m.nombre || '-' || d.nombre || '-' || m.idmunicipio ) as nombre from municipio m,  departamento d
  where m.iddepartamento = d.iddepartamento
  and m.idmunicipio <> '00000000'
  order by  2;

prompt
prompt Creating view VW_PCONSIGANDO
prompt ============================
prompt
create or replace force view simit.vw_pconsigando as
select 10 as porcentaje, '10' as nombre
    from dual
union
  select 45 as porcentaje, '45' as nombre
    from dual
union
  select 55 as porcentaje, '55' as nombre
    from dual;

prompt
prompt Creating view VW_PERIODOTRF
prompt ===========================
prompt
create or replace force view simit.vw_periodotrf as
select '999999' as periodo, 'TODOS' as nombre from dual
  union
  select periodo, periodo as nombre
    from trxsinidentificar
     group by periodo
    order by 1 desc;

prompt
prompt Creating view VW_RECAUDO_EXTERNO_LIQUIDACION
prompt ============================================
prompt
create or replace force view simit.vw_recaudo_externo_liquidacion as
select "ID_RECAUDO_EXTERNO_LIQUIDACION","ID_RECAUDO_EXTERNO","ID_CONCESIONARIO_PRO","ID_CONCESIONARIO_LIQ","INDTIPO","USUARIO_PROCESO","FECHA_PROCESO","IDMUNICIPIO","FEC_CORTE","IND_PROCESO","NUM_LIQUIDACION","DIAS_DISPERSION","FREC_DISPERSION","FEC_DISPERSION","IDBANCO","SMDLV","INDRETROACTIVIDAD","VALOR_TOTAL","VALOR_ADICIONAL","VALIDADOR_FECHA","INDFECHA2002","S_VALOR_0","S_VALOR_1","S_VALOR_2","S_VALOR_3","S_VALOR_4","S_VALOR_5","S_VALOR_6","S_VALOR_7","S_VALOR_8","S_VALOR_9","S_VALOR_10","S_VALOR_11","S_VALOR_12","S_VALOR_13","S_VALOR_14","S_VALOR_15","S_VALOR_16","S_VALOR_17","S_VALOR_18","S_VALOR_19","S_VALOR_20","S_VALOR_21","S_VALOR_22","S_VALOR_23","S_VALOR_24","S_VALOR_25","S_VALOR_26","S_VALOR_27","S_VALOR_28","CTA_RECAUDO","IND_BASE_TER1","IND_BASE_TER2","IND_BASE_TER3","IND_BASE_TER4","POR_BASE_TER1","POR_BASE_TER2","POR_BASE_TER3","POR_BASE_TER4","S_VALOR_29","NOM_TER1","NOM_TER2","NOM_TER3","NOM_TER4","P_VALOR_1","P_VALOR_2","P_VALOR_3","P_VALOR_4","P_VALOR_5","P_VALOR_6","P_VALOR_7","P_VALOR_8","P_VALOR_9","P_VALOR_10","P_VALOR_11","P_VALOR_12","P_VALOR_13","P_VALOR_14","P_VALOR_15","P_VALOR_16","P_VALOR_17","P_VALOR_18","P_VALOR_19","P_VALOR_20","P_VALOR_21","P_VALOR_22","P_VALOR_23","P_VALOR_24","P_VALOR_25","P_VALOR_26","P_VALOR_27","P_VALOR_28","P_VALOR_29","P_VALOR_30","P_VALOR_31","P_VALOR_32","P_VALOR_33","P_VALOR_34","P_VALOR_35","P_VALOR_36","P_VALOR_37","P_VALOR_38","P_VALOR_39","P_VALOR_40","P_VALOR_41","P_VALOR_42","P_VALOR_43","S_VALOR_30","P_VALOR_44","FEC_DISPERSION_CON","NIT_MUNICIPIO","NIT_TERCERO1","NIT_TERCERO2","NIT_TERCERO3","NIT_TERCERO4","NIT_CONCESIONARIO","NIT_FONDO","NIT_CONCESIONARIOZON"
    from recaudo_externo_liquidacion;

prompt
prompt Creating view VW_REC_LOC_HIST_DEUDA
prompt ===================================
prompt
create or replace force view simit.vw_rec_loc_hist_deuda as
select a.ID_SECRETARIA_DEUDA,
       a.polca_s,
       b.divipo,
       b.polca_f,
       a.TOTAL_RECAUDO,
       a.pago_simit,
       b.pago_finan
  from (select ID_SECRETARIA_DEUDA, polca polca_s, sum(TOTAL_RECAUDO) TOTAL_RECAUDO, SUM(xfcm) pago_simit
          from rec_loc_hist
         where POLCA = 'N'
           AND rec_loc_hist.fecha_contable < trunc(Last_day(Add_months(sysdate,-2))+1)
         GROUP BY ID_SECRETARIA_DEUDA, polca
        --ORDER BY id_secretaria_origen, polca
        UNION
        select ID_SECRETARIA_DEUDA, polca polca_s, sum(TOTAL_RECAUDO) TOTAL_RECAUDO, SUM(x55) pago_simit
          from rec_loc_hist
         where POLCA = 'S'
           AND rec_loc_hist.fecha_contable < trunc(Last_day(Add_months(sysdate,-2))+1)
         GROUP BY ID_SECRETARIA_DEUDA, polca
        --ORDER BY id_secretaria_origen, polca
        ) a
  FULL OUTER JOIN (select p.divipo,
                          p.polca polca_f,
                          SUM(p.valor_recaudo) pago_finan
                     from rec_loc_hist_pago p
                    GROUP BY p.divipo, p.polca
                   --ORDER BY p.divipo, p.polca
                   ) b on b.divipo = a.ID_SECRETARIA_DEUDA
                      and b.polca_f = a.polca_s
--where a.id_secretaria_origen = '73449000'
 order by 1, 2, 3, 4;

prompt
prompt Creating view VW_REC_LOC_HIST_DEUDA_T
prompt =====================================
prompt
create or replace force view simit.vw_rec_loc_hist_deuda_t as
select a.ID_SECRETARIA_DEUDA,
       a.polca_s,
       b.divipo,
       b.polca_f,
       a.anho anho_S,
       b.anho anho_f,
       a.TOTAL_RECAUDO,
       a.pago_simit,
       b.pago_finan
  from (select ID_SECRETARIA_DEUDA, polca polca_s, to_char(fecha_contable,'YYYY') ANHO, sum(TOTAL_RECAUDO) TOTAL_RECAUDO, SUM(x55) pago_simit
          from rec_loc_hist
         where POLCA = 'S'
           AND rec_loc_hist.fecha_contable < trunc(Last_day(Add_months(sysdate,-2))+1)
--           AND ID_SECRETARIA_DEUDA = '05101000'
         GROUP BY ID_SECRETARIA_DEUDA, polca, to_char(fecha_contable,'YYYY')
        --ORDER BY id_secretaria_origen, polca
        ) a
  FULL OUTER JOIN (select p.divipo, p.polca polca_f, P.ANHO, SUM(p.valor_recaudo) pago_finan
                      from rec_loc_hist_pago_temp p
--                    WHERE p.divipo = '05101000'
                     GROUP BY p.divipo, p.polca, P.ANHO
                   --ORDER BY p.divipo, p.polca
                   ) b on b.divipo = a.ID_SECRETARIA_DEUDA
                      and b.polca_f = a.polca_s
                      AND b.anho = a.anho
--where a.id_secretaria_origen = '73449000'
 order by 1, 2, 3, 4, 5, 6;

prompt
prompt Creating view VW_RECLOC_POLCA
prompt =============================
prompt
create or replace force view simit.vw_recloc_polca as
select
       recaudo_local_liquidacion.indorigen "Origen",
       recaudo_local_liquidacion.indTipo "Tipo",
       banco.nombre "Banco",
       concesionario.nombre "Operador",
       recaudo_local_liquidacion.idMunicipio "DIVIPO",
       municipio.nombre "Municipio",
       departamento.nombre "Departamento",
       recaudo_local_liquidacion.cta_recaudo "Cuenta Recaudo",
       recaudo_local_liquidacion.fec_corte "Fecha Corte",
       recaudo_local_liquidacion.fec_tran "Fecha Transaccion",
       recaudo_local_liquidacion.oficina_origen "Oficina",
       recaudo_local_liquidacion.valor_total "Vr Recaudo",
       recaudo_local_liquidacion.fec_dispersion "Fecha Dispersion",
       recaudo_local_liquidacion.s_valor_0 "Comision Recaudo",
       recaudo_local_liquidacion.p_valor_7 "Simit PM",
       recaudo_local_liquidacion.p_valor_8 "Concesionario",
       recaudo_local_liquidacion.p_valor_9 "Fondo Concesionario",
       recaudo_local_liquidacion.p_valor_10 "Fondo Simit",
       recaudo_local_liquidacion.p_valor_11 "Equilibrio economico PM",
       recaudo_local_liquidacion.p_valor_12 "Simt PP",
       recaudo_local_liquidacion.p_valor_13 "Sevial PP",
       recaudo_local_liquidacion.p_valor_14 "Equilibrio economico PP",
       recaudo_local_liquidacion.p_valor_15 "Polca",
       recaudo_local_liquidacion.p_valor_16 "Fcm CP",
       recaudo_local_liquidacion.p_valor_17 "Sevial CP",
       recaudo_local_liquidacion.p_valor_18 "Equilibrio economico CP",
       ( recaudo_local_liquidacion.p_valor_13 + recaudo_local_liquidacion.p_valor_17 ) "Sevial",
       recaudo_local_liquidacion.p_valor_19 "IvaFCM",
       recaudo_local_liquidacion.p_valor_20 "IvaSevial",
       recaudo_local_liquidacion.p_valor_21 "Retencion Sevial",
       recaudo_local_liquidacion.p_valor_22 "Timbre sevial",
       recaudo_local_liquidacion.p_valor_23 "Timbre fcm",
       recaudo_local_liquidacion.p_valor_24 "Neto Sevial",
       recaudo_local_liquidacion.p_valor_25 "Neto Concesionario",
       recaudo_local_liquidacion.p_valor_26 "Neto FCM",
       recaudo_local_liquidacion.p_valor_27 "Neto Simit",
       recaudo_local_liquidacion.p_valor_28 "Neto Equilibrio economico",
      recaudo_local_liquidacion.ind_proceso
   from recaudo_local_liquidacion,
       banco,
       municipio,
       departamento,
       concesionario
 where banco.idbanco = recaudo_local_liquidacion.idbanco
       and municipio.idmunicipio = recaudo_local_liquidacion.idmunicipio
       and departamento.iddepartamento = recaudo_local_liquidacion.iddepartamento
       and concesionario.idconcesionario = recaudo_local_liquidacion.idconcesionario
       and recaudo_local_liquidacion.indtipo = 'POLCA'
       and recaudo_local_liquidacion.idbanco = '02'
--       and TO_CHAR(recaudo_local_liquidacion.fec_corte,'YYYY/MM/DD') >= $P{P_FEC_INI}
--       and TO_CHAR(recaudo_local_liquidacion.fec_corte,'YYYY/MM/DD') <= $P{P_FEC_FIN}
 order by  recaudo_local_liquidacion.ind_proceso, recaudo_local_liquidacion.idbanco, recaudo_local_liquidacion.idconcesionario, recaudo_local_liquidacion.fec_corte,  recaudo_local_liquidacion.idmunicipio;

prompt
prompt Creating view VW_RECLOC_POLCA_TOT
prompt =================================
prompt
create or replace force view simit.vw_recloc_polca_tot as
select
t.IDBANCO,
max(b.nombre) Banco,
t.IDCONCESIONARIO,
max(c.nombre) Concesionario,
SUM(t.VALOR_TOTAL) VALOR_RECAUDO,
SUM(t.P_VALOR_15) POLCA,
SUM(t.P_VALOR_17) SEVIAL_2_7,
SUM(t.P_VALOR_16) FCM_1_8,
SUM(t.P_VALOR_27) FCM_3_25,
SUM(t.P_VALOR_13) SEVIAL_3_0,
SUM(t.P_VALOR_25) OPERADOR_3_25,
SUM(t.P_VALOR_9 + t.P_VALOR_10 ) FONDO_0_5,
SUM(t.P_VALOR_20) IVA_2_7,
SUM(t.P_VALOR_19) IVA_1_8
from recaudo_local_liquidacion t, banco b, concesionario c
where t.indtipo = 'POLCA'
and t.ind_proceso = 1
and t.idbanco = b.idbanco
and t.idconcesionario = c.idconcesionario
--and to_char(t.fec_corte, 'yyyy/mm/dd') >= $P{P_FEC_INI}
--and to_char(t.fec_corte, 'yyyy/mm/dd') <= $P{P_FEC_FIN}
GROUP BY t.IDBANCO, t.IDCONCESIONARIO
ORDER BY t.IDBANCO, t.IDCONCESIONARIO;

prompt
prompt Creating view VW_RECLOC_SIMIT_TOT
prompt =================================
prompt
create or replace force view simit.vw_recloc_simit_tot as
select
       r.idbanco,
       max(b.nombre) banco,
       r.idconcesionario,
       max(c.nombre) concesionario,
       sum(r.valor_total) recuado,
       sum(r.s_valor_0) comision,
       sum(r.s_valor_1) simit25,
       sum(r.s_valor_2) concesionario65,
       sum(r.s_valor_3) fondo_con5,
       sum(r.s_valor_4) fondo_simit5,
       sum(r.s_valor_5) equilibrio,
       sum(r.s_valor_6) neto_concesionario
  from recaudo_local_liquidacion r,
       banco b,
       concesionario c
 where b.idbanco = r.idbanco
       and c.idconcesionario = r.idconcesionario
       and r.indtipo = 'SIMIT'
       and r.ind_proceso = 1
--       and to_char(r.fec_corte, 'yyyy/mm/dd') >= $P{P_FEC_INI}
--       and to_char(r.fec_corte, 'yyyy/mm/dd') <= $P{P_FEC_FIN}
 group by r.idbanco, r.idconcesionario
 order by r.idbanco, r.idconcesionario;

prompt
prompt Creating view VW_RPT_MUNICIPIOS
prompt ===============================
prompt
create or replace force view simit.vw_rpt_municipios as
select m.idmunicipio,
       m.nit_m,
       m.nombre,
       m.iddepartamento,
       m.idconcesionario,
       m.correo,
       m.indretroactividad,
       m.idbanco,
       m.tipocuenta,
       m.cuenta,
       m.nit_cta,
       m.indliq_s_ext,
       m.indliq_s_local,
       m.indliq_p_ext,
       m.indliq_p_local,
       m.indacuerdopago_2002,
       pm.municipio_s,
       pm.fcm_contravencional_s,
       pm.conces_contravencional_s,
       pm.acuerdopago_s,
       pm.municipio_p,
       pm.fcm_contravencional_p,
       pm.conces_contravencional_p,
       pm.acuerdopago_p
 from p_dispersion_municipio pm, municipio m
 where pm.idmunicipio = m.idmunicipio;

prompt
prompt Creating view VW_RPT1_DETALLE
prompt =============================
prompt
CREATE OR REPLACE FORCE VIEW SIMIT.VW_RPT1_DETALLE AS
SELECT
     RECAUDO_EXTERNO_LIQUIDACION."FEC_CORTE" AS FEC_CORTE,
     'EXTERNO' AS TIPOREC,
     RECAUDO_EXTERNO_LIQUIDACION."INDTIPO" AS IND_TIPO,
     RECAUDO_EXTERNO_LIQUIDACION."IDMUNICIPIO" AS IDMUNICIPIO,
     MUNICIPIO."NOMBRE" AS MUNICIPIO_NOMBRE,
     RECAUDO_EXTERNO_LIQUIDACION."ID_CONCESIONARIO_LIQ" AS IDCONCESIONARIO,
     CONCESIONARIO."NOMBRE" AS CONCESIONARIO_NOMBRE,
     RECAUDO_EXTERNO_LIQUIDACION."VALOR_TOTAL" AS VALOR_TOTAL,
     (CASE WHEN RECAUDO_EXTERNO_LIQUIDACION."INDTIPO" = 'SIMIT' THEN RECAUDO_EXTERNO_LIQUIDACION.VALOR_TOTAL
           WHEN RECAUDO_EXTERNO_LIQUIDACION."INDTIPO" = 'POLCA' THEN RECAUDO_EXTERNO_LIQUIDACION.VALOR_TOTAL
           ELSE 0
      END ) AS  VALOR_OT

FROM
     "SIMIT"."MUNICIPIO" MUNICIPIO INNER JOIN "SIMIT"."RECAUDO_EXTERNO_LIQUIDACION" RECAUDO_EXTERNO_LIQUIDACION ON MUNICIPIO."IDMUNICIPIO" = RECAUDO_EXTERNO_LIQUIDACION."IDMUNICIPIO"
     INNER JOIN "SIMIT"."CONCESIONARIO" CONCESIONARIO ON RECAUDO_EXTERNO_LIQUIDACION."ID_CONCESIONARIO_LIQ" = CONCESIONARIO."IDCONCESIONARIO"
     where ind_proceso = 1
UNION
SELECT
     RECAUDO_LOCAL_LIQUIDACION."FEC_CORTE" AS FEC_CORTE,
     'LOCAL' AS TIPOREC,
     RECAUDO_LOCAL_LIQUIDACION."INDTIPO" AS IND_TIPO,
     RECAUDO_LOCAL_LIQUIDACION."IDMUNICIPIO" AS IDMUNICIPIO,
     MUNICIPIO."NOMBRE" AS MUNICIPIO_NOMBRE,
     RECAUDO_LOCAL_LIQUIDACION."IDCONCESIONARIO" AS IDCONCESIONARIO,
     CONCESIONARIO."NOMBRE" AS CONCESIONARIO_NOMBRE,
     RECAUDO_LOCAL_LIQUIDACION."VALOR_TOTAL" AS VALOR_TOTAL,
     0 as VALOR_OT
FROM
     "SIMIT"."MUNICIPIO" MUNICIPIO INNER JOIN "SIMIT"."RECAUDO_LOCAL_LIQUIDACION" RECAUDO_LOCAL_LIQUIDACION ON MUNICIPIO."IDMUNICIPIO" = RECAUDO_LOCAL_LIQUIDACION."IDMUNICIPIO"
     INNER JOIN "SIMIT"."CONCESIONARIO" CONCESIONARIO ON RECAUDO_LOCAL_LIQUIDACION."IDCONCESIONARIO" = CONCESIONARIO."IDCONCESIONARIO"
     where ind_proceso = 1;

prompt
prompt Creating view VW_SIMIT_VALIDADOR_COMPARENDO
prompt ===========================================
prompt
CREATE OR REPLACE FORCE VIEW SIMIT.VW_SIMIT_VALIDADOR_COMPARENDO AS
SELECT idmunicipio AS divipo, idvalidador AS id_codigo,
          fecha_ini AS fecha_desde, fecha_fin AS fecha_hasta,
          DECODE (indtipo, 'SIMIT', 'N', 'POLCA', 'S') AS polca,
          0 AS participmunicipio, 0 AS participom1, 0 AS participom2,
          0 AS particippcc, 0 AS particippcf
     FROM validador_fecha;

prompt
prompt Creating view VW_SOPORTES
prompt =========================
prompt
create or replace force view simit.vw_soportes as
select
ID_RECAUDO_LOCAL_AJUSTES,
ID_DOCUMENTO,
NOMBREDOCUMENTO,
NOMBREARCHIVO,
EXTENSIONARCHIVO
from simit.soporteajustesrecloc;

prompt
prompt Creating view VW_T_CASOBQUILLA
prompt ==============================
prompt
create or replace force view simit.vw_t_casobquilla as
select 'Metrotransito - PONAL' Secretaria, count(*) cantidad, sum(b.total_recaudo) total_recaudo, sum(b.XFCM) XFCM, sum(b.X55) X55, sum(b.XMUN) XMUN from rec_loc_hist_bquilla b where to_char(b.fecha_com,'yymmdd') <= '081224' and b.POLCA = 'N' union
select 'Secretaria Barranquilla - PONAL', count(*) cantidad, sum(b.total_recaudo), sum(b.XFCM), sum(b.X55), sum(b.XMUN) from rec_loc_hist_bquilla b where to_char(b.fecha_com,'yymmdd') > '081224' and b.POLCA = 'N'  union
select 'Sin identificar - PONAL', count(*) cantidad, sum(b.total_recaudo), sum(b.XFCM), sum(b.X55), sum(b.XMUN) from rec_loc_hist_bquilla b where b.fecha_com is null and b.POLCA = 'N' UNION
select 'Metrotransito - POLCA' Secretaria, count(*) cantidad, sum(b.total_recaudo) total_recaudo, sum(b.XFCM) XFCM, sum(b.X55) X55, sum(b.XMUN) XMUN from rec_loc_hist_bquilla b where to_char(b.fecha_com,'yymmdd') <= '081224' and b.POLCA = 'S' union
select 'Secretaria Barranquilla - POLCA', count(*) cantidad, sum(b.total_recaudo), sum(b.XFCM), sum(b.X55), sum(b.XMUN) from rec_loc_hist_bquilla b where to_char(b.fecha_com,'yymmdd') > '081224' and b.POLCA = 'S'  union
select 'Sin identificar - POLCA', count(*) cantidad, sum(b.total_recaudo), sum(b.XFCM), sum(b.X55), sum(b.XMUN) from rec_loc_hist_bquilla b where b.fecha_com is null and b.POLCA = 'S';

prompt
prompt Creating view VW_TRANSFERLOCAL
prompt ==============================
prompt
create or replace force view simit.vw_transferlocal as
select t.fec_corte_ini,
t.fec_corte_fin,
t.fec_dispersion,
t.concepto,
t.ori_idbanco,
t.ori_tipocuenta,
t.ori_cuenta,
t.ori_nit,
t.des_idbanco,
t.des_tipocuenta,
desencriptar(t.des_cuenta) des_cuenta,
t.des_nit,
t.valor,
t.enviadobanco,
t.referenciatrf,
t.estadotrf,
t.fechaenvio,
t.fechaconfirmada,
t.fechadevolucion,
t.motivodevolucion,
t.codigodevolucion,
t.fechaenvioach,
bo.nombre nombreBancoO,
bd.nombre nombreBancoD,
c.indtipo
from recaudo_local_disp_tot t, banco bo, banco bd, cta_recaudo_fcm c
where t.ori_idbanco = bo.idbanco
and t.des_idbanco = bd.idbanco
and t.ori_idbanco  = c.idbanco
and t.ori_cuenta = c.cuenta;

prompt
prompt Creating view VW_VALIDA_DULICIDAD
prompt =================================
prompt
create or replace force view simit.vw_valida_dulicidad as
select num_liquidacion, count(*) cantidad
  from recaudo_externo_liquidacion
group by num_liquidacion
having count(*) > 1;

prompt
prompt Creating view VW_VALORTRF
prompt =========================
prompt
create or replace force view simit.vw_valortrf as
select 0 as valorTrx, 'TODOS' as nombre from dual
  union
  select valortrx, to_char(valortrx,'999,999,999,999,999.99') as nombre
    from trxsinidentificar
    group by valortrx
    order by 1 asc;

prompt
prompt Creating view VW_V_DISPERCIONMUNI
prompt =================================
prompt
create or replace force view simit.vw_v_dispercionmuni as
select municipio.idmunicipio DIVIPO,
       municipio.nombre NOMBRE,
       dias_dispersion.idbanco IDBANCO,
       banco.nombre BANCO,
       dias_dispersion.dias_dispersion_se DiasSIMITExterno,
       decode(dias_dispersion.frec_dispersion_se,0,'Ninguno',1,'Semanal',2,'Quincenal',3,'Mensual') FrecSIMITExterno,
       dias_dispersion.dias_dispersion_pe DiasPOLCAExterno,
       decode(dias_dispersion.frec_dispersion_pe,0,'Ninguno',1,'Semanal',2,'Quincenal',3,'Mensual')  FrecPOLCAExterno
  from municipio,
       dias_dispersion,
       banco
 where municipio.idmunicipio = dias_dispersion.idmunicipio
       and banco.idbanco = dias_dispersion.idbanco
order by 1, 3;

prompt
prompt Creating view VW_V_OT_P_DISTRIBUCION
prompt ====================================
prompt
create or replace force view simit.vw_v_ot_p_distribucion as
select municipio.idmunicipio,
       municipio.nombre nombrem,
       concesionario.idconcesionario,
       concesionario.nombre nombrec,
       p_dispersion_municipio.municipio_s||'%' municipio_sIMIT ,
       p_dispersion_municipio.conces_contravencional_s||'%' conces_contravencional_sIMIT,
       p_dispersion_municipio.fcm_contravencional_s||'%' fcm_contravencional_simit,
       p_dispersion_municipio.acuerdopago_s||'%' acuerdopago_simit,
       p_dispersion_municipio.municipio_p||'%' municipio_polca ,
       p_dispersion_municipio.fcm_contravencional_p||'%' fcm_contravencional_polca ,
       p_dispersion_municipio.conces_contravencional_p||'%' conces_contravencional_polca,
       p_dispersion_municipio.acuerdopago_p||'%' acuerdopago_polca
  from municipio,
       concesionario,
       p_dispersion_municipio
 where concesionario.idconcesionario = municipio.idconcesionario
       and municipio.idmunicipio = p_dispersion_municipio.idmunicipio
order by 1;

prompt
prompt Creating view VW_V_TERCEROMUNI
prompt ==============================
prompt
create or replace force view simit.vw_v_terceromuni as
select municipio.idmunicipio DIVIPO,
       municipio.nombre NOMBREm,
       tercero.num_tercero TERCERO,
       tercero.nombre NOMBREt,
       decode(tercero.ind_base,1,'Vr Municipio 100%',2,'Vr Adicional',3,'Vr Recaudo sin Adicional',4,'Vr Neto Municipio') INDICADOR,
       base_s||'%' BASELIQUIDACION_SIMIT,
       base_p||'%' BASELIQUIDACION_POLCA
  from tercero,
       municipio,
       banco
 where municipio.idmunicipio = tercero.idmunicipio
       and banco.idbanco = tercero.idbanco
ORDER BY 1,3;

prompt
prompt Creating java source SEGURIDAD
prompt ==============================
prompt
create or replace and compile java source named SIMIT.seguridad as
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Cipher;

public class Seguridad
{
  public static void entry()
  {
  }
  
  public static String Encriptar(String cadena, String semilla )
  {
  
  try {   
   String claveEncriptada = null;  
   String claveOriginal = cadena;  

   SecretKeySpec desKey = new SecretKeySpec(new String((semilla.trim().concat("99999999")).substring(0, 8)).getBytes(), "DES");  
   Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");  
   cipher.init(Cipher.ENCRYPT_MODE, desKey);  

   byte[] claveEncriptadaBytes = cipher.doFinal( claveOriginal.getBytes() );  

   claveEncriptada = encode( claveEncriptadaBytes );
   
   return claveEncriptada;
   }
   catch (Exception error)
   {
    return null;
   }
  }
  
  public static String DesEncriptar(String cadena, String semilla )
  {

   try {
   String cadenaDesencriptada = null;  
   byte[] claveDesc = decode( cadena );  

  SecretKeySpec desKey = new SecretKeySpec(new String((semilla.trim().concat("99999999")).substring(0, 8)).getBytes(), "DES");  

  Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");  

  cipher.init(Cipher.DECRYPT_MODE, desKey);  

  cadenaDesencriptada = new String(cipher.doFinal(claveDesc)); 
  return cadenaDesencriptada;
  
  }
  catch (Exception error) 
  {
   return null;
  }
  }
  
  private static char[]  map1 = new char[64];
   static {
      int i=0;
      for (char c='A'; c<='Z'; c++) map1[i++] = c;
      for (char c='a'; c<='z'; c++) map1[i++] = c;
      for (char c='0'; c<='9'; c++) map1[i++] = c;
      map1[i++] = '+'; map1[i++] = '/'; }

// Mapping table from Base64 characters to 6-bit nibbles.
   private static byte[] map2 = new byte[128];
     static {
      for (int i=0; i<map2.length; i++) map2[i] = -1;
      for (int i=0; i<64; i++) map2[map1[i]] = (byte)i; 
      }

    public static String encode (byte[] in) {
     int iOff = 0;
     int iLen = in.length;
     int oDataLen = (iLen*4+2)/3;       // output length without padding
     int oLen = ((iLen+2)/3)*4;         // output length including padding
     char[] out = new char[oLen];
     int ip = iOff;
     int iEnd = iOff + iLen;
     int op = 0;
     while (ip < iEnd) {
        int i0 = in[ip++] & 0xff;
        int i1 = ip < iEnd ? in[ip++] & 0xff : 0;
        int i2 = ip < iEnd ? in[ip++] & 0xff : 0;
        int o0 = i0 >>> 2;
        int o1 = ((i0 &   3) << 4) | (i1 >>> 4);
        int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
        int o3 = i2 & 0x3F;
        out[op++] = map1[o0];
        out[op++] = map1[o1];
        out[op] = op < oDataLen ? map1[o2] : '='; op++;
        out[op] = op < oDataLen ? map1[o3] : '='; op++; }
     return new String(out); 
   }

    
    public static byte[] decode (String cadena) {
    
    
       char[] in;
       int iOff;
       int iLen;
       in = cadena.toCharArray();
       iOff = 0;
       iLen = in.length;
    try {
    
      if (iLen%4 != 0) throw new IllegalArgumentException ("Length of Base64 encoded input string is not a multiple of 4.");
      
      while (iLen > 0 && in[iOff+iLen-1] == '=') iLen--;
      int oLen = (iLen*3) / 4;
      byte[] out = new byte[oLen];
      int ip = iOff;
      int iEnd = iOff + iLen;
      int op = 0;
      while (ip < iEnd) {
         int i0 = in[ip++];
         int i1 = in[ip++];
         int i2 = ip < iEnd ? in[ip++] : 'A';
         int i3 = ip < iEnd ? in[ip++] : 'A';

         if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
            throw new Exception ("Illegal character in Base64 encoded data.");

         int b0 = map2[i0];
         int b1 = map2[i1];
         int b2 = map2[i2];
         int b3 = map2[i3];
         if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
            throw new Exception ("Illegal character in Base64 encoded data.");
         int o0 = ( b0       <<2) | (b1>>>4);
         int o1 = ((b1 & 0xf)<<4) | (b2>>>2);
         int o2 = ((b2 &   3)<<6) |  b3;
         out[op++] = (byte)o0;
         if (op<oLen) out[op++] = (byte)o1;
         if (op<oLen) out[op++] = (byte)o2; 
       }
       return out; 
       }
       catch (Exception error)
       {
          return null;
       }
   
   }

}
/

prompt
prompt Creating java source SHELL
prompt ==========================
prompt
create or replace and compile java source named SIMIT.shell as
import java.io.*; public class Shell {
  public static void entry()
  {
  }
  
  public static String Run(String command)
  {
   try
      {
       if (command == null )
          throw new Exception("Parametro Vacio");
          
      if (command.equals("") )
          throw new Exception("Parametro Vacio");
       
       
       String[] comandos = command.split("&");
      
       String[] comandosIni = comandos[0].split(" ");
     
       String[] lineaComando = new String[comandos.length - 1 + comandosIni.length];
       
       for (int i=0; i<comandosIni.length; i++)
          lineaComando[i] = comandosIni[i];
       
       int i = comandosIni.length;
       
       for (int j=1; j<comandos.length; j++)
           lineaComando[i++] = comandos[j];
 
       
       Runtime rt = java.lang.Runtime.getRuntime();
       Process p = rt.exec(lineaComando);
       p.waitFor();
       int r = p.exitValue();
       
       if (r == 0){ 
          String resultado = ""; 
          for (i=0; i<lineaComando.length; i++)
          {
            resultado += lineaComando[i] + "*";
          }
          return "0:" + resultado;
       }
       else
          return "" + r + "   :" +  command;   
      
      }
      
   catch(Exception e)
   {
    return "999:" + e.getMessage();
   }
  }
}
/

prompt
prompt Creating package PK_CONTA_EXT
prompt =============================
prompt
create or replace package simit.PK_CONTA_EXT is

  PROCEDURE causa_gas_recaudo_externo(p_fec_ini_ano number,
                                      p_fec_ini_mes number,
                                      p_fec_ini_dia number,
                                      p_fec_fin_ano number,
                                      p_fec_fin_mes number,
                                      p_fec_fin_dia number,
                                      p_usuario     varchar2,
                                      p_error       OUT VARCHAR2);

  PROCEDURE causa_ing_recaudo_externo(p_fec_ini_ano number,
                                      p_fec_ini_mes number,
                                      p_fec_ini_dia number,
                                      p_fec_fin_ano number,
                                      p_fec_fin_mes number,
                                      p_fec_fin_dia number,
                                      p_usuario     varchar2,
                                      p_error       OUT VARCHAR2);

  PROCEDURE causa_ing_recaudo_local(p_fec_ini_ano number,
                                    p_fec_ini_mes number,
                                    p_fec_ini_dia number,
                                    p_fec_fin_ano number,
                                    p_fec_fin_mes number,
                                    p_fec_fin_dia number,
                                    p_usuario     varchar2,
                                    p_error       OUT VARCHAR2);

  PROCEDURE causa_gas_recaudo_local(p_fec_ini_ano number,
                                    p_fec_ini_mes number,
                                    p_fec_ini_dia number,
                                    p_fec_fin_ano number,
                                    p_fec_fin_mes number,
                                    p_fec_fin_dia number,
                                    p_usuario     varchar2,
                                    p_error       OUT VARCHAR2);

  PROCEDURE contabiliza_recaudo_externo(p_feccor_ini_ano number,
                                        p_feccor_ini_mes number,
                                        p_feccor_ini_dia number,
                                        p_usuario        varchar2,
                                        p_error          OUT VARCHAR2);

  PROCEDURE contabiliza_pago_externo(p_feccor_ini_ano number,
                                     p_feccor_ini_mes number,
                                     p_feccor_ini_dia number,
                                     p_usuario        varchar2,
                                     p_error          OUT VARCHAR2);
end PK_CONTA_EXT;
/

prompt
prompt Creating package PK_DEVOLACH
prompt ============================
prompt
create or replace package simit.PK_DEVOLACH is

PROCEDURE contabiliza_rechazo_ach(p_feccor_ini_ano number,
                                  p_feccor_ini_mes number,
                                  p_feccor_ini_dia number,
                                  p_feccor_fin_ano number,
                                  p_feccor_fin_mes number,
                                  p_feccor_fin_dia number,
                                  p_usuario        varchar2,
                                  p_error          OUT VARCHAR2);

PROCEDURE contabiliza_reenvio_ach(p_feccor_ini_ano number,
                                  p_feccor_ini_mes number,
                                  p_feccor_ini_dia number,
                                  p_usuario        varchar2,
                                  p_error          OUT VARCHAR2);
end PK_DEVOLACH;
/

prompt
prompt Creating package PK_ENVIO
prompt =========================
prompt
create or replace package simit.PK_ENVIO is

  -- Author  : USER
  -- Created : 01/09/2011 16:28:10
  -- Purpose : enviar a bancos

PROCEDURE envio_Banco_local(p_fec_ini_ano number,
                        p_fec_ini_mes number,
                        p_fec_ini_dia number,
                        p_idbanco     varchar2,
                        p_usuario     varchar2,
                        p_error       OUT VARCHAR2,
                        p_log         out varchar2);

PROCEDURE verLogEnvioAvvillasLoc(salida OUT VARCHAR2);

PROCEDURE verLogEnvioDaviviendaLoc(salida OUT VARCHAR2);

PROCEDURE generarArchivoAvvillasLoc(p_fecha   date,
                                   p_usuario varchar2,
                                   p_error   OUT VARCHAR2);

PROCEDURE ejecutarScriptAvvillasLoc(p_fecha   date,
                                   p_usuario varchar2,
                                   p_error   OUT VARCHAR2);

PROCEDURE generarArchivoDaviviendaLoc(p_fecha   date,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2);

PROCEDURE ejecutarScriptDaviviendaLoc(p_fecha   date,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2);


end PK_ENVIO;
/

prompt
prompt Creating package PK_NOVDEV
prompt ==========================
prompt
create or replace package simit.PK_NOVDEV is

  MSG_UPD_OK VARCHAR2(255) := 'Registro Actualizado Correctamente';
  MSG_INS_OK VARCHAR2(255) := 'Registro Insertado Correctamente';
  MSG_DEL_OK VARCHAR2(255) := 'Registro Eliminado Correctamente';

  PROCEDURE i_NovDevolucion(
                            
                            V_TIPOIDENTIFICACION VARCHAR2,
                            V_IDENTIFICACION     NUMBER,
                            V_NOMBRE             VARCHAR2,
                            V_IDBANCO            VARCHAR2,
                            V_TIPOCUENTA         VARCHAR2,
                            V_CUENTA             VARCHAR2,
                            V_CUENTAREC          VARCHAR2,
                            V_IDMUNICIPIO        VARCHAR2,
                            V_IDCONCESIONARIO    VARCHAR2,
                            V_INDTIPO            VARCHAR2,
                            V_DNS                VARCHAR2,
                            V_MOTIVO             VARCHAR2,
                            
                            V_VDEVOLUCION NUMBER,
                            V_VADICIONAL  NUMBER,
                            V_INDIVA      VARCHAR2,
                            V_INDRETE     VARCHAR2,
                            
                            V_VCONCESIONARIO       NUMBER,
                            V_VFCM                 NUMBER,
                            V_VFONDOCOBERTURAFCM   NUMBER,
                            V_VFONDOCOBERTURALIQ   NUMBER,
                            V_VEQUILIBRIOECONOMICO NUMBER,
                            V_VPOLCA               NUMBER,
                            V_VFCMPOLCA            NUMBER,
                            V_VSEVIAL3             NUMBER,
                            V_VSEVIAL27            NUMBER,
                            V_VMUNICIPIO           NUMBER,
                            V_VFCMCONTRAVENCIONAL  NUMBER,
                            V_VCONCONTRAVENCIONAL  NUMBER,
                            V_FECHA_ACT_ANO        NUMBER,
                            V_FECHA_ACT_MES        NUMBER,
                            V_FECHA_ACT_DIA        NUMBER,
                            
                            V_NUMLIQ VARCHAR2,
                            
                            V_TIPOIDENTIFICACION1 VARCHAR2,
                            V_IDENTIFICACION1     NUMBER,
   
                            V_FECHA_LIQ_ANO        NUMBER,
                            V_FECHA_LIQ_MES        NUMBER,
                            V_FECHA_LIQ_DIA        NUMBER,

                            V_USUARIO VARCHAR2,
                            V_ERROR   OUT VARCHAR2,
                            V_NOVEDAD OUT VARCHAR2
                            
                            );

   PROCEDURE q_NovDevolucion(V_TIPONOV              VARCHAR2,
                            V_NUMERONOV            VARCHAR2,
                            V_USUARIO              VARCHAR2,
                            V_TIPOIDENTIFICACION   OUT VARCHAR2,
                            V_IDENTIFICACION       OUT NUMBER,
                            V_NOMBRE               OUT VARCHAR2,
                            V_IDBANCO              OUT VARCHAR2,
                            V_TIPOCUENTA           OUT VARCHAR2,
                            V_CUENTA               OUT VARCHAR2,
                            V_TIPOIDENTIFICACIONC  OUT VARCHAR2,
                            V_IDENTIFICACIONC      OUT NUMBER,
                            V_DNS                  OUT VARCHAR2,
                            V_CUENTAREC            OUT VARCHAR2,
                            V_IDMUNICIPIO          OUT VARCHAR2,
                            V_IDCONCESIONARIO      OUT VARCHAR2,
                            V_INDTIPO              OUT VARCHAR2,
                            V_NUMLIQUIDACION       OUT VARCHAR2,
                            V_FECLIQ               OUT DATE,
                            V_MOTIVO               OUT VARCHAR2,
                            V_INDIVA               OUT VARCHAR2,
                            V_INDRETE              OUT VARCHAR2,
                            V_VDEVOLUCION          OUT NUMBER,
                            V_VADICIONAL           OUT NUMBER,
                            V_VCONCESIONARIO       OUT NUMBER,
                            V_VFCM                 OUT NUMBER,
                            V_VFONDOCOBERTURAFCM   OUT NUMBER,
                            V_VFONDOCOBERTURALIQ   OUT NUMBER,
                            V_VEQUILIBRIOECONOMICO OUT NUMBER,
                            V_VSEVIAL              OUT NUMBER,
                            V_VPOLCA               OUT NUMBER,
                            V_VFCMPOLCA            OUT NUMBER,
                            V_SEVIAL27             OUT NUMBER,
                            V_VMUNICIPIO           OUT NUMBER,
                            V_VFCMCONTRAVENCIONAL  OUT NUMBER,
                            V_VCONCONTRAVENCIONAL  OUT NUMBER,
                            V_FECHAACT             OUT DATE,
                            V_ERROR                OUT VARCHAR2);

  PROCEDURE u_NovdevolucionEst(p_tiponov   varchar2,
                               p_numeronov varchar2,
                               p_usuario   varchar2,
                               p_estado    varchar2,
                               p_error     OUT VARCHAR2);

  PROCEDURE q_NovDevolucionSug(V_USUARIO              VARCHAR2,
                               V_CUENTAREC            VARCHAR2,
                               V_IDMUNICIPIO          VARCHAR2,
                               V_IDCONCESIONARIO      VARCHAR2,
                               V_INDTIPO              VARCHAR2,
                               V_VDEVOLUCION          NUMBER,
                               V_ADICIONAL            NUMBER,
                               V_NUMLIQ               VARCHAR2,
                               V_INDIVA               VARCHAR2,
                               V_INDRETE              VARCHAR2,
                               V_FECLIQ               DATE,
                               V_VCONCESIONARIO       OUT NUMBER,
                               V_VFCM                 OUT NUMBER,
                               V_VFONDOCOBERTURAFCM   OUT NUMBER,
                               V_VFONDOCOBERTURALIQ   OUT NUMBER,
                               V_VEQUILIBRIOECONOMICO OUT NUMBER,
                               V_VPOLCA               OUT NUMBER,
                               V_VFCMPOLCA            OUT NUMBER,
                               V_VSEVIAL3             OUT NUMBER,
                               V_VSEVIAL27            OUT NUMBER,
                               V_VMUNICIPIO           OUT NUMBER,
                               V_VFCMCONTRAVENCIONAL  OUT NUMBER,
                               V_VCONCONTRAVENCIONAL  OUT NUMBER,
                               V_ERROR                OUT VARCHAR2);

  PROCEDURE contabiliza_devolucion_externo(p_feccor_ini_ano number,
                                           p_feccor_ini_mes number,
                                           p_feccor_ini_dia number,
                                           p_usuario        varchar2,
                                           p_error          OUT VARCHAR2);


  procedure aplicaNovedadesDevolucion(p_fecha date);

end PK_NOVDEV;
/

prompt
prompt Creating package PK_PARAM
prompt =========================
prompt
CREATE OR REPLACE PACKAGE SIMIT."PK_PARAM" is
  -- Author  : Ricardo Buitrago Lizarazo
  -- Created : 18/04/2007 10:14:23 a.m.
  -- Purpose :

  -- Public type declarations
  TYPE cursor_t_salida IS REF CURSOR;

  -- Public variable declarations
  v_error   NUMBER := 0;
  v_message VARCHAR2(255);

  MSG_UPD_OK VARCHAR2(255) := 'Registro Actualizado Correctamente';
  MSG_INS_OK VARCHAR2(255) := 'Registro Insertado Correctamente';
  MSG_DEL_OK VARCHAR2(255) := 'Registro Eliminado Correctamente';

  -- Public function and procedure declarations

  PROCEDURE i_fecha_no_habil(p_fecha_ini_ano number,
                             p_fecha_ini_mes number,
                             p_fecha_ini_dia number,
                             p_usuario       varchar2,
                             p_error         OUT VARCHAR2);
  PROCEDURE d_fecha_no_habil(p_fecha   varchar2,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2);
  PROCEDURE q_fecha_no_habil(p_cursor  OUT SYS_REFCURSOR,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2);

  PROCEDURE i_salario_minimo(p_anho    number,
                             p_valor   number,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2);

  PROCEDURE u_salario_minimo(p_anho    number,
                             p_valor   number,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2);

  PROCEDURE d_salario_minimo(p_anho    number,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2);
  PROCEDURE q_salario_minimo(p_cursor  OUT SYS_REFCURSOR,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2);

  PROCEDURE i_concepto(p_idconcepto number,
                       p_nombre     varchar2,
                       p_usuario    varchar2,
                       p_error      OUT VARCHAR2);
  PROCEDURE d_concepto(p_idconcepto number,
                       p_usuario    varchar2,
                       p_error      OUT VARCHAR2);
  PROCEDURE q_concepto(p_cursor  OUT SYS_REFCURSOR,
                       p_usuario varchar2,
                       p_error   OUT VARCHAR2);

  PROCEDURE i_banco(p_idbanco     char,
                    p_nombre      varchar2,
                    p_responsable varchar2,
                    p_cargo       varchar2,
                    p_correo      varchar2,
                    p_telefono    varchar2,
                    p_dirCorres   varchar2,
                    p_usuario     varchar2,
                    p_error       OUT VARCHAR2);

  PROCEDURE u_banco(p_idbanco     char,
                    p_nombre      varchar2,
                    p_responsable varchar2,
                    p_cargo       varchar2,
                    p_correo      varchar2,
                    p_telefono    varchar2,
                    p_dirCorres   varchar2,
                    p_usuario     varchar2,
                    p_error       OUT VARCHAR2);

  PROCEDURE d_banco(p_idbanco char,
                    p_usuario varchar2,
                    p_error   OUT VARCHAR2);

  PROCEDURE q_banco(p_idbanco     char,
                    p_usuario     varchar2,
                    p_nombre      out varchar2,
                    p_responsable out varchar2,
                    p_cargo       out varchar2,
                    p_correo      out varchar2,
                    p_telefono    out varchar2,
                    p_dirCorres   out varchar2,
                    p_error       OUT VARCHAR2);

  PROCEDURE d_concesionario(p_idconcesionario char,
                            p_usuario         varchar2,
                            p_error           OUT VARCHAR2);

  PROCEDURE i_departamento(p_iddepartamento char,
                           p_nombre         varchar2,
                           p_usuario        varchar2,
                           p_error          OUT VARCHAR2);
  PROCEDURE d_departamento(p_iddepartamento char,
                           p_usuario        varchar2,
                           p_error          OUT VARCHAR2);
  PROCEDURE q_departamento(p_cursor  OUT SYS_REFCURSOR,
                           p_usuario varchar2,
                           p_error   OUT VARCHAR2);

  PROCEDURE d_municipio(p_idmunicipio char,
                        p_usuario     varchar2,
                        p_error       OUT VARCHAR2);

  PROCEDURE d_tercero(p_idmunicipio char,
                      p_num_tercero number,
                      p_usuario     varchar2,
                      p_error       OUT VARCHAR2);

  PROCEDURE d_cta_dispersion_concesionario(p_idconcepto      number,
                                           p_idconcesionario char,
                                           p_usuario         varchar2,
                                           p_error           OUT VARCHAR2);

  PROCEDURE i_p_dispersion_concesionario(p_idconcesionario              char,
                                         p_concesionario_s              number,
                                         p_fondo_cob_concesionario_s    number,
                                         p_fondo_cob_simit_s            number,
                                         p_simit_s                      number,
                                         p_equilibrio_economico_s       number,
                                         p_concesionario_pm             number,
                                         p_fondo_cob_concesionario_pm   number,
                                         p_fondo_cob_simit_pm           number,
                                         p_equilibrio_economico_pm      number,
                                         p_simit_pp                     number,
                                         p_sevial_pp                    number,
                                         p_equilibrio_economico_pp      number,
                                         p_polca_cp                     number,
                                         p_fcm_cp                       number,
                                         p_sevial_cp                    number,
                                         p_equilibrio_economico_cp      number,
                                         p_concesionario_s_cc           varchar2,
                                         p_fondo_cob_concesionario_s_cc varchar2,
                                         p_fondo_cob_simit_s_cc         varchar2,
                                         p_simit_s_cc                   varchar2,
                                         p_equilibrio_economico_s_cc    varchar2,
                                         p_concesionario_pm_cc          varchar2,
                                         p_fondo_cob_concesionario_pm_c varchar2,
                                         p_fondo_cob_simit_pm_cc        varchar2,
                                         p_equilibrio_economico_pm_cc   varchar2,
                                         p_simit_pp_cc                  varchar2,
                                         p_sevial_pp_cc                 varchar2,
                                         p_equilibrio_economico_pp_cc   varchar2,
                                         p_polca_cp_cc                  varchar2,
                                         p_fcm_cp_cc                    varchar2,
                                         p_sevial_cp_cc                 varchar2,
                                         p_equilibrio_economico_cp_cc   varchar2,
                                         p_simit_pm                     number,
                                         p_usuario                      varchar2,
                                         p_error                        OUT VARCHAR2);
  PROCEDURE d_p_dispersion_concesionario(p_idconcesionario char,
                                         p_usuario         varchar2,
                                         p_error           OUT VARCHAR2);
  PROCEDURE q_p_dispersion_concesionario(p_cursor  OUT SYS_REFCURSOR,
                                         p_usuario varchar2,
                                         p_error   OUT VARCHAR2);

  PROCEDURE i_p_dispersion_municipio(p_idmunicipio              char,
                                     p_municipio_s              number,
                                     p_fcm_contravencional_s    number,
                                     p_conces_contravencional_s number,
                                     p_acuerdopago_s            number,
                                     p_municipio_p              number,
                                     p_fcm_contravencional_p    number,
                                     p_conces_contravencional_p number,
                                     p_acuerdopago_p            number,
                                     p_usuario                  varchar2,
                                     p_error                    OUT VARCHAR2);
  PROCEDURE d_p_dispersion_municipio(p_idmunicipio char,
                                     p_usuario     varchar2,
                                     p_error       OUT VARCHAR2);
  PROCEDURE q_p_dispersion_municipio(p_cursor  OUT SYS_REFCURSOR,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2);

  PROCEDURE q_validador_fecha(p_idmunicipio              char,
                              p_idvalidador              char,
                              p_indTipo                  char,
                              p_usuario                  varchar2,
                              p_fecha_ini                out date,
                              p_fecha_fin                out date,
                              p_p_municipio              out number,
                              p_p_fcm_contravencional    out number,
                              p_p_conces_contravencional out number,
                              p_p_acuerdopago            out number,
                              p_nit_tercero1             out varchar2,
                              p_base_tercero1            out number,
                              p_ind_base_tercero1        out number,
                              p_nit_tercero2             out varchar2,
                              p_base_tercero2            out number,
                              p_ind_base_tercero2        out number,
                              p_error                    OUT VARCHAR2);

  PROCEDURE i_validador_fecha(p_idmunicipio              char,
                              p_idvalidador              char,
                              p_indTipo                  char,
                              p_fecha_ini_ano            number,
                              p_fecha_ini_mes            number,
                              p_fecha_ini_dia            number,
                              p_fecha_fin_ano            number,
                              p_fecha_fin_mes            number,
                              p_fecha_fin_dia            number,
                              p_p_municipio              number,
                              p_p_fcm_contravencional    number,
                              p_p_conces_contravencional number,
                              p_p_acuerdopago            number,
                              p_nit_tercero1             varchar2,
                              p_base_tercero1            number,
                              p_ind_base_tercero1        number,
                              p_nit_tercero2             varchar2,
                              p_base_tercero2            number,
                              p_ind_base_tercero2        number,
                              p_usuario                  varchar2,
                              p_error                    OUT VARCHAR2);

  PROCEDURE u_validador_fecha(p_idmunicipio              char,
                              p_idvalidador              char,
                              p_indTipo                  char,
                              p_fecha_ini_ano            number,
                              p_fecha_ini_mes            number,
                              p_fecha_ini_dia            number,
                              p_fecha_fin_ano            number,
                              p_fecha_fin_mes            number,
                              p_fecha_fin_dia            number,
                              p_p_municipio              number,
                              p_p_fcm_contravencional    number,
                              p_p_conces_contravencional number,
                              p_p_acuerdopago            number,
                              p_nit_tercero1             varchar2,
                              p_base_tercero1            number,
                              p_ind_base_tercero1        number,
                              p_nit_tercero2             varchar2,
                              p_base_tercero2            number,
                              p_ind_base_tercero2        number,
                              p_usuario                  varchar2,
                              p_error                    OUT VARCHAR2);

  PROCEDURE d_validador_fecha(p_idmunicipio char,
                              p_idvalidador char,
                              p_indTipo     char,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2);

  PROCEDURE i_fcm(p_nit_fcm                  char,
                  p_usuario                  varchar2,
                  p_correo                   varchar2,
                  p_cta_disp_s_banco         char,
                  p_cta_disp_s_tipo_cta      char,
                  p_cta_disp_s_cta           varchar2,
                  p_cta_disp_p_banco         char,
                  p_cta_disp_p_tipo_cta      char,
                  p_cta_disp_p_cta           varchar2,
                  p_iva                      number,
                  p_retencion_fuente         number,
                  p_impuesto_timbre_tercero  number,
                  p_impuesto_timbre_fcm      number,
                  p_director_ejecutivo       varchar,
                  p_director_nacional        varchar,
                  p_contador_general         varchar,
                  p_coordinador_financiero   varchar,
                  p_nit_polca                char,
                  p_nit_sevial               char,
                  p_ctacon_puente            varchar,
                  p_ctacon_fondo_cobertura   varchar,
                  p_ctacon_polca             varchar,
                  p_ctacon_fcm               varchar,
                  p_ctacon_fcma              varchar,
                  p_ctacon_ingreso           varchar,
                  p_ctacon_impuestos         varchar,
                  p_ctacon_puente_ext        varchar,
                  p_reteiva                  number,
                  p_timbre_contravencional   number,
                  p_cta_disp_pa_banco        varchar2,
                  p_cta_disp_pa_tipo_cta     varchar2,
                  p_cta_disp_pa_cta          varchar2,
                  p_m_director_ejecutivo     varchar,
                  p_m_director_nacional      varchar,
                  p_m_contador_general       varchar,
                  p_m_coordinador_financiero varchar,
                  p_dias_activacion          number,
                  p_integrado                number,
                  p_url                      varchar2,
                  p_error                    OUT VARCHAR2);

  PROCEDURE q_fcm(p_nit_fcm                  char,
                  p_usuario                  varchar2,
                  p_correo                   out varchar2,
                  p_cta_disp_s_banco         out varchar2,
                  p_cta_disp_s_tipo_cta      out varchar2,
                  p_cta_disp_s_cta           out varchar2,
                  p_cta_disp_p_banco         out varchar2,
                  p_cta_disp_p_tipo_cta      out varchar2,
                  p_cta_disp_p_cta           out varchar2,
                  p_iva                      out number,
                  p_retencion_fuente         out number,
                  p_impuesto_timbre_tercero  out number,
                  p_impuesto_timbre_fcm      out number,
                  p_director_ejecutivo       out varchar,
                  p_director_nacional        out varchar,
                  p_contador_general         out varchar,
                  p_coordinador_financiero   out varchar,
                  p_nit_polca                out char,
                  p_nit_sevial               out char,
                  p_ctacon_puente            out varchar,
                  p_ctacon_fondo_cobertura   out varchar,
                  p_ctacon_polca             out varchar,
                  p_ctacon_fcm               out varchar,
                  p_ctacon_fcma              out varchar,
                  p_ctacon_ingreso           out varchar,
                  p_ctacon_impuestos         out varchar,
                  p_ctacon_puente_ext        out varchar,
                  p_reteiva                  out number,
                  p_timbre_contravencional   out number,
                  p_cta_disp_pa_banco        out varchar2,
                  p_cta_disp_pa_tipo_cta     out varchar2,
                  p_cta_disp_pa_cta          out varchar2,
                  p_m_director_ejecutivo     out varchar,
                  p_m_director_nacional      out varchar,
                  p_m_contador_general       out varchar,
                  p_m_coordinador_financiero out varchar,
                  p_dias_activacion          out number,
                  p_integrado                out number,
                  p_url                      out varchar2,
                  p_error                    OUT VARCHAR2);

  PROCEDURE q_cta_recaudo_fcm(p_nit_fcm          char,
                              p_idbanco          varchar2,
                              p_indtipo          varchar2,
                              p_usuario          varchar2,
                              p_tipocuenta       out varchar2,
                              p_cuenta           out varchar2,
                              p_comision_recaudo out number,
                              p_comision_ach     out number,
                              p_cta_contable     out varchar2,
                              p_error            OUT VARCHAR2);

  PROCEDURE d_cta_recaudo_fcm(p_nit_fcm char,
                              p_idbanco varchar2,
                              p_indtipo varchar2,
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2);

  PROCEDURE i_cta_recaudo_fcm(p_nit_fcm          char,
                              p_idbanco          varchar2,
                              p_indtipo          varchar2,
                              p_tipocuenta       varchar2,
                              p_cuenta           varchar2,
                              p_comision_recaudo number,
                              p_comision_ach     number,
                              P_cta_contable     varchar2,
                              p_usuario          varchar2,
                              p_error            OUT VARCHAR2);

  PROCEDURE u_cta_recaudo_fcm(p_nit_fcm          char,
                              p_idbanco          varchar2,
                              p_indtipo          varchar2,
                              p_tipocuenta       varchar2,
                              p_cuenta           varchar2,
                              p_comision_recaudo number,
                              p_comision_ach     number,
                              P_cta_contable     varchar2,
                              p_usuario          varchar2,
                              p_error            OUT VARCHAR2);

  PROCEDURE i_municipio(p_idmunicipio              varchar2,
                        p_nit_m                    varchar2,
                        p_nombre                   varchar2,
                        p_idconcesionario          varchar2,
                        p_correo                   varchar2,
                        p_indretroactividad        number,
                        p_indliq_s_ext             number,
                        p_indliq_s_local           number,
                        p_indliq_p_ext             number,
                        p_indliq_p_local           number,
                        p_indAcuerdoPago_2002      number,
                        p_idbanco                  varchar2,
                        p_tipocuenta               varchar2,
                        p_cuenta                   varchar2,
                        p_nit_cta                  varchar2,
                        p_municipio_s              number,
                        p_fcm_contravencional_s    number,
                        p_conces_contravencional_s number,
                        p_acuerdopago_s            number,
                        p_municipio_p              number,
                        p_fcm_contravencional_p    number,
                        p_conces_contravencional_p number,
                        p_acuerdopago_p            number,
                        p_usuario                  varchar2,
                        p_error                    OUT VARCHAR2
                        
                        );

  PROCEDURE q_municipio(p_idmunicipio              varchar2,
                        p_usuario                  varchar2,
                        p_nit_m                    out varchar2,
                        p_nombre                   out varchar2,
                        p_idconcesionario          out varchar2,
                        p_correo                   out varchar2,
                        p_indretroactividad        out number,
                        p_indliq_s_ext             out number,
                        p_indliq_s_local           out number,
                        p_indliq_p_ext             out number,
                        p_indliq_p_local           out number,
                        p_indAcuerdoPago_2002      out number,
                        p_idbanco                  out varchar2,
                        p_tipocuenta               out varchar2,
                        p_cuenta                   out varchar2,
                        p_nit_cta                  out varchar2,
                        p_municipio_s              out number,
                        p_fcm_contravencional_s    out number,
                        p_conces_contravencional_s out number,
                        p_acuerdopago_s            out number,
                        p_municipio_p              out number,
                        p_fcm_contravencional_p    out number,
                        p_conces_contravencional_p out number,
                        p_acuerdopago_p            out number,
                        p_error                    OUT VARCHAR2);

  PROCEDURE d_dias_dispersion(p_idmunicipio char,
                              p_idbanco     char,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2);

  PROCEDURE i_dias_dispersion(p_idmunicipio        char,
                              p_idbanco            char,
                              p_dias_dispersion_se number,
                              p_dias_dispersion_sl number,
                              p_dias_dispersion_pe number,
                              p_dias_dispersion_pl number,
                              p_frec_dispersion_se number,
                              p_frec_dispersion_sl number,
                              p_frec_dispersion_pe number,
                              p_frec_dispersion_pl number,
                              p_usuario            varchar2,
                              p_error              OUT VARCHAR2);

  PROCEDURE u_dias_dispersion(
                              
                              p_idmunicipio char,
                              p_idbanco     char,
                              
                              p_dias_dispersion_se number,
                              p_dias_dispersion_sl number,
                              p_dias_dispersion_pe number,
                              p_dias_dispersion_pl number,
                              
                              p_frec_dispersion_se number,
                              p_frec_dispersion_sl number,
                              p_frec_dispersion_pe number,
                              p_frec_dispersion_pl number,
                              
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2);

  PROCEDURE q_dias_dispersion(p_idmunicipio        char,
                              p_idbanco            char,
                              p_usuario            varchar2,
                              p_dias_dispersion_se out number,
                              p_dias_dispersion_sl out number,
                              p_dias_dispersion_pe out number,
                              p_dias_dispersion_pl out number,
                              p_frec_dispersion_se out number,
                              p_frec_dispersion_sl out number,
                              p_frec_dispersion_pe out number,
                              p_frec_dispersion_pl out number,
                              p_error              OUT VARCHAR2);

  PROCEDURE i_tercero(
                      
                      p_idmunicipio   char,
                      p_nit_t         char,
                      p_nombre        varchar2,
                      p_correoTercero varchar2,
                      p_idbanco       char,
                      p_tipocuenta    char,
                      p_cuenta        varchar2,
                      p_base_s        number,
                      p_base_p        number,
                      p_ind_base      number,
                      p_num_tercero   number,
                      p_usuario       varchar2,
                      p_error         OUT VARCHAR2);

  PROCEDURE u_tercero(
                      
                      p_idmunicipio   char,
                      p_nit_t         char,
                      p_nombre        varchar2,
                      p_correoTercero varchar2,
                      p_idbanco       char,
                      p_tipocuenta    char,
                      p_cuenta        varchar2,
                      p_base_s        number,
                      p_base_p        number,
                      p_ind_base      number,
                      p_num_tercero   number,
                      p_usuario       varchar2,
                      p_error         OUT VARCHAR2);

  PROCEDURE q_tercero(p_idmunicipio   char,
                      p_nit_t         out varchar2,
                      p_usuario       varchar2,
                      p_nombre        out varchar2,
                      p_correoTercero out varchar2,
                      p_idbanco       out varchar2,
                      p_tipocuenta    out varchar2,
                      p_cuenta        out varchar2,
                      p_base_s        out number,
                      p_base_p        out number,
                      p_ind_base      out number,
                      p_num_tercero   number,
                      p_error         OUT VARCHAR2
                      
                      );

  PROCEDURE i_concesionario(p_idconcesionario           char,
                            p_nit_c                     varchar2,
                            p_nombre                    varchar2,
                            p_correo                    varchar2,
                            p_concesionario_s           number,
                            p_fondo_cob_concesionario_s number,
                            p_fondo_cob_simit_s         number,
                            p_simit_s                   number,
                            p_equilibrio_economico_s    number,
                            
                            p_concesionario_pm           number,
                            p_fondo_cob_concesionario_pm number,
                            p_fondo_cob_simit_pm         number,
                            p_simit_pm                   number,
                            p_equilibrio_economico_pm    number,
                            
                            p_simit_pp                number,
                            p_sevial_pp               number,
                            p_equilibrio_economico_pp number,
                            
                            p_polca_cp                number,
                            p_fcm_cp                  number,
                            p_sevial_cp               number,
                            p_equilibrio_economico_cp number,
                            
                            p_ccLocalConS varchar2,
                            p_ccLocalSimS varchar2,
                            p_ccLocalFonS varchar2,
                            p_ccLocalCobS varchar2,
                            p_ccLocalEquS varchar2,
                            
                            p_ccExtConS varchar2,
                            p_ccExtSimS varchar2,
                            p_ccExtFonS varchar2,
                            p_ccExtCobS varchar2,
                            p_ccExtEquS varchar2,
                            
                            p_ccLocalConP varchar2,
                            p_ccLocalSimP varchar2,
                            p_ccLocalFonP varchar2,
                            p_ccLocalCobP varchar2,
                            p_ccLocalEquP varchar2,
                            
                            p_ccExtConP varchar2,
                            p_ccExtSimP varchar2,
                            p_ccExtFonP varchar2,
                            p_ccExtCobP varchar2,
                            p_ccExtEquP varchar2,
                            
                            p_ccLocalSimPP varchar2,
                            p_ccLocalSevPP varchar2,
                            p_ccLocalEquPP varchar2,
                            
                            p_ccExtSimPP varchar2,
                            p_ccExtSevPP varchar2,
                            p_ccExtEquPP varchar2,
                            
                            p_ccLocalSimCP varchar2,
                            p_ccLocalFcmCP varchar2,
                            p_ccLocalSevCP varchar2,
                            p_ccLocalEquCP varchar2,
                            
                            p_ccExtSimCP varchar2,
                            p_ccExtFcmCP varchar2,
                            p_ccExtSevCP varchar2,
                            p_ccExtEquCP varchar2,
                            
                            p_usuario varchar2,
                            p_error   OUT VARCHAR2);

  PROCEDURE u_concesionario(p_idconcesionario           char,
                            p_nit_c                     varchar2,
                            p_nombre                    varchar2,
                            p_correo                    varchar2,
                            p_concesionario_s           number,
                            p_fondo_cob_concesionario_s number,
                            p_fondo_cob_simit_s         number,
                            p_simit_s                   number,
                            p_equilibrio_economico_s    number,
                            
                            p_concesionario_pm           number,
                            p_fondo_cob_concesionario_pm number,
                            p_fondo_cob_simit_pm         number,
                            p_simit_pm                   number,
                            p_equilibrio_economico_pm    number,
                            
                            p_simit_pp                number,
                            p_sevial_pp               number,
                            p_equilibrio_economico_pp number,
                            
                            p_polca_cp                number,
                            p_fcm_cp                  number,
                            p_sevial_cp               number,
                            p_equilibrio_economico_cp number,
                            
                            p_ccLocalConS varchar2,
                            p_ccLocalSimS varchar2,
                            p_ccLocalFonS varchar2,
                            p_ccLocalCobS varchar2,
                            p_ccLocalEquS varchar2,
                            
                            p_ccExtConS varchar2,
                            p_ccExtSimS varchar2,
                            p_ccExtFonS varchar2,
                            p_ccExtCobS varchar2,
                            p_ccExtEquS varchar2,
                            
                            p_ccLocalConP varchar2,
                            p_ccLocalSimP varchar2,
                            p_ccLocalFonP varchar2,
                            p_ccLocalCobP varchar2,
                            p_ccLocalEquP varchar2,
                            
                            p_ccExtConP varchar2,
                            p_ccExtSimP varchar2,
                            p_ccExtFonP varchar2,
                            p_ccExtCobP varchar2,
                            p_ccExtEquP varchar2,
                            
                            p_ccLocalSimPP varchar2,
                            p_ccLocalSevPP varchar2,
                            p_ccLocalEquPP varchar2,
                            
                            p_ccExtSimPP varchar2,
                            p_ccExtSevPP varchar2,
                            p_ccExtEquPP varchar2,
                            
                            p_ccLocalSimCP varchar2,
                            p_ccLocalFcmCP varchar2,
                            p_ccLocalSevCP varchar2,
                            p_ccLocalEquCP varchar2,
                            
                            p_ccExtSimCP varchar2,
                            p_ccExtFcmCP varchar2,
                            p_ccExtSevCP varchar2,
                            p_ccExtEquCP varchar2,
                            
                            p_usuario varchar2,
                            p_error   OUT VARCHAR2);

  PROCEDURE q_concesionario(p_idconcesionario char,
                            p_usuario         varchar2,
                            p_nit_c           out varchar2,
                            p_nombre          out varchar2,
                            p_correo          out varchar2,
                            
                            p_concesionario_s           out number,
                            p_fondo_cob_concesionario_s out number,
                            p_fondo_cob_simit_s         out number,
                            p_simit_s                   out number,
                            p_equilibrio_economico_s    out number,
                            
                            p_concesionario_pm           out number,
                            p_fondo_cob_concesionario_pm out number,
                            p_fondo_cob_simit_pm         out number,
                            p_simit_pm                   out number,
                            p_equilibrio_economico_pm    out number,
                            
                            p_simit_pp                out number,
                            p_sevial_pp               out number,
                            p_equilibrio_economico_pp out number,
                            
                            p_polca_cp                out number,
                            p_fcm_cp                  out number,
                            p_sevial_cp               out number,
                            p_equilibrio_economico_cp out number,
                            
                            p_ccLocalConS out varchar2,
                            p_ccLocalSimS out varchar2,
                            p_ccLocalFonS out varchar2,
                            p_ccLocalCobS out varchar2,
                            p_ccLocalEquS out varchar2,
                            
                            p_ccExtConS out varchar2,
                            p_ccExtSimS out varchar2,
                            p_ccExtFonS out varchar2,
                            p_ccExtCobS out varchar2,
                            p_ccExtEquS out varchar2,
                            
                            p_ccLocalConP out varchar2,
                            p_ccLocalSimP out varchar2,
                            p_ccLocalFonP out varchar2,
                            p_ccLocalCobP out varchar2,
                            p_ccLocalEquP out varchar2,
                            
                            p_ccExtConP out varchar2,
                            p_ccExtSimP out varchar2,
                            p_ccExtFonP out varchar2,
                            p_ccExtCobP out varchar2,
                            p_ccExtEquP out varchar2,
                            
                            p_ccLocalSimPP out varchar2,
                            p_ccLocalSevPP out varchar2,
                            p_ccLocalEquPP out varchar2,
                            
                            p_ccExtSimPP out varchar2,
                            p_ccExtSevPP out varchar2,
                            p_ccExtEquPP out varchar2,
                            
                            p_ccLocalSimCP out varchar2,
                            p_ccLocalFcmCP out varchar2,
                            p_ccLocalSevCP out varchar2,
                            p_ccLocalEquCP out varchar2,
                            
                            p_ccExtSimCP out varchar2,
                            p_ccExtFcmCP out varchar2,
                            p_ccExtSevCP out varchar2,
                            p_ccExtEquCP out varchar2,
                            
                            p_error OUT VARCHAR2);

  PROCEDURE i_cta_recaudo_concesionario(p_idconcesionario  char,
                                        p_idbanco          char,
                                        p_indtipo          char,
                                        p_tipocuenta       char,
                                        p_cuenta           varchar2,
                                        p_comision_recaudo number,
                                        p_comision_ach     number,
                                        p_cta_contable     varchar2,
                                        p_usuario          varchar2,
                                        p_error            OUT VARCHAR2
                                        
                                        );

  PROCEDURE u_cta_recaudo_concesionario(
                                        
                                        p_idconcesionario  char,
                                        p_idbanco          char,
                                        p_indtipo          char,
                                        p_tipocuenta       char,
                                        p_cuenta           varchar2,
                                        p_comision_recaudo number,
                                        p_comision_ach     number,
                                        p_cta_contable     varchar2,
                                        p_usuario          varchar2,
                                        p_error            OUT VARCHAR2
                                        
                                        );

  PROCEDURE d_cta_recaudo_concesionario(p_idconcesionario char,
                                        p_idbanco         char,
                                        p_indtipo         varchar2,
                                        p_cuenta          varchar2,
                                        p_usuario         varchar2,
                                        p_error           OUT VARCHAR2);

  PROCEDURE q_cta_recaudo_concesionario(p_idconcesionario  char,
                                        p_idbanco          char,
                                        p_indtipo          char,
                                        p_cuenta           varchar2,
                                        p_tipocuenta       out varchar2,
                                        p_comision_recaudo out number,
                                        p_comision_ach     out number,
                                        p_cta_contable     out varchar2,
                                        p_usuario          varchar2,
                                        p_error            OUT VARCHAR2
                                        
                                        );

  PROCEDURE i_cta_dispersion_concesionario(p_idconcesionario char,
                                           p_idbancorec      char,
                                           
                                           -- liquidacion externo simir
                                           p_liq1_idbanco    char,
                                           p_liq1_tipocuenta char,
                                           p_liq1_cuenta     varchar2,
                                           p_liq1_nit_c      char,
                                           
                                           -- liquidacion externo polca
                                           p_liq2_idbanco    char,
                                           p_liq2_tipocuenta char,
                                           p_liq2_cuenta     varchar2,
                                           p_liq2_nit_c      char,
                                           
                                           -- liquidacion local simir
                                           p_liq3_idbanco    char,
                                           p_liq3_tipocuenta char,
                                           p_liq3_cuenta     varchar2,
                                           p_liq3_nit_c      char,
                                           
                                           -- liquidacion local polca
                                           
                                           p_liq4_idbanco    char,
                                           p_liq4_tipocuenta char,
                                           p_liq4_cuenta     varchar2,
                                           p_liq4_nit_c      char,
                                           
                                           p_fon_idbanco    char,
                                           p_fon_tipocuenta char,
                                           p_fon_cuenta     varchar2,
                                           p_fon_nit_c      char,
                                           
                                           p_con_idbanco    char,
                                           p_con_tipocuenta char,
                                           p_con_cuenta     varchar2,
                                           p_con_nit_c      char,
                                           
                                           p_fcm_idbanco    char,
                                           p_fcm_tipocuenta char,
                                           p_fcm_cuenta     varchar2,
                                           p_fcm_nit_c      char,
                                           
                                           p_sevial_idbanco    char,
                                           p_sevial_tipocuenta char,
                                           p_sevial_cuenta     varchar2,
                                           p_sevial_nit_c      char,
                                           
                                           p_polca_idbanco    char,
                                           p_polca_tipocuenta char,
                                           p_polca_cuenta     varchar2,
                                           p_polca_nit_c      char,
                                           
                                           p_avv_idbanco    char,
                                           p_avv_tipocuenta char,
                                           p_avv_cuenta     varchar2,
                                           p_avv_nit_c      char,
                                           
                                           p_usuario varchar2,
                                           p_error   OUT VARCHAR2);

  PROCEDURE q_cta_dispersion_concesionario(p_idconcesionario char,
                                           p_idbancorec      char,
                                           
                                           p_usuario varchar2,
                                           
                                           -- liquidacion externo simit
                                           p_liq1_idbanco    out varchar2,
                                           p_liq1_tipocuenta out varchar2,
                                           p_liq1_cuenta     out varchar2,
                                           p_liq1_nit_c      out varchar2,
                                           
                                           -- liquidacion externo polca
                                           p_liq2_idbanco    out varchar2,
                                           p_liq2_tipocuenta out varchar2,
                                           p_liq2_cuenta     out varchar2,
                                           p_liq2_nit_c      out varchar2,
                                           
                                           -- liquidacion externo simit
                                           p_liq3_idbanco    out varchar2,
                                           p_liq3_tipocuenta out varchar2,
                                           p_liq3_cuenta     out varchar2,
                                           p_liq3_nit_c      out varchar2,
                                           
                                           -- liquidacion externo simit
                                           p_liq4_idbanco    out varchar2,
                                           p_liq4_tipocuenta out varchar2,
                                           p_liq4_cuenta     out varchar2,
                                           p_liq4_nit_c      out varchar2,
                                           
                                           p_fon_idbanco    out varchar2,
                                           p_fon_tipocuenta out varchar2,
                                           p_fon_cuenta     out varchar2,
                                           p_fon_nit_c      out varchar2,
                                           
                                           p_con_idbanco    out varchar2,
                                           p_con_tipocuenta out varchar2,
                                           p_con_cuenta     out varchar2,
                                           p_con_nit_c      out varchar2,
                                           
                                           p_fcm_idbanco    out varchar2,
                                           p_fcm_tipocuenta out varchar2,
                                           p_fcm_cuenta     out varchar2,
                                           p_fcm_nit_c      out varchar2,
                                           
                                           p_sevial_idbanco    out varchar2,
                                           p_sevial_tipocuenta out varchar2,
                                           p_sevial_cuenta     out varchar2,
                                           p_sevial_nit_c      out varchar2,
                                           
                                           p_polca_idbanco    out varchar2,
                                           p_polca_tipocuenta out varchar2,
                                           p_polca_cuenta     out varchar2,
                                           p_polca_nit_c      out varchar2,
                                           
                                           p_avv_idbanco    out varchar2,
                                           p_avv_tipocuenta out varchar2,
                                           p_avv_cuenta     out varchar2,
                                           p_avv_nit_c      out varchar2,
                                           
                                           p_error OUT VARCHAR2);

  PROCEDURE i_recaudo_local_ajustes(
                                    
                                    p_idbanco       char,
                                    p_cta_recaudo   varchar2,
                                    p_indtipo       char,
                                    p_fec_corte_ano number,
                                    p_fec_corte_mes number,
                                    p_fec_corte_dia number,
                                    p_fec_tran_ano  number,
                                    p_fec_tran_mes  number,
                                    p_fec_tran_dia  number,
                                    p_valor_total   number,
                                    p_idmunicipio   char,
                                    p_periodo       char,
                                    p_p_consignado  number,
                                    p_usuario       varchar2,
                                    p_error         OUT VARCHAR2);

  PROCEDURE d_recaudo_local_ajustes(p_id_recaudo_local_ajustes number,
                                    p_usuario                  varchar2,
                                    p_error                    OUT VARCHAR2);

  PROCEDURE u_person(p_idperson     number,
                     p_password_ant varchar,
                     p_password_new varchar,
                     p_usuario      varchar2,
                     p_error        OUT VARCHAR2);

  PROCEDURE u_municipio(p_idmunicipio              varchar2,
                        p_nit_m                    varchar2,
                        p_nombre                   varchar2,
                        p_idconcesionario          varchar2,
                        p_correo                   varchar2,
                        p_indretroactividad        number,
                        p_indliq_s_ext             number,
                        p_indliq_s_local           number,
                        p_indliq_p_ext             number,
                        p_indliq_p_local           number,
                        p_indAcuerdoPago_2002      number,
                        p_idbanco                  varchar2,
                        p_tipocuenta               varchar2,
                        p_cuenta                   varchar2,
                        p_nit_cta                  varchar2,
                        p_municipio_s              number,
                        p_fcm_contravencional_s    number,
                        p_conces_contravencional_s number,
                        p_acuerdopago_s            number,
                        p_municipio_p              number,
                        p_fcm_contravencional_p    number,
                        p_conces_contravencional_p number,
                        p_acuerdopago_p            number,
                        p_usuario                  varchar2,
                        p_error                    OUT VARCHAR2);

  PROCEDURE i_cta_dispersion_fcm(P_NIT_FCM              VARCHAR2,
                                 P_IDBANCOREC           CHAR,
                                 P_CTA_DISP_S_BANCO     CHAR,
                                 P_CTA_DISP_S_TIPO_CTA  VARCHAR2,
                                 P_CTA_DISP_S_CTA       VARCHAR2,
                                 P_CTA_DISP_P_BANCO     CHAR,
                                 P_CTA_DISP_P_TIPO_CTA  VARCHAR2,
                                 P_CTA_DISP_P_CTA       VARCHAR2,
                                 P_CTA_DISP_PA_BANCO    CHAR,
                                 P_CTA_DISP_PA_TIPO_CTA VARCHAR2,
                                 P_CTA_DISP_PA_CTA      VARCHAR2,
                                 P_CTA_DISP_AC_BANCO    CHAR,
                                 P_CTA_DISP_AC_TIPO_CTA VARCHAR2,
                                 P_CTA_DISP_AC_CTA      VARCHAR2,
                                 p_usuario              varchar2,
                                 p_error                OUT VARCHAR2);

  PROCEDURE u_cta_dispersion_fcm(P_NIT_FCM              VARCHAR2,
                                 P_IDBANCOREC           CHAR,
                                 P_CTA_DISP_S_BANCO     CHAR,
                                 P_CTA_DISP_S_TIPO_CTA  VARCHAR2,
                                 P_CTA_DISP_S_CTA       VARCHAR2,
                                 P_CTA_DISP_P_BANCO     CHAR,
                                 P_CTA_DISP_P_TIPO_CTA  VARCHAR2,
                                 P_CTA_DISP_P_CTA       VARCHAR2,
                                 P_CTA_DISP_PA_BANCO    CHAR,
                                 P_CTA_DISP_PA_TIPO_CTA VARCHAR2,
                                 P_CTA_DISP_PA_CTA      VARCHAR2,
                                 P_CTA_DISP_AC_BANCO    CHAR,
                                 P_CTA_DISP_AC_TIPO_CTA VARCHAR2,
                                 P_CTA_DISP_AC_CTA      VARCHAR2,
                                 p_usuario              varchar2,
                                 p_error                OUT VARCHAR2);

  PROCEDURE q_cta_dispersion_fcm(P_NIT_FCM              VARCHAR2,
                                 P_IDBANCOREC           CHAR,
                                 P_CTA_DISP_S_BANCO     OUT VARCHAR2,
                                 P_CTA_DISP_S_TIPO_CTA  OUT VARCHAR2,
                                 P_CTA_DISP_S_CTA       OUT VARCHAR2,
                                 P_CTA_DISP_P_BANCO     OUT VARCHAR2,
                                 P_CTA_DISP_P_TIPO_CTA  OUT VARCHAR2,
                                 P_CTA_DISP_P_CTA       OUT VARCHAR2,
                                 P_CTA_DISP_PA_BANCO    OUT VARCHAR2,
                                 P_CTA_DISP_PA_TIPO_CTA OUT VARCHAR2,
                                 P_CTA_DISP_PA_CTA      OUT VARCHAR2,
                                 P_CTA_DISP_AC_BANCO    OUT VARCHAR2,
                                 P_CTA_DISP_AC_TIPO_CTA OUT VARCHAR2,
                                 P_CTA_DISP_AC_CTA      OUT VARCHAR2,
                                 p_usuario              varchar2,
                                 p_error                OUT VARCHAR2);

  PROCEDURE d_cta_dispersion_fcm(P_NIT_FCM    VARCHAR2,
                                 P_IDBANCOREC CHAR,
                                 p_usuario    varchar2,
                                 p_error      OUT VARCHAR2);

  PROCEDURE validarRangoFecha(p_fecha_ini_ano number,
                              p_fecha_ini_mes number,
                              p_fecha_ini_dia number,
                              p_fecha_fin_ano number,
                              p_fecha_fin_mes number,
                              p_fecha_fin_dia number,
                              p_indtipo       char,
                              p_idmunicipio   char,
                              p_idvalidador   char,
                              p_error         OUT VARCHAR2);

  PROCEDURE u_NovmunicipioEst(p_tiponov   varchar2,
                              p_numeronov varchar2,
                              p_usuario   varchar2,
                              p_estado    varchar2,
                              p_error     OUT VARCHAR2);

  PROCEDURE a_parConta(v_idparametro varchar2,
                       v_parametro   varchar2,
                       v_descripcion varchar2,
                       v_usuario     number,
                       v_cod_error   out number,
                       v_msg_error   out varchar2);

  PROCEDURE m_parConta(v_idparametro varchar2,
                       v_parametro   varchar2,
                       v_descripcion varchar2,
                       v_usuario     number,
                       v_cod_error   out number,
                       v_msg_error   out varchar2);

  PROCEDURE d_parConta(v_idparametro varchar2,
                       v_usuario     number,
                       v_cod_error   out number,
                       v_msg_error   out varchar2);                       
end pk_param;
/

prompt
prompt Creating package PK_PROC
prompt ========================
prompt
CREATE OR REPLACE PACKAGE SIMIT."PK_PROC" is

  -- Author  : Ricardo Buitrago Lizarazo
  -- Created : 18/04/2007 10:14:23 a.m.
  -- Purpose :

  -- Public type declarations
  TYPE cursor_t_salida IS REF CURSOR;

  -- Public variable declarations
  v_error   NUMBER := 0;
  v_message VARCHAR2(255);

  MSG_UPD_OK VARCHAR2(255) := 'Registro Actualizado Correctamente';
  MSG_INS_OK VARCHAR2(255) := 'Registro Insertado Correctamente';
  MSG_DEL_OK VARCHAR2(255) := 'Registro Eliminado Correctamente';

  -- Public function and procedure declarations
  PROCEDURE i_archivo(p_filename varchar2,
                      p_cfile    clob,
                      p_usuario  varchar2,
                      p_error    OUT VARCHAR2);

  PROCEDURE v_archivoBin(p_uploadid number,
                         p_usuario  varchar2,
                         p_error    OUT VARCHAR2);

  PROCEDURE i_archivoBin(p_filename varchar2,
                         p_bfile    blob,
                         p_usuario  varchar2,
                         p_error    OUT VARCHAR2);

  PROCEDURE v_archivo(p_tipoCargue      varchar2,
                      p_uploadid        number,
                      p_idbanco         char,
                      p_cta_recaudo_fcm varchar2,
                      p_usuario         varchar2,
                      p_error           OUT VARCHAR2);

  PROCEDURE q_NovValidador_fecha(p_tiponov                  varchar2,
                                 p_numeronov                number,
                                 p_usuario                  varchar2,
                                 p_idmunicipio              out char,
                                 p_idvalidador              out char,
                                 p_indTipo                  out char,
                                 p_fecha_ini                out date,
                                 p_fecha_fin                out date,
                                 p_p_municipio              out number,
                                 p_p_fcm_contravencional    out number,
                                 p_p_conces_contravencional out number,
                                 p_p_acuerdopago            out number,
                                 p_nit_tercero1             out varchar2,
                                 p_base_tercero1            out number,
                                 p_ind_base_tercero1        out number,
                                 p_nit_tercero2             out varchar2,
                                 p_base_tercero2            out number,
                                 p_ind_base_tercero2        out number,
                                 p_fechaact                 out date,
                                 p_firma1                   out varchar2,
                                 p_firma2                   out varchar2,
                                 p_estadonov                out varchar2,
                                 p_error                    OUT VARCHAR2);
  PROCEDURE i_NovValidador_fecha(p_idmunicipio              char,
                                 p_idvalidador              char,
                                 p_indTipo                  char,
                                 p_fecha_ini_ano            number,
                                 p_fecha_ini_mes            number,
                                 p_fecha_ini_dia            number,
                                 p_fecha_fin_ano            number,
                                 p_fecha_fin_mes            number,
                                 p_fecha_fin_dia            number,
                                 p_p_municipio              number,
                                 p_p_fcm_contravencional    number,
                                 p_p_conces_contravencional number,
                                 p_p_acuerdopago            number,
                                 p_nit_tercero1             varchar2,
                                 p_base_tercero1            number,
                                 p_ind_base_tercero1        number,
                                 p_nit_tercero2             varchar2,
                                 p_base_tercero2            number,
                                 p_ind_base_tercero2        number,
                                 p_usuario                  varchar2,
                                 p_tiponov                  varchar2,
                                 p_fecha_act_ano            number,
                                 p_fecha_act_mes            number,
                                 p_fecha_act_dia            number,
                                 p_firma1                   varchar2,
                                 p_firma2                   varchar2,
                                 p_error                    OUT VARCHAR2,
                                 p_novedad                  OUT varchar2);
  PROCEDURE q_NovValidador_fechaE(p_tiponov   varchar2,
                                  p_numeronov number,
                                  p_usuario   varchar2,
                                  p_estadonov out varchar2,
                                  p_error     OUT VARCHAR2);
  PROCEDURE u_NovValidador_fechaEst(p_tiponov   varchar2,
                                    p_numeronov number,
                                    p_usuario   varchar2,
                                    p_estado    varchar2,
                                    p_error     OUT VARCHAR2);

  PROCEDURE i_Novmunicipio(p_idmunicipio              varchar2,
                           p_nit_m                    varchar2,
                           p_nombre                   varchar2,
                           p_idconcesionario          varchar2,
                           p_correo                   varchar2,
                           p_indretroactividad        number,
                           p_indliq_s_ext             number,
                           p_indliq_s_local           number,
                           p_indliq_p_ext             number,
                           p_indliq_p_local           number,
                           p_indAcuerdoPago_2002      number,
                           p_idbanco                  varchar2,
                           p_tipocuenta               varchar2,
                           p_cuenta                   varchar2,
                           p_nit_cta                  varchar2,
                           p_municipio_s              number,
                           p_fcm_contravencional_s    number,
                           p_conces_contravencional_s number,
                           p_acuerdopago_s            number,
                           p_municipio_p              number,
                           p_fcm_contravencional_p    number,
                           p_conces_contravencional_p number,
                           p_acuerdopago_p            number,
                           p_usuario                  varchar2,
                           p_fecha_act_ano            number,
                           p_fecha_act_mes            number,
                           p_fecha_act_dia            number,
                           p_firma1                   varchar2,
                           p_firma2                   varchar2,
                           p_dnsAvvillas              varchar2,
                           p_dnsDavivienda            varchar2,
                           p_error                    OUT VARCHAR2,
                           p_novedad                  OUT varchar2
                           
                           );

  PROCEDURE q_Novmunicipio(p_tiponov                  varchar2,
                           p_numeronov                varchar2,
                           p_usuario                  varchar2,
                           p_idmunicipio              out varchar2,
                           p_nit_m                    out varchar2,
                           p_nombre                   out varchar2,
                           p_idconcesionario          out varchar2,
                           p_correo                   out varchar2,
                           p_indretroactividad        out number,
                           p_indliq_s_ext             out number,
                           p_indliq_s_local           out number,
                           p_indliq_p_ext             out number,
                           p_indliq_p_local           out number,
                           p_indAcuerdoPago_2002      out number,
                           p_idbanco                  out varchar2,
                           p_tipocuenta               out varchar2,
                           p_cuenta                   out varchar2,
                           p_nit_cta                  out varchar2,
                           p_municipio_s              out number,
                           p_fcm_contravencional_s    out number,
                           p_conces_contravencional_s out number,
                           p_acuerdopago_s            out number,
                           p_municipio_p              out number,
                           p_fcm_contravencional_p    out number,
                           p_conces_contravencional_p out number,
                           p_acuerdopago_p            out number,
                           p_fechaact                 out date,
                           p_firma1                   out varchar2,
                           p_firma2                   out varchar2,
                           p_estadonov                out varchar2,
                           p_dnsAvvilas               out varchar2,
                           p_dnsGranbanco             out varchar2,
                           p_error                    OUT VARCHAR2);

  PROCEDURE q_NovmunicipioE(p_tiponov   varchar2,
                            p_numeronov number,
                            p_usuario   varchar2,
                            p_estadonov out varchar2,
                            p_error     OUT VARCHAR2);
  PROCEDURE u_Novmunicipio(p_idmunicipio              varchar2,
                           p_nit_m                    varchar2,
                           p_nombre                   varchar2,
                           p_idconcesionario          varchar2,
                           p_correo                   varchar2,
                           p_indretroactividad        number,
                           p_indliq_s_ext             number,
                           p_indliq_s_local           number,
                           p_indliq_p_ext             number,
                           p_indliq_p_local           number,
                           p_indAcuerdoPago_2002      number,
                           p_idbanco                  varchar2,
                           p_tipocuenta               varchar2,
                           p_cuenta                   varchar2,
                           p_nit_cta                  varchar2,
                           p_municipio_s              number,
                           p_fcm_contravencional_s    number,
                           p_conces_contravencional_s number,
                           p_acuerdopago_s            number,
                           p_municipio_p              number,
                           p_fcm_contravencional_p    number,
                           p_conces_contravencional_p number,
                           p_acuerdopago_p            number,
                           p_usuario                  varchar2,
                           p_fecha_act_ano            number,
                           p_fecha_act_mes            number,
                           p_fecha_act_dia            number,
                           p_firma1                   varchar2,
                           p_firma2                   varchar2,
                           p_dnsAvvillas              varchar2,
                           p_dnsDavivienda            varchar2,
                           p_error                    OUT VARCHAR2,
                           p_novedad                  out varchar2);

  PROCEDURE u_NovmunicipioEst(p_tiponov   varchar2,
                              p_numeronov varchar2,
                              p_usuario   varchar2,
                              p_estado    varchar2,
                              p_error     OUT VARCHAR2);

  PROCEDURE q_NovDiasDispersionE(p_tiponov   varchar2,
                                 p_numeronov number,
                                 p_usuario   varchar2,
                                 p_estadonov out varchar2,
                                 p_error     OUT VARCHAR2);

  PROCEDURE i_NovDiasDispersion(p_idmunicipio        char,
                                p_idbanco            char,
                                p_dias_dispersion_se number,
                                p_dias_dispersion_sl number,
                                p_dias_dispersion_pe number,
                                p_dias_dispersion_pl number,
                                p_frec_dispersion_se number,
                                p_frec_dispersion_sl number,
                                p_frec_dispersion_pe number,
                                p_frec_dispersion_pl number,
                                p_usuario            varchar2,
                                p_tiponov            varchar2,
                                p_fecha_act_ano      number,
                                p_fecha_act_mes      number,
                                p_fecha_act_dia      number,
                                p_firma1             varchar2,
                                p_firma2             varchar2,
                                p_nombre             varchar2,
                                p_dnsAvvillas        varchar2,
                                p_dnsGranbanco       varchar2,
                                p_error              OUT VARCHAR2,
                                p_novedad            OUT varchar2);

  PROCEDURE q_NovDiasDispersion(p_tiponov            varchar2,
                                p_numeronov          number,
                                p_usuario            varchar2,
                                p_idmunicipio        out char,
                                p_idbanco            out char,
                                p_dias_dispersion_se out number,
                                p_dias_dispersion_sl out number,
                                p_dias_dispersion_pe out number,
                                p_dias_dispersion_pl out number,
                                p_frec_dispersion_se out number,
                                p_frec_dispersion_sl out number,
                                p_frec_dispersion_pe out number,
                                p_frec_dispersion_pl out number,
                                p_fechaact           out date,
                                p_firma1             out varchar2,
                                p_firma2             out varchar2,
                                p_estadonov          out varchar2,
                                p_error              OUT VARCHAR2);

  PROCEDURE u_NovDiasDispersionEst(p_tiponov   varchar2,
                                   p_numeronov number,
                                   p_usuario   varchar2,
                                   p_estado    varchar2,
                                   p_error     OUT VARCHAR2);

  PROCEDURE q_NovterceroE(p_tiponov   varchar2,
                          p_numeronov number,
                          p_usuario   varchar2,
                          p_estadonov out varchar2,
                          p_error     OUT VARCHAR2);
  PROCEDURE q_Novtercero(p_tiponov       varchar2,
                         p_numeronov     number,
                         p_usuario       varchar2,
                         p_idmunicipio   out varchar2,
                         p_nit_t         out varchar2,
                         p_nombre        out varchar2,
                         p_correoTercero out varchar2,
                         p_idbanco       out varchar2,
                         p_tipocuenta    out varchar2,
                         p_cuenta        out varchar2,
                         p_base_s        out number,
                         p_base_p        out number,
                         p_ind_base      out number,
                         p_num_tercero   out number,
                         p_fechaact      out date,
                         p_firma1        out varchar2,
                         p_firma2        out varchar2,
                         p_estadonov     out varchar2,
                         p_error         OUT VARCHAR2);

  PROCEDURE u_NovtercerosEst(p_tiponov   varchar2,
                             p_numeronov number,
                             p_usuario   varchar2,
                             p_estado    varchar2,
                             p_error     OUT VARCHAR2);

  PROCEDURE i_Novterceros(p_idmunicipio   char,
                          p_nit_t         char,
                          p_nombre        varchar2,
                          p_correoTercero varchar2,
                          p_idbanco       char,
                          p_tipocuenta    char,
                          p_cuenta        varchar2,
                          p_base_s        number,
                          p_base_p        number,
                          p_ind_base      number,
                          p_num_tercero   number,
                          p_usuario       varchar2,
                          p_tiponov       varchar2,
                          p_fecha_act_ano number,
                          p_fecha_act_mes number,
                          p_fecha_act_dia number,
                          p_firma1        varchar2,
                          p_firma2        varchar2,
                          p_dnsavvillas   varchar2,
                          p_dnsgranbanco  varchar2,
                          p_error         OUT VARCHAR2,
                          p_novedad       OUT varchar2);

  PROCEDURE aprobar_reproceso(p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_tipo        varchar2,
                              p_motivo      varchar2,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2);

  PROCEDURE l_recaudo_local(p_fec_ini_ano number,
                            p_fec_ini_mes number,
                            p_fec_ini_dia number,
                            p_fec_fin_ano number,
                            p_fec_fin_mes number,
                            p_fec_fin_dia number,
                            p_banco       varchar2,
                            p_usuario     varchar2,
                            p_error       OUT VARCHAR2);

  PROCEDURE carga_recaudo_externo(p_feccor_ini_ano number,
                                  p_feccor_ini_mes number,
                                  p_feccor_ini_dia number,
                                  p_feccor_fin_ano number,
                                  p_feccor_fin_mes number,
                                  p_feccor_fin_dia number,
                                  p_usuario        varchar2,
                                  p_error          OUT VARCHAR2);

  PROCEDURE liquida_recaudo_externo(p_feccor_ini_ano number,
                                    p_feccor_ini_mes number,
                                    p_feccor_ini_dia number,
                                    p_usuario        varchar2,
                                    p_error          OUT VARCHAR2);

  PROCEDURE transferir_recaudo_externo(p_fec_ini_ano number,
                                       p_fec_ini_mes number,
                                       p_fec_ini_dia number,
                                       p_usuario     varchar2,
                                       p_error       OUT VARCHAR2);

  /*PROCEDURE transferir_rec_ext_conFecha(p_fec_ini_ano number,
  p_fec_ini_mes number,
  p_fec_ini_dia number,
  p_usuario     varchar2,
  p_error       OUT VARCHAR2);*/

  procedure sp_liquida_recaudo_local(p_fec_ini date,
                                     p_fec_fin date,
                                     p_banco   varchar2,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2);

  PROCEDURE dispersa_recaudo_local(p_fec_ini_ano number,
                                   p_fec_ini_mes number,
                                   p_fec_ini_dia number,
                                   p_fec_fin_ano number,
                                   p_fec_fin_mes number,
                                   p_fec_fin_dia number,
                                   p_banco       varchar2,
                                   p_usuario     varchar2,
                                   p_error       OUT VARCHAR2);

  PROCEDURE dispersa_recaudo_externo(p_fec_ini_ano number,
                                     p_fec_ini_mes number,
                                     p_fec_ini_dia number,
                                     p_usuario     varchar2,
                                     p_error       OUT VARCHAR2);

  PROCEDURE generarArchivoAvvillas(p_fecha   date,
                                   p_usuario varchar2,
                                   p_error   OUT VARCHAR2);

  PROCEDURE generarArchivoDavivienda(p_fecha   date,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2);

  PROCEDURE envio_Banco(p_fec_ini_ano number,
                        p_fec_ini_mes number,
                        p_fec_ini_dia number,
                        p_idbanco     varchar2,
                        p_usuario     varchar2,
                        p_error       OUT VARCHAR2,
                        p_log         out varchar2);

  PROCEDURE generarScriptAvvillas(p_fecha   date,
                                  p_usuario varchar2,
                                  p_error   OUT VARCHAR2);

  PROCEDURE generarScriptDavivienda(p_fecha   date,
                                    p_usuario varchar2,
                                    p_error   OUT VARCHAR2);

  PROCEDURE ejecutarScriptAvvillas(p_fecha   date,
                                   p_usuario varchar2,
                                   p_error   OUT VARCHAR2);

  PROCEDURE ejecutarScriptDavivienda(p_fecha   date,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2);

  PROCEDURE verLogEnvioAvvillas(salida OUT VARCHAR2);

  PROCEDURE verLogEnvioDavivienda(salida OUT VARCHAR2);

  procedure aplicaNovedadesMunicipio(p_fecha date);

  procedure aplicaNovedadesDiasMunicipio(p_fecha date);

  procedure aplicaNovedadesTercero(p_fecha date);

  PROCEDURE valida_transferencia(p_fec_ini_ano number,
                                 p_fec_ini_mes number,
                                 p_fec_ini_dia number,
                                 p_usuario     varchar2,
                                 p_error       OUT VARCHAR2);

  PROCEDURE ejecutarDesencripta(p_fecha   date,
                                p_usuario varchar2,
                                p_idbanco varchar2,
                                p_error   OUT VARCHAR2,
                                salida    OUT VARCHAR2);

  PROCEDURE desencripta_Banco(p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_idbanco     varchar2,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2,
                              p_log         out varchar2);

  PROCEDURE verLogDesencripta(p_idbanco varchar2, salida OUT VARCHAR2);
  PROCEDURE envio_Banco_repro(p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_fec_fin_ano number,
                              p_fec_fin_mes number,
                              p_fec_fin_dia number,
                              p_idbanco     varchar2,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2,
                              p_log         out varchar2);

  PROCEDURE generarArchivoAvvillas_repro(p_fecha_ini date,
                                         p_fecha_fin date,
                                         p_usuario   varchar2,
                                         p_error     OUT VARCHAR2);

  PROCEDURE generarArchivoDavivienda_repro(p_fecha_ini date,
                                           p_fecha_fin date,
                                           p_usuario   varchar2,
                                           p_error     OUT VARCHAR2);

  PROCEDURE i_recaudo_local_ajustes(
                                    
                                    p_idbanco       char,
                                    p_cta_recaudo   varchar2,
                                    p_indtipo       char,
                                    p_fec_corte_ano number,
                                    p_fec_corte_mes number,
                                    p_fec_corte_dia number,
                                    p_fec_tran_ano  number,
                                    p_fec_tran_mes  number,
                                    p_fec_tran_dia  number,
                                    p_valor_total   number,
                                    p_idmunicipio   char,
                                    p_periodo       char,
                                    p_p_consignado  number,
                                    p_motivo        varchar2,
                                    p_usuario       varchar2,
                                    p_error         OUT VARCHAR2);

  PROCEDURE d_recaudo_local_ajustes(p_id_recaudo_local_ajustes number,
                                    p_usuario                  varchar2,
                                    p_error                    OUT VARCHAR2);

  PROCEDURE q_recaudo_local_ajustes(p_id_recaudo_local_ajustes number,
                                    p_idbanco                  out varchar2,
                                    p_cta_recaudo              out varchar2,
                                    p_indtipo                  out varchar2,
                                    p_fec_corte                out date,
                                    p_fec_tran                 out date,
                                    p_valor_total              out number,
                                    p_idmunicipio              out char,
                                    p_periodo                  out varchar2,
                                    p_p_consignado             out number,
                                    p_motivo                   out varchar2,
                                    p_usuario                  varchar2,
                                    
                                    p_error OUT VARCHAR2
                                    
                                    );

  PROCEDURE i_archivoSoporte(p_id_recaudo_local_ajustes number,
                             p_filename                 varchar2,
                             p_nombreDocumento          varchar2,
                             p_extensionArchivo         varchar2,
                             p_bfile                    blob,
                             p_usuario                  varchar2,
                             p_error                    OUT VARCHAR2);

  PROCEDURE q_archivoSoporte(p_id_documento     number,
                             p_usuario          varchar2,
                             p_nombrearchivo    out varchar2,
                             p_nombreDocumento  out varchar2,
                             p_extensionArchivo out varchar2,
                             p_datosarchivo     out blob,
                             p_error            OUT VARCHAR2);

  PROCEDURE d_archivoSoporte(p_id_documento number,
                             p_usuario      varchar2,
                             p_error        OUT VARCHAR2);

  PROCEDURE cargarExtAvvillas(p_uploadid        NUMBER,
                              p_idbanco         char,
                              p_cta_recaudo_fcm varchar2,
                              p_usuario         varchar2,
                              p_error           OUT VARCHAR2);

  PROCEDURE cargarExtPopular(p_uploadid        NUMBER,
                             p_idbanco         char,
                             p_cta_recaudo_fcm varchar2,
                             p_usuario         varchar2,
                             p_error           OUT VARCHAR2);
  PROCEDURE cargarExtAgrario(p_uploadid        NUMBER,
                             p_idbanco         char,
                             p_cta_recaudo_fcm varchar2,
                             p_usuario         varchar2,
                             p_error           OUT VARCHAR2);
  PROCEDURE cargarExtBancafe(p_uploadid        NUMBER,
                             p_idbanco         char,
                             p_cta_recaudo_fcm varchar2,
                             p_usuario         varchar2,
                             p_error           OUT VARCHAR2);
  PROCEDURE cargarExtDavivienda(p_uploadid        NUMBER,
                                p_idbanco         char,
                                p_cta_recaudo_fcm varchar2,
                                p_usuario         varchar2,
                                p_error           OUT VARCHAR2);

  PROCEDURE cargarMovAvvillas(p_uploadid        NUMBER,
                              p_idbanco         char,
                              p_cta_recaudo_fcm varchar2,
                              p_usuario         varchar2,
                              p_error           OUT VARCHAR2);

  PROCEDURE cargarIdeMasiva(p_uploadid        NUMBER,
                            p_idbanco         char,
                            p_cta_recaudo_fcm varchar2,
                            p_usuario         varchar2,
                            p_error           OUT VARCHAR2);

end pk_proc;
/

prompt
prompt Creating package PK_RECLOC
prompt ==========================
prompt
create or replace package simit.PK_RECLOC is

  PROCEDURE q_concesFunc(p_usuario          varchar2,
                         p_idConcesionario  out varchar2,
                         p_nomConcesionario out varchar2,
                         p_error            out varchar2);

  PROCEDURE u_deposito(p_usuario          varchar2,
                       p_numSecuenciaReg  number,
                       p_indtipoiden      varchar2,
                       p_idmunicipioiden  varchar2,
                       p_p_consignadoiden number,
                       p_observaciones    varchar2,
                       p_error            out varchar2);

  PROCEDURE aprobar_reproceso(p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_fec_fin_ano number,
                              p_fec_fin_mes number,
                              p_fec_fin_dia number,
                              
                              p_tipo    varchar2,
                              p_motivo  varchar2,
                              p_banco   varchar2,
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2);

  PROCEDURE transferir_recaudo_local(p_fec_ini_ano number,
                                     p_fec_ini_mes number,
                                     p_fec_ini_dia number,
                                     p_usuario     varchar2,
                                     p_error       OUT VARCHAR2);

  PROCEDURE contabiliza_recaudo_local(p_feccor_ini_ano number,
                                      p_feccor_ini_mes number,
                                      p_feccor_ini_dia number,
                                      p_feccor_fin_ano number,
                                      p_feccor_fin_mes number,
                                      p_feccor_fin_dia number,
                                      p_banco          varchar2,
                                      p_usuario        varchar2,
                                      p_error          OUT VARCHAR2);

  PROCEDURE contabiliza_trf_siniden(p_feccor_ini_ano number,
                                    p_feccor_ini_mes number,
                                    p_feccor_ini_dia number,
                                    p_feccor_fin_ano number,
                                    p_feccor_fin_mes number,
                                    p_feccor_fin_dia number,
                                    p_usuario        varchar2,
                                    p_error          OUT VARCHAR2);

  PROCEDURE contabiliza_pago_local(p_feccor_ini_ano number,
                                   p_feccor_ini_mes number,
                                   p_feccor_ini_dia number,
                                   p_usuario        varchar2,
                                   p_error          OUT VARCHAR2);

end PK_RECLOC;
/

prompt
prompt Creating package PK_REPROCESO
prompt =============================
prompt
create or replace package simit.pk_reproceso is

  -- Author  : HUGO CENDALES P 
  -- Created : 24/06/2011 9:07:32
  -- Purpose : manejo de reprocesos de liquidacion

PROCEDURE carga_recaudo_externo_repro( 
                                        p_idbanco        varchar2,
                                        p_feccor_ini_ano number,
                                        p_feccor_ini_mes number,
                                        p_feccor_ini_dia number,
                                        p_feccor_fin_ano number,
                                        p_feccor_fin_mes number,
                                        p_feccor_fin_dia number,
                                        V_USUARIO        VARCHAR2,
                                        p_error          OUT VARCHAR2);
                                        
  PROCEDURE e_Reproceso(V_IDBANCO           VARCHAR2,
                        V_FECHA_COR_INI_ANO NUMBER,
                        V_FECHA_COR_INI_MES NUMBER,
                        V_FECHA_COR_INI_DIA NUMBER,
                        V_FECHA_COR_FIN_ANO NUMBER,
                        V_FECHA_COR_FIN_MES NUMBER,
                        V_FECHA_COR_FIN_DIA NUMBER,
                        V_USUARIO           VARCHAR2,
                        V_ERROR             OUT VARCHAR2,
                        V_LOG               OUT VARCHAR2);
end pk_reproceso;
/

prompt
prompt Creating package PK_VISTO
prompt =========================
prompt
create or replace package simit.PK_VISTO is

  -- Author  : USER
  -- Created : 30/08/2011 7:50:08
  -- Purpose : Manejo de vistos buenos

  PROCEDURE vistoBuenoS      (p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_fec_fin_ano number,
                              p_fec_fin_mes number,
                              p_fec_fin_dia number,
                              
                              p_tipoRec varchar2,
                              p_proceso varchar2,
                              p_banco   varchar2,
                              p_observaciones varchar2,
                              
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2);

  PROCEDURE vistoBuenoP      (p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_fec_fin_ano number,
                              p_fec_fin_mes number,
                              p_fec_fin_dia number,
                              
                              p_tipoRec varchar2,
                              p_proceso varchar2,
                              p_banco   varchar2,
                              p_observaciones varchar2,
                              
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2);
end PK_VISTO;
/

prompt
prompt Creating package TYPES
prompt ======================
prompt
CREATE OR REPLACE PACKAGE SIMIT."TYPES"
AS
    TYPE ref_cursor IS REF CURSOR;
END;
/

prompt
prompt Creating type TOKEN_LIST
prompt ========================
prompt
CREATE OR REPLACE TYPE SIMIT."TOKEN_LIST"                                                                                                                                                                                                    is varray(100) of varchar2(200)
/

prompt
prompt Creating function SEGURIDAD_ENCRIPTAR
prompt =====================================
prompt
CREATE OR REPLACE FUNCTION SIMIT."SEGURIDAD_ENCRIPTAR" (cadena IN STRING, semilla IN STRING)
RETURN VARCHAR2 IS
LANGUAGE JAVA
NAME 'Seguridad.Encriptar(java.lang.String,java.lang.String) return String';
/

prompt
prompt Creating function ENCRIPTAR
prompt ===========================
prompt
CREATE OR REPLACE FUNCTION SIMIT."ENCRIPTAR" (cadena varchar2) return varchar2 is
  Result varchar2(250);
begin

  Result := seguridad_encriptar(cadena, pk_auten.darsemilla );

  return(Result);
end encriptar;
/

prompt
prompt Creating function FN
prompt ====================
prompt
CREATE OR REPLACE FUNCTION SIMIT."FN" (p number) return varchar2 is
  Result varchar2(32000);
  i      number := 1;
begin

  while i <= p loop
    Result := Result || to_char(i) || ',' || to_char(i+1) || ',';
    i := i + 4;
  end loop;
  Result := Result || '/';
  i:= 3;
  while i <= p loop
    Result := Result || to_char(i) || ',' || to_char(i+1);
    i := i + 4;
  end loop;
  return(Result);


end fn;
/

prompt
prompt Creating function FN_DAR_PARCONTA
prompt =================================
prompt
create or replace function simit.FN_DAR_PARCONTA(v_parametro varchar2) return varchar2 is
  Result Varchar2(50);
begin

  select parametro
  into Result
  from par_conta
  where idparametro = v_parametro;

  return(Result);

end FN_DAR_PARCONTA;
/

prompt
prompt Creating function FN_TOKEN
prompt ==========================
prompt
CREATE OR REPLACE FUNCTION SIMIT."FN_TOKEN" (c varchar2, x in out int) return varchar2 is
  Result varchar2(32767);
  y int;
begin
  y:= Instr(c, ',', x, 1);

  if ( y = 0    ) then
    y:= Instr(c, ';', x, 1);
  end if;

  Result := Substr(c, x, y-x);
  x:=y+1;
  return(Result);

end fn_token;
/

prompt
prompt Creating procedure SP_EX
prompt ========================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_EX" (p_sqlcode number,
                                  p_message varchar2,
                                  p_error   OUT VARCHAR2) is
  v_id_errors NUMBER;
begin
  SELECT seq_errors.NEXTVAL INTO v_id_errors FROM dual;

  p_error := p_message;

  insert into errors
    (id_errors, fecha, sqlcode, message)
  values
    (v_id_errors, sysdate, p_sqlcode, p_message);
  COMMIT;

  if (p_sqlcode = -2292) then
    p_error := 'No se puede eliminar registro por que esta referenciado';
  end if;

  if (p_sqlcode = -1) then
    p_error := 'Registro existente';
  end if;

end sp_EX;
/

prompt
prompt Creating function FN_DIVIDE_ARCHIVO_AVVILLAS
prompt ============================================
prompt
CREATE OR REPLACE FUNCTION SIMIT."FN_DIVIDE_ARCHIVO_AVVILLAS" (p_uploadid        NUMBER,
                                             p_idbanco         char,
                                             p_cta_recaudo_fcm varchar2,
                                             p_usuario         varchar2,
                                             p_error           OUT VARCHAR2)
  return varchar2 is

  vBuffer      VARCHAR2(32767);
  l_amount     BINARY_INTEGER := 32767;
  l_pos        PLS_INTEGER := 1;
  i            number := 1;
  tk           number := 1;
  l_clob_len   PLS_INTEGER;
  v_cfile      CLOB;
  v_chr        NUMBER := 13; -- 1 tipo de Enter
  v_cuenta     recaudo_local.cta_recaudo%type;
  v_indtipo    recaudo_local.indtipo%type;
  r            recaudo_local_temp%rowtype;
  v_encabezado VARCHAR2(500) := 'Fecha de aplicacion,Fecha de transaccion,Origen,Valor Efectivo,Valor Canje,Valor Total,Referencia 1,Referencia 2,Referencia 3,Referencia 4,Referencia 5';
  v_registros number;
  w_registros number;
  v_total     number;
  v_finlinea  varchar(2);

BEGIN

  delete from recaudo_local_temp;


  r.idbanco     := p_idbanco;
  v_cuenta      := Substr(p_cta_recaudo_fcm,
                          Instrb(p_cta_recaudo_fcm, '-', 1, 2) + 1,
                          Length(p_cta_recaudo_fcm));
  r.cta_recaudo := v_cuenta;
  v_indtipo     := Substr(p_cta_recaudo_fcm,
                          1,
                          Instrb(p_cta_recaudo_fcm, '-', 1, 1) - 1);
  --  tk            := Length(v_indtipo);
  r.indtipo := v_indtipo;

  select cfile into v_cfile from upload where uploadid = p_uploadid;

  -- http://www.psoug.org/reference/dbms_lob.html
  l_clob_len := dbms_lob.getlength(v_cfile);

  v_finlinea := chr(13) || chr(10);

  l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
  IF l_amount < 1 THEN
    v_finlinea    := chr(13);
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
       v_finlinea    := chr(10);
       l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
       IF l_amount < 1 THEN
          p_error := 'Formato desconocido de archivo';
          return(p_error);
       end if;
    end if;
  end if;


  --Registro #1
    dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);

    if replace(Substr(vBuffer, 12, 9), ' ', '0') <> v_cuenta then
      p_error := 'La cuenta No es Valida';
      return(p_error);
    end if;

    l_pos := l_pos + l_amount + length(v_finlinea) -1 ;

  --Registro #2
  l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos, 1);
  IF l_amount < 1 THEN
    p_error := 'No existe Encabezado';
  else
    l_amount := l_amount - l_pos;
    dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
    if lower(vBuffer) <> lower(v_encabezado) then
      p_error := 'Encabezado erroneo';
      return(p_error);
    end if;
  end if;
  l_pos := l_pos + l_amount + length(v_finlinea);

  --Informacion
  WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos + 1, 1);
    IF l_amount < 1 THEN
      p_error := 'Registro ' || i || ' Invalido';
    else
      l_amount := l_amount - l_pos;
      dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      --Instr(char, search_string, startpos, occurrence)
      r.fec_corte      := to_date(fn_token(vBuffer, tk), 'yyyymmdd');
      r.fec_tran       := to_date(fn_token(vBuffer, tk), 'yyyymmdd');
      r.oficina_origen := fn_token(vBuffer, tk);
      r.valor_efectivo := to_number(fn_token(vBuffer, tk), '9999999999.99');
      r.valor_cheque   := to_number(fn_token(vBuffer, tk), '9999999999.99');
      r.valor_total    := to_number(fn_token(vBuffer, tk), '9999999999.99');
      r.nit_m          := Substr(fn_token(vBuffer, tk), -10, 10);
      r.idmunicipio    := Substr(vBuffer, tk + 8, 8);
      r.p_consignado   := 55;
    end if;
    l_pos := l_pos + l_amount + length(v_finlinea);
    i     := i + 1;
    tk    := 1;
    
    select count(*)
      into w_registros
      from recaudo_local_liquidacion l
      where  r.idbanco = l.idbanco and
      r.cta_recaudo = l.cta_recaudo and
      r.fec_corte = l.fec_corte and
      l.oficina_origen like 'RECAV%'; 

      if w_registros > 0 then
         p_error := 'No es posible cargar los depositos. Deposito ya liquidado. Solicitar reproceso recaudo local dia : ' || to_char(r.fec_corte,'yyyy-mm-dd');
         return(p_error);
      end if;

    
    insert into recaudo_local_temp values r;
  END LOOP;
  commit;


  delete from recaudo_local
   where idbanco in
         (select idbanco from recaudo_local_temp group by idbanco)
     and cta_recaudo in
         (select cta_recaudo from recaudo_local_temp group by cta_recaudo)
     and indtipo in
         (select indtipo from recaudo_local_temp group by indtipo)
     and fec_corte in
         (select fec_corte from recaudo_local_temp group by fec_corte)
     and oficina_origen like 'RECAV%';

  commit;


  insert into recaudo_local
    (idbanco,
     cta_recaudo,
     indtipo,
     fec_corte,
     fec_tran,
     oficina_origen,
     valor_efectivo,
     valor_cheque,
     valor_total,
     nit_m,
     idmunicipio,
     p_consignado)
    select idbanco,
           cta_recaudo,
           indtipo,
           fec_corte,
           fec_tran,
           'RECAV ' || oficina_origen,
           valor_efectivo,
           valor_cheque,
           valor_total,
           nit_m,
           idmunicipio,
           p_consignado
      from recaudo_local_temp;

  commit;

  select count(*), sum( valor_total)
  into v_registros, v_total
  from recaudo_local_temp;


  if p_error is null then
    p_error := 'El archivo se VALIDO exitosamente. Registros: ' || v_registros || ' por un valor de $ ' || to_char(v_total,'999,999,999,999,999.00') ;
  end if;
  return(p_error);
EXCEPTION
  WHEN OTHERS THEN
    sp_ex(SQLCODE,
          p_usuario || ' [fn_divide_archivo] ' || SQLERRM,
          p_error);
end fn_divide_archivo_avvillas;
/

prompt
prompt Creating function FN_DIVIDE_ARCHIVO_DEP
prompt =======================================
prompt
CREATE OR REPLACE FUNCTION SIMIT."FN_DIVIDE_ARCHIVO_DEP" (p_uploadid        NUMBER,
                                             p_idbanco         char,
                                             p_cta_recaudo_fcm varchar2,
                                             p_usuario         varchar2,
                                             p_error           OUT VARCHAR2)
  return varchar2 is

  vBuffer      VARCHAR2(32767);
  v_line       number :=2;
  l_amount     BINARY_INTEGER := 32767;
  l_pos        PLS_INTEGER := 1;
  i            number := 1;
  tk           number := 1;
  l_clob_len   PLS_INTEGER;
  v_cfile      CLOB;
  v_chr        NUMBER := 13; -- 1 tipo de Enter
  v_cuenta     recaudo_local.cta_recaudo%type;
  v_indtipo    recaudo_local.indtipo%type;
  r            recaudo_local_temp%rowtype;
  v_encabezado VARCHAR2(500) := 'Fecha de aplicacion,Fecha de transaccion,Origen,Valor Efectivo,Valor Canje,Valor Total,Referencia 1,Referencia 2,Referencia 3,Referencia 4,Referencia 5';
  v_registros number;
  v_total     number;
  v_finlinea  varchar(2);
  w_registros number;
  fin_dia_mes char(2);
  dia_corte char(2);

BEGIN

  delete from recaudo_local_temp;

  fin_dia_mes := 0;

  select cfile into v_cfile from upload where uploadid = p_uploadid;

  l_clob_len := dbms_lob.getlength(v_cfile);

  v_finlinea := chr(13) || chr(10);

  l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
  IF l_amount < 1 THEN
    v_finlinea    := chr(13);
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
       v_finlinea    := chr(10);
       l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
       IF l_amount < 1 THEN
          p_error := 'Formato desconocido de archivo';
            return(p_error);
       end if;
    end if;
  end if;

-- leer encabezado
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos, 1);
    IF l_amount < 1 THEN
      p_error := 'Registro 1  Invalido';
      return(p_error);
    else
      l_amount := l_amount - l_pos;
      dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      l_pos := l_pos + l_amount + length(v_finlinea);

 end if;
  --Informacion
  WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos, 1);
    IF l_amount < 1 THEN
      p_error := 'Registro ' || i || ' Invalido';
    else
      l_amount := l_amount - l_pos;
      dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      r.idbanco        := trim(fn_token(vBuffer, tk));
      r.cta_recaudo    := trim(fn_token(vBuffer, tk));
      r.indtipo        := trim(fn_token(vBuffer, tk));
      r.fec_corte      := to_date(trim(fn_token(vBuffer, tk)), 'yyyymmdd');
      r.fec_tran       := to_date(trim(fn_token(vBuffer, tk)), 'yyyymmdd');
      r.oficina_origen := null;
      r.valor_efectivo := to_number(trim(fn_token(vBuffer, tk)), '9999999999.99');
      r.valor_cheque   := 0.0;
      r.valor_total    := r.valor_efectivo;
      r.nit_m          := null;
      r.idmunicipio    := trim(fn_token(vBuffer, tk));
      r.p_consignado   := Substr(vBuffer, tk, 2);

      if (r.idBanco = '50' ) then
         r.idbanco := '51';
      end if;
      
      select count(*)
      into w_registros
      from cta_recaudo_fcm
      where idbanco = r.idbanco and
      indtipo = r.indtipo and
      cuenta = r.cta_recaudo;

      if w_registros = 0 then
         p_error := 'Cuenta no Registrada: ' || r.idbanco || '-' || r.indtipo || '-' || r.cta_recaudo;
         return(p_error);
      end if;


/* SE COMENTAREA POR Q RESTRINGUE EL RECAUDO LOCAL 09/12/15 19:41*/
      select count(*)
      into w_registros
      from municipio
      where idmunicipio = r.idmunicipio;

      if w_registros = 0 then
         p_error := 'Municipio no registrado: ' || r.idmunicipio;
         return(p_error);
      end if;
/**/
      if r.p_consignado <> 10 and r.p_consignado <> 45 and r.p_consignado <> 55 then
         p_error := 'Porcentaje de consignacion debe ser 10,45,55. Se registro  ' ||  r.p_consignado;
         return(p_error);
      end if;

--      if fin_dia_mes = '00' then
         fin_dia_mes := to_char(last_day(r.fec_corte),'dd');
--      end if;

      dia_corte := to_char(r.fec_corte,'dd');

      if dia_corte <> '15' and
         dia_corte <> fin_dia_mes then
         p_error := 'FECHA CORTE DEBE SER 15 O FIN DE MES';
         return(p_error);
      end if;


      select count(*)
      into w_registros
      from recaudo_local_liquidacion l
      where  r.idbanco = l.idbanco and
      r.cta_recaudo = l.cta_recaudo and
      r.fec_corte = l.fec_corte and
      l.oficina_origen like 'DEPOS%'; 

      if w_registros > 0 then
         p_error := 'No es posible cargar los depositos. Deposito ya liquidado. Solicitar reproceso recaudo local dia : ' || to_char(r.fec_corte,'yyyy-mm-dd') || ' Reg: ' || v_line;
         return(p_error);
      end if;


    end if;
    l_pos := l_pos + l_amount + length(v_finlinea);
    tk    := 1;
    insert into recaudo_local_temp values r;
    v_line := v_line + 1;
  END LOOP;
  commit;


  select count(*)
  into w_registros
  from (select fec_corte from recaudo_local_temp group by fec_corte);

  if w_registros > 1 then
     p_error := 'SOLO ES POSIBLE CARGAR UNA FECHA DE CORTE POR ARCHIVO. FECHA CORTE DEBE SER 15 O FIN DE MES';
     return(p_error);
  end if;

  delete from recaudo_local
   where idbanco in
         (select idbanco from recaudo_local_temp group by idbanco)
     and cta_recaudo in
         (select cta_recaudo from recaudo_local_temp group by cta_recaudo)
     and indtipo in
         (select indtipo from recaudo_local_temp group by indtipo)
     and fec_corte in
         (select fec_corte from recaudo_local_temp group by fec_corte)
     and oficina_origen like 'DEPOS%';

  commit;



  insert into recaudo_local
    (idbanco,
     cta_recaudo,
     indtipo,
     fec_corte,
     fec_tran,
     oficina_origen,
     valor_efectivo,
     valor_cheque,
     valor_total,
     nit_m,
     idmunicipio,
     p_consignado)
    select idbanco,
           cta_recaudo,
           indtipo,
           fec_corte,
           fec_tran,
           'DEPOS ' || oficina_origen,
           valor_efectivo,
           valor_cheque,
           valor_total,
           nit_m,
           idmunicipio,
           p_consignado
      from recaudo_local_temp;

  commit;

  select count(*), sum( valor_total)
  into v_registros, v_total
  from recaudo_local_temp;


  if p_error is null then
    p_error := 'El archivo se VALIDO exitosamente. Registros: ' || v_registros || ' por un valor de $ ' || to_char(v_total,'999,999,999,999,999.00') ;
  end if;

  return(p_error);
EXCEPTION
  WHEN OTHERS THEN
    sp_ex(SQLCODE,
          p_usuario || ' [fn_divide_archivo] ' || SQLERRM,
          p_error);
end fn_divide_archivo_dep;
/

prompt
prompt Creating function FN_DIVIDE_ARCHIVO_SIN
prompt =======================================
prompt
create or replace function simit.fn_divide_archivo_sin(p_uploadid        NUMBER,
                                             p_idbanco         char,
                                             p_cta_recaudo_fcm varchar2,
                                             p_usuario         varchar2,
                                             p_error           OUT VARCHAR2)
  return varchar2 is

  vBuffer      VARCHAR2(32767);
  l_amount     BINARY_INTEGER := 32767;
  l_pos        PLS_INTEGER := 1;
  i            number := 1;
  tk           number := 1;
  l_clob_len   PLS_INTEGER;
  v_cfile      CLOB;
  v_chr        NUMBER := 13; -- 1 tipo de Enter
  v_cuenta     recaudo_local.cta_recaudo%type;
  v_indtipo    recaudo_local.indtipo%type;
  r            recaudo_local_temp%rowtype;
  v_encabezado VARCHAR2(500) := 'Fecha de aplicacion,Fecha de transaccion,Origen,Valor Efectivo,Valor Canje,Valor Total,Referencia 1,Referencia 2,Referencia 3,Referencia 4,Referencia 5';
  v_registros number;
  v_total     number;
  v_finlinea  varchar(2);
  w_registros number;
  fin_dia_mes char(2);
  dia_corte char(2);

BEGIN

  delete from recaudo_local_temp;

  fin_dia_mes := 0;

  select cfile into v_cfile from upload where uploadid = p_uploadid;

  l_clob_len := dbms_lob.getlength(v_cfile);

  v_finlinea := chr(13) || chr(10);

  l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
  IF l_amount < 1 THEN
    v_finlinea    := chr(13);
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
       v_finlinea    := chr(10);
       l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
       IF l_amount < 1 THEN
          p_error := 'Formato desconocido de archivo';
            return(p_error);
       end if;
    end if;
  end if;

-- leer encabezado
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos, 1);
    IF l_amount < 1 THEN
      p_error := 'Registro 1  Invalido';
      return(p_error);
    else
      l_amount := l_amount - l_pos;
      dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      l_pos := l_pos + l_amount + length(v_finlinea);

 end if;

  --Informacion
  WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos, 1);
    IF l_amount < 1 THEN
      p_error := 'Registro ' || i || ' Invalido';
    else
      l_amount := l_amount - l_pos;
      dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      r.idbanco        := null;
      r.cta_recaudo    := trim(fn_token(vBuffer, tk));
      r.indtipo        := null;
      r.fec_corte      := null;
      r.fec_tran       := to_date(trim(fn_token(vBuffer, tk)), 'yyyymmdd');
      r.oficina_origen := null;
      r.valor_efectivo := to_number(trim(Substr(vBuffer, tk)),'9999999999999999.99');
      r.valor_cheque   := 0.0;
      r.valor_total    := r.valor_efectivo;
      r.nit_m          := null;
      r.idmunicipio    := null;
      r.p_consignado   := null;

      select count(*)
      into w_registros
      from cta_recaudo_fcm
      where cuenta = r.cta_recaudo;

      if w_registros = 0 then
         p_error := 'Cuenta no Registrada: ' || r.idbanco || '-' || r.indtipo || '-' || r.cta_recaudo;
         return(p_error);
      end if;

      end if;
    l_pos := l_pos + l_amount + length(v_finlinea);
    tk    := 1;
    insert into recaudo_local_temp values r;
  END LOOP;
  commit;

  update recaudo_local_temp r
  set (idbanco,indtipo,p_consignado )  = (select max(idbanco), max(indtipo), max(decode(indtipo,'POLCA',55,10)) from cta_recaudo_fcm c
                            where r.cta_recaudo = c.cuenta );

  delete from trxsinidentificar
  where (cuenta in (select distinct cta_recaudo from recaudo_local_temp ) ) and
        (fechaTrx in (select distinct fec_tran from recaudo_local_temp) ) and
        referencia = 'HISTORICO';

  insert into trxsinidentificar
    (idbanco, cuenta, periodo, fechatrx, descripciontrx, valortrx, indtipo, p_consignado, fechacargue, usuariocargue, referencia, numsecuenciareg, estadoIden)
select idbanco, cta_recaudo, to_char(fec_tran,'yyyymm'), fec_tran,'HISTORICO DEPOSITO SIN IDENTIFICAR', valor_total, indtipo, p_consignado, sysdate,p_usuario, 'HISTORICO', seq_ide.nextval, 'SI'  from recaudo_local_temp

commit;


  select count(*), sum( valor_total)
  into v_registros, v_total
  from recaudo_local_temp;


  if p_error is null then
    p_error := 'El archivo se VALIDO exitosamente. Registros: ' || v_registros || ' por un valor de $ ' || to_char(v_total,'999,999,999,999,999.00') ;
  end if;

  return(p_error);
EXCEPTION
  WHEN OTHERS THEN
    sp_ex(SQLCODE,
          p_usuario || ' [fn_divide_archivo] ' || SQLERRM,
          p_error);
  return (vBuffer);
end fn_divide_archivo_sin;
/

prompt
prompt Creating function FN_FEC_DISPERSION
prompt ===================================
prompt
CREATE OR REPLACE FUNCTION SIMIT."FN_FEC_DISPERSION" (p_fecha           date,
                                             p_dias_dispersion number,
                                             p_frec_dispersion number,
                                             p_usuario         varchar2)
  return date is
  v_fecha   date;
  v_dias    number;
  v_festivo number;
  p_error varchar2(255);
  v_continuar boolean;


BEGIN


  v_dias := p_dias_dispersion;
  v_fecha := p_fecha;
  if p_frec_dispersion = 0 then -- DIAS
      v_fecha := p_fecha;
  elsif p_frec_dispersion = 1 then -- FRECUENCIA - INICIO SEMANA
     -- si es domingo buscar primer dia sigueinte
     IF UPPER(TO_CHAR(v_fecha, 'DY', 'NLS_DATE_LANGUAGE = American' )) in ('SUN') then
         v_dias := 1;
     else
         v_dias := 1;
         v_fecha := v_fecha + Abs(TO_CHAR(v_fecha, 'D') - 7);
     end if;    
  elsif p_frec_dispersion = 2 then -- FRECUENCIA - INICIO QUINCENA
    v_dias := 1;
    IF TO_CHAR(v_fecha, 'DD') <= 15 THEN
       v_fecha := v_fecha + 15 - TO_CHAR(v_fecha, 'DD');
    else
       v_fecha := Last_day(v_fecha);
    END IF;
  elsif p_frec_dispersion = 3 then -- FRECUENCIA - INICIO MES
    v_dias := 1;
    v_fecha := Last_day(v_fecha);
  else
    p_error := 'El valor de la frecuencia es invalido';
  end if;
  
    while v_dias > 0 loop
      v_fecha := v_fecha + 1;
      IF UPPER(TO_CHAR(v_fecha, 'DY', 'NLS_DATE_LANGUAGE = American' )) not in ('SAT','SUN') then
        select COUNT(*)
          into v_festivo
          from fecha_no_habil
         where fecha = TO_CHAR(v_fecha, 'YYYYMMDD');
        if v_festivo = 0 then
          v_dias := v_dias - 1;
        end if;
      end if;
    end loop;

-- cambio Abril/2010
-- Devolver proximo dia habil si la fecha no es dia habil, si es habil devuleve la misma fecha

    if (p_dias_dispersion = 0 and p_frec_dispersion = 0) then
      v_continuar := true;
      while v_continuar loop
          if UPPER(TO_CHAR(v_fecha, 'DY', 'NLS_DATE_LANGUAGE = American' )) not in ('SAT','SUN') then
              select COUNT(*)
              into v_festivo
              from fecha_no_habil
              where fecha = TO_CHAR(v_fecha, 'YYYYMMDD');

              if v_festivo = 0 then
                v_continuar := false;
              end if;
          end if;
          if (v_continuar) then
              v_fecha := v_fecha + 1;
          end if;
      end loop;
  end if;

-- Devolver -n dias habil

    if (p_dias_dispersion < 0 and p_frec_dispersion = 0) then
    while v_dias < 0 loop
      v_fecha := v_fecha -1;
      IF UPPER(TO_CHAR(v_fecha, 'DY', 'NLS_DATE_LANGUAGE = American' )) not in ('SAT','SUN') then
        select COUNT(*)
          into v_festivo
          from fecha_no_habil
         where fecha = TO_CHAR(v_fecha, 'YYYYMMDD');
        if v_festivo = 0 then
          v_dias := v_dias +1;
        end if;
      end if;
    end loop;

    end if;

  return(v_fecha);
EXCEPTION
  WHEN OTHERS THEN
    sp_ex(SQLCODE,
          p_usuario || ' [fn_fec_dispersion] ' || SQLERRM,
          p_error);
end fn_fec_dispersion;
/

prompt
prompt Creating function SHELL_RUN
prompt ===========================
prompt
CREATE OR REPLACE FUNCTION SIMIT."SHELL_RUN" (Command IN STRING)
RETURN VARCHAR2 IS
LANGUAGE JAVA
NAME 'Shell.Run(java.lang.String) return String';
/

prompt
prompt Creating function SPLITTER_COUNT
prompt ================================
prompt
CREATE OR REPLACE FUNCTION SIMIT."SPLITTER_COUNT" (str in varchar2, delim in char) return int as
val int;
begin
  val := length(replace(str, delim, delim || ' '));
  return val - length(str);
end;
/

prompt
prompt Creating function TOKENIZE
prompt ==========================
prompt
CREATE OR REPLACE FUNCTION SIMIT."TOKENIZE" (str varchar2, delim char) return token_list as
ret token_list;
target int;
i int;
this_delim int;
last_delim int;
cadena varchar2(100);
cadenaOri varchar2(100);
strFin varchar(1000);

BEGIN

  target := splitter_count(str, '"');
  i := 1;
  strFin :=  str;

  if ( target > 1 ) then
  while i <= target
  loop
      this_delim := instr(str, '"', 1, i);
      last_delim := instr(str, '"', 1, i+1);
      cadena := substr(str,this_delim+1,last_delim - this_delim -1);
      cadenaOri := substr(str,this_delim,last_delim - this_delim + 1);

      if (delim = ';' ) then
         cadena := replace(cadena,'.','');
      end if;

      if (delim = ';' ) then
         cadena := replace(cadena,',','.');
      end if;

      if (delim <> ',' ) then
         cadena := replace(cadena,',','');
      end if;

      if (delim <> '$' ) then
         cadena := replace(cadena,'$','');
      end if;

      strFin := replace(str,cadenaOri, cadena);

      i := i + 2;

  end loop;

  end if;


  ret := token_list();

  i := 1;
  last_delim := 0;
  target := splitter_count(strFin, delim);
  while i <= target
  loop
    ret.extend();
    this_delim := instr(strFin, delim, 1, i);
    ret(i):= substr(strFin, last_delim + 1, this_delim - last_delim -1);
    i := i + 1;
    last_delim := this_delim;
  end loop;
  ret.extend();
  ret(i):= substr(strFin, last_delim + 1);
  return ret;
end;
/

prompt
prompt Creating procedure LOAD_FILE
prompt ============================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."LOAD_FILE" (
 pfname VARCHAR2) IS

/*
define the directory inside Oracle when logged on as SYS
create or replace directory ctemp as 'c:\temp\';

grant read on the directory to the Staging schema
grant read on directory ctemp to staging;
*/

/* src_file BFILE;
 dst_file BLOB; */
 src_file BFILE;
 dst_file CLOB;
 lgh_file BINARY_INTEGER;
BEGIN
  src_file := bfilename('ORAREPORTS', pfname);

  -- insert a NULL record to lock
  INSERT INTO tmp_finan
  (id, nombre, archivo)
  VALUES
  (SEQ_TEMP_FINAN.Nextval, pfname, EMPTY_CLOB())
  RETURNING archivo INTO dst_file;

  -- lock record
  SELECT tmp_finan.archivo
  INTO dst_file
  FROM tmp_finan
  WHERE tmp_finan.nombre = pfname
  FOR UPDATE;

  -- open the file
  dbms_lob.fileopen(src_file, dbms_lob.file_readonly);

  -- determine length
  lgh_file := dbms_lob.getlength(src_file);

  -- read the file
  dbms_lob.loadfromfile(dst_file, src_file, lgh_file);

  -- update the blob field
  UPDATE tmp_finan
  SET tmp_finan.archivo = dst_file
  WHERE nombre = pfname;

  -- close file
  dbms_lob.fileclose(src_file);
  commit;
  dbms_output.put_line(pfname);
END load_file;
/

prompt
prompt Creating procedure SP_CREACION_ASOBANCARIA2001
prompt ==============================================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_CREACION_ASOBANCARIA2001" (p_fecha varchar2) is
  -- p_fecha yyyymmdd
  v_sec    number;
  V_VRTREC number;
  CURSOR cctas IS
    select '7709998003392' iac, '186001061' cta
      from dual
    union
    select '7709998003408' iac, '186001079' cta
      from dual
    union
    select '7709998003415' iac, '186001053' cta
      from dual
    union
    select '7709998003422' iac, '186001020' cta
      from dual
    union
    select '7709998003439' iac, '186001046' cta
      from dual
    union
    select '7709998003446' iac, '186001087' cta from dual;

begin

  for b in cctas loop
    dbms_output.put_line('***' || b.iac || '_' || p_fecha);

    v_sec    := 2;
    V_VRTREC := 0;
    -- "Registro de encabezado de archivo"
    dbms_output.put_line('' || '01' || '8000826650' || p_fecha || '050' || to_char(b.cta, '00000000000000000') ||
                         TO_CHAR(SYSDATE, 'YYYYMMDD') ||
                         TO_CHAR(SYSDATE, 'HHMI') || 'A' || '01');

    -- "Registro de encabezado de lote"
    dbms_output.put_line('' || '05' || to_char(b.iac, '0000000000000') ||
                         '0001');

    -- "Registro de Detalle"
    for c in (select *
                from recaudo_externo t
               where t.fec_corte = to_date(p_fecha, 'yyyymmdd') and t.idbanco = 50 AND T.CTA_RECAUDO = B.cta) loop
      dbms_output.put_line('' || '06' || c.num_liquidacion || '2' ||
                           c.idmunicipio || c.indfecha2002 ||
                           c.validador_fecha || '0' || -- base 10
                           to_char(c.valor_adicional, '0000000000') ||
                           to_char(c.identificacion, '0000000000000') || '1' || -- base 11
                           replace(to_char(c.valor_total, '00000000000.00'),
                                   '.',
                                   '') || '01' || -- PROPAG
                           '01' || -- MEDPAG
                           '000000' || -- NUMOPE
                           '000000' || -- NUMAUT
                           '000' || -- CODENTDEB
                           '0010' || -- CODSUC
                           to_char(v_sec, '0000000') || -- SEC
                           '000' -- CAUDEV
                           );
      v_sec    := v_sec + 1;
      V_VRTREC := V_VRTREC + c.valor_adicional;
    end loop;

    -- "Registro de control de lote"
    dbms_output.put_line('' || '08' || to_char(v_sec - 1, '000000000') || -- TOTREG
                         to_char(V_VRTREC, '000000000000000000') || -- VRTREC
                         '0001' -- NUMLOT
                         );

    -- "Registro de control de archivo"
    dbms_output.put_line('' || '09' || to_char(v_sec - 1, '000000000') || -- TOTREG
                         to_char(V_VRTREC, '000000000000000000') -- VRTREC
                         );
  end loop;

end sp_creacion_Asobancaria2001;
/

prompt
prompt Creating procedure SP_LOG
prompt =========================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_LOG" (p_usuario varchar2,
                                   p_proceso varchar2,
                                   p_accion  varchar2) is
begin
  insert into log
    (fecha, usuario, proceso, accion)
  values
    (sysdate, p_usuario, p_proceso, p_accion);

end sp_log;
/

prompt
prompt Creating procedure SP_ENVIARCORREO
prompt ==================================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_ENVIARCORREO" (ENVIA IN VARCHAR2,
                                            RECIBE IN VARCHAR2,
                                            COPIA IN VARCHAR2,
                                            OCULTO IN VARCHAR2,
                                            ASUNTO IN VARCHAR2,
                                            MENSAJE IN VARCHAR2,
                                            p_usuario varchar2)

 IS
  v_error  varchar2(300);
  mailhost VARCHAR2(250);
  mail_conn utl_smtp.connection;
  crlf VARCHAR2(2) := CHR(13) || CHR(10);
  mesg VARCHAR2(1000);
  comando varchar(1000);
  salida  varchar(250);
  archivo utl_file.file_type;
  input_buffer varchar2(1000);
  v_envio number;


BEGIN

--    comando := '/usr/bin/ssh oracle@172.168.100.10 "echo '|| chr(39) || '"' ||  asunto || '"' || chr(39) || ' | mail -s '||chr(39)|| '"' || mensaje || '"' || chr(39)|| ' ' || RECIBE  || '"';
--    comando := '/bin/sh /trfavvillas/envioCorreo.sh '||replace(MENSAJE,' ','_')||' '||replace(ASUNTO,' ','_')||' ' || RECIBE  ;
--    comando := '/bin/sh /trfavvillas/envioCorreo.sh "'||chr(39) || MENSAJE || chr(39) || '" ' || replace(ASUNTO,' ','_')||' ' || RECIBE  ;
    comando := '/bin/sh /trfavvillas/envioCorreo.sh&'||MENSAJE||'&'||ASUNTO||'&'||RECIBE;

     IF not (COPIA is null) THEN
       comando := comando ||','||COPIA;
     END IF;

     IF not (OCULTO is null) THEN
       comando := comando ||','||OCULTO;
     END IF;

     select ENVIACORREO
     into v_envio
     from fcm;

     if ( v_envio = 1 ) then
         salida := Shell_Run(comando);
     end if;

/*
    archivo := utl_file.fopen('TRFAVVILLAS', 'envioCorreo.sh.log', 'R');

    salida := '';
    LOOP
        BEGIN
             utl_file.get_line(archivo,input_buffer);
             salida := salida || input_buffer || chr(10);
                 dbms_output.put_line(salida);
        EXCEPTION
             when no_data_found then exit;
        END;
    END LOOP;


    utl_file.fclose(archivo);
*/

/*
  select f.servidorsmtp
  into mailhost
  from fcm f
  where f.nit_fcm = '8000826650';
  mail_conn := utl_smtp.open_connection(mailhost, 25);
  mesg := 'Date: ' || TO_CHAR(SYSDATE, 'dd Mon yy hh24:mi:ss') || crlf ||
          'From: <' || ENVIA || '>' || crlf ||
          'Subject: ' || ASUNTO || crlf ||
          'To: ' || RECIBE || crlf ||
          'CC: ' || COPIA || crlf ||
          'BCc: ' || OCULTO || crlf ||
          '' || crlf || MENSAJE;

  utl_smtp.helo(mail_conn, mailhost);
  utl_smtp.mail(mail_conn, ENVIA);
  utl_smtp.rcpt(mail_conn, RECIBE);
  utl_smtp.rcpt(mail_conn, COPIA);
  utl_smtp.rcpt(mail_conn, OCULTO);
  utl_smtp.data(mail_conn, mesg);
  utl_smtp.quit(mail_conn);
*/

  sp_log(p_usuario,
         'sp_EnviarCorreo',
         substr(RECIBE || '-' || ASUNTO || '-' || MENSAJE || '-' || salida,1,1000));
  commit;
EXCEPTION

  WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [sp_EnviarCorreo] ' || SQLERRM,
            v_error);

END sp_EnviarCorreo;
/

prompt
prompt Creating procedure SP_ENVIARCORREOTEST
prompt ======================================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_ENVIARCORREOTEST" (
                                            ENVIA IN VARCHAR2,
                                            RECIBE IN VARCHAR2,
                                            COPIA IN VARCHAR2,
                                            OCULTO IN VARCHAR2,
                                            ASUNTO IN VARCHAR2,
                                            MENSAJE IN VARCHAR2,
                                            p_usuario varchar2, 
                                            logsalida OUT VARCHAR2)

 IS
  v_error  varchar2(300);
  mailhost VARCHAR2(250);
  mail_conn utl_smtp.connection;
  crlf VARCHAR2(2) := CHR(13) || CHR(10);
  mesg VARCHAR2(1000);
  comando varchar(1000);
  salida  varchar(250);
  archivo utl_file.file_type;
  input_buffer varchar2(1000);
  v_envio number;


BEGIN

    
/*    comando := '/bin/sh /trfavvillas/envioCorreo.sh&'||MENSAJE||'&'||ASUNTO||'&'||RECIBE;
*/
    comando := '/bin/sh /trfavvillas/envioAvvillas2.sh 20110111';


     IF not (COPIA is null) THEN
       comando := comando ||','||COPIA;
     END IF;

     IF not (OCULTO is null) THEN
       comando := comando ||','||OCULTO;
     END IF;

     select ENVIACORREO
     into v_envio
     from fcm;

     if ( v_envio = 1 ) then
         salida := Shell_Run(comando);
     end if;

    archivo := utl_file.fopen('TRFAVVILLAS', 'envioAvvillas2.sh.log', 'R');

    logsalida := '';
    LOOP
      BEGIN
        utl_file.get_line(archivo, input_buffer);
        logsalida := logsalida || input_buffer || chr(10);
      EXCEPTION
        when no_data_found then
          exit;
      END;
    END LOOP;

    utl_file.fclose(archivo);


  sp_log(p_usuario,
         'sp_EnviarCorreo',
         substr(RECIBE || '-' || ASUNTO || '-' || MENSAJE || '-' || salida,1,1000));
  commit;
EXCEPTION

  WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [sp_EnviarCorreo] ' || SQLERRM,
            v_error);

END sp_EnviarCorreoTest;
/

prompt
prompt Creating procedure SP_ENVIONOTIFICACION
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_ENVIONOTIFICACION" (grupoRecibe in number,
                                            grupoCopia IN number,
                                            asunto in VARCHAR2,
                                            mensaje in VARCHAR2,
                                            p_usuario varchar2) is

correoRecibe varchar2(1000);
correoCopia varchar2(1000);
correoOculto varchar2(1000);
correoSdf varchar2(1000);
v_error   NUMBER := 0;

begin


    select g.correo
    into correoRecibe
    from grupo_correo g
    where g.idgrupo = grupoRecibe;

    if (grupoCopia > 0 ) then
      select g.correo
      into correoCopia
      from grupo_correo g
      where g.idgrupo = grupoCopia;
    end if;

    select g.correo
    into correoOculto
    from grupo_correo g
    where g.idgrupo = 1;

    select g.correo
    into correoSdf
    from grupo_correo g
    where g.idgrupo = 0;

    if (grupoCopia = -1 ) then
       select mail
       into correoCopia
       from person
       where idperson = p_usuario;
    end if;

-- 79938127 [liquida_recaudo_externo] ORA-06502: PL/SQL: numeric or value error: character to number conversion error ORA-06512: at "SIMIT.SP_ENVIARCORREO", line 57 ORA-29278: SMTP transient error: 421 Service not available 

    sp_enviarcorreo(envia => correoSdf,
                recibe => correoRecibe,
                copia => correoCopia,
                oculto => correoOculto,
                asunto => asunto,
                mensaje => mensaje,
                p_usuario => p_usuario);

  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [sp_envioNotificacion] ' || SQLERRM,
            v_error); 


end sp_envioNotificacion;
/

prompt
prompt Creating procedure SP_LIQ_REC_LOCAL
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_LIQ_REC_LOCAL" is
begin

dbms_output.put_line('Liquidacion Recaudo Local Historico [' || TO_CHAR(SYSDATE, 'YYMMDD') || ']');
dbms_output.put_line('Inicio [' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

--Revoke object privileges
--execute immediate ('revoke select, insert, update on REC_LOC_HIST from NODO');
--execute immediate ('alter trigger trg_rec_loc_hist disable');

UPDATE rec_loc_hist t
   SET T.X55 = 0,
       T.XFCM = 0,
       T.XMUN = 0,
       T.X45=0
where T.XFCM is null;

for c in (select s.* FROM SALARIO_MINIMO s ORDER BY S.ANHO)
loop
-- POLCA
  UPDATE rec_loc_hist t
     SET T.X55 = ((T.TOTAL_RECAUDO - c.valor) / 2) + c.valor,
         T.X45 = ((T.TOTAL_RECAUDO - c.valor) / 2) + c.valor,
         T.XFCM = c.valor,
         T.XMUN = (T.TOTAL_RECAUDO - c.valor) / 2
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO < c.valor * 10
     and t.POLCA = 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('1-'||SQL%ROWCOUNT||'- POLCA  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist t
     SET T.X55 = T.TOTAL_RECAUDO * .55,
         T.X45 = T.TOTAL_RECAUDO * .45,
         T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .45
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO >= c.valor * 10
     and t.POLCA = 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('2-'||SQL%ROWCOUNT||'- POLCA  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist t
     SET T.X55 = T.TOTAL_RECAUDO * .55,
         T.X45 = T.TOTAL_RECAUDO * .45,
         T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .45
   WHERE T.ID_TIPO_RECAUDO in ( 4, 7)
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     and t.POLCA = 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('3-'||SQL%ROWCOUNT||'- POLCA  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');
COMMIT;
-- PONAL
  UPDATE rec_loc_hist t
     SET T.XFCM = c.valor,
         T.XMUN = T.TOTAL_RECAUDO - c.valor
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO < c.valor * 10
     and T.POLCA = 'N'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('1-'||SQL%ROWCOUNT||'- PONAL  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist t
     SET T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .90
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO >= c.valor * 10
     and T.POLCA = 'N'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('2-'||SQL%ROWCOUNT||'- PONAL  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist t
     SET T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .90
   WHERE T.ID_TIPO_RECAUDO in ( 4, 7)
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     and T.POLCA = 'N'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('3-'||SQL%ROWCOUNT||'- PONAL  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

COMMIT;
end loop;
 --Grant object privileges
--execute immediate ('alter trigger trg_rec_loc_hist enable');
--execute immediate ('grant select, insert, update on REC_LOC_HIST to nodo');
dbms_output.put_line('Ajustes Caso Especiale C/marca y Bquilla');

  UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = T.ID_SECRETARIA_ORIGEN;
-- Asociacion Por Dptal / CMarca
  UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = '25000000'
  where t.id_secretaria_origen in (
        '25151000', -- caqueza
        '25183000', -- choconta
        '25214000', -- cota
        '25260000', -- el rosal
        '25377000', -- la calera
        '25473000', -- mosquera
        '25612000', -- ricaurte
        '25754000', -- soacha
        '25875000', -- villeta
        '25899000' -- zipáquira
        );
  UPDATE rec_loc_hist_pago p
     SET p.divipo = '25000000'
  where p.divipo in (
        '25151000', -- caqueza
        '25183000', -- choconta
        '25214000', -- cota
        '25260000', -- el rosal
        '25377000', -- la calera
        '25473000', -- mosquera
        '25612000', -- ricaurte
        '25754000', -- soacha
        '25875000', -- villeta
        '25899000' -- zipáquira
        );
-- DESAsociacion Por Barranquilla
  UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = '08001001' -- Metrotransiot
  where t.id_secretaria_origen = '08001000'
    and to_char(t.fecha_com, 'yyyymmdd') <= '20081224';

      UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = '08001002' -- Sin identificar
  where t.id_secretaria_origen = '08001000'
    and t.fecha_com is null;
  commit;
--dbms_output.put_line('Finalizo [' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');


-- DESAsociacion Por Nariño Dptal
  UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = '52480001' -- Fondo Nariño en liquidacion
  where t.id_secretaria_origen = '52480000'
    and to_char(t.fecha_com, 'yyyymmdd') <= '20090731';

      UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = '52480002' -- Sin identificar
  where t.id_secretaria_origen = '52480000'
    and t.fecha_com is null;
  commit;

  -- DESAsociacion Por ATLANTICO DPTAL - PUERTO COLOMBIA Dptal
  UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = '08000000'
  where t.id_secretaria_origen = '08573000'
    and to_char(t.fecha_contable, 'yyyymmdd') <= '20091231';
     commit;
  -- ASOCIACION CAQUETÁ
  UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = '18000000'
  where t.id_secretaria_origen in (
        '18094000', --BELEN DE LOS ANDAQUIES
        '18256000', -- PAUJIL
        '18753000' ); -- SAN VICENTE DEL CAGUAN
    COMMIT;

    -- ASOCIACION ITBOY
  UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = '15000000'
  where t.id_secretaria_origen in (
        '15204000',
        '15322000',
        '15491000',
        '15632000',
        '15693000',
        '15000000' );
  COMMIT;

 -- ASOCIACION TOLIMA

  UPDATE rec_loc_hist t
     SET T.ID_SECRETARIA_DEUDA = '73000000'
  where t.id_secretaria_origen in (
        '73026000',
        '73055000',
        '73168000',
        '73319000',
        '73443000',
        '73585000' );
  COMMIT;

dbms_output.put_line('Finalizo [' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');
/*
select T.IDMUNICIPIO, DECODE(t.POLCA, 'S', 'POLCA', 'PONAL') TIPO, COUNT(*) CANTIDAD, SUM(T.TOTAL_RECAUDO) VALOR_TOTAL, SUM(T.X55) P_55, SUM(T.XFCM) P_fcm, SUM(T.T.XMUN) T.XMUN from rec_loc_hist t
GROUP BY T.IDMUNICIPIO, t.POLCA
*/
end sp_liq_rec_local;
/

prompt
prompt Creating procedure SP_LIQ_REC_LOCAL_BQUILLA
prompt ===========================================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_LIQ_REC_LOCAL_BQUILLA" is
begin

dbms_output.put_line('Liquidacion Recaudo Local Historico [' || TO_CHAR(SYSDATE, 'YYMMDD') || ']');
dbms_output.put_line('Inicio [' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

-- Revoke object privileges
--execute immediate ('revoke select, insert, update on rec_loc_hist_bquilla from NODO');
--execute immediate ('alter trigger trg_rec_loc_hist_bquilla disable');

UPDATE rec_loc_hist_bquilla t
   SET T.X55 = 0,
       T.XFCM = 0,
       T.XMUN = 0
where T.XFCM is null;

for c in (select s.* FROM SALARIO_MINIMO s ORDER BY S.ANHO)
loop
-- POLCA
  UPDATE rec_loc_hist_bquilla t
     SET T.X55 = ((T.TOTAL_RECAUDO - c.valor) / 2) + c.valor,
         T.XFCM = c.valor,
         T.XMUN = (T.TOTAL_RECAUDO - c.valor) / 2
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO < c.valor * 10
     and t.POLCA = 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('1-'||SQL%ROWCOUNT||'- POLCA  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist_bquilla t
     SET T.X55 = T.TOTAL_RECAUDO * .55,
         T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .45
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO >= c.valor * 10
     and t.POLCA = 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('2-'||SQL%ROWCOUNT||'- POLCA  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist_bquilla t
     SET T.X55 = T.TOTAL_RECAUDO * .55,
         T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .45
   WHERE T.ID_TIPO_RECAUDO in ( 4, 7)
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     and t.POLCA = 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('3-'||SQL%ROWCOUNT||'- POLCA  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');
COMMIT;
-- PONAL
  UPDATE rec_loc_hist_bquilla t
     SET T.XFCM = c.valor,
         T.XMUN = T.TOTAL_RECAUDO - c.valor
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO < c.valor * 10
     and T.POLCA <> 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('1-'||SQL%ROWCOUNT||'- PONAL  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist_bquilla t
     SET T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .90
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO >= c.valor * 10
     and T.POLCA <> 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('2-'||SQL%ROWCOUNT||'- PONAL  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist_bquilla t
     SET T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .90
   WHERE T.ID_TIPO_RECAUDO in ( 4, 7)
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     and T.POLCA <> 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('3-'||SQL%ROWCOUNT||'- PONAL  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

COMMIT;
end loop;
-- Grant object privileges
--execute immediate ('alter trigger trg_rec_loc_hist_bquilla enable');
--execute immediate ('grant select, insert, update on rec_loc_hist_bquilla to nodo');

dbms_output.put_line('Finalizo [' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

/*
select T.IDMUNICIPIO, DECODE(t.POLCA, 'S', 'POLCA', 'PONAL') TIPO, COUNT(*) CANTIDAD, SUM(T.TOTAL_RECAUDO) VALOR_TOTAL, SUM(T.X55) P_55, SUM(T.XFCM) P_fcm, SUM(T.T.XMUN) T.XMUN from rec_loc_hist_bquilla t
GROUP BY T.IDMUNICIPIO, t.POLCA
*/
end SP_LIQ_REC_LOCAL_bquilla;
/

prompt
prompt Creating procedure SP_LIQ_REC_LOCAL_bquilla
prompt ===========================================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_LIQ_REC_LOCAL_bquilla" is
begin

dbms_output.put_line('Liquidacion Recaudo Local Historico [' || TO_CHAR(SYSDATE, 'YYMMDD') || ']');
dbms_output.put_line('Inicio [' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

-- Revoke object privileges
--execute immediate ('revoke select, insert, update on rec_loc_hist_bquilla from NODO');
--execute immediate ('alter trigger trg_rec_loc_hist_bquilla disable');

UPDATE rec_loc_hist_bquilla t
   SET T.X55 = 0,
       T.XFCM = 0,
       T.XMUN = 0
where T.XFCM is null;

for c in (select s.* FROM SALARIO_MINIMO s ORDER BY S.ANHO)
loop
-- POLCA
  UPDATE rec_loc_hist_bquilla t
     SET T.X55 = ((T.TOTAL_RECAUDO - c.valor) / 2) + c.valor,
         T.XFCM = c.valor,
         T.XMUN = (T.TOTAL_RECAUDO - c.valor) / 2
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO < c.valor * 10
     and t.POLCA = 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('1-'||SQL%ROWCOUNT||'- POLCA  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist_bquilla t
     SET T.X55 = T.TOTAL_RECAUDO * .55,
         T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .45
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO >= c.valor * 10
     and t.POLCA = 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('2-'||SQL%ROWCOUNT||'- POLCA  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist_bquilla t
     SET T.X55 = T.TOTAL_RECAUDO * .55,
         T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .45
   WHERE T.ID_TIPO_RECAUDO in ( 4, 7)
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     and t.POLCA = 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('3-'||SQL%ROWCOUNT||'- POLCA  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');
COMMIT;
-- PONAL
  UPDATE rec_loc_hist_bquilla t
     SET T.XFCM = c.valor,
         T.XMUN = T.TOTAL_RECAUDO - c.valor
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO < c.valor * 10
     and T.POLCA <> 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('1-'||SQL%ROWCOUNT||'- PONAL  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist_bquilla t
     SET T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .90
   WHERE T.ID_TIPO_RECAUDO <> 4
     AND T.ID_TIPO_RECAUDO <> 7
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     AND T.TOTAL_RECAUDO >= c.valor * 10
     and T.POLCA <> 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('2-'||SQL%ROWCOUNT||'- PONAL  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

  UPDATE rec_loc_hist_bquilla t
     SET T.XFCM = T.TOTAL_RECAUDO * .10,
         T.XMUN = T.TOTAL_RECAUDO * .90
   WHERE T.ID_TIPO_RECAUDO in ( 4, 7)
     AND T.NOVEDAD <> 'D'
     AND T.XFCM = 0
     and T.POLCA <> 'S'
     AND TO_CHAR(T.FECHA_CONTABLE, 'YYYY') = c.anho;
dbms_output.put_line('3-'||SQL%ROWCOUNT||'- PONAL  '||c.anho|| '[' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

COMMIT;
end loop;
-- Grant object privileges
--execute immediate ('alter trigger trg_rec_loc_hist_bquilla enable');
--execute immediate ('grant select, insert, update on rec_loc_hist_bquilla to nodo');

dbms_output.put_line('Finalizo [' || TO_CHAR(SYSDATE, 'HH24:MI:SS') || ']');

/*
select T.IDMUNICIPIO, DECODE(t.POLCA, 'S', 'POLCA', 'PONAL') TIPO, COUNT(*) CANTIDAD, SUM(T.TOTAL_RECAUDO) VALOR_TOTAL, SUM(T.X55) P_55, SUM(T.XFCM) P_fcm, SUM(T.T.XMUN) T.XMUN from rec_loc_hist_bquilla t
GROUP BY T.IDMUNICIPIO, t.POLCA
*/
end SP_LIQ_REC_LOCAL_bquilla;
/

prompt
prompt Creating procedure SP_PARALELO_TEMP
prompt ===================================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_PARALELO_TEMP" (p_fecha date) is
  v_liquidacion       varchar2(10);
  v_fecha             date;
  v_comparendo        varchar2(20);
  v_validador         CHAR(3);
  v_indretroactividad number;
  v_contador          number := 0;
begin
  for c in (select r.* from recaudo_externo r where r.fec_corte = p_fecha) loop
    v_liquidacion := c.num_liquidacion;
    
    analisis.recaudo_externo_compl_ricardo(p_liquidacion => v_liquidacion,
                                           p_fecha       => v_fecha,
                                           p_comparendo => v_comparendo);
  
    update recaudo_externo r
       set r.validador_fecha =
           (select v.idvalidador
              from validador_fecha v
             where v.idmunicipio = c.idmunicipio
               and v_fecha >= v.fecha_ini 
               and v_fecha <= v.fecha_fin 
               and r.num_liquidacion = c.num_liquidacion
               and substr(r.num_liquidacion, 8, 1) =
                   decode(V.indtipo, 'SIMIT', 0, 'POLCA', 1))
     where r.num_liquidacion = c.num_liquidacion;
     
    update recaudo_externo r
    set r.num_comparendo = v_comparendo,
    r.fec_comparendo = v_fecha
    where r.num_liquidacion = c.num_liquidacion;
     
     
    v_contador := v_contador + SQL%ROWCOUNT;
    -- dbms_output.put_line(v_contador);
  
    if v_fecha is not null then
      if to_char(v_fecha, 'ddmmyyyy') <> '01011900' then
        if v_fecha < to_date('081102', 'ddmmyy') then
          update recaudo_externo r
             set r.indfecha2002 = 1 /* (select m.indretroactividad
                                                  from municipio m
                                                 where m.idmunicipio = c.idmunicipio
                                                   and m.indretroactividad = 1
                                                   AND r.num_liquidacion = c.num_liquidacion)*/
           where r.num_liquidacion = c.num_liquidacion;
          v_contador := v_contador + SQL%ROWCOUNT;
          -- dbms_output.put_line(v_contador);
        end if;
      end if;
    end if;
  
  end loop;
  update recaudo_externo r
     set r.indfecha2002 = 0
   where r.indfecha2002 is null;
  update recaudo_externo r
     set r.validador_fecha = '000'
   where r.validador_fecha is null;
  commit;
  -- dbms_output.put_line(v_contador);
end sp_paralelo_temp;
/

prompt
prompt Creating procedure SP_V_USUARIO
prompt ===============================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."SP_V_USUARIO" (p_usuario varchar2, p_error OUT VARCHAR2, p_modulo VARCHAR2) is
  v_valida    NUMBER;
  w_usuario  number;
begin
  w_usuario := TO_NUMBER(p_usuario);

   select COUNT(*) INTO v_valida from person p WHERE p.idperson = w_usuario;

   IF v_valida = 0 THEN
     p_error := 'El usuario no existe';
     return;
  end if;

   If upper(p_modulo) = 'PK_PROC' THEN 
     RETURN;
     END IF;
     
   select COUNT(*) INTO v_valida
   from rolxperson rp, rol r
   WHERE rp.personid = w_usuario
     and rp.rolid = r.rolid
     and r.enablemod = 1;
     
     
  IF v_valida = 0 THEN
     p_error := 'El usuario no puede realizar la accion';
     return;
  end if;



end sp_v_usuario;
/

prompt
prompt Creating procedure VERLOGTEMP
prompt =============================
prompt
CREATE OR REPLACE PROCEDURE SIMIT."VERLOGTEMP" (salida OUT VARCHAR2) is
    archivo      utl_file.file_type;
    input_buffer varchar2(1000);

  begin

    archivo := utl_file.fopen('TRFAVVILLAS', 'envioCorreo.sh.log', 'R');

    salida := '';
    LOOP
      BEGIN
        utl_file.get_line(archivo, input_buffer);
        salida := salida || input_buffer || chr(10);
      EXCEPTION
        when no_data_found then
          exit;
      END;
    END LOOP;

    utl_file.fclose(archivo);

  EXCEPTION
    WHEN OTHERS THEN
      salida := 'NO FUE POSIBLE LEER LOG verlogtemp.sh.log: ' || SQLERRM;

end verlogtemp;
/

prompt
prompt Creating package body PK_AUTEN
prompt ==============================
prompt
CREATE OR REPLACE PACKAGE BODY SIMIT."PK_AUTEN" is

  -- Private variable declarations
  v_valida NUMBER;

  -- Function and procedure implementations 
  PROCEDURE i_menu(p_idmenu      varchar2,
                   p_namemenu    varchar2,
                   p_page        varchar2,
                   p_padreid     varchar2,
                   p_enablemenu  varchar2,
                   p_usuario     varchar2,
                   p_error       OUT VARCHAR2) is
  v_idmenu number;
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error,'pk_auten');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      select seq_menu.NEXTVAL into v_idmenu from dual;
      insert into menu
        (idmenu, namemenu, page, padreid, enablemenu)
      values
        (v_idmenu, p_namemenu, p_page, p_padreid, p_enablemenu);

      sp_log(p_usuario,
             'i_menu',
             v_idmenu || '-' || p_namemenu || '-' || p_page || '-' || p_padreid || '-' || p_enablemenu);
             
      commit;
      p_error := MSG_INS_OK;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_menu] ' || SQLERRM, p_error);
  END i_menu;

  PROCEDURE u_menu(p_idmenu      varchar2,
                   p_namemenu    varchar2,
                   p_page        varchar2,
                   p_padreid     varchar2,
                   p_enablemenu  varchar2,
                   p_usuario     varchar2,
                   p_error       OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error,'pk_auten');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
        update menu
           set namemenu = p_namemenu,
               page = p_page,
               padreid = p_padreid,
               enablemenu = p_enablemenu
         where idmenu = p_idmenu;

          sp_log(p_usuario,
                 'u_menu',
             p_idmenu || '-' || p_namemenu || '-' || p_page || '-' || p_padreid || '-' || p_enablemenu);
             
      commit;
      p_error :=MSG_UPD_OK;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_menu] ' || SQLERRM, p_error);
  END u_menu;

  PROCEDURE i_rol(p_rolid        varchar2,
                  p_namerol      varchar2,
                  p_enablerol    varchar2,
                  p_enablemod    varchar2,
                  p_usuario      varchar2,
                  p_error        OUT VARCHAR2) is
  v_rolid number;
  begin
    -- VALIDACIONES
    -- sp_v_usuario(p_usuario, p_error,'pk_auten');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      select SEQ_ROL.NEXTVAL into v_rolid from dual;
      insert into rol
        (rolid, namerol, enablerol , enablemod)
      values
        (v_rolid, p_namerol, p_enablerol, p_enablemod);

      sp_log(p_usuario,
             'i_rol',
             v_rolid || '-' || p_namerol || '-' || p_enablerol );
             
      commit;
      p_error := to_char(v_rolid);
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      p_error := 'NOK';
      sp_ex(SQLCODE, p_usuario || ' [i_rol] ' || SQLERRM, p_error);
  END i_rol;

  PROCEDURE u_rol(p_rolid        varchar2,
                  p_namerol      varchar2,
                  p_enablerol    varchar2,
                  p_enablemod    varchar2,
                  
                  p_usuario      varchar2,
                  p_error        OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_auten');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
        update rol
           set namerol = p_namerol,
               enablerol = p_enablerol,
               enablemod = p_enablemod
         where rolid = p_rolid;
          sp_log(p_usuario,
                 'u_rol',
                 p_rolid || '-' || p_namerol || '-' || p_enablerol );
             
      commit;
      p_error := p_rolid;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      p_error := 'NOK';
      sp_ex(SQLCODE, p_usuario || ' [u_rol] ' || SQLERRM, p_error);
  END u_rol;

PROCEDURE u_rolxusuario(p_personid varchar2,
                          p_rolnew   varchar2,
                          p_usuario  varchar2,
                          p_error    OUT VARCHAR2) is
  v_result varchar2(10);
  v_rolold varchar2(100);
  v_rolnew varchar2(100);
  v_pos number := 1;
  begin

    -- VALIDACIONES
    -- sp_v_usuario(p_usuario, p_error,'pk_auten');
    IF P_ERROR is null THEN
        for c in (select rolid, personid from rolxperson where personid = p_personid)
        loop
            v_rolold := v_rolold || c.rolid || ',';
        end loop;
        
        delete rolxperson where personid = p_personid;
        v_rolnew := p_rolnew;

        v_result := fn_token(c => v_rolnew,x => v_pos);
        while v_result is not null loop
            insert into rolxperson 
              (rolid, personid)
            values
              (v_result, p_personid);
            v_result := fn_token(c => v_rolnew,x => v_pos);
        end loop;

        sp_log(p_usuario, 'u_rolxusuario', p_personid || ' [Delete:' || v_rolold ||  '] [Insert:' || v_rolnew || ']');
        commit;
        p_error := 'Rol(es) de Usuario Asignado(s) Exitosamente. ';
     END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_rolxusuario] ' || SQLERRM, p_error);
  END u_rolxusuario;



  PROCEDURE i_usuario(p_idperson     varchar2,
                      p_nameperson   varchar2,
                      p_jobtitle     varchar2,
                      p_enableperson varchar2,
                      p_mail         varchar2,
                      p_clave      varchar2,
                      p_usuario      varchar2,
                      p_error        OUT VARCHAR2) is
  begin
    -- VALIDACIONES

    select COUNT(*)
      INTO v_valida
      from person t
     WHERE t.idperson = p_idperson;
  
    IF v_valida > 0 THEN
      P_ERROR := 'El usuario ya existe';
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      insert into person
        (idperson, nameperson, jobtitle, enableperson, lastupdate, mail, password )
      values
        (p_idperson,
         p_nameperson,
         p_jobtitle,
         p_enableperson,
         sysdate,
         p_mail,
         TRANSLATE(p_clave,'abcdefghijklmnopqrstuvwxyz0123456789', '0z1y2x3w4v5u6t7s8r9qponmlkjihgfedcba'));
      sp_log(p_usuario,
             'i_usuario',
             p_idperson || '-' || p_nameperson || '-' || p_jobtitle || '-' ||
             p_enableperson || '-' || to_char(sysdate, 'yymmdd_hhmi') || '-' ||
             p_mail);
             
      commit;
      p_error := 'Usuario Creado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [iu_usuario] ' || SQLERRM, p_error);
  END i_usuario;

  PROCEDURE u_usuario(p_idperson     varchar2,
                      p_nameperson   varchar2,
                      p_jobtitle     varchar2,
                      p_enableperson varchar2,
                      p_mail         varchar2,
                      p_clave        varchar2,
                      p_usuario      varchar2,
                      p_error        OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    select COUNT(*)
      INTO v_valida
      from person t
     WHERE t.idperson = p_idperson;
  
    IF v_valida = 0 THEN
      P_ERROR := 'El usuario NO existe';
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      update person
         set nameperson   = p_nameperson,
             jobtitle     = p_jobtitle,
             enableperson = p_enableperson,
             lastupdate   = sysdate,
             mail         = p_mail,
             password     = TRANSLATE(p_clave,'abcdefghijklmnopqrstuvwxyz0123456789', '0z1y2x3w4v5u6t7s8r9qponmlkjihgfedcba')
       where idperson = p_idperson;
      sp_log(p_usuario,
             'u_usuario',
             p_idperson || '-' || p_nameperson || '-' || p_jobtitle || '-' ||
             p_enableperson || '-' || to_char(sysdate, 'yymmdd_hhmi') || '-' ||
             p_mail);
      commit;
      p_error := 'Usuario Actualizado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_usuario] ' || SQLERRM, p_error);
  END u_usuario;

PROCEDURE i_rolxusuario(p_personid varchar2,
                          p_rolid    varchar2,
                          p_usuario  varchar2,
                          p_error    OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error,'pk_auten');
    select COUNT(*)
      INTO v_valida
      from rolxperson t
     WHERE t.personid = p_personid
       and t.rolid = p_rolid;
  
    IF v_valida > 0 THEN
      P_ERROR := 'El rol por usuario ya existe';
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      insert into rolxperson
        (rolid, personid)
      values
        (p_rolid, p_personid);
      sp_log(p_usuario, 'i_rolxusuario', p_rolid || '-' || p_personid);
      commit;
      p_error := 'Rol de Usuario Asignado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_rolxusuario] ' || SQLERRM, p_error);
  END i_rolxusuario;

  PROCEDURE d_rolxusuario(p_personid varchar2,
                          p_rolid    varchar2,
                          p_usuario  varchar2,
                          p_error    OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error,'pk_auten');
    select COUNT(*)
      INTO v_valida
      from rolxperson t
     WHERE t.personid = p_personid
       and t.rolid = p_rolid;
  
    IF v_valida < 0 THEN
      P_ERROR := 'El rol por usuario no existe';
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete rolxperson
      where rolid = p_rolid
        and personid = p_personid;
      sp_log(p_usuario, 'd_rolxusuario', p_rolid || '-' || p_personid);
      commit;
      p_error := 'Rol de Usuario Eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [d_rolxusuario] ' || SQLERRM, p_error);
  END d_rolxusuario;

  PROCEDURE u_menuxrol(p_rolid varchar2,
                          p_menunew   varchar2,
                          p_usuario  varchar2,
                          p_error    OUT VARCHAR2) is
  v_result varchar2(10);
  v_menuold varchar2(1000);
  v_menunew varchar2(1000);
  v_pos number := 1;
  begin

    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_auten');
    
    IF P_ERROR is null THEN
        for c in (select rolid, menuid from menuxrol where rolid = p_rolid)
        loop
            v_menuold := v_menuold || c.menuid || ',';
        end loop;
        
        delete menuxrol where rolid = p_rolid;
        v_menunew := p_menunew;

        v_result := fn_token(c => v_menunew,x => v_pos);
        while v_result is not null loop
            insert into menuxrol
              (menuid, rolid)
            values
              (v_result, p_rolid);
            v_result := fn_token(c => v_menunew,x => v_pos);
        end loop;

        sp_log(p_usuario, 'u_menuxrol', p_rolid || ' [Delete:' || v_menuold ||  '] [Insert:' || v_menunew || ']');
        commit;
        p_error := 'Opciones Agregadas Exitosamente';
     END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_menuxrol] ' || SQLERRM, p_error);
  END u_menuxrol;

 FUNCTION darSemilla return varchar2 is
 BEGIN
      return SEMILLA_ENCRIPCION;
 END darSemilla;
 
 
  PROCEDURE q_usuario(p_usuario         number,
                      p_clave            varchar2,
                      p_semilla  varchar2,
                      p_error    OUT VARCHAR2,
                      p_nombre    OUT VARCHAR2) is
    v_valida    NUMBER;
    v_integrada NUMBER;
  begin
   p_error := 'OK';
   
   SEMILLA_ENCRIPCION := p_semilla;
   
   select COUNT(*) INTO v_valida
   from person p
   WHERE p.idperson = p_usuario;
   
   if v_valida = 0 then
      p_error := 'USUARIO NO EXISTE EN SDF';
      return;
   end if;
   
   select f.seguridad_integrada
   into v_integrada
   from fcm f
   where f.nit_fcm = '8000826650';
   
   if (v_integrada = 1) then
      invoca_Seguridad(p_usuario, p_clave, p_error, p_nombre);
      return;
   end if;
   
   select COUNT(*), max(namePerson) INTO v_valida, p_nombre
   from person p
   WHERE p.idperson = p_usuario and
   p.password = TRANSLATE(p_clave,'abcdefghijklmnopqrstuvwxyz0123456789', '0z1y2x3w4v5u6t7s8r9qponmlkjihgfedcba');

   if v_valida = 0 then
      p_error := 'USUARIO CLAVE/INCORRECTA';
      return;
   end if;

   select COUNT(*) INTO v_valida
   from person p
   WHERE p.idperson = p_usuario and
   p.enableperson = 1;

   if v_valida = 0 then
      p_error := 'USUARIO DESACTIVADO. COMUNICARSE CON SU ADMINISTRADOR';
      return;
   end if;

   SELECT COUNT(*) INTO v_valida
   from person p, rolxperson rp, rol r
   where p.idperson = p_usuario and
   rp.personid = p.idperson and
   rp.rolid = r.rolid and
   r.enablerol = 1;

   if v_valida = 0 then
      p_error := 'USUARIO SIN ROL DE TRABAJO. COMUNICARSE CON SU ADMINISTRADOR';
      return;
   end if;

  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_usuario] ' || SQLERRM, p_error);
  END q_usuario;


PROCEDURE d_usuario(p_idperson   number, 
                      p_usuario    varchar2,
                      p_error      OUT VARCHAR2) AS

     
  BEGIN
  
  sp_v_usuario(p_usuario, p_error,'pk_auten');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete person
      where idperson = p_idperson;  
      commit;
      p_error := MSG_DEL_OK;

    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        sp_ex(SQLCODE, p_usuario || ' [eliminar_usuario] ' || SQLERRM, p_error);
    
 
  END  d_usuario; 
  
  PROCEDURE d_rol(p_rolid      number, 
                         p_usuario    varchar2,
                         p_error      OUT VARCHAR2) AS

     
  BEGIN
  
  sp_v_usuario(p_usuario, p_error,'pk_auten');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      
        select COUNT(*) INTO v_valida
        from rolxperson rp
        WHERE rp.rolid = p_rolid;

        if v_valida > 0 then
           p_error := 'ROL ESTA ASIGNADO. FAVOR DESASIGNAR PARA PODER ELIMINARLO';
           return;
        end if;
        
      
      delete rol
      where rolid = p_rolid;  
      commit;
      p_error := MSG_DEL_OK;

    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        sp_ex(SQLCODE, p_usuario || ' [eliminar_usuario] ' || SQLERRM, p_error);
    
  END  d_rol; 

PROCEDURE d_menu(p_idmenu      number, 
                         p_usuario    varchar2,
                         p_error      OUT VARCHAR2) AS

     
  BEGIN
  
  sp_v_usuario(p_usuario, p_error,'pk_auten');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      
        select COUNT(*) INTO v_valida
        from menuxrol mr
        WHERE mr.menuid =p_idmenu; 

        if v_valida > 0 then
           p_error := 'MENU ESTA ASIGNADO A UN ROL. FAVOR DESASIGNAR PARA PODER ELIMINARLO';
           return;
        end if;
        
      delete menu
      where idmenu = p_idmenu;  
      
      commit;
      p_error := MSG_DEL_OK;

    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        sp_ex(SQLCODE, p_usuario || ' [d_menu] ' || SQLERRM, p_error);
    
  END  d_menu; 
  
PROCEDURE invoca_Seguridad(p_usuario         number,
                      p_clave            varchar2,
                      p_error    OUT VARCHAR2,
                      p_nombre    OUT VARCHAR2) as
    req   UTL_HTTP.req := NULL;
    resp  UTL_HTTP.resp := NULL;
    respVal VARCHAR2(32000);
    reqXML VARCHAR2(32760);
    v_url VARCHAR2(250);
    x number;
    y number;
    
    docRes XMLTYPE;
  
    fault_node xmltype; 
    fault_code VARCHAR2(256); 
    fault_string VARCHAR2(32000);
    
    respuesta varchar2(256);

BEGIN
    
   select f.url_seguridad
   into v_url
   from fcm f
   where f.nit_fcm = '8000826650';
   
   select p.nameperson 
   INTO p_nombre
   from person p
   WHERE p.idperson = p_usuario;
 
    /*Generamos un Request a la URL destino, el método debe ser POST */
    req := UTL_HTTP.begin_request(v_url, 'POST');
 
/*Creamos un mensaje SOAP tal cual se define en el WSDL*/
   reqXML := '<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://webServices.qxMultas.quipux.com.co">
   <soapenv:Header/>
   <soapenv:Body>
      <web:getValidaUsuario soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
         <idFuncionario xsi:type="xsd:string">' || to_char(p_usuario) || '</idFuncionario>
         <clave xsi:type="xsd:string">' || p_clave || '</clave>
      </web:getValidaUsuario>
   </soapenv:Body>
</soapenv:Envelope>';
 
/*El contenido que enviamos es XML: */
   UTL_HTTP.set_header(req, 'Content-Type', 'text/xml');
 
/*Establecemos el SOAPAction a invocar: */
   UTL_HTTP.set_header(req, 'SOAPAction', '"rpc/' || v_url || '"');
 
/*Indicamos en el header el tamano del mensaje enviado: */
   UTL_HTTP.set_header(req, 'Content-Length', LENGTH(reqXML));
 
/*Escribimos el body del request */
   UTL_HTTP.write_text(req, reqXML);
 
/*Obtenemos la respuesta */
   resp := UTL_HTTP.get_response(req);
 
/*Cargamos en la variable respVal la devolución del servidor */
   UTL_HTTP.read_text(resp, respVal);

/*Finalizamos la conexión HTTP */
   UTL_HTTP.end_response(resp);

  insert into log
    (fecha, usuario, proceso, accion)
  values
    (sysdate, to_char(p_usuario), 'ConsumoWS', respVal);
    
   commit;
     
   docRes := xmltype.createxml(respVal);
   
   if (docRes.EXTRACT('//faultcode/text()') is null ) then
       p_error := 'Usuario/clave Incorrecto';
      return;
   end if;
  
   p_error := 'OK';
   

EXCEPTION
    WHEN UTL_HTTP.end_of_body THEN
      UTL_HTTP.end_response(resp);
      
   p_error := 'ERROR DE CONEXION CON PLATAFORMA SIMIT';

    
END  invoca_Seguridad;


end pk_auten;
/

prompt
prompt Creating package body PK_CONTA_EXT
prompt ==================================
prompt
create or replace package body simit.PK_CONTA_EXT is

  PROCEDURE causa_gas_recaudo_externo(p_fec_ini_ano number,
                                      p_fec_ini_mes number,
                                      p_fec_ini_dia number,
                                      p_fec_fin_ano number,
                                      p_fec_fin_mes number,
                                      p_fec_fin_dia number,
                                      p_usuario     varchar2,
                                      p_error       OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    /*w_fecmin_cor_ini date;*/
    /*w_fecmax_cor_fin date;*/
    w_registros number;
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    delete from recaudo_externo_causacion
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and operacion = 'GASTO';
  
    COMMIT;
  
    -- obtener partidas vlr neto concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             sum(s_valor_28),
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_puente),
             max(p.concesionario_s_cc),
             max(c.nit_c),
             1, -- orden
             'Por Pagar Recaudo ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (6.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr neto concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null, -- valor debito
             sum(p_valor_41), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_puente),
             max(p.concesionario_pm_cc),
             max(c.nit_c),
             1, -- orden
             'Por Pagar Recaudo ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (3.25%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas fondo cobertura concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             sum(s_valor_5),
             '',
             '',
             '',
             max(f.ctacon_puente),
             max(p.fondo_cob_concesionario_s_cc),
             max(c.nit_c),
             2, -- orden
             'Por Pagar Fondo Cobertura Conces ' || max(indtipo) ||
             ' Externo ' || max(c.nombre) || ' (0.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas fondo cobertura concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             sum(p_valor_5),
             '',
             '',
             '',
             max(f.ctacon_puente),
             max(p.fondo_cob_concesionario_pm_cc),
             max(c.nit_c),
             2, -- orden
             'Por Pagar Fondo Cobertura Conces ' || max(indtipo) ||
             ' Externo ' || max(c.nombre) || ' (0.25%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas debito vlr neto concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             sum(s_valor_28),
             null,
             max(p.ctacon_gas), -- cuenta debito
             max(p.concesionario_s_cc), -- centro debito
             max(c.nit_c), -- nit debito
             '',
             '',
             '',
             3, -- orden
             'Gasto Recaudo ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (6.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas debito vlr neto concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             sum(p_valor_41),
             null,
             max(p.ctacon_gas), -- cuenta debito
             max(p.concesionario_pm_cc), -- centro debito
             max(c.nit_c), -- nit debito
             '',
             '',
             '',
             3, -- orden
             'Gasto Recaudo ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (3.25%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas fondo cobertura concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             sum(s_valor_5),
             null,
             max(p.ctacon_gas), -- cuenta debito
             max(p.fondo_cob_concesionario_s_cc),
             max(c.nit_c), -- nit debito
             '',
             '',
             '',
             4, -- orden
             'Gasto Fondo Cobertura Conces ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (0.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas fondo cobertura concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             sum(p_valor_5),
             null,
             max(p.ctacon_gas), -- cuenta debito
             max(p.fondo_cob_concesionario_pm_cc),
             max(c.nit_c), -- nit debito
             '',
             '',
             '',
             4, -- orden
             'Gasto Fondo Cobertura Conces ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (0.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas sevial
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario,
             sum(p_valor_9), -- valor debito
             null, -- valor credito
             max(p.ctacon_gas), -- cuenta debito
             max(p.sevial_pp_cc),
             '8301123291', -- nit debito
             '',
             '',
             '',
             5, -- orden
             'Gasto Sevial ' || max(indtipo) || ' Externo ' || ' (3.0%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = p.idconcesionario
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas sevial
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario,
             null, -- valor debito
             sum(p_valor_9), -- valor credito
             '', -- cuenta credito
             '', -- cc credito
             '', -- nit credito
             max(f.ctacon_puente), -- cuenta debito
             max(p.sevial_pp_cc),
             '8301123291', -- nit debito
             6, -- orden
             'Gasto Sevial ' || max(indtipo) || ' Externo ' || ' (3.0%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = p.idconcesionario
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas debito honorarios contravencional
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             sum(s_valor_11),
             null,
             max(f.ctacon_puente_ext),
             '0532',
             max(c.nit_c),
             '',
             '',
             '',
             7, -- orden
             'Honorarios ' || max(indtipo) || ' Externo ' || max(c.nombre) ||
             ' (9.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_pro = c.idconcesionario
       group by r.id_concesionario_liq,
                r.id_concesionario_pro,
                r.idbanco,
                r.cta_recaudo;
  
    -- obtener partidas debito honorarios contravencional
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             sum(p_valor_24),
             null,
             max(f.ctacon_puente_ext),
             '0532',
             max(c.nit_c),
             '',
             '',
             '',
             7, -- orden
             'Honorarios ' || max(indtipo) || ' Externo ' || max(c.nombre) ||
             ' (9.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_pro = c.idconcesionario
       group by r.id_concesionario_liq,
                r.id_concesionario_pro,
                r.idbanco,
                r.cta_recaudo;
  
    -- obtener partidas debio iva honorarios contravencional
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             ROUND(sum(s_valor_11) * (max(f.iva) / 100), 2),
             null,
             max(f.ctacon_puente_ext),
             '0532',
             max(c.nit_c),
             '',
             '',
             '',
             8, -- orden
             'Iva Honorarios ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (16%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_pro = c.idconcesionario
       group by r.id_concesionario_liq,
                r.id_concesionario_pro,
                r.idbanco,
                r.cta_recaudo;
  
    -- obtener partidas debito iva honorarios contravencional
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             ROUND(sum(p_valor_24) * (max(f.iva) / 100), 2),
             null,
             max(f.ctacon_puente_ext),
             '0532',
             max(c.nit_c),
             '',
             '',
             '',
             8, -- orden
             'Iva Honorarios ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (16%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_pro = c.idconcesionario
       group by r.id_concesionario_liq,
                r.id_concesionario_pro,
                r.idbanco,
                r.cta_recaudo;
  
    -- obtener partidas credito retefuente honorarios
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             ROUND(sum(s_valor_11) * (max(f.retencion_fuente) / 100), 2),
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '0532',
             max(c.nit_c), -- nit credito
             9, -- orden
             'Rfte Honorarios ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (11%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_pro = c.idconcesionario
       group by r.id_concesionario_liq,
                r.id_concesionario_pro,
                r.idbanco,
                r.cta_recaudo;
  
    -- obtener partidas credito retefuente honorarios
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             ROUND(sum(p_valor_24) * (max(f.retencion_fuente) / 100), 2),
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '0532',
             max(c.nit_c), -- nit credito
             9, -- orden
             'Rfte Honorarios ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (11%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_pro = c.idconcesionario
       group by r.id_concesionario_liq,
                r.id_concesionario_pro,
                r.idbanco,
                r.cta_recaudo;
  
    -- obtener partidas credito cuentas por pagar
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             ROUND(sum(s_valor_11) + sum(s_valor_11) * (max(f.iva) / 100) -
                   sum(s_valor_11) * (max(f.retencion_fuente) / 100),
                   2),
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '0532',
             max(c.nit_c), -- nit credito
             10, -- orden
             'CXP Operador ' || max(indtipo) || ' Externo ' ||
             max(c.nombre),
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_pro = c.idconcesionario
       group by r.id_concesionario_liq,
                r.id_concesionario_pro,
                r.idbanco,
                r.cta_recaudo;
  
    -- obtener partidas credito cuentas por pagar
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             ROUND(sum(p_valor_24) + sum(p_valor_24) * (max(f.iva) / 100) -
                   sum(s_valor_24) * (max(f.retencion_fuente) / 100),
                   2),
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '0532',
             max(c.nit_c), -- nit credito
             10, -- orden
             'CXP Operador ' || max(indtipo) || ' Externo ' ||
             max(c.nombre),
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_pro = c.idconcesionario
       group by r.id_concesionario_liq,
                r.id_concesionario_pro,
                r.idbanco,
                r.cta_recaudo;
  
    -- obtener partidas debito honorarios sevial
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             sum(p_valor_14),
             null,
             max(f.ctacon_puente_ext),
             '0511',
             '8301123291',
             '',
             '',
             '',
             11, -- orden
             'Honorarios Sevial ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (2.7%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas debito iva honorarios sevial
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             ROUND(sum(p_valor_14) * (max(f.iva) / 100), 2),
             null,
             max(f.ctacon_puente_ext),
             '0511',
             '8301123291',
             '',
             '',
             '',
             12, -- orden
             'Iva Honorarios Sevial ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (16%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas credito rfte honorarios sevial
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             ROUND(sum(p_valor_14) * (max(f.retencion_fuente) / 100), 2),
             '',
             '',
             '',
             max(f.ctacon_puente_ext),
             '0511',
             '8301123291',
             13, -- orden
             'Rfte Honorarios Sevial ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (11%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas credito timbre honorarios sevial
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             ROUND(sum(p_valor_14) * (max(f.impuesto_timbre_tercero) / 100),
                   2),
             '',
             '',
             '',
             max(f.ctacon_puente_ext),
             '0511',
             '8301123291',
             14, -- orden
             'Timbre Honorarios Sevial ' || max(indtipo) || ' Externo ' ||
             max(c.nombre) || ' (1.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas credito CXP honorarios sevial
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null,
             ROUND(sum(p_valor_14) + sum(p_valor_14) * (max(f.iva) / 100) -
                   sum(p_valor_14) * (max(f.retencion_fuente) / 100) -
                   sum(p_valor_14) * (max(f.impuesto_timbre_tercero) / 100),
                   2),
             '',
             '',
             '',
             max(f.ctacon_puente_ext),
             '0511',
             '8301123291',
             14, -- orden
             'CXP Honorarios Sevial ' || max(indtipo) || ' Externo ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_externo_liquidacion r, concesionario c, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_externo_causacion
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and operacion = 'GASTO';
  
    p_error := 'Causado Gasto Recuado Externo exitosamente. Registros: ' ||
               w_registros;
  
    sp_log(p_usuario,
           'Cuasacion Gasto Recaudo Externo',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia || '-' ||
           p_fec_fin_ano || '-' || p_fec_fin_mes || '-' || p_fec_fin_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [causa_gas_recaudo_externo] ' || SQLERRM,
            p_error);
  END causa_gas_recaudo_externo;

  PROCEDURE causa_ing_recaudo_externo(p_fec_ini_ano number,
                                      p_fec_ini_mes number,
                                      p_fec_ini_dia number,
                                      p_fec_fin_ano number,
                                      p_fec_fin_mes number,
                                      p_fec_fin_dia number,
                                      p_usuario     varchar2,
                                      p_error       OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    /*w_fecmin_cor_ini date;*/
    /*w_fecmax_cor_fin date;*/
    w_registros number;
  begin
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    delete from recaudo_externo_causacion
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and operacion = 'INGRESO';
  
    COMMIT;
  
    -- obtener partidas vlr recaudo
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             sum(valor_total), -- valor debito
             null, -- valor credito
             max(c.cta_contable), -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             '', -- cuenta credito
             '', -- cc credito
             '', -- nit credito
             1, -- orden
             'Ingreso Recaudo ' || max(r.indtipo) || ' Externo ' ||
             max(b.nombre),
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             cta_recaudo_concesionario   c,
             banco                       b
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.idbanco = b.idbanco
         and r.cta_recaudo = c.cuenta
         and r.idbanco = c.idbanco
         and r.indtipo = c.indtipo
         and r.id_concesionario_liq = c.idconcesionario
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr recaudo
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             sum(valor_total), -- valor debito
             null, -- valor credito
             max(c.cta_contable), -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             '', -- cuenta credito
             '', -- cc credito
             '', -- nit credito
             1, -- orden
             'Ingreso Recaudo ' || max(r.indtipo) || ' Externo ' ||
             max(b.nombre),
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             cta_recaudo_concesionario   c,
             banco                       b
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idbanco = b.idbanco
         and r.cta_recaudo = c.cuenta
         and r.idbanco = c.idbanco
         and r.indtipo = c.indtipo
         and r.id_concesionario_liq = c.idconcesionario
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr neto municipio
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(s_valor_8 - s_valor_10 - s_valor_11 - s_valor_12 +
                 valor_adicional), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             '29059004',
             '',
             '',
             2, -- orden
             'Ingreso Municipio Recaudo ' || max(r.indtipo) ||
             ' Externo (90%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr neto municipio
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_21 - p_valor_23 - p_valor_24 - p_valor_25 +
                 valor_adicional), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             '29059007',
             '',
             '',
             2, -- orden
             'Ingreso Municipio Recaudo ' || max(r.indtipo) ||
             ' Externo (45%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr contravencional x propietario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(s_valor_11), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta debito
             '0532', -- centro debito
             max(c.nit_c), -- nit debito
             3, -- orden
             'Ingreso Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (9.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f, concesionario c
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and f.nit_fcm = '8000826650'
         and c.idconcesionario = r.id_concesionario_pro
       group by r.id_concesionario_pro, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr contravencional x propietario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_24), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta debito
             '0532', -- centro debito
             max(c.nit_c), -- nit debito
             3, -- orden
             'Ingreso Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (9.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f, concesionario c
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
         and c.idconcesionario = r.id_concesionario_pro
       group by r.id_concesionario_pro, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr contravencional fcm
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(s_valor_12), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta debito
             '0531', -- centro debito
             '8000826650', -- nit debito
             3, -- orden
             'Ingreso FCM Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo (9.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and f.nit_fcm = '8000826650'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr contravencional fcm
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_25), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta debito
             '0531', -- centro debito
             '8000826650', -- nit debito
             3, -- orden
             'Ingreso FCM Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo (9.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr neto concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null, -- valor debito
             sum(s_valor_28), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.concesionario_s_cc),
             max(c.nit_c),
             4, -- orden
             'Ingreso Concesionario Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (6.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr neto concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null, -- valor debito
             sum(p_valor_41), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.concesionario_pm_cc),
             max(c.nit_c),
             4, -- orden
             'Ingreso Concesionario Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (3.25%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr fondo cobertura concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null, -- valor debito
             sum(s_valor_5), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.fondo_cob_concesionario_s_cc),
             max(c.nit_c),
             5, -- orden
             'Ingreso Fondo Concesionario Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (0.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr fondo cobertura concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null, -- valor debito
             sum(p_valor_5), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.fondo_cob_concesionario_pm_cc),
             max(c.nit_c),
             5, -- orden
             'Ingreso Fondo Concesionario Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (0.25%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr equilibrio economico
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null, -- valor debito
             sum(s_valor_7), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.equilibrio_economico_s_cc),
             max(c.nit_c),
             5, -- orden
             'Ingreso Equilibrio Economico Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (2.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr equilibrio economico
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.id_concesionario_liq,
             null, -- valor debito
             sum(p_valor_7 + p_valor_10), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.equilibrio_economico_pm_cc),
             max(c.nit_c),
             5, -- orden
             'Ingreso Equilibrio Economico Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (3.77%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             concesionario               c,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.id_concesionario_liq = c.idconcesionario
         and r.id_concesionario_liq = p.idconcesionario
       group by r.id_concesionario_liq, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr fondo cobertura fcm
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(s_valor_6), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_ingreso),
             max(p.fondo_cob_simit_s_cc),
             max(f.nit_fcm),
             6, -- orden
             'Ingreso Fondo FCM Recaudo ' || max(r.indtipo) ||
             ' Externo  (0.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and p.idconcesionario = r.id_concesionario_liq
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr fondo cobertura fcm
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_6), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_ingreso),
             max(p.fondo_cob_simit_pm_cc),
             max(f.nit_fcm),
             6, -- orden
             'Ingreso Fondo FCM Recaudo ' || max(r.indtipo) ||
             ' Externo  (0.25%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and p.idconcesionario = r.id_concesionario_liq
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr simit
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(s_valor_3), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_ingreso),
             max(p.simit_s_cc),
             max(f.nit_fcm),
             7, -- orden
             'Ingreso FCM Recaudo ' || max(r.indtipo) ||
             ' Externo  (2.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and p.idconcesionario = r.id_concesionario_liq
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr simit
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_3 + p_valor_8), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_ingreso),
             max(p.simit_pm_cc),
             max(f.nit_fcm),
             7, -- orden
             'Ingreso FCM Recaudo ' || max(r.indtipo) ||
             ' Externo  (3.25%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and p.idconcesionario = r.id_concesionario_liq
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr iva contravencional x municipio
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             sum(s_valor_14), -- valor debito
             null, -- valor credito
             max(f.ctacon_puente_ext), -- cuenta debito
             '', -- centro debito
             max(m.nit_m), -- nit debito
             '',
             '',
             '',
             8, -- orden
             'CXC IVA Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(m.nombre) || ' (16%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f, municipio m
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and f.nit_fcm = '8000826650'
         and m.idmunicipio = r.idmunicipio
       group by r.idmunicipio, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr iva contravencional x municipio
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             sum(p_valor_27), -- valor debito
             null, -- valor credito
             max(f.ctacon_puente_ext), -- cuenta debito
             '', -- centro debito
             max(m.nit_m), -- nit debito
             '',
             '',
             '',
             8, -- orden
             'CXC IVA Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(m.nombre) || ' (16%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f, municipio m
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
         and m.idmunicipio = r.idmunicipio
       group by r.idmunicipio, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr iva contravencional x concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(s_valor_14) - round(sum(s_valor_12) * max(f.iva) / 100, 2), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '0532', -- centro credito
             max(c.nit_c), -- nit credito
             9, -- orden
             'IVA por Pagar Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (16%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f, concesionario c
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and f.nit_fcm = '8000826650'
         and c.idconcesionario = r.id_concesionario_pro
       group by r.id_concesionario_pro, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr iva contravencional x concesionario
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_27) - round(sum(p_valor_25) * max(f.iva) / 100, 2), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '0532', -- centro credito
             max(c.nit_c), -- nit credito
             9, -- orden
             'IVA por Pagar Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo ' || max(c.nombre) || ' (16%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f, concesionario c
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
         and c.idconcesionario = r.id_concesionario_pro
       group by r.id_concesionario_pro, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr iva contravencional fcm
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             round(sum(s_valor_12) * max(f.iva) / 100, 2), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '0531', -- centro credito
             max(f.nit_fcm), -- nit credito
             9, -- orden
             'IVA por Pagar Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo FCM (16%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and f.nit_fcm = '8000826650'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr iva contravencional fcm
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             round(sum(p_valor_25) * max(f.iva) / 100, 2), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '0531', -- centro credito
             max(f.nit_fcm), -- nit credito
             9, -- orden
             'IVA por Pagar Contravencional Recaudo ' || max(r.indtipo) ||
             ' Externo FCM (16%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr 1.8 fcm cp
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_13), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             max(p.fcm_cp_cc), -- centro credito
             max(f.nit_fcm), -- nit credito
             10, -- orden
             'Ingreso FCM POLCA ' || max(r.indtipo) || ' Externo 1.8% ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
         and p.idconcesionario = r.id_concesionario_liq
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr 1.8 fcm cp
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_12), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '', -- centro credito
             max(f.nit_polca), -- nit credito
             11, -- orden
             'Ingreso POLCA ' || max(r.indtipo) || ' Externo 39.78% ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr 2.7 sevial cp
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_14), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             max(p.sevial_cp_cc), -- centro credito
             max(c.nit_c), -- nit credito
             12, -- orden
             'Ingreso SEVIAL POLCA ' || max(r.indtipo) || ' Externo 2.7% ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p,
             concesionario               c
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
         and p.idconcesionario = '03'
         and c.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr 3.0 sevial pp
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_9), -- valor credito
             '',
             '',
             '',
             max(p.ctacon_ing), -- cuenta credito
             max(p.sevial_pp_cc), -- centro credito
             max(c.nit_c), -- nit credito
             13, -- orden
             'Ingreso SEVIAL  ' || max(r.indtipo) || ' Externo 3.0% ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p,
             concesionario               c
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
         and p.idconcesionario = '03'
         and c.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr iva 2.7
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_18), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             max(p.sevial_cp_cc), -- centro credito
             max(c.nit_c), -- nit credito
             14, -- orden
             'IVA SEVIAL Recaudo  ' || max(r.indtipo) || ' Externo 2.7% ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p,
             concesionario               c
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
         and p.idconcesionario = '03'
         and c.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr iva 1.8
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_16), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             max(p.fcm_cp_cc), -- centro credito
             max(f.nit_fcm), -- nit credito
             15, -- orden
             'IVA FCM Recaudo  ' || max(r.indtipo) || ' Externo 1.8% ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r,
             fcm                         f,
             p_dispersion_concesionario  p,
             concesionario               c
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
         and p.idconcesionario = '03'
         and c.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr timbre 1.8 + 2.7
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             null, -- valor debito
             sum(p_valor_17), -- valor credito
             '',
             '',
             '',
             max(f.ctacon_puente_ext), -- cuenta credito
             '0533', -- centro credito
             max(f.nit_fcm), -- nit credito
             16, -- orden
             'Timbre FCM Recaudo  ' || max(r.indtipo) ||
             ' Externo 2.7 + 1.8 % ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas debito vlr timbre 1.8 + 2.7
    insert into recaudo_externo_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null,
             sum(p_valor_17), -- valor debito
             null, -- valor credito
             max(f.ctacon_puente_ext), -- cuenta credito
             '0533', -- centro credito
             max(f.nit_fcm), -- nit credito
             '',
             '',
             '',
             17, -- orden
             'Timbre FCM Recaudo  ' || max(r.indtipo) ||
             ' Externo 2.7 + 1.8 % ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_externo_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and f.nit_fcm = '8000826650'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_externo_causacion
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and operacion = 'INGRESO';
  
    p_error := 'Causado Ingreso Recuado Externo exitosamente. Registros: ' ||
               w_registros;
  
    sp_log(p_usuario,
           'Cuasacion Ingreso Recaudo Externo',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia || '-' ||
           p_fec_fin_ano || '-' || p_fec_fin_mes || '-' || p_fec_fin_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [causa_ing_recaudo_local] ' || SQLERRM,
            p_error);
  END causa_ing_recaudo_externo;

  PROCEDURE causa_gas_recaudo_local(p_fec_ini_ano number,
                                    p_fec_ini_mes number,
                                    p_fec_ini_dia number,
                                    p_fec_fin_ano number,
                                    p_fec_fin_mes number,
                                    p_fec_fin_dia number,
                                    p_usuario     varchar2,
                                    p_error       OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    /*w_fecmin_cor_ini date;*/
    /*w_fecmax_cor_fin date;*/
    w_registros number;
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    delete from recaudo_local_causacion
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and operacion = 'GASTO';
  
    COMMIT;
  
    -- obtener partidas vlr neto concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             null,
             sum(s_valor_6),
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_puente),
             max(p.concesionario_s_cc),
             max(c.nit_c),
             1, -- orden
             'Por Pagar Recaudo ' || max(indtipo) || ' Local ' ||
             max(c.nombre) || ' (6.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr neto concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             null, -- valor debito
             sum(p_valor_25), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_puente),
             max(p.concesionario_pm_cc),
             max(c.nit_c),
             1, -- orden
             'Por Pagar Recaudo ' || max(indtipo) || ' Local ' ||
             max(c.nombre) || ' (3.25%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas fondo cobertura concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             null,
             sum(s_valor_3),
             '',
             '',
             '',
             max(f.ctacon_puente),
             max(p.fondo_cob_concesionario_s_cc),
             max(c.nit_c),
             2, -- orden
             'Por Pagar Fondo Cobertura Conces ' || max(indtipo) ||
             ' Local ' || max(c.nombre) || ' (0.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas fondo cobertura concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             null,
             sum(p_valor_9),
             '',
             '',
             '',
             max(f.ctacon_puente),
             max(p.fondo_cob_concesionario_pm_cc),
             max(c.nit_c),
             2, -- orden
             'Por Pagar Fondo Cobertura Conces ' || max(indtipo) ||
             ' Local ' || max(c.nombre) || ' (0.25%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas debito vlr neto concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             sum(s_valor_6),
             null,
             max(p.ctacon_gas), -- cuenta debito
             max(p.concesionario_pm_cc), -- centro debito
             max(c.nit_c), -- nit debito
             '',
             '',
             '',
             3, -- orden
             'Gasto Recaudo ' || max(indtipo) || ' Local ' || max(c.nombre) ||
             ' (6.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas debito vlr neto concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             sum(p_valor_25),
             null,
             max(p.ctacon_gas), -- cuenta debito
             max(p.concesionario_pm_cc), -- centro debito
             max(c.nit_c), -- nit debito
             '',
             '',
             '',
             3, -- orden
             'Gasto Recaudo ' || max(indtipo) || ' Local ' || max(c.nombre) ||
             ' (3.25%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas fondo cobertura concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             sum(s_valor_3),
             null,
             max(p.ctacon_gas), -- cuenta debito
             max(p.fondo_cob_concesionario_s_cc),
             max(c.nit_c), -- nit debito
             '',
             '',
             '',
             4, -- orden
             'Gasto Fondo Cobertura Conces ' || max(indtipo) || ' Local ' ||
             max(c.nombre) || ' (0.5%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas fondo cobertura concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             sum(p_valor_9),
             null,
             max(p.ctacon_gas), -- cuenta debito
             max(p.fondo_cob_concesionario_pm_cc),
             max(c.nit_c), -- nit debito
             '',
             '',
             '',
             4, -- orden
             'Gasto Fondo Cobertura Conces ' || max(indtipo) || ' Local ' ||
             max(c.nombre) || ' (0.25%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas sevial
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario,
             sum(p_valor_13), -- valor debito
             null, -- valor credito
             max(p.ctacon_gas), -- cuenta debito
             max(p.sevial_pp_cc),
             '8301123291', -- nit debito
             '',
             '',
             '',
             5, -- orden
             'Gasto Sevial ' || max(indtipo) || ' Local ' || ' (3.05%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion r, p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idconcesionario = p.idconcesionario
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas sevial
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'GASTO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario,
             null, -- valor debito
             sum(p_valor_13), -- valor credito
             '', -- cuenta credito
             '', -- cc credito
             '', -- nit credito
             max(f.ctacon_puente), -- cuenta debito
             max(p.sevial_pp_cc),
             '8301123291', -- nit debito
             6, -- orden
             'Gasto Sevial ' || max(indtipo) || ' Local ' || ' (3.05%) ',
             p_usuario,
             sysdate,
             max(indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idconcesionario = p.idconcesionario
       group by r.idbanco, r.cta_recaudo;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_local_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1;
  
    p_error := 'OK ' || w_registros;
  
    sp_log(p_usuario,
           'Cuasacion Gasto Recaudo Local',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia || '-' ||
           p_fec_fin_ano || '-' || p_fec_fin_mes || '-' || p_fec_fin_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [causa_gas_recaudo_local] ' || SQLERRM,
            p_error);
  END causa_gas_recaudo_local;

  PROCEDURE causa_ing_recaudo_local(p_fec_ini_ano number,
                                    p_fec_ini_mes number,
                                    p_fec_ini_dia number,
                                    p_fec_fin_ano number,
                                    p_fec_fin_mes number,
                                    p_fec_fin_dia number,
                                    p_usuario     varchar2,
                                    p_error       OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    /*w_fecmin_cor_ini date;*/
    /*w_fecmax_cor_fin date;*/
    w_registros number;
  begin
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    delete from recaudo_local_causacion
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and operacion = 'INGRESO';
  
    COMMIT;
  
    -- obtener partidas vlr recaudo
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             sum(valor_total), -- valor debito
             null, -- valor credito
             max(c.cta_contable), -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             '', -- cuenta credito
             '', -- cc credito
             '', -- nit credito
             1, -- orden
             'Ingreso Recaudo ' || max(r.indtipo) || ' Local ' ||
             max(b.nombre),
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion r, cta_recaudo_fcm c, banco b
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.idbanco = b.idbanco
         and r.cta_recaudo = c.cuenta
         and r.idbanco = c.idbanco
         and c.nit_fcm = '8000826650'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr recaudo
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             sum(valor_total), -- valor debito
             null, -- valor credito
             max(c.cta_contable), -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             '', -- cuenta credito
             '', -- cc credito
             '', -- nit credito
             1, -- orden
             'Ingreso Recaudo ' || max(r.indtipo) || ' Local ' ||
             max(b.nombre),
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion r, cta_recaudo_fcm c, banco b
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idbanco = b.idbanco
         and r.cta_recaudo = c.cuenta
         and r.idbanco = c.idbanco
         and c.nit_fcm = '8000826650'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr neto concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             null, -- valor debito
             sum(s_valor_6), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.concesionario_s_cc),
             max(c.nit_c),
             2, -- orden
             'Ingreso Concesionario Recaudo ' || max(r.indtipo) ||
             ' Local ' || max(c.nombre) || ' (6.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr neto concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             null, -- valor debito
             sum(p_valor_25), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.concesionario_pm_cc),
             max(c.nit_c),
             2, -- orden
             'Ingreso Concesionario Recaudo ' || max(r.indtipo) ||
             ' Local ' || max(c.nombre) || ' (3.25%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr fondo cobertura concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             null, -- valor debito
             sum(s_valor_3), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.fondo_cob_concesionario_s_cc),
             max(c.nit_c),
             3, -- orden
             'Ingreso Fondo Concesionario Recaudo ' || max(r.indtipo) ||
             ' Local ' || max(c.nombre) || ' (0.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr fondo cobertura concesionario
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             r.idconcesionario,
             null, -- valor debito
             sum(p_valor_9), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.fondo_cob_concesionario_pm_cc),
             max(c.nit_c),
             3, -- orden
             'Ingreso Fondo Concesionario Recaudo ' || max(r.indtipo) ||
             ' Local ' || max(c.nombre) || ' (0.25%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             concesionario              c,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and r.idconcesionario = c.idconcesionario
         and r.idconcesionario = p.idconcesionario
       group by r.idconcesionario, r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr fondo cobertura fcm
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(s_valor_4), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_ingreso),
             max(p.fondo_cob_simit_s_cc),
             max(f.nit_fcm),
             4, -- orden
             'Ingreso Fondo FCM Recaudo ' || max(r.indtipo) ||
             ' Local  (0.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and p.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr fondo cobertura fcm
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_10), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_ingreso),
             max(p.fondo_cob_simit_pm_cc),
             max(f.nit_fcm),
             4, -- orden
             'Ingreso Fondo FCM Recaudo ' || max(r.indtipo) ||
             ' Local  (0.25%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and p.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr simit
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(s_valor_1), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_ingreso),
             max(p.simit_s_cc),
             max(f.nit_fcm),
             5, -- orden
             'Ingreso FCM Recaudo ' || max(r.indtipo) || ' Local  (2.5%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'SIMIT'
         and p.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr simit
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_27), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_ingreso),
             max(p.simit_pm_cc),
             max(f.nit_fcm),
             5, -- orden
             'Ingreso FCM Recaudo ' || max(r.indtipo) || ' Local  (3.25%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and p.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- falta: neto polca, 1,8, 2,7 impuestos, sevial
  
    -- obtener partidas vlr polca
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_15), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_polca),
             '',
             max(f.nit_polca),
             6, -- orden
             'Ingreso Polca ' || max(r.indtipo) || ' Local  (39.78%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr sevial 2.7
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_17), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_impuestos),
             max(p.sevial_cp_cc),
             max(f.nit_sevial),
             7, -- orden
             'Ingreso Sevial ' || max(r.indtipo) || ' Local  (2.7%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and p.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr sevial 3.0
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_13), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(p.ctacon_ing),
             max(p.sevial_pp_cc),
             max(f.nit_sevial),
             7, -- orden
             'Ingreso Sevial ' || max(r.indtipo) || ' Local  (3.0%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and p.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlr fcm 1.8
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_16), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_impuestos),
             max(p.fcm_cp_cc),
             max(f.nit_fcm),
             8, -- orden
             'Ingreso FCM ' || max(r.indtipo) || ' Local  (1.8%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and p.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlriva 2.7
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_20), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_impuestos),
             max(p.sevial_cp_cc),
             max(f.nit_sevial),
             9, -- orden
             'Ingreso IVA ' || max(r.indtipo) || ' Local  (2.7%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and p.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlriva 1.8
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_19), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_impuestos),
             max(p.fcm_cp_cc),
             max(f.nit_fcm),
             10, -- orden
             'Ingreso IVA ' || max(r.indtipo) || ' Local  (1.8%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion  r,
             fcm                        f,
             p_dispersion_concesionario p
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
         and p.idconcesionario = '03'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlriva impuesto timbre
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             null, -- valor debito
             sum(p_valor_23), -- valor credito
             '', -- cuenta debito
             '', -- centro debito
             '', -- nit debito
             max(f.ctacon_impuestos),
             '',
             max(f.nit_fcm),
             11, -- orden
             'Ingreso Impuesto Timbre ' || max(r.indtipo) ||
             ' Local (0.75%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtener partidas vlriva impuesto timbre
    insert into recaudo_local_causacion
      (operacion,
       fec_corte_ini,
       fec_corte_fin,
       ori_idbanco,
       ori_cuenta,
       idconcesionario,
       valor_debito,
       valor_credito,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       orden,
       concepto_con,
       usuario_proceso,
       fecha_proceso,
       indtipo)
      select 'INGRESO',
             w_fec_cor_ini,
             w_fec_cor_fin,
             r.idbanco,
             r.cta_recaudo,
             null, -- idconcesionario
             sum(p_valor_23), -- valor debito
             null, -- valor credito
             max(f.ctacon_impuestos),
             '',
             max(f.nit_fcm),
             '', -- cuenta credito
             '', -- centro credito
             '', -- nit credito
             12, -- orden
             'Ingreso Impuesto Timbre ' || max(r.indtipo) ||
             ' Local (0.75%) ',
             p_usuario,
             sysdate,
             max(r.indtipo)
        from recaudo_local_liquidacion r, fcm f
       where r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.ind_proceso = 1
         and r.indtipo = 'POLCA'
       group by r.idbanco, r.cta_recaudo;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_local_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1;
  
    p_error := 'OK ' || w_registros;
  
    sp_log(p_usuario,
           'Cuasacion Ingreso Recaudo Local',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia || '-' ||
           p_fec_fin_ano || '-' || p_fec_fin_mes || '-' || p_fec_fin_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [causa_ing_recaudo_local] ' || SQLERRM,
            p_error);
  END causa_ing_recaudo_local;

  PROCEDURE contabiliza_recaudo_externo(p_feccor_ini_ano number,
                                        p_feccor_ini_mes number,
                                        p_feccor_ini_dia number,
                                        p_usuario        varchar2,
                                        p_error          OUT VARCHAR2) AS
    w_fec_cor_ini date;
    w_registros   number;
  
    w_fec_cor_ini_s char(8);
    w_concepto      varchar(250);
  
  BEGIN
  
    -- VALIDACIONES
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
      IF not P_ERROR is null THEN
        return;
      END IF;
    END IF;
  
    -- Obtiene fecha de cierre en formato ddMMyyyy
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select to_char(w_fec_cor_ini, 'ddMMyyyy')
      into w_fec_cor_ini_s
      from DUAL;
  
    -- elimina contabilizacion
    delete recaudo_externo_contabilidad
     where fechaDoc = w_fec_cor_ini_s
       and tipoContable = 'REC';
  
    -- contabilizar valores de recuado simit
    -- and liquidador no sea simit capital
    -- and acuerdo de pago sea 0
    -- and valor contravencional sea 0
  
    w_concepto := 'REC INGRESO PART CONCESIONARIO CONCESIONARIO  6,5% (6.45%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             r.s_valor_4 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20111' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'REC INGRESO FONDO COB CONCESIONARIO ( 0,5%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             r.s_valor_5 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20112' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'REC INGRESO EQUILIBRIO ECO ( 2,5%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             r.s_valor_7 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20113' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING EQUILIBRIO ECO ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'REC INGRESO FCM ( 2,5% 0R 1,05%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             r.s_valor_3 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20113' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'REC INGRESO FONDO COB FCM ( 0,5%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             r.s_valor_6 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20114' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FONDO COB FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'NOMBRE BANCO CTA REC';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             cr.cta_contable as cuenta,
             r.valor_total as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             (b.nombre || ' ' || r.cta_recaudo) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.s_valor_26, 0) + ROUND(r.s_valor_19, 0) +
             ROUND(r.s_valor_21, 0) + ROUND(r.s_valor_23, 0) +
             ROUND(r.s_valor_25, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT'
         and r.validador_fecha = '000';
  
    w_concepto := 'PARTICIPACION MUNICIPIO METROTRANSITO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (ROUND(r.s_valor_26, 0) + ROUND(r.s_valor_19, 0) +
             ROUND(r.s_valor_21, 0) + ROUND(r.s_valor_23, 0) +
             ROUND(r.s_valor_25, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and mt.idmunicipio = '08001001'
         and r.idmunicipio = '08001000'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT'
         and r.validador_fecha <> '000';
  
    w_concepto := 'PARTICIPACION MUNICIPIO DPTAL ATLANTICO - VALIDADOR FECHA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (ROUND(r.s_valor_26, 0) + ROUND(r.s_valor_19, 0) +
             ROUND(r.s_valor_21, 0) + ROUND(r.s_valor_23, 0) +
             ROUND(r.s_valor_25, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and mt.idmunicipio = '08000000'
         and r.idmunicipio in ('08296000', '08573000')
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT'
         and r.validador_fecha <> '000';
  
    w_concepto := 'ACUERDO PAGO MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.s_valor_10) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('ACUERDO PAGO MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT'
         and r.validador_fecha = '000';
  
    w_concepto := 'ACUERDO PAGO MUNICIPIO METROTRANSITO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_10) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('ACUERDO PAGO MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and mt.idmunicipio = '08001001'
         and r.IDMUNICIPIO = '08001000'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT'
         and r.validador_fecha <> '000';
  
    w_concepto := 'ACUERDO PAGO MUNICIPIO DPTAL ATLANTICO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_10) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('ACUERDO PAGO MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and mt.idmunicipio = '08000000'
         and r.idmunicipio in ('08296000', '08573000')
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT'
         and r.validador_fecha <> '000';
  
    w_concepto := 'REC GASTO PART CONCESIONARIO REMO (6.5%, 6,45%))';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             c.cta_contable_liquidacion as cuenta,
             r.s_valor_4 as importe,
             '' as indicadorimpuesto,
             '200102' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(C.NIT_C, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'REC GASTO FONDO COB CONCESIONARIO ( 0,5%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             C.CTA_CONTABLE_FONDO as cuenta,
             r.s_valor_5 as importe,
             '' as indicadorimpuesto,
             '200102' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(C.NIT_C, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'OTRO ACREEDOR CONCESIONARIO ( 6,5% + 0,5%, 6.45%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(C.NIT_C, 0, 9) as cuenta,
             ROUND(R.s_valor_4, 0) + ROUND(R.s_valor_5, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('OTRO ACREEDOR ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(C.NIT_C, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'CXC 10% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             (R.NUM_LIQUIDACION || 'A') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '01' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.s_valor_4, 0) + ROUND(r.s_valor_5, 0) +
             ROUND(r.s_valor_7, 0) + ROUND(r.s_valor_3, 0) +
             ROUND(r.s_valor_6, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXC 10% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '1401020102' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'CXC 10% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             (R.NUM_LIQUIDACION || 'A') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '11' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.s_valor_4, 0) + ROUND(r.s_valor_5, 0) +
             ROUND(r.s_valor_7, 0) + ROUND(r.s_valor_3, 0) +
             ROUND(r.s_valor_6, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXC 10% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '1401020102' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PARTICIPACION CONTRAVENCIONAL concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.s_valor_9 / 2, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PART CONTRAVENCIONAL ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '2905901005' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PARTICIPACION IVA CONTRAVENCIONAL concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.s_valor_14 / 2, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PART IVA CONTRAVENCIONAL  ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '2905901009' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PARTICIPACION CONTRAVENCIONAL FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             f.ctacon_fcm as cuenta,
             (r.s_valor_9 - ROUND(r.s_valor_9 / 2, 2)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION CONTRAVENCIONAL FCM') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PARTICIPACION IVA CONTRAVENCIONAL FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             f.ctacon_impuestos as cuenta,
             (r.s_valor_14 - ROUND(r.s_valor_14 / 2, 2)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION IVA CONTRAVENCIONAL FCM') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'CRUCE CXC A SIMIT 19% IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'FCM1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '1470909003' as cuenta,
             (ROUND(r.s_valor_9, 0) + ROUND(r.s_valor_14, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CRUCE CXC A SIMIT') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'CRUCE CXP A SIMIT';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'FCM1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.s_valor_9, 0) + ROUND(r.s_valor_14, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CRUCE CXP A SIMIT') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             'Z002' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'RECAUDO NO DISTRIBUIDO MUNICIPIO SIMIT';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             r.valor_total as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('RECAUDO NO DISTRIBUIDO MUNICIPIO SIMIT') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '2905901008' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'SIMIT'
         and r.ind_proceso = 0;
  
    w_concepto := 'REC INGRESO PART CONCESIONARIO CONCESIONARIO  3,25% (3.23%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             r.p_valor_4 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20121' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REC INGRESO FONDO COB CONCESIONARIO ( 0,25%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             r.p_valor_5 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20122' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REC INGRESO EQUILIBRIO ECO ( 3,77%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             (ROUND(r.p_valor_7, 0) + ROUND(r.p_valor_10, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20123' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING EQUILIBRIO ECO ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REC INGRESO FCM ( 3,25% = 1.25 + 2)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             (ROUND(r.p_valor_3, 0) + ROUND(r.p_valor_8, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20123' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REC INGRESO FONDO COB FCM ( 0,25%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             r.p_valor_6 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '20124' || substr(r.id_concesionario_liq, 2, 1) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FONDO COB FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REC INGRESO PART CONCESIONARIO SEVIAL  3,0%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             b.cuentacontable as cuenta,
             r.p_valor_9 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '201213' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING PART CONCES SEVIAL 3.0%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'NOMBRE BANCO CTA REC';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             cr.cta_contable as cuenta,
             r.valor_total as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             (b.nombre || ' ' || r.cta_recaudo) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'OTRO ACREEDOR POLCA 39,78';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(f.nit_polca, 0, 9) as cuenta,
             (r.p_valor_12 - r.p_valor_18 - r.p_valor_16) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('OTRO ACREEDOR POLCA 39,78') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.p_valor_39, 0) + ROUND(r.p_valor_32, 0) +
             ROUND(r.p_valor_34, 0) + ROUND(r.p_valor_36, 0) +
             ROUND(r.p_valor_38, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA'
         and r.validador_fecha = '000';
  
    w_concepto := 'PARTICIPACION MUNICIPIO METROTRANSITO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (ROUND(r.p_valor_39, 0) + ROUND(r.p_valor_32, 0) +
             ROUND(r.p_valor_34, 0) + ROUND(r.p_valor_36, 0) +
             ROUND(r.p_valor_38, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and mt.idmunicipio = '08001001'
         and r.IDMUNICIPIO = '08001000'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA'
         and r.validador_fecha <> '000';
  
    w_concepto := 'PARTICIPACION MUNICIPIO DPTAL ATLANTICO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (ROUND(r.p_valor_39, 0) + ROUND(r.p_valor_32, 0) +
             ROUND(r.p_valor_34, 0) + ROUND(r.p_valor_36, 0) +
             ROUND(r.p_valor_38, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and mt.idmunicipio = '08000000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA'
         and r.validador_fecha <> '000';
  
    w_concepto := 'ACUERDO PAGO MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.p_valor_23) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('ACUERDO PAGO MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA'
         and r.validador_fecha = '000';
  
    w_concepto := 'ACUERDO PAGO MUNICIPIO METROTRANSITO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_23) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('ACUERDO PAGO MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and mt.idmunicipio = '08001001'
         and r.IDMUNICIPIO IN ('08001000')
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA'
         and r.validador_fecha <> '000';
  
    w_concepto := 'ACUERDO PAGO MUNICIPIO DPTAL ATLANTICO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_23) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('ACUERDO PAGO MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and mt.idmunicipio = '08000000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA'
         and r.validador_fecha <> '000';
  
    w_concepto := 'REC GASTO PART CONCESIONARIO (3.25%, 3,23%))';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             c.cta_contable_liquidacion as cuenta,
             r.p_valor_4 as importe,
             '' as indicadorimpuesto,
             '200102' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(C.NIT_C, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REC GASTO PART CONCESIONARIO sevial (3.0%))';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             c.cta_contable_liquidacion as cuenta,
             r.p_valor_9 as importe,
             '' as indicadorimpuesto,
             '200102' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO PART CONCES SEVIAL 3%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'CXP PART SEVIAL 3%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             r.p_valor_9 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXP PART SEVIAL 3%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REC GASTO FONDO COB CONCESIONARIO ( 0,25%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             C.CTA_CONTABLE_FONDO as cuenta,
             r.p_valor_5 as importe,
             '' as indicadorimpuesto,
             '200102' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(C.NIT_C, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'OTRO ACREEDOR CONCESIONARIO ( 3,25% + 0,25%, 3.23% + 0%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(C.NIT_C, 0, 9) as cuenta,
             ROUND(R.p_valor_4, 0) + ROUND(R.p_valor_5, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('OTRO ACREEDOR ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(C.NIT_C, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PARTICIPACION 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (r.p_valor_14 + r.p_valor_20 + r.p_valor_19 - r.p_valor_18) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION SEVIAL 2.7 ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '2905901001' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PARTICIPACION IVA 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (r.p_valor_18) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION IVA SEVIAL 2.7 ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '2905901002' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PARTICIPACION 1.8%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             '2905901003' as cuenta,
             (r.p_valor_13 - r.p_valor_16 - r.p_valor_20 - r.p_valor_19) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION FCM 1.8') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PARTICIPACION IVA 1.8%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             '2905901004' as cuenta,
             (r.p_valor_16) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION IVA FCM 1.8') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'CXC 10% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             (R.NUM_LIQUIDACION || 'A') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '01' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.p_valor_4, 0) + ROUND(r.p_valor_5, 0) +
             ROUND(r.p_valor_7, 0) + round(r.p_valor_10, 0) +
             ROUND(r.p_valor_3, 0) + round(r.p_valor_8, 0) +
             ROUND(r.p_valor_6, 0) + ROUND(r.p_valor_9, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXC 10% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '1401020102' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'CXC 10% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             (R.NUM_LIQUIDACION || 'A') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '11' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.p_valor_4, 0) + ROUND(r.p_valor_5, 0) +
             ROUND(r.p_valor_7, 0) + round(r.p_valor_10, 0) +
             ROUND(r.p_valor_3, 0) + round(r.p_valor_8, 0) +
             ROUND(r.p_valor_6, 0) + ROUND(r.p_valor_9, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXC 10% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '1401020102' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PARTICIPACION CONTRAVENCIONAL concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.p_valor_22 / 2, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PART CONTRAVENCIONAL ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '2905901005' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PARTICIPACION IVA CONTRAVENCIONAL concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.p_valor_27 / 2, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PART IVA CONTRAVENCIONAL  ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '2905901009' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PARTICIPACION CONTRAVENCIONAL FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             f.ctacon_fcm as cuenta,
             (r.p_valor_22 - ROUND(r.p_valor_22 / 2, 2)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION CONTRAVENCIONAL FCM') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PARTICIPACION IVA CONTRAVENCIONAL FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '50' as clavecontable,
             f.ctacon_impuestos as cuenta,
             (r.p_valor_27 - ROUND(r.p_valor_27 / 2, 2)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION IVA CONTRAVENCIONAL FCM') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'CRUCE CXC A SIMIT 19%+IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'FCM1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '1470909003' as cuenta,
             
             -- 9.5 + IVA +9.5 + IVA
             ROUND(ROUND(r.p_valor_22 / 2, 2), 0) +
             ROUND(ROUND(r.p_valor_27 / 2, 2), 0) +
             ROUND((r.p_valor_22 - ROUND(r.p_valor_22 / 2, 2)), 0) +
             ROUND((r.p_valor_27 - ROUND(r.p_valor_27 / 2, 2)), 0) as importe,
             
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CRUCE CXC A SIMIT 19+iva') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'CRUCE CXP A SIMIT';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'FCM1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             
             -- 9.5 + IVA +9.5 + IVA
             ROUND(ROUND(r.p_valor_22 / 2, 2), 0) +
             ROUND(ROUND(r.p_valor_27 / 2, 2), 0) +
             ROUND((r.p_valor_22 - ROUND(r.p_valor_22 / 2, 2)), 0) +
             ROUND((r.p_valor_27 - ROUND(r.p_valor_27 / 2, 2)), 0) as importe,
             
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CRUCE CXP A SIMIT 19+iva') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             'Z002' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'CXC A SIMIT 2.7%+1.8 + IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'FCM1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '1470909002' as cuenta,
             
             -- 2.7 + IVA + 1.8 + IVA
             (ROUND(round(r.p_valor_14, 0) + round(r.p_valor_20, 0) +
                    round(r.p_valor_19, 0) - round(r.p_valor_18, 0),
                    0) + ROUND(r.p_valor_18, 0) +
             ROUND(round(r.p_valor_13, 0) - round(r.p_valor_16, 0) -
                    round(r.p_valor_20, 0) - round(r.p_valor_19, 0),
                    0) + ROUND(r.p_valor_16, 0)) as importe,
             
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CRUCE CXC A SIMIT 2.7%+1.8%+IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'CXP A SIMIT 2.7%+1.8 + IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'FCM1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(f.nit_polca, 0, 9) as cuenta,
             
             -- 2.7 + IVA + 1.8 + IVA
             (ROUND(round(r.p_valor_14, 0) + round(r.p_valor_20, 0) +
                    round(r.p_valor_19, 0) - round(r.p_valor_18, 0),
                    0) + ROUND(r.p_valor_18, 0) +
             ROUND(round(r.p_valor_13, 0) - round(r.p_valor_16, 0) -
                    round(r.p_valor_20, 0) - round(r.p_valor_19, 0),
                    0) + ROUND(r.p_valor_16, 0)) as importe,
             
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CRUCE CXP A SIMIT 2.7%+1.8%+IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             'Z002' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'GASTOS SEVIAL 2.7%+IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZE' as clasedoc,
             'FCM1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'S' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '5111110112' as cuenta,
             (r.p_valor_14 + r.p_valor_20 + r.p_valor_19) as importe,
             'V5' as indicadorimpuesto,
             '100761' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('GASTOS SEVIAL 2,7%+IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'CXP SEVIAL 2.7%+IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZE' as clasedoc,
             'FCM1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'S' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (r.p_valor_14 + r.p_valor_20 + r.p_valor_19) as importe,
             'V5' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXP SEVIAL 2,7%+IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'RECAUDO NO DISTRIBUIDO MUNICIPIO SIMIT';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '31' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             r.valor_total as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('RECAUDO NO DISTRIBUIDO MUNICIPIO SIMIT') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '2905901008' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             'Z000' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_corte = w_fec_cor_ini
         and r.indTipo = 'POLCA'
         and r.ind_proceso = 0;
  
    update recaudo_externo_contabilidad r
       set r.importe = ROUND(r.importe, 0)
     where r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = 'REC';
  
    delete recaudo_externo_contabilidad r
     where r.importe = 0
       and r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = 'REC';
  
    w_concepto := 'AJUSTE PESOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             (case
               when a.importe > 0 then
                '50'
               else
                '40'
             end) as clavecontable,
             (case
               when a.importe > 0 then
                '4810900202'
               else
                '5810900202'
             end) as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             a.asignacion AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from fcm f,
             (select c.referencia,
                     max(c.textocabezera) as textocabezera,
                     max(c.asignacion) as asignacion,
                     sum(case c.clavecontable
                           when '40' then
                            c.importe
                           when '01' then
                            c.importe
                           when '21' then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = 'PFC1'
                 and tipocontable = 'REC'
               group by c.referencia) a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    w_concepto := 'AJUSTE PESOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZT' as clasedoc,
             'FCM1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             (case
               when a.importe > 0 then
                '50'
               else
                '40'
             end) as clavecontable,
             (case
               when a.importe > 0 then
                '4810900202'
               else
                '5810900202'
             end) as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             a.asignacion AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'REC' as tipocontable
        from fcm f,
             (select c.referencia,
                     max(c.textocabezera) as textocabezera,
                     max(c.asignacion) as asignacion,
                     sum(case c.clavecontable
                           when '40' then
                            c.importe
                           when '01' then
                            c.importe
                           when '21' then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = 'FCM1'
                 and tipocontable = 'REC'
               group by c.referencia) a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    commit;
  
    sp_log(p_usuario,
           'Contabiliza Recaudo Externo',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [contabiliza_recaudo_externo] ' || SQLERRM,
            p_error);
    
  END contabiliza_recaudo_externo;

  PROCEDURE contabiliza_pago_externo(p_feccor_ini_ano number,
                                     p_feccor_ini_mes number,
                                     p_feccor_ini_dia number,
                                     p_usuario        varchar2,
                                     p_error          OUT VARCHAR2) AS
    w_fec_cor_ini date;
    w_registros   number;
  
    w_fec_cor_ini_s char(8);
    w_concepto      varchar(250);
    aaaa0115        char(8);
  
    tipoCon char(3);
  
    zt char(2);
    ze char(2);
    zd char(2);
  
    pfc1 char(4);
    fcm1 char(4);
    cop  char(3);
    c50  char(2);
    c40  char(2);
    c31  char(2);
    c01  char(2);
    c11  char(2);
    c21  char(2);
  
    v5 char(2);
  
    c20111 char(5);
    c20112 char(5);
    c20113 char(5);
    c20114 char(5);
  
    c20211 char(5);
    c20212 char(5);
    c20213 char(5);
    c20214 char(5);
  
    c20121 char(5);
    c20122 char(5);
    c20123 char(5);
    c20124 char(5);
  
    c20221 char(5);
    c20222 char(5);
    c20223 char(5);
    c20224 char(5);
  
    c201213 char(6);
    c202213 char(6);
    c200101 char(6);
  
    c200102 char(6);
    c100761 char(6);
  
    c201111 char(6);
    c201121 char(6);
    c201215 char(6);
    c201221 char(6);
  
    cZ000 char(4);
    cZ002 char(4);
    cZ005 char(4);
  
    c1401020102 char(10);
    c8000826650 char(10);
    c5810900202 char(10);
    c4810900202 char(10);
    c2905901001 char(10);
    c2905901002 char(10);
    c2905901003 char(10);
    c2905901004 char(10);
    c1470909002 char(10);
    c5111110112 char(10);
    c5815930102 char(10);
    c5815930101 char(10);
    c4815590102 char(10);
  
    c1470900601 char(10);
    c2905901005 char(10);
    c2905901009 char(10);
    c1470909003 char(10);
    cYYYYYYYYYY char(10);
    c2905901012 char(10);
    c2905901010 char(10);
    c2905901006 char(10);
  
  BEGIN
  
    zt := FN_DAR_PARCONTA('ZT');
    ze := FN_DAR_PARCONTA('ZE');
    zd := FN_DAR_PARCONTA('ZD');
  
    pfc1 := FN_DAR_PARCONTA('PFC1');
    fcm1 := FN_DAR_PARCONTA('FCM1');
    cop  := FN_DAR_PARCONTA('COP');
  
    c50 := FN_DAR_PARCONTA('50');
    c40 := FN_DAR_PARCONTA('40');
    c31 := FN_DAR_PARCONTA('31');
    c01 := FN_DAR_PARCONTA('01');
    c11 := FN_DAR_PARCONTA('11');
    c21 := FN_DAR_PARCONTA('21');
  
    v5 := FN_DAR_PARCONTA('V5');
  
    c20111 := FN_DAR_PARCONTA('20111');
    c20112 := FN_DAR_PARCONTA('20112');
    c20113 := FN_DAR_PARCONTA('20113');
    c20114 := FN_DAR_PARCONTA('20114');
  
    c20211 := FN_DAR_PARCONTA('20211');
    c20212 := FN_DAR_PARCONTA('20212');
    c20213 := FN_DAR_PARCONTA('20213');
    c20214 := FN_DAR_PARCONTA('20214');
  
    c20121 := FN_DAR_PARCONTA('20121');
    c20122 := FN_DAR_PARCONTA('20122');
    c20123 := FN_DAR_PARCONTA('20123');
    c20124 := FN_DAR_PARCONTA('20124');
  
    c20221  := FN_DAR_PARCONTA('20221');
    c20222  := FN_DAR_PARCONTA('20222');
    c20223  := FN_DAR_PARCONTA('20223');
    c20224  := FN_DAR_PARCONTA('20224');
    c200101 := FN_DAR_PARCONTA('200101');
    c200102 := FN_DAR_PARCONTA('200102');
    c202213 := FN_DAR_PARCONTA('202213');
    c201213 := FN_DAR_PARCONTA('201213');
    c201111 := FN_DAR_PARCONTA('201111');
    c201121 := FN_DAR_PARCONTA('201121');
    c201215 := FN_DAR_PARCONTA('201215');
    c201221 := FN_DAR_PARCONTA('201221');
  
    c100761 := FN_DAR_PARCONTA('100761');
  
    cZ000 := FN_DAR_PARCONTA('Z000');
    cZ002 := FN_DAR_PARCONTA('Z002');
    cZ005 := FN_DAR_PARCONTA('Z005');
  
    c1401020102 := FN_DAR_PARCONTA('1401020102');
    c8000826650 := FN_DAR_PARCONTA('8000826650');
  
    c5810900202 := FN_DAR_PARCONTA('5810900202');
    c4810900202 := FN_DAR_PARCONTA('4810900202');
  
    c2905901001 := FN_DAR_PARCONTA('2905901001');
    c2905901002 := FN_DAR_PARCONTA('2905901002');
    c2905901003 := FN_DAR_PARCONTA('2905901003');
    c2905901004 := FN_DAR_PARCONTA('2905901004');
    c1470909002 := FN_DAR_PARCONTA('1470909002');
    c5111110112 := FN_DAR_PARCONTA('5111110112');
    c5815930102 := FN_DAR_PARCONTA('5815930102');
    c5815930101 := FN_DAR_PARCONTA('5815930101');
    c4815590102 := FN_DAR_PARCONTA('4815590102');
  
    c1470900601 := FN_DAR_PARCONTA('1470900601');
    c2905901005 := FN_DAR_PARCONTA('2905901005');
    c2905901009 := FN_DAR_PARCONTA('2905901009');
    c1470909003 := FN_DAR_PARCONTA('1470909003');
    cYYYYYYYYYY := FN_DAR_PARCONTA('YYYYYYYYYY');
    c2905901012 := FN_DAR_PARCONTA('2905901012');
    c2905901010 := FN_DAR_PARCONTA('2905901010');
    c2905901006 := FN_DAR_PARCONTA('2905901006');
  
    tipoCon := 'PAG';
  
    -- VALIDACIONES
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
      IF not P_ERROR is null THEN
        return;
      END IF;
    END IF;
  
    aaaa0115 := '1501' || trim(to_char(p_feccor_ini_ano + 1));
  
    -- Obtiene fecha de cierre en formato ddMMyyyy
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select to_char(w_fec_cor_ini, 'ddMMyyyy')
      into w_fec_cor_ini_s
      from DUAL;
  
    -- elimina contabilizacion
    delete recaudo_externo_contabilidad
     where fechaDoc = w_fec_cor_ini_s
       and tipoContable = 'PAG';
  
    -- participacion municipio y terceros sin validador
  
    w_concepto := 'PAGO PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.s_valor_26) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.nit_municipio, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 1';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.s_valor_19) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO1, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 2';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.s_valor_21) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO2, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 3';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.s_valor_23) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO3, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 4';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.s_valor_25) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO4, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'SIMIT';
  
    -- participacion municipio y terceros metrotransito
  
    w_concepto := 'PAGO PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_26) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.nit_municipio, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.IDMUNICIPIO = '08001000'
         and mt.idmunicipio = '08001001'
         and r.VALIDADOR_FECHA <> '000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 1';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_19) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO1, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.IDMUNICIPIO = '08001000'
         and mt.idmunicipio = '08001001'
         and r.VALIDADOR_FECHA <> '000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 2';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_21) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO2, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and mt.idmunicipio = '08001001'
         and r.VALIDADOR_FECHA <> '000'
         and r.IDMUNICIPIO = '08001000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 3';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_23) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO3, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
      
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08001001'
         and r.IDMUNICIPIO = '08001000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 4';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_25) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO4, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
      
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and r.IDMUNICIPIO = '08001000'
         and mt.idmunicipio = '08001001'
         and r.indTipo = 'SIMIT';
  
    ---
    -- participacion municipio y terceros dptal atlantico
  
    w_concepto := 'PAGO PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_26) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.nit_municipio, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and mt.idmunicipio = '08000000'
         and r.VALIDADOR_FECHA <> '000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 1';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_19) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO1, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and mt.idmunicipio = '08000000'
         and r.VALIDADOR_FECHA <> '000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 2';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_21) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO2, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and mt.idmunicipio = '08000000'
         and r.VALIDADOR_FECHA <> '000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 3';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_23) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO3, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
      
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08000000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 4';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.s_valor_25) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO4, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
      
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and mt.idmunicipio = '08000000'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO CONTRAV CONCES nomConsecionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.s_valor_9 / 2, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO CONTRAV CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '2905901005' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_CONCESIONARIOZON, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO IVA CONTRAV CONCES nomConsecionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.s_valor_14 / 2, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO IVA CONTRAV CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '2905901009' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_CONCESIONARIOZON, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO CONTRAV FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '2905901006' as cuenta,
             (r.s_valor_9 - ROUND(r.s_valor_9 / 2, 2)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO CONTRAV FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(f.nit_fcm, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO IVA CONTRAV FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '2905901010' as cuenta,
             (r.s_valor_14 - ROUND(r.s_valor_14 / 2, 2)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO IVA CONTRAV FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(f.nit_fcm, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and r.indTipo = 'SIMIT';
  
    -- participacion municipio y terceros sin validador
  
    w_concepto := 'PAGO PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.p_valor_39) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.nit_municipio, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 1';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.p_valor_32) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO1, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 2';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.p_valor_34) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO2, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 3';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.p_valor_36) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO3, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 4';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.p_valor_38) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO4, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA = '000'
         and r.indTipo = 'POLCA';
  
    -- pago municipio y terceros metrotransito
    w_concepto := 'PAGO PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_39) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.nit_municipio, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08001001'
         and r.IDMUNICIPIO IN ('08001000')
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 1';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_32) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO1, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08001001'
         and r.IDMUNICIPIO IN ('08001000')
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 2';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_34) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO2, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08001001'
         and r.IDMUNICIPIO IN ('08001000')
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 3';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_36) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO3, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08001001'
         and r.IDMUNICIPIO IN ('08001000')
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 4';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_38) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO4, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08001001'
         and r.IDMUNICIPIO IN ('08001000')
         and r.indTipo = 'POLCA';
  
    --
    -- pago municipio y terceros dptal atlantico
    w_concepto := 'PAGO PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_39) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.nit_municipio, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08000000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 1';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_32) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO1, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08000000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 2';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_34) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO2, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08000000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 3';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_36) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO3, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08000000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION TERCERO 4';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(mt.nit_m, 0, 9) as cuenta,
             (r.p_valor_38) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION TERCERO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(mt.nit_m, 0, 9) as nittercero,
             '2905900701' as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_TERCERO4, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             municipio                      mt
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion = w_fec_cor_ini
         and r.VALIDADOR_FECHA <> '000'
         and mt.idmunicipio = '08000000'
         and r.IDMUNICIPIO IN ('08296000', '08573000')
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO POLCA 39_78';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(f.nit_polca, 0, 9) as cuenta,
             (r.p_valor_12 - r.p_valor_18 - r.p_valor_16) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO POLCA') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION SEVIAL 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (r.p_valor_14 + r.p_valor_20 + r.p_valor_19 - r.p_valor_18) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION SEVIAL 2.7%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '2905901001' as cuentadivergente,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.Fec_Dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION SEVIAL IVA 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (r.p_valor_18) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION SEVIAL IVA 2.7%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '2905901002' as cuentadivergente,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.Fec_Dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION FCM 1.8%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '2905901003' as cuenta,
             (r.p_valor_13 - r.p_valor_16 - r.p_valor_20 - r.p_valor_19) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION FCM 1.8%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.Fec_Dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION FCM IVA 1.8%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '2905901004' as cuenta,
             (r.p_valor_16) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION FCM IVA 1.8%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.Fec_Dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO CONTRAV CONCES nomConsecionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.p_valor_22 / 2, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO CONTRAV CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '2905901005' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_CONCESIONARIOZON, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO IVA CONTRAV CONCES nomConsecionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.p_valor_27 / 2, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO IVA CONTRAV CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '2905901009' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_CONCESIONARIOZON, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_pro = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO CONTRAV FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '2905901006' as cuenta,
             (r.p_valor_22 - ROUND(r.p_valor_22 / 2, 2)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO CONTRAV FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(f.nit_fcm, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO IVA CONTRAV FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '40' as clavecontable,
             '2905901010' as cuenta,
             (r.p_valor_27 - ROUND(r.p_valor_27 / 2, 2)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO IVA CONTRAV FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(f.nit_fcm, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REG CTA PTE PAS DISP BCOAVVILLAS Y BANCAFE';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             '50' as clavecontable,
             '2905901012' as cuenta,
             a.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             a.asignacion AS asignacion,
             ('REG CTA PTE PAS DISP BCO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select sum(round(importe, 0)) as valor,
                     max(asignacion) as asignacion,
                     referencia,
                     textocabezera
                from recaudo_externo_contabilidad
               where fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and tipocontable = 'PAG'
                 and (textocabezera like '% 086%' or
                     textocabezera like '% 059%' or
                     textocabezera like '% 186%')
               group by referencia, textocabezera) a,
             fcm f;
  
    w_concepto := 'REG CTA PTE PAS DISP BCO OTROS BANCOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             '50' as clavecontable,
             '2905901013' as cuenta,
             a.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             a.asignacion AS asignacion,
             ('REG CTA PTE PAS DISP BCO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select sum(round(importe, 0)) as valor,
                     max(asignacion) as asignacion,
                     referencia,
                     textocabezera
                from recaudo_externo_contabilidad
               where fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and tipocontable = 'PAG'
                 and not (textocabezera like '% 086%' or
                      textocabezera like '% 059%' or
                      textocabezera like '% 186%')
               group by referencia, textocabezera) a,
             fcm f;
  
    w_concepto := 'PAGO PART CONCES nomConcesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             (r.s_valor_4) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_CONCESIONARIO, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PART FONDO CONCES nomConcesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             (r.s_valor_5) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PART FONDO CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_FONDO, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PARTICIPACION SEVIAL 3%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('PAG ' || to_char(r.Fec_Dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (r.p_valor_9) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PARTICIPACION SEVIAL 3%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.Fec_Dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr,
             fcm                            f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.Fec_Dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PART CONCES nomConcesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             (r.p_valor_4) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_CONCESIONARIO, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PART FONDO CONCES nomConcesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion_con, 'MM') as periodo,
             'COP' as moneda,
             R.NUM_LIQUIDACION || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion_con, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             '21' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             (r.p_valor_5) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PART FONDO CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion_con, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(r.NIT_FONDO, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from vw_recaudo_externo_liquidacion r,
             banco                          b,
             municipio                      m,
             concesionario                  c,
             cta_recaudo_concesionario      cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.id_concesionario_liq = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.id_concesionario_liq = cr.idconcesionario
         and r.fec_dispersion_con = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REG CTA PTE PAS DISP BCO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             '50' as clavecontable,
             '2905901012' as cuenta,
             a.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             a.asignacion AS asignacion,
             ('REG CTA PTE PAS DISP BCO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select sum(round(importe, 0)) as valor,
                     max(asignacion) as asignacion,
                     referencia,
                     textocabezera
                from recaudo_externo_contabilidad
               where fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and tipocontable = 'PAG'
                 and instr(referencia, 'G') > 0
                 and (textocabezera like '% 086%' or
                     textocabezera like '% 059%' or
                     textocabezera like '% 186%')
               group by referencia, textocabezera) a,
             fcm f;
  
    w_concepto := 'REG CTA PTE PAS DISP BCO OTROS BANCOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             '50' as clavecontable,
             '2905901013' as cuenta,
             a.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             a.asignacion AS asignacion,
             ('REG CTA PTE PAS DISP BCO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select sum(round(importe, 0)) as valor,
                     max(asignacion) as asignacion,
                     referencia,
                     textocabezera
                from recaudo_externo_contabilidad
               where fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and tipocontable = 'PAG'
                 and instr(referencia, 'G') > 0
                 and not (textocabezera like '% 086%' or
                      textocabezera like '% 059%' or
                      textocabezera like '% 186%')
               group by referencia, textocabezera) a,
             fcm f;
  
    -- Contabiliza pago realizado por el banco
  
    w_concepto := 'divipo MUNICIPIO nombre';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             d.IDMUNICIPIO AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden = 1) d,
             municipio m,
             cta_recaudo_concesionario ct
       where d.idmunicipio = m.idmunicipio
         and d.id_concesionario_liq = ct.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'terceros';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(d.des_nit, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(d.des_nit, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (2, 3, 4)) d,
             cta_recaudo_concesionario ct
       where d.id_concesionario_liq = ct.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'pago concesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (7)) d,
             cta_recaudo_concesionario ct,
             concesionario c
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'pago fond concesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (8)) d,
             cta_recaudo_concesionario ct,
             concesionario c
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'pago concesioanrio ZONAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (13)) d,
             cta_recaudo_concesionario ct,
             concesionario c
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_pro = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'pago FCM contravencional';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (14)) d,
             cta_recaudo_concesionario ct,
             fcm f
       where d.id_concesionario_liq = ct.idconcesionario
         and f.nit_fcm = '8000826650'
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'Liquidacion POLCA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_polca, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (12)) d,
             cta_recaudo_concesionario ct,
             concesionario c,
             fcm f
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'POLCA SEVIAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (10)) d,
             cta_recaudo_concesionario ct,
             concesionario c,
             fcm f
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'Impuestos FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (9)
                 and concepto = 'Impuestos FCM') d,
             cta_recaudo_concesionario ct,
             concesionario c,
             fcm f
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'Polca FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (11)) d,
             cta_recaudo_concesionario ct,
             concesionario c,
             fcm f
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'pago equlibrio economico';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (9)
                 and concepto <> 'Impuestos FCM') d,
             cta_recaudo_concesionario ct,
             concesionario c
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'pago equlibrio economico';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') ||
             s.id_concesionario_liq as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '01' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             s.valor * -1 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '1111' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ('CXC EQUILIBRIO ECONOMICO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '1470901501' as cuentadivergente,
             '08102015' as fechabase,
             'Z000' as condicionpago,
             substr(s.nitPago, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_liq,
             s.cta_recaudo
        from (select sum(s_valor_7 + p_valor_7 + p_valor_10) as valor,
                     r.id_concesionario_liq as id_concesionario_liq,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion,
                     max(r.nit_concesionario) as nitPago
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
                 and r.id_concesionario_liq = 5
               group by r.id_concesionario_liq, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650';


    update recaudo_externo_contabilidad r
       set r.importe         = r.importe +
                               (select nvl(sum(n.vequilibrioeconomico), 0) as valor
                                  from novdevolucion n
                                 where n.idconcesionario =
                                       r.idconcesionariozon
                                   and n.cuentarec = r.cuentarec
                                   and n.fechacobro2 = w_fec_cor_ini
                                   and n.idconcesionario = '05'
                                   and n.estadonov = 'ACTIVADA'
                                   and n.indtipo = 'SIMIT')
     where r.centrobeneficio = '1111';
     
     
    update recaudo_externo_contabilidad r
       set r.centrobeneficio = '',
           r.importe         = r.importe +
                               (select nvl(sum(n.vequilibrioeconomico*3.77/5.57), 0) as valor
                                  from novdevolucion n
                                 where n.idconcesionario =
                                       r.idconcesionariozon
                                   and n.cuentarec = r.cuentarec
                                   and n.fechacobro2 = w_fec_cor_ini
                                   and n.idconcesionario = '05'
                                   and n.indtipo = 'POLCA'
                                   and n.estadonov = 'ACTIVADA')
     where r.centrobeneficio = '1111';
 
  
    w_concepto := 'REG CTA PTE PAS DISP BCO avvillas-bancafe';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             '40' as clavecontable,
             '2905901012' as cuenta,
             a.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('REG CTA PTE PAS DISP BCO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select sum(round(importe, 0)) as valor,
                     referencia,
                     textocabezera
                from recaudo_externo_contabilidad
               where fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and tipocontable = 'PAG'
                 and textocabezera like 'BAN PAG%'
                 and not cuenta in ('1110063202', '1110063402', '1110063802',
                       '1110063902')
               group by referencia, textocabezera) a,
             fcm f;
  
    w_concepto := 'REG CTA PTE PAS DISP BCO otros bancos';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             '40' as clavecontable,
             '2905901013' as cuenta,
             a.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('REG CTA PTE PAS DISP BCO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select sum(round(importe, 0)) as valor,
                     referencia,
                     textocabezera
                from recaudo_externo_contabilidad
               where fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and tipocontable = 'PAG'
                 and textocabezera like 'BAN PAG%'
                 and cuenta in
                     ('1110063202', '1110063402', '1110063802', '1110063902')
               group by referencia, textocabezera) a,
             fcm f;
  
    update recaudo_externo_contabilidad
       set importe = importe * -1
     where importe < 0;
  
    w_concepto := 'pago fond fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (6)) d,
             cta_recaudo_concesionario ct,
             concesionario c
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'pago fond fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '01' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             aaaa0115 as fechabase,
             'Z000' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (6)) d,
             cta_recaudo_concesionario ct,
             concesionario c
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'TRANSFERENCIA LIQUIDACION FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (5)) d,
             cta_recaudo_concesionario ct,
             concesionario c,
             fcm f
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'TRANSFERENCIA LIQUIDACION FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '40' as clavecontable,
             ct.cta_con_s as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (5)) d,
             cta_dispersion_fcm ct,
             concesionario c,
             fcm f
       where ct.nit_fcm = '8000826650'
         and ct.idbancorec = d.ori_idbanco
         and d.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'TRANSFERENCIA MUN ACUERDO PAGO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             ct.cta_contable_ing as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             d.IDMUNICIPIO AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden = 15) d,
             municipio m,
             cta_recaudo_concesionario ct,
             fcm f
       where d.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and d.id_concesionario_liq = ct.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'TRANSFERENCIA MUN ACUERDO PAGO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') ||
             d.id_concesionario_liq as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '40' as clavecontable,
             ct.cta_con_ac as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             d.IDMUNICIPIO AS asignacion,
             substr(d.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden = 15) d,
             municipio m,
             cta_dispersion_fcm ct,
             fcm f
       where d.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and ct.nit_fcm = '8000826650'
         and ct.idbancorec = d.ori_idbanco;
  
    w_concepto := 'RETE FTE CONTRAV nomConcesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') ||
             s.id_concesionario_pro as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '50' as clavecontable,
             '2905901011' as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ('RETE FTE CONTRAV  ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '1111' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_pro,
             s.cta_recaudo
        from (select sum(r.s_valor_16 + r.p_valor_29) as valor,
                     r.id_concesionario_pro as id_concesionario_pro,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
               group by r.id_concesionario_pro, r.cta_recaudo) s,
             concesionario c
       where s.id_concesionario_pro = c.idconcesionario;
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = '',
           r.importe             = r.importe -
                                   (select nvl(sum(n.vretecontr), 0) as valor
                                      from novdevolucion n
                                     where n.idconcesionariozon =
                                           r.idconcesionariozon
                                       and n.cuentarec = r.cuentarec
                                       and n.fechacobro2 = w_fec_cor_ini
                                       and n.estadonov = 'ACTIVADA')
     where r.receptoralternativo = '1111';
  
    w_concepto := 'RETE FTE CONTRAV nomConcesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') ||
             s.id_concesionario_pro as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '40' as clavecontable,
             '2905901011' as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ('PAG RETE FTE CONTRAV  ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '1111' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_pro,
             s.cta_recaudo
        from (select sum(r.s_valor_16 + r.p_valor_29) as valor,
                     r.id_concesionario_pro as id_concesionario_pro,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
               group by r.id_concesionario_pro, r.cta_recaudo) s,
             concesionario c
       where s.id_concesionario_pro = c.idconcesionario;
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = '',
           r.importe             = r.importe -
                                   (select nvl(sum(n.vretecontr), 0) as valor
                                      from novdevolucion n
                                     where n.idconcesionariozon =
                                           r.idconcesionariozon
                                       and n.cuentarec = r.cuentarec
                                       and n.fechacobro2 = w_fec_cor_ini
                                       and n.estadonov = 'ACTIVADA')
     where r.receptoralternativo = '1111';
  
    w_concepto := 'RETENCIONES DE SEVIAL DEL 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') ||
             s.id_concesionario_liq as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '50' as clavecontable,
             '2905901007' as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             ('RETENCIONES DE SEVIAL DEL 2,7%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '1111' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_liq,
             s.cta_recaudo
        from (select sum(r.p_valor_20 + r.p_valor_19) as valor,
                     r.id_concesionario_liq as id_concesionario_liq,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
               group by r.id_concesionario_liq, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = '',
           r.importe             = r.importe -
                                   (select nvl(sum(n.vtimbre + n.vretef), 0) as valor
                                      from novdevolucion n
                                     where n.idconcesionario =
                                           r.idconcesionariozon
                                       and n.cuentarec = r.cuentarec
                                       and n.fechacobro2 = w_fec_cor_ini
                                       and n.estadonov = 'ACTIVADA')
     where r.receptoralternativo = '1111';
  
    w_concepto := 'RETENCIONES DE SEVIAL DEL 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') ||
             s.id_concesionario_liq as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '40' as clavecontable,
             '2905901007' as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             ('PAG RETENCIONES DE SEVIAL DEL 2,7%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '1111' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_liq,
             s.cta_recaudo
        from (select sum(r.p_valor_20 + r.p_valor_19) as valor,
                     r.id_concesionario_liq as id_concesionario_liq,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
               group by r.id_concesionario_liq, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = '',
           r.importe             = r.importe -
                                   (select nvl(sum(n.vtimbre + n.vretef), 0) as valor
                                      from novdevolucion n
                                     where n.idconcesionario =
                                           r.idconcesionariozon
                                       and n.cuentarec = r.cuentarec
                                       and n.fechacobro2 = w_fec_cor_ini
                                       and n.estadonov = 'ACTIVADA')
     where r.receptoralternativo = '1111';
    -- hugo
    w_concepto := 'CRUCE CXC A SIMIT 2,7% + 1,8% + Impuestos';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'FCM1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') || s.id_concesionario_liq as referencia,
             --to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '50' as clavecontable,
             '1470909002' as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('CRUCE CXC A SIMIT 2,7% + 1,8% + IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '2222' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_liq,
             s.cta_recaudo
        from (select sum(r.p_valor_14 + r.p_valor_13) as valor,
                     r.id_concesionario_liq as id_concesionario_liq,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
               group by r.id_concesionario_liq, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
    update recaudo_externo_contabilidad r
       set r.importe             = r.importe -
                                   (select nvl(sum(n.vsevial27 + n.vfcmpolca + n.vivasevial27 + n.vivafcmpolca),
                                               0) as valor
                                      from novdevolucion n
                                     where n.idconcesionario =
                                           r.idconcesionariozon
                                       and n.cuentarec = r.cuentarec
                                       and n.fechacobro2 = w_fec_cor_ini
                                       and n.estadonov = 'ACTIVADA'
                                       and n.indtipo = 'POLCA'
                                       and n.idconcesionario <> '05')
     where r.receptoralternativo = '2222';
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = '',
           r.importe             = r.importe -
                                   (select nvl(sum(n.vsevial27 + ( n.vequilibrioeconomico*1.8/5.57) + n.vivasevial27 + n.vivafcmpolca),
                                               0) as valor
                                      from novdevolucion n
                                     where n.idconcesionario =
                                           r.idconcesionariozon
                                       and n.cuentarec = r.cuentarec
                                       and n.fechacobro2 = w_fec_cor_ini
                                       and n.estadonov = 'ACTIVADA'
                                       and n.indtipo = 'POLCA'
                                       and n.idconcesionario = '05')
     where r.receptoralternativo = '2222';
  
    w_concepto := 'VALOR CXC SIMIT CAPITAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'FCM1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') || s.id_concesionario_liq as referencia,
             --to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '01' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ('VALOR CXC SIMIT CAPITAL') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '1111' as cuentadivergente,
             '08102015' as fechabase,
             'Z000' as condicionpago,
             substr(s.nitPago, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_liq,
             s.cta_recaudo
        from (select sum(r.p_valor_13 - r.p_valor_16 - r.p_valor_20 -
                         r.p_valor_19) as valor,
                     r.id_concesionario_liq as id_concesionario_liq,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion,
                     max(r.nit_concesionario) as nitPago
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
                 and r.id_concesionario_liq = '05'
               group by r.id_concesionario_liq, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
  -- se resta el 1.8 que corrsponde a equilibrio de nov aplicadas polca
    update recaudo_externo_contabilidad r
       set r.cuentadivergente = '',
           r.importe          = r.importe - 
                                (select nvl(sum(n.vequilibrioeconomico*1.8/5.57),
                                            0) as valor
                                   from novdevolucion n
                                  where n.idconcesionario =
                                        r.idconcesionariozon
                                    and n.cuentarec = r.cuentarec
                                    and n.fechacobro2 = w_fec_cor_ini
                                    and n.estadonov = 'ACTIVADA'
                                    and n.idconcesionario = '05'
                                    and n.indtipo = 'POLCA')
     where r.cuentadivergente = '1111';
  
    w_concepto := 'VALOR SEVIAL 2,7 CON IMPUESTOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'FCM1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') || s.id_concesionario_liq as referencia,
             --to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '21' as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             ('VALOR SEVIAL 2,7 CON IMPUESTOS') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '1111' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_liq,
             s.cta_recaudo
        from (select sum(r.p_valor_14) as valor,
                     r.id_concesionario_liq as id_concesionario_liq,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion,
                     max(r.nit_concesionario) as nitPago
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
               group by r.id_concesionario_liq, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = '',
           r.importe             = r.importe -
                                   (select nvl(sum(n.vsevialneto - n.vsevial),
                                               0) as valor
                                      from novdevolucion n
                                     where n.idconcesionario =
                                           r.idconcesionariozon
                                       and n.cuentarec = r.cuentarec
                                       and n.fechacobro2 = w_fec_cor_ini
                                       and n.estadonov = 'ACTIVADA')
     where r.receptoralternativo = '1111';
  
    w_concepto := 'TRANF FCM REC POLCA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'FCM1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') || s.id_concesionario_liq as referencia,
             --to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '40' as clavecontable,
             ct.cta_con_pa as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('TRANF FCM REC POLCA 1.8 CON IMPUESTOS') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '1111' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_liq,
             s.cta_recaudo
        from (select sum(r.p_valor_13) as valor,
                     r.id_concesionario_liq as id_concesionario_liq,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion,
                     max(r.nit_concesionario) as nitPago,
                     max(r.idbanco) as idbanco
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
                 and r.id_concesionario_liq <> '05'
               group by r.id_concesionario_liq, r.cta_recaudo) s,
             concesionario c,
             fcm f,
             cta_dispersion_fcm ct
       where s.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and ct.nit_fcm = '8000826650'
         and ct.idbancorec = s.idbanco;
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = '',
           r.importe             = r.importe -
                                   (select nvl(sum(n.vfcmpolcaneto), 0) as valor
                                      from novdevolucion n
                                     where n.idconcesionario =
                                           r.idconcesionariozon
                                       and n.cuentarec = r.cuentarec
                                       and n.fechacobro2 = w_fec_cor_ini
                                       and n.idconcesionario <> '05'
                                       and n.estadonov = 'ACTIVADA')
     where r.receptoralternativo = '1111';
  
    w_concepto := 'TRANF FCM REC POLCA  Impuestos FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable,
       idconcesionariozon,
       cuentarec)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'FCM1' as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy-') || s.id_concesionario_liq as referencia,
             --to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             '40' as clavecontable,
             ct.cta_con_pa as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('TRANF FCM REC POLCA  Impuestos FCM') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '1111' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable,
             s.id_concesionario_liq,
             s.cta_recaudo
        from (select sum(r.p_valor_13 - r.p_valor_15) as valor,
                     r.id_concesionario_liq as id_concesionario_liq,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion_con) as fec_dispersion,
                     max(r.nit_concesionario) as nitPago,
                     max(r.idbanco) as idbanco
                from vw_recaudo_externo_liquidacion r
               where r.fec_dispersion_con = w_fec_cor_ini
                 and r.id_concesionario_liq = '05'
               group by r.id_concesionario_liq, r.cta_recaudo) s,
             concesionario c,
             fcm f,
             cta_dispersion_fcm ct
       where s.id_concesionario_liq = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and ct.nit_fcm = '8000826650'
         and ct.idbancorec = s.idbanco;
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = '',
           r.importe             = r.importe -
                                   (select nvl(sum(n.vivafcmpolca + n.vtimbre +
                                                   n.vretef),
                                               0) as valor
                                      from novdevolucion n
                                     where n.idconcesionario =
                                           r.idconcesionariozon
                                       and n.cuentarec = r.cuentarec
                                       and n.fechacobro2 = w_fec_cor_ini
                                       and n.idconcesionario = '05'
                                       and n.estadonov = 'ACTIVADA')
     where r.receptoralternativo = '1111';
  
 
    w_concepto := 'ANT OPER PART CONTRAV';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'FCM1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') || d.id_concesionario_liq as referencia,
             --to_char(d.fec_dispersion, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '21' as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr('PAG OPER PART CONTRAV' || c.nombre, 0, 9) AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (13)) d,
             cta_recaudo_concesionario ct,
             concesionario c
       where d.id_concesionario_liq = ct.idconcesionario
         and d.id_concesionario_pro = c.idconcesionario
         and d.ori_idbanco = ct.idbanco
         and d.indtipo = ct.indtipo
         and d.ori_cuenta = ct.cuenta;
  
    w_concepto := 'TRANF CONTRAV PART FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'FCM1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') || d.id_concesionario_liq as referencia,
             --to_char(d.fec_dispersion, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '40' as clavecontable,
             ct.cta_con_pa as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             'TRANF CONTRAV PART FCM' AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (14)) d,
             cta_dispersion_fcm ct,
             fcm f
       where f.nit_fcm = '8000826650'
         and ct.nit_fcm = '8000826650'
         and ct.idbancorec = d.ori_idbanco;
  
    w_concepto := 'CRUCE CXC SIMIT CONTRAVENCIONA 22,04%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(d.fec_dispersion, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'FCM1' as sociedad,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(d.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(d.fec_dispersion, 'ddMMyyyy-') || d.id_concesionario_liq as referencia,
             --to_char(d.fec_dispersion, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(d.fec_dispersion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             '50' as clavecontable,
             '1470909003' as cuenta,
             valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(d.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             'CRUCE CXC SIMIT CONTRAVENCIONA 22,04%' AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(d.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from (select fec_corte_ini,
                     fec_corte_fin,
                     fec_dispersion,
                     id_concesionario_liq,
                     orden,
                     concepto,
                     ori_idbanco,
                     ori_tipocuenta,
                     ori_cuenta,
                     ori_nit,
                     des_idbanco,
                     des_tipocuenta,
                     des_cuenta,
                     des_nit,
                     indtipo,
                     usuario_proceso,
                     fecha_proceso,
                     valor,
                     deb_cta_con,
                     deb_cen_cos,
                     deb_nit_ter,
                     cre_cta_con,
                     cre_cen_cos,
                     cre_nit_ter,
                     concepto_con,
                     id_concesionario_pro,
                     idmunicipio,
                     referenciatrf,
                     enviadobanco
                from vw_recaudo_externo_disp_tot
               where fec_dispersion = w_fec_cor_ini
                 and orden in (13, 14)) d,
             cta_dispersion_fcm ct,
             fcm f
       where f.nit_fcm = '8000826650'
         and ct.nit_fcm = '8000826650'
         and ct.idbancorec = d.ori_idbanco;

    -- conta devolucion
  
    w_concepto := 'DEV-CXP USUARIO/C.C./NOVEDAD';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(n.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechaaplicacion, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c40 as clavecontable,
             cYYYYYYYYYY as cuenta,
             (n.vdevolucion) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-CXP USU ' || n.identificacion || '-' ||
                    n.numeronov,
                    0,
                    25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m
       where n.fechaaplicacion = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio;
  
    w_concepto := 'DEV-REG CTA PTE PAS DISP BCO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(n.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechaaplicacion, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c50 as clavecontable,
             c2905901012 as cuenta,
             (n.vdevolucion) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-REG CTA PTE PAS DISP BCO ', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechaaplicacion = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DEV-PAGO PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c11 as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (n.vmunneto) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-PAGO PARTICIPACION MUNICIPIO', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             c1470900601 as cuentadivergente,
             to_char(n.fechacobro, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DEV-DISP OTRO ACR POLCA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c11 as clavecontable,
             substr(f.nit_polca, 0, 9) as cuenta,
             (n.vpolcaneto) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-DISP OTRO ACR POLCA', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             c1470900601 as cuentadivergente,
             to_char(n.fechacobro, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DEV-DISP PAR 2.7 SEVIAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c31 as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (n.vsevial27) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-DISP PAR 2.7% SEVIAL', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             c2905901001 as cuentadivergente,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DEV-DISP PAR IVA 2.7 SEVIAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c31 as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (n.vivasevial27) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-DISP IVA PAR 2.7% SEVIAL', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             c2905901002 as cuentadivergente,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DEV-DISP PAR 1.8 FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c50 as clavecontable,
             c2905901003 as cuenta,
             (n.vfcmpolca) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-DISP PAR 1.8% FCM', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and n.idconcesionario <> '05'
         and n.indtipo = 'POLCA';
        
    w_concepto := 'DEV-DISP PAR 1.8 FCM SIMIT CAPITAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c50 as clavecontable,
             c2905901003 as cuenta,
             (n.vequilibrioeconomico * 1.8 / 5.57) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-DISP PAR 1.8% FCM', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and n.idconcesionario = '05'
         and n.indtipo = 'POLCA';
  
    w_concepto := 'DEV-DISP IVA PAR 1.8 FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c50 as clavecontable,
             c2905901004 as cuenta,
             (n.vivafcmpolca) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-DISP IVA PAR 1.8% FCM', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DEV-PAGO CONTRAV CONCES nomConsecionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c31 as clavecontable,
             substr(cz.nit_c, 0, 9) as cuenta,
             (n.vconcontravencional) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-PAGO CONTRAV ' || cz.nombre, 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(cz.nit_c, 0, 9) as nittercero,
             c2905901005 as cuentadivergente,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f,
             concesionario             cz
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and cz.idconcesionario = n.idconcesionariozon;
  
    w_concepto := 'DEV-PAGO IVA CONTRAV CONCES nomConsecionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c31 as clavecontable,
             substr(cz.nit_c, 0, 9) as cuenta,
             (n.vivacontrconc) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-PAGO IVA CONTRAV ' || cz.nombre, 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(cz.nit_c, 0, 9) as nittercero,
             c2905901009 as cuentadivergente,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f,
             concesionario             cz
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and cz.idconcesionario = n.idconcesionariozon;
  
    w_concepto := 'DEV-PAGO CONTRAV FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c50 as clavecontable,
             c2905901006 as cuenta,
             (n.vfcmcontravencional) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-PAGO CONTRAV FCM', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f,
             concesionario             cz
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and cz.idconcesionario = n.idconcesionariozon;
  
    w_concepto := 'DEV-PAGO CONTRAV IVA FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c50 as clavecontable,
             c2905901010 as cuenta,
             (n.vivacontrfcm) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-PAGO IVA CONTRAV FCM', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f,
             concesionario             cz
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and cz.idconcesionario = n.idconcesionariozon;
  
    w_concepto := 'DEV-REG CTA PTE PAS DISP BCO - municipio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c40 as clavecontable,
             c2905901012 as cuenta,
             (n.vmunneto) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-REG CTA PTE PAS DISP BCO', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DEV-REG CTA PTE PAS DISP BCO - contravencional';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c40 as clavecontable,
             c2905901012 as cuenta,
             (n.vfcmcontravencional + n.vconcontravencional +
             n.vivacontrconc + n.vivacontrfcm) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-REG CTA PTE PAS DISP BCO', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DEV-REG CTA PTE PAS DISP BCO - polca';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c40 as clavecontable,
             c2905901012 as cuenta,
             (n.vpolcaneto) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-REG CTA PTE PAS DISP BCO', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DEV-REG CTA PTE PAS DISP BCO - polca fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c40 as clavecontable,
             c2905901012 as cuenta,
             (n.vsevial27 + n.vfcmpolca + n.vivasevial27 + n.vivafcmpolca ) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-REG CTA PTE PAS DISP BCO', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and n.idconcesionario <> '05';

     w_concepto := 'DEV-REG CTA PTE PAS DISP BCO - polca fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             n.numliquidacion as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c40 as clavecontable,
             c2905901012 as cuenta,
             (n.vsevial27 + ( n.vequilibrioeconomico * 1.8 / 5.57 ) + n.vivasevial27 + n.vivafcmpolca ) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-REG CTA PTE PAS DISP BCO', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and n.idconcesionario = '05'
         and n.indtipo = 'POLCA';
 
  
    w_concepto := 'DEV-PAGO PART CONCES sevial 3%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             ('' || n.numliquidacion || 'G') as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c11 as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (n.vsevial) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-PAGO PART 3.0% SEVIAL', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             c1470900601 as cuentadivergente,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f,
             concesionario             co
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and co.idconcesionario = n.idconcesionario;
  
    w_concepto := 'DEV-PAGO PART CONCES nomConcesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             ('' || n.numliquidacion || 'G') as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c11 as clavecontable,
             substr(co.nit_c, 0, 9) as cuenta,
             (n.vconcesionario) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-PAGO PART ' || co.nombre, 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(co.nit_c, 0, 9) as nittercero,
             c1470900601 as cuentadivergente,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f,
             concesionario             co
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and co.idconcesionario = n.idconcesionario;
  
    w_concepto := 'DEV-PAGO PART FONDO CONCES nomConcesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             ('' || n.numliquidacion || 'G') as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c11 as clavecontable,
             substr(co.nit_c, 0, 9) as cuenta,
             (n.vfondocoberturaliq) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-PAGO PART FONDO ' || co.nombre, 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(co.nit_c, 0, 9) as nittercero,
             c1470900601 as cuentadivergente,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f,
             concesionario             co
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and co.idconcesionario = n.idconcesionario;
  
    w_concepto := 'DEV-REG CTA PTE PAS DISP BCO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
    
      select to_char(n.fechacobro2, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechacontable,
             to_char(n.fechacobro2, 'MM') as periodo,
             cop as moneda,
             ('' || n.numliquidacion || 'G') as referencia,
             substr('PAGO REC ' || to_char(n.fechacobro2, 'ddMMyyyy') || ' ' ||
                    n.cuentarec,
                    0,
                    25) as textocabezera,
             c40 as clavecontable,
             c2905901012 as cuenta,
             (n.vfondocoberturaliq + n.vconcesionario + n.vsevial) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechacobro2, 'ddMMyyyy') as fechavalor,
             n.idmunicipio AS asignacion,
             substr('DEV-REG CTA PTE PAS DISP BCO', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f,
             concesionario             co
       where n.fechacobro2 = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650'
         and co.idconcesionario = n.idconcesionario;
  
    -- pago general devoluciones
    w_concepto := 'Pago Usuario Ide:xxx Novedad:xxx';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(n.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(n.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as referencia,
             substr('DISP REC ' || to_char(n.fechaaplicacion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             c50 as clavecontable,
             c.cta_contable_ing as cuenta,
             (n.vdevolucion) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr('Pago usuario ' || n.identificacion || '-' ||
                    n.numeronov,
                    0,
                    25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechaaplicacion = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'REG CTA PTE PAS DISP BCO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(n.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(n.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as referencia,
             substr('DISP REC ' || to_char(n.fechaaplicacion, 'ddMMyyyy'),
                    0,
                    25) as textocabezera,
             c40 as clavecontable,
             c2905901012 as cuenta,
             (n.vdevolucion) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(n.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr('REG CTA PTE PAS DISP BCO', 0, 25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             n,
             cta_recaudo_concesionario c,
             banco                     b,
             municipio                 m,
             fcm                       f
       where n.fechaaplicacion = w_fec_cor_ini
         and c.idconcesionario = n.idconcesionario
         and c.cuenta = n.cuentarec
         and c.indtipo = n.indtipo
         and c.idbanco = b.idbanco
         and n.idmunicipio = m.idmunicipio;
  
    -- fin contadevolucion
  
    update recaudo_externo_contabilidad r
       set r.importe = ROUND(r.importe, 0)
     where r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = 'PAG';
  
    delete recaudo_externo_contabilidad r
     where r.importe = 0
       and r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = 'PAG';
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = ''
     where r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = 'PAG'
       and substr(r.nittercero, 0, 9) = substr(r.receptoralternativo, 0, 9);
  
    w_concepto := 'AJUSTE PESOS DETALLE';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(w_fec_cor_ini, 'ddMMyyyy'), 0, 25) as textocabezera,
             (case
               when a.importe < 0 then
                '50'
               else
                '40'
             end) as clavecontable,
             (case
               when a.importe < 0 then
                '4810900202'
               else
                '5810900202'
             end) as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from fcm f,
             (select max(c.textocabezera) as textocabezera,
                     sum(case c.clavecontable
                           when '40' then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = 'PFC1'
                 and c.tipocontable = 'PAG'
                 and c.cuenta = '2905901012') a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    w_concepto := 'AJUSTE PESOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(w_fec_cor_ini, 'ddMMyyyy'), 0, 25) as textocabezera,
             (case
               when a.importe < 0 then
                '40'
               else
                '50'
             end) as clavecontable,
             '2905901012' as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from fcm f,
             (select max(c.textocabezera) as textocabezera,
                     sum(case c.clavecontable
                           when '40' then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = 'PFC1'
                 and c.tipocontable = 'PAG'
                 and c.cuenta = '2905901012') a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    ---
    w_concepto := 'AJUSTE PESOS OTROS BANCOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(w_fec_cor_ini, 'ddMMyyyy'), 0, 25) as textocabezera,
             (case
               when a.importe < 0 then
                '50'
               else
                '40'
             end) as clavecontable,
             (case
               when a.importe < 0 then
                '4810900202'
               else
                '5810900202'
             end) as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from fcm f,
             (select max(c.textocabezera) as textocabezera,
                     sum(case c.clavecontable
                           when '40' then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = 'PFC1'
                 and c.tipocontable = 'PAG'
                 and c.cuenta = '2905901013'  ) a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    w_concepto := 'AJUSTE PESOS OTROS BANCOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'PFC1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(w_fec_cor_ini, 'ddMMyyyy'), 0, 25) as textocabezera,
             (case
               when a.importe < 0 then
                '40'
               else
                '50'
             end) as clavecontable,
             '2905901013' as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from fcm f,
             (select max(c.textocabezera) as textocabezera,
                     sum(case c.clavecontable
                           when '40' then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = 'PFC1'
                 and c.tipocontable = 'PAG'
                 and c.cuenta = '2905901013') a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    --
  
    w_concepto := 'AJUSTE PESOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             'ZD' as clasedoc,
             'FCM1' as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             'COP' as moneda,
             a.referencia as referencia,
             substr('BAN PAG ' || to_char(w_fec_cor_ini, 'ddMMyyyy'), 0, 25) as textocabezera,
             (case
               when a.importe > 0 then
                '50'
               else
                '40'
             end) as clavecontable,
             '1470901106' as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             'PAG' as tipocontable
        from fcm f,
             (select sum(case c.clavecontable
                           when '40' then
                            c.importe
                           when '01' then
                            c.importe
                           when '21' then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe,
                     referencia
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = 'FCM1'
                 and tipocontable = 'PAG'
               group by c.referencia) a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    commit;
  
    delete from recaudo_externo_contabilidad r
     where to_char(to_date(r.fechadoc, 'ddMMyyyy'), 'yyyyMMdd') <=
           to_char(w_fec_cor_ini - 90, 'yyyyMMdd');
  
    commit;
  
    sp_log(p_usuario,
           'Contabiliza Pago Rec Externo',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [contabiliza_pago_externo] ' || SQLERRM,
            p_error);
    
  END contabiliza_pago_externo;

end PK_CONTA_EXT;
/

prompt
prompt Creating package body PK_DEVOLACH
prompt =================================
prompt
create or replace package body simit.PK_DEVOLACH is

PROCEDURE contabiliza_rechazo_ach(p_feccor_ini_ano number,
                                  p_feccor_ini_mes number,
                                  p_feccor_ini_dia number,
                                  p_feccor_fin_ano number,
                                  p_feccor_fin_mes number,
                                  p_feccor_fin_dia number,
                                  p_usuario        varchar2,
                                  p_error          OUT VARCHAR2) AS
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    
    w_registros   number;
  
    w_fec_cor_ini_s char(8);
    w_concepto      varchar(250);
  
    tipoCon char(3);
  
    zt char(2);
    ze char(2);
    zd char(2);
    
  
    pfc1 char(4);
    fcm1 char(4);
    cop  char(3);
    c50  char(2);
    c40  char(2);
    c31  char(2);
    c01  char(2);
    c11  char(2);
    c21  char(2);
  
    v5 char(2);
  
    c20111 char(5);
    c20112 char(5);
    c20113 char(5);
    c20114 char(5);
  
    c20211 char(5);
    c20212 char(5);
    c20213 char(5);
    c20214 char(5);
  
    c20121 char(5);
    c20122 char(5);
    c20123 char(5);
    c20124 char(5);
  
    c20221 char(5);
    c20222 char(5);
    c20223 char(5);
    c20224 char(5);
  
    c201213 char(6);
    c202213 char(6);
    c200101 char(6);
  
    c200102 char(6);
    c100761 char(6);
    
    c201111 char(6);
    c201121 char(6);
    c201215 char(6);
    c201221 char(6);
  
    cZ000 char(4);
    cZ002 char(4);
    cZ005 char(4);
  
    c1401020102 char(10);
    c8000826650 char(10);
    c5810900202 char(10);
    c4810900202 char(10);
    c2905901001 char(10);
    c2905901002 char(10);
    c2905901003 char(10);
    c2905901004 char(10);
    c1470909002 char(10);
    c5111110112 char(10);
    c5815930102 char(10);
    c5815930101 char(10);
    c4815590102 char(10);
  
    c1470900601 char(10);
    c2905901005 char(10);
    c2905901009 char(10);
    c1470909003 char(10);
    cYYYYYYYYYY char(10);
    c2425900502 char(10);
    
    c2905900402 char(10);
    c2905900702 char(10);
    c2905900502 char(10);
    c2905901014 char(10);
    c2905901015 char(10);
    c1470901502 char(10);
    c1470901002 char(10);
    
    c2905901016 char(10);
    c2905901017 char(10);
    
  
  BEGIN
    zt := FN_DAR_PARCONTA('ZT');
    ze := FN_DAR_PARCONTA('ZE');
    zd := FN_DAR_PARCONTA('ZD');
  
    pfc1 := FN_DAR_PARCONTA('PFC1');
    fcm1 := FN_DAR_PARCONTA('FCM1');
    cop  := FN_DAR_PARCONTA('COP');
  
    c50 := FN_DAR_PARCONTA('50');
    c40 := FN_DAR_PARCONTA('40');
    c31 := FN_DAR_PARCONTA('31');
    c01 := FN_DAR_PARCONTA('01');
    c11 := FN_DAR_PARCONTA('11');
    c21 := FN_DAR_PARCONTA('21');
  
    v5 := FN_DAR_PARCONTA('V5');
  
    c20111 := FN_DAR_PARCONTA('20111');
    c20112 := FN_DAR_PARCONTA('20112');
    c20113 := FN_DAR_PARCONTA('20113');
    c20114 := FN_DAR_PARCONTA('20114');
  
    c20211 := FN_DAR_PARCONTA('20211');
    c20212 := FN_DAR_PARCONTA('20212');
    c20213 := FN_DAR_PARCONTA('20213');
    c20214 := FN_DAR_PARCONTA('20214');
  
    c20121 := FN_DAR_PARCONTA('20121');
    c20122 := FN_DAR_PARCONTA('20122');
    c20123 := FN_DAR_PARCONTA('20123');
    c20124 := FN_DAR_PARCONTA('20124');
  
    c20221  := FN_DAR_PARCONTA('20221');
    c20222  := FN_DAR_PARCONTA('20222');
    c20223  := FN_DAR_PARCONTA('20223');
    c20224  := FN_DAR_PARCONTA('20224');
    c200101 := FN_DAR_PARCONTA('200101');
    c200102 := FN_DAR_PARCONTA('200102');
    c202213 := FN_DAR_PARCONTA('202213');
    c201213 := FN_DAR_PARCONTA('201213');
    c201111 := FN_DAR_PARCONTA('201111');
    c201121 := FN_DAR_PARCONTA('201121');
    c201215 := FN_DAR_PARCONTA('201215');
    c201221 := FN_DAR_PARCONTA('201221');
  
    c100761 := FN_DAR_PARCONTA('100761');
  
    cZ000 := FN_DAR_PARCONTA('Z000');
    cZ002 := FN_DAR_PARCONTA('Z002');
    cZ005 := FN_DAR_PARCONTA('Z005');
  
    c1401020102 := FN_DAR_PARCONTA('1401020102');
    c8000826650 := FN_DAR_PARCONTA('8000826650');
  
    c5810900202 := FN_DAR_PARCONTA('5810900202');
    c4810900202 := FN_DAR_PARCONTA('4810900202');
  
    c2905901001 := FN_DAR_PARCONTA('2905901001');
    c2905901002 := FN_DAR_PARCONTA('2905901002');
    c2905901003 := FN_DAR_PARCONTA('2905901003');
    c2905901004 := FN_DAR_PARCONTA('2905901004');
    c1470909002 := FN_DAR_PARCONTA('1470909002');
    c5111110112 := FN_DAR_PARCONTA('5111110112');
    c5815930102 := FN_DAR_PARCONTA('5815930102');
    c5815930101 := FN_DAR_PARCONTA('5815930101');
    c4815590102 := FN_DAR_PARCONTA('4815590102');
  
    c1470900601 := FN_DAR_PARCONTA('1470900601');
    c2905901005 := FN_DAR_PARCONTA('2905901005');
    c2905901009 := FN_DAR_PARCONTA('2905901009');
    c1470909003 := FN_DAR_PARCONTA('1470909003');
    cYYYYYYYYYY := FN_DAR_PARCONTA('YYYYYYYYYY');
    c2425900502 := FN_DAR_PARCONTA('2425900502');
    c2905900402 := FN_DAR_PARCONTA('2905900402');
    c2905900702 := FN_DAR_PARCONTA('2905900702');
    c2905900502 := FN_DAR_PARCONTA('2905900502');
    c2905901014 := FN_DAR_PARCONTA('2905901014');
    c2905901015 := FN_DAR_PARCONTA('2905901015');
    c1470901502 := FN_DAR_PARCONTA('1470901502');
    c1470901002 := FN_DAR_PARCONTA('1470901002');
    c2905901016 := FN_DAR_PARCONTA('2905901016');
    c2905901017 := FN_DAR_PARCONTA('2905901017');
    
    tipoCon := 'ACR';
  
    -- Obtiene fecha de cierre en formato ddMMyyyy
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_feccor_fin_ano || '-' || p_feccor_fin_mes || '-' ||
                   p_feccor_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    -- elimina contabilizacion
    delete recaudo_externo_contabilidad
     where to_date(fechaDoc,'ddmmyy') >= w_fec_cor_ini
       and to_date(fechaDoc,'ddmmyy') <= w_fec_cor_fin 
       and tipoContable = tipoCon;
  
    w_concepto := 'RECHAZO PARTICIPACION OPERADOR Y FONDO OPERADOR';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (7, 8)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco;
      
    w_concepto := 'CRUCE PARTICIPACION OPERADOR Y FONDO OPERADOR';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c31 as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             c2425900502 as cuentadivergente,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (7, 8)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco;

    w_concepto := 'RECHAZO MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             r.idmunicipio AS asignacion,
             substr( b.nombre || '-' || r.ori_cuenta,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, municipio m
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (1)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and r.idmunicipio = m.idmunicipio;
       

    w_concepto := 'CRUZE RECHAZO MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c31 as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             r.idmunicipio AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             decode(r.indtipo,'SIMIT', c2905900402, c2905900702) as cuentadivergente,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechabase,
             cz005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, municipio m
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (1)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and r.idmunicipio = m.idmunicipio;
     
    w_concepto := 'RECHAZO TERCERO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(r.des_nit, 0, 9) AS asignacion,
             substr( b.nombre || '-' || r.ori_cuenta,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(r.des_nit, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             'XXX' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
       from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (2)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco;
       

    w_concepto := 'CRUZE RECHAZO TERCERO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c31 as clavecontable,
             substr(r.des_nit, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(r.des_nit, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(r.des_nit, 0, 9) as nittercero,
             decode(r.indtipo,'SIMIT', c2905900402, c2905900702) as cuentadivergente,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechabase,
             'YYY' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (2)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco;
       
     
     w_concepto := 'RECHAZO PARTICIPACION FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (5)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
      
      w_concepto := 'CRUCE RECHAZO PARTICIPACION FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cf.cta_con_s as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_dispersion_fcm cf, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (5)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cf.nit_fcm = f.nit_fcm
       and cf.idbancorec = r.ori_idbanco
       and f.nit_fcm = '8000826650'; 


     w_concepto := 'RECHAZO ACUERDO PAGO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             m.idmunicipio AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, municipio m
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (15)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.idmunicipio = m.idmunicipio;
      
      w_concepto := 'CRUCE ACUERDO PAGO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cf.Cta_Con_Ac as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             m.idmunicipio AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_dispersion_fcm cf, fcm f, municipio m
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (15)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cf.nit_fcm = f.nit_fcm
       and cf.idbancorec = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.idmunicipio = m.idmunicipio;
    

    w_concepto := 'RECHAZO POLCA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_polca, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (12)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
   
       w_concepto := 'CRUCE RECHAZO POLCA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c31 as clavecontable,
             substr(f.nit_polca, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_polca, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             c2905900502 as cuentadivergente,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (12)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';    

    w_concepto := 'RECHAZO POLCA SEVIAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (10)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
   
       w_concepto := 'CRUCE RECHAZO POLCA SEVIAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c31 as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             c2905901014 as cuentadivergente,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (10)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';    
        
    w_concepto := 'RECHAZO POLCA FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (11)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
   
       w_concepto := 'CRUCE RECHAZO POLCA FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             c2905901015 as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (11)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';    

    w_concepto := 'RECHAZO Impuestos FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (9)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.concepto = 'Impuestos FCM';
   
       w_concepto := 'CRUCE RECHAZO Impuestos FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             c2905901015 as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (9)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.concepto = 'Impuestos FCM';
  
    w_concepto := 'RECHAZO Equilibrio E';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (9)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.concepto <> 'Impuestos FCM';
   
       w_concepto := 'CRUCE RECHAZO equilibrio economico';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c11 as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             c1470901502 as cuentadivergente,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (9)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.concepto <> 'Impuestos FCM';
       
  
      w_concepto := 'RECHAZO Fondo Fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (6)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
       
       w_concepto := 'CRUCE RECHAZO Fondo Fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c11 as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             c1470901002 as cuentadivergente,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (6)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
       
      w_concepto := 'RECHAZO Contavencional concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(cz.nit_c, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(cz.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, concesionario cz
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (13)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.id_concesionario_pro = cz.idconcesionario;
       
       w_concepto := 'CRUCE RECHAZO Contravencional Concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c31 as clavecontable,
             substr(cz.nit_c, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(cz.nit_c, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(cz.nit_c, 0, 9) as nittercero,
             c2905901016 as cuentadivergente,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, concesionario cz
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (13)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.id_concesionario_pro = cz.idconcesionario;

      w_concepto := 'RECHAZO Contavencional fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, concesionario cz
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (14)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.id_concesionario_pro = cz.idconcesionario;
       
       w_concepto := 'CRUCE RECHAZO Contravencional Fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechadevolucion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechadevolucion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrf as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             c2905901017 as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechadevolucion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, concesionario cz
       where r.estadotrf = 'REC'
       and r.fechadevolucion >= w_fec_cor_ini
       and r.fechadevolucion <= w_fec_cor_fin
       and r.orden in (14)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.id_concesionario_pro = cz.idconcesionario;
       
    update recaudo_externo_contabilidad r
       set r.importe = ROUND(r.importe, 0)
     where to_date(fechaDoc,'ddmmyy') >= w_fec_cor_ini
       and to_date(fechaDoc,'ddmmyy') <= w_fec_cor_fin 
       and tipocontable = tipoCon;
  
-- ajustar datos de terceros  
     update recaudo_externo_contabilidad r
       set (condicionpago, r.asignacion, r.nittercero ) = (select '', max(m.idmunicipio), max(substr(m.nit_m,1,9)) from tercero t, municipio m 
                                                          where substr(t.nit_t,1,9) = trim(r.nittercero)
                                                          and t.idmunicipio = m.idmunicipio) 
     where to_date(fechaDoc,'ddmmyy') >= w_fec_cor_ini
       and to_date(fechaDoc,'ddmmyy') <= w_fec_cor_fin 
       and tipocontable = tipoCon
       and condicionpago = 'XXX';
  
    update recaudo_externo_contabilidad r
       set (condicionpago, r.asignacion, r.nittercero ) = (select cz005, max(m.idmunicipio), max(substr(m.nit_m,1,9)) from tercero t, municipio m 
                                                          where substr(t.nit_t,1,9) = trim(r.nittercero)
                                                          and t.idmunicipio = m.idmunicipio) 
     where to_date(fechaDoc,'ddmmyy') >= w_fec_cor_ini
       and to_date(fechaDoc,'ddmmyy') <= w_fec_cor_fin 
       and tipocontable = tipoCon
       and condicionpago = 'YYY';


    delete recaudo_externo_contabilidad r
     where r.importe = 0
       and to_date(fechaDoc,'ddmmyy') >= w_fec_cor_ini
       and to_date(fechaDoc,'ddmmyy') <= w_fec_cor_fin 
       and tipocontable = tipoCon;
  
  
    commit;
  
    sp_log(p_usuario,
           'Contabiliza rechazo ach',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [contabiliza_rechazo_ach] ' || SQLERRM,
            p_error);
    
  END contabiliza_rechazo_ach;

PROCEDURE contabiliza_reenvio_ach(p_feccor_ini_ano number,
                                  p_feccor_ini_mes number,
                                  p_feccor_ini_dia number,
                                  p_usuario        varchar2,
                                  p_error          OUT VARCHAR2) AS
    w_fec_cor_ini date;
    
    w_registros   number;
  
    w_fec_cor_ini_s char(8);
    w_concepto      varchar(250);
  
    tipoCon char(3);
  
    zt char(2);
    ze char(2);
    zd char(2);
    
  
    pfc1 char(4);
    fcm1 char(4);
    cop  char(3);
    c50  char(2);
    c40  char(2);
    c31  char(2);
    c01  char(2);
    c11  char(2);
    c21  char(2);
  
    v5 char(2);
  
    c20111 char(5);
    c20112 char(5);
    c20113 char(5);
    c20114 char(5);
  
    c20211 char(5);
    c20212 char(5);
    c20213 char(5);
    c20214 char(5);
  
    c20121 char(5);
    c20122 char(5);
    c20123 char(5);
    c20124 char(5);
  
    c20221 char(5);
    c20222 char(5);
    c20223 char(5);
    c20224 char(5);
  
    c201213 char(6);
    c202213 char(6);
    c200101 char(6);
  
    c200102 char(6);
    c100761 char(6);
    
    c201111 char(6);
    c201121 char(6);
    c201215 char(6);
    c201221 char(6);
  
    cZ000 char(4);
    cZ002 char(4);
    cZ005 char(4);
  
    c1401020102 char(10);
    c8000826650 char(10);
    c5810900202 char(10);
    c4810900202 char(10);
    c2905901001 char(10);
    c2905901002 char(10);
    c2905901003 char(10);
    c2905901004 char(10);
    c1470909002 char(10);
    c5111110112 char(10);
    c5815930102 char(10);
    c5815930101 char(10);
    c4815590102 char(10);
  
    c1470900601 char(10);
    c2905901005 char(10);
    c2905901009 char(10);
    c1470909003 char(10);
    cYYYYYYYYYY char(10);
    c2425900502 char(10);
    
    c2905900402 char(10);
    c2905900702 char(10);
    c2905900502 char(10);
    c2905901014 char(10);
    c2905901015 char(10);
    c1470901502 char(10);
    c1470901002 char(10);
    
    c2905901016 char(10);
    c2905901017 char(10);
    
  
  BEGIN
    zt := FN_DAR_PARCONTA('ZT');
    ze := FN_DAR_PARCONTA('ZE');
    zd := FN_DAR_PARCONTA('ZD');
  
    pfc1 := FN_DAR_PARCONTA('PFC1');
    fcm1 := FN_DAR_PARCONTA('FCM1');
    cop  := FN_DAR_PARCONTA('COP');
  
    c50 := FN_DAR_PARCONTA('50');
    c40 := FN_DAR_PARCONTA('40');
    c31 := FN_DAR_PARCONTA('31');
    c01 := FN_DAR_PARCONTA('01');
    c11 := FN_DAR_PARCONTA('11');
    c21 := FN_DAR_PARCONTA('21');
  
    v5 := FN_DAR_PARCONTA('V5');
  
    c20111 := FN_DAR_PARCONTA('20111');
    c20112 := FN_DAR_PARCONTA('20112');
    c20113 := FN_DAR_PARCONTA('20113');
    c20114 := FN_DAR_PARCONTA('20114');
  
    c20211 := FN_DAR_PARCONTA('20211');
    c20212 := FN_DAR_PARCONTA('20212');
    c20213 := FN_DAR_PARCONTA('20213');
    c20214 := FN_DAR_PARCONTA('20214');
  
    c20121 := FN_DAR_PARCONTA('20121');
    c20122 := FN_DAR_PARCONTA('20122');
    c20123 := FN_DAR_PARCONTA('20123');
    c20124 := FN_DAR_PARCONTA('20124');
  
    c20221  := FN_DAR_PARCONTA('20221');
    c20222  := FN_DAR_PARCONTA('20222');
    c20223  := FN_DAR_PARCONTA('20223');
    c20224  := FN_DAR_PARCONTA('20224');
    c200101 := FN_DAR_PARCONTA('200101');
    c200102 := FN_DAR_PARCONTA('200102');
    c202213 := FN_DAR_PARCONTA('202213');
    c201213 := FN_DAR_PARCONTA('201213');
    c201111 := FN_DAR_PARCONTA('201111');
    c201121 := FN_DAR_PARCONTA('201121');
    c201215 := FN_DAR_PARCONTA('201215');
    c201221 := FN_DAR_PARCONTA('201221');
  
    c100761 := FN_DAR_PARCONTA('100761');
  
    cZ000 := FN_DAR_PARCONTA('Z000');
    cZ002 := FN_DAR_PARCONTA('Z002');
    cZ005 := FN_DAR_PARCONTA('Z005');
  
    c1401020102 := FN_DAR_PARCONTA('1401020102');
    c8000826650 := FN_DAR_PARCONTA('8000826650');
  
    c5810900202 := FN_DAR_PARCONTA('5810900202');
    c4810900202 := FN_DAR_PARCONTA('4810900202');
  
    c2905901001 := FN_DAR_PARCONTA('2905901001');
    c2905901002 := FN_DAR_PARCONTA('2905901002');
    c2905901003 := FN_DAR_PARCONTA('2905901003');
    c2905901004 := FN_DAR_PARCONTA('2905901004');
    c1470909002 := FN_DAR_PARCONTA('1470909002');
    c5111110112 := FN_DAR_PARCONTA('5111110112');
    c5815930102 := FN_DAR_PARCONTA('5815930102');
    c5815930101 := FN_DAR_PARCONTA('5815930101');
    c4815590102 := FN_DAR_PARCONTA('4815590102');
  
    c1470900601 := FN_DAR_PARCONTA('1470900601');
    c2905901005 := FN_DAR_PARCONTA('2905901005');
    c2905901009 := FN_DAR_PARCONTA('2905901009');
    c1470909003 := FN_DAR_PARCONTA('1470909003');
    cYYYYYYYYYY := FN_DAR_PARCONTA('YYYYYYYYYY');
    c2425900502 := FN_DAR_PARCONTA('2425900502');
    c2905900402 := FN_DAR_PARCONTA('2905900402');
    c2905900702 := FN_DAR_PARCONTA('2905900702');
    c2905900502 := FN_DAR_PARCONTA('2905900502');
    c2905901014 := FN_DAR_PARCONTA('2905901014');
    c2905901015 := FN_DAR_PARCONTA('2905901015');
    c1470901502 := FN_DAR_PARCONTA('1470901502');
    c1470901002 := FN_DAR_PARCONTA('1470901002');
    c2905901016 := FN_DAR_PARCONTA('2905901016');
    c2905901017 := FN_DAR_PARCONTA('2905901017');
    
    tipoCon := 'PAG';
  
    -- Obtiene fecha de cierre en formato ddMMyyyy
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    w_concepto := 'REENVIO PARTICIPACION OPERADOR Y FONDO OPERADOR';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (7, 8)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco;
      
    w_concepto := 'CRUCE REENVIO PARTICIPACION OPERADOR Y FONDO OPERADOR';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c21 as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             c2425900502 as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (7, 8)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco;

    w_concepto := 'REENVIO MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             r.idmunicipio AS asignacion,
             substr( b.nombre || '-' || r.ori_cuenta,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(r.concepto,'REENV-Metrotransito Barranquilla', '830509269',
                               'REENV-Galapa - Dptal Atlantico', '800115102',
                               'REENV-Puerto Colombia - Dptal Atlantico', '800115102',
                               substr(m.nit_m, 0, 9) ) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, municipio m
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (1)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and r.idmunicipio = m.idmunicipio;
       

    w_concepto := 'CRUZE REENVIO MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c21 as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             r.idmunicipio AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(r.concepto,'REENV-Metrotransito Barranquilla', '830509269',
                               'REENV-Galapa - Dptal Atlantico', '800115102',
                               'REENV-Puerto Colombia - Dptal Atlantico', '800115102',
                               substr(m.nit_m, 0, 9) ) as nittercero,
             decode(r.indtipo,'SIMIT', c2905900402, c2905900702) as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, municipio m
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (1)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and r.idmunicipio = m.idmunicipio;
     
     
    w_concepto := 'REENVIO TERCERO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(r.des_nit, 0, 9) AS asignacion,
             substr( b.nombre || '-' || r.ori_cuenta,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(r.des_nit, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             'XXX' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
       from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (2)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco;
       
    w_concepto := 'CRUZE REENVIO TERCERO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c21 as clavecontable,
             substr(r.des_nit, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(r.des_nit, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(r.des_nit, 0, 9) as nittercero,
             decode(r.indtipo,'SIMIT', c2905900402, c2905900702) as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             'YYY' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (2)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco;
       
     
     w_concepto := 'REENVIO PARTICIPACION FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (5)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
      
      w_concepto := 'CRUCE REENVIO PARTICIPACION FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cf.cta_con_s as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_dispersion_fcm cf, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (5)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cf.nit_fcm = f.nit_fcm
       and cf.idbancorec = r.ori_idbanco
       and f.nit_fcm = '8000826650'; 


     w_concepto := 'REENVIO ACUERDO PAGO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             m.idmunicipio AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, municipio m
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (15)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.idmunicipio = m.idmunicipio;
      
      w_concepto := 'CRUCE REENVIO ACUERDO PAGO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             cf.Cta_Con_Ac as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             m.idmunicipio AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_dispersion_fcm cf, fcm f, municipio m
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (15)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cf.nit_fcm = f.nit_fcm
       and cf.idbancorec = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.idmunicipio = m.idmunicipio;
    

    w_concepto := 'REENVIO POLCA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_polca, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (12)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
   
       w_concepto := 'CRUCE REENVIO POLCA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c21 as clavecontable,
             substr(f.nit_polca, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_polca, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             c2905900502 as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (12)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';    

    w_concepto := 'REENVIO POLCA SEVIAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (10)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
   
       w_concepto := 'CRUCE REENVIO POLCA SEVIAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c21 as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             c2905901014 as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (10)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';    
        
    w_concepto := 'REENVIO POLCA FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (11)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
   
       w_concepto := 'CRUCE REENVIO POLCA FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             c2905901015 as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (11)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';    

    w_concepto := 'REENVIO Impuestos FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (9)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.concepto = 'REENV-Impuestos FCM';
   
       w_concepto := 'CRUCE REENVIO Impuestos FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             c2905901015 as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (9)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.concepto = 'REENV-Impuestos FCM';
  
    w_concepto := 'REENVIO Equilibrio E';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (9)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.concepto <> 'REENV-Impuestos FCM';
   
       w_concepto := 'CRUCE REENVIO equilibrio economico';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c01 as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             c1470901502 as cuentadivergente,
             '08102015' as fechabase,
             cZ000 as condicionpago,
             substr(r.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (9)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.concepto <> 'REENV-Impuestos FCM';
       
  
      w_concepto := 'REENVIO Fondo Fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (6)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
       
       w_concepto := 'CRUCE REENVIO Fondo Fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c01 as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             c1470901002 as cuentadivergente,
             '1501' || trim(to_char( to_number((to_char(r.Fec_Dispersion, 'yyyy')) + 1))) as fechabase,
             cz000 as condicionpago,
             substr(r.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (6)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650';
       
      w_concepto := 'REENVIO Contavencional concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(cz.nit_c, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(cz.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, concesionario cz
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (13)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.id_concesionario_pro = cz.idconcesionario;
       
       w_concepto := 'CRUCE REENVIO Contravencional Concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c21 as clavecontable,
             substr(cz.nit_c, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(cz.nit_c, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(cz.nit_c, 0, 9) as nittercero,
             c2905901016 as cuentadivergente,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, concesionario cz
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (13)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.id_concesionario_pro = cz.idconcesionario;

      w_concepto := 'REENVIO Contavencional fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_dev as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ( b.nombre || ' ' || r.ori_cuenta) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, concesionario cz
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (14)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.id_concesionario_pro = cz.idconcesionario;
       
       w_concepto := 'CRUCE REENVIO Contravencional Fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.Fec_Dispersion, 'MM') as periodo,
             cop as moneda,
             r.referenciatrfori as referencia,
             ('DEV ' || to_char(r.Fec_Dispersion, 'ddMMyyyy') || ' ' || r.ori_cuenta) as textocabezera,
             c40 as clavecontable,
             c2905901017 as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.Fec_Dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr( r.concepto,1,25) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_externo_disp_tot r, banco b, concesionario c, cta_recaudo_concesionario cr, fcm f, concesionario cz
       where not r.referenciatrfori is null
       and r.Fec_Dispersion = w_fec_cor_ini
       and r.orden in (14)
       and r.ori_idbanco = b.idbanco
       and r.id_concesionario_liq = c.idconcesionario
       and cr.idconcesionario = r.id_concesionario_liq
       and cr.cuenta = r.ori_cuenta
       and cr.indtipo = r.indtipo
       and cr.idbanco = r.ori_idbanco
       and f.nit_fcm = '8000826650'
       and r.id_concesionario_pro = cz.idconcesionario;
       
    update recaudo_externo_contabilidad r
       set r.importe = ROUND(r.importe, 0)
     where to_date(fechaDoc,'ddmmyy') = w_fec_cor_ini
       and tipocontable = tipoCon;
  
-- ajustar datos de terceros  
     update recaudo_externo_contabilidad r
       set (condicionpago, r.asignacion, r.nittercero ) = (select '', max(m.idmunicipio), max(substr(m.nit_m,1,9)) from tercero t, municipio m 
                                                          where substr(t.nit_t,1,9) = trim(r.nittercero)
                                                          and t.idmunicipio = m.idmunicipio) 
     where to_date(fechaDoc,'ddmmyy') = w_fec_cor_ini
       and tipocontable = tipoCon
       and condicionpago = 'XXX';
  
    update recaudo_externo_contabilidad r
       set (condicionpago, r.asignacion, r.nittercero ) = (select '', max(m.idmunicipio), max(substr(m.nit_m,1,9)) from tercero t, municipio m 
                                                          where substr(t.nit_t,1,9) = trim(r.nittercero)
                                                          and t.idmunicipio = m.idmunicipio) 
     where to_date(fechaDoc,'ddmmyy') = w_fec_cor_ini
       and tipocontable = tipoCon
       and condicionpago = 'YYY';


    delete recaudo_externo_contabilidad r
     where r.importe = 0
       and to_date(fechaDoc,'ddmmyy') = w_fec_cor_ini
       and tipocontable = tipoCon;
  
  
    commit;
  
    sp_log(p_usuario,
           'Contabiliza reenvio ach',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [contabiliza_reenvio_ach] ' || SQLERRM,
            p_error);
    
  END contabiliza_reenvio_ach;
    
end PK_DEVOLACH;
/

prompt
prompt Creating package body PK_ENVIO
prompt ==============================
prompt
create or replace package body simit.PK_ENVIO is

PROCEDURE envio_Banco_local(p_fec_ini_ano number,
                        p_fec_ini_mes number,
                        p_fec_ini_dia number,
                        p_idbanco     varchar2,
                        p_usuario     varchar2,
                        p_error       OUT VARCHAR2,
                        p_log         out varchar2) as

    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
    p_fecha     date;

    cadena   varchar(250);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;

    longitud number;

  begin

    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
    END IF;

    IF not P_ERROR is null THEN
      return;
    END IF;

    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into p_fecha
      from DUAL;

    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_local_disp_tot
     where fec_dispersion = p_fecha
       and enviadobanco = 1
       and ori_idbanco = p_idbanco;

    IF w_registros > 0 THEN
      p_error := 'PROCESO NO EJECUTADO. ARCHIVOS YA ENVIADOS A BANCO. SOLICITAR AUTORIZACION';
      -- ver log envio
      if p_idbanco = '52' then
        verLogEnvioAvvillasLoc(p_log);
      end if;
      if p_idbanco = '51' then
        verLogEnvioDaviviendaLoc(p_log);
      end if;

      RETURN;
    END IF;

    if p_idbanco = '52' then
      -- generar archivo transferencia avvillas
      generarArchivoAvvillasLoc(p_fecha, p_usuario, p_error);

      IF not P_ERROR is null THEN
        return;
      END IF;

      -- ejecutar script transferencia davivienda
      ejecutarScriptAvvillasLoc(p_fecha, p_usuario, p_error);

      IF not P_ERROR is null THEN
        p_error := 'Error en script avvillas codigo ' ||
                   substr(p_error, 0, 3);
        verLogEnvioAvvillasLoc(p_log);
        return;
      END IF;
      -- ver log envio
      verLogEnvioAvvillasLoc(p_log);

      if (instr(p_log, 'Login failed') > 0) then
        p_error := 'Envio Avvillas. Fallo FTP:Login failed';
        return;
      end if;

    end if;

    if p_idbanco = '51' then

      -- generar archivo transferencia avvillas
      generarArchivoDaviviendaLoc(p_fecha, p_usuario, p_error);

      IF not P_ERROR is null THEN
        return;
      END IF;

      -- ejecutar script transferencia davivienda
      ejecutarScriptDaviviendaLoc(p_fecha, p_usuario, p_error);

      IF not P_ERROR is null THEN
        p_error := 'Error en script Davivienda codigo ' ||
                   substr(p_error, 0, 3);
        verLogEnvioDaviviendaLoc(p_log);
        return;
      END IF;

      -- ver log envio
      verLogEnvioDaviviendaLoc(p_log);

      if (instr(p_log, 'Login failed') > 0) then
        p_error := 'Envio Davivienda. Fallo FTP:Login failed';
        return;
      end if;

    end if;

    update recaudo_local_disp_tot
       set enviadobanco = 1
     where fec_dispersion = p_fecha
       and ori_idbanco = p_idbanco;

    commit;

    p_error := 'Archivos enviados a banco OK';

    select count(*)
      into w_registros
      from recaudo_local_disp_tot
     where fec_dispersion = p_fecha
       and ori_idbanco = p_idbanco;

    IF w_registros = 0 THEN
      p_error := p_error ||
                 '.ADVERTENCIA: NO HAY TRANSFERENCIAS PROGRAMADASPARA LA FECHA DADA';
      RETURN;
    END IF;

    sp_log(p_usuario,
           'envio_Banco_loc',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia);

  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [envio_Banco_local] ' || SQLERRM, p_error);

  end envio_Banco_local;

  PROCEDURE verLogEnvioAvvillasLoc(salida OUT VARCHAR2) as
    archivo      utl_file.file_type;
    input_buffer varchar2(1000);

  begin

    archivo := utl_file.fopen('TRFAVVILLAS', 'envioAvvillasLoc.sh.log', 'R');

    salida := '';
    LOOP
      BEGIN
        utl_file.get_line(archivo, input_buffer);
        salida := salida || input_buffer || chr(10);
      EXCEPTION
        when no_data_found then
          exit;
      END;
    END LOOP;

    utl_file.fclose(archivo);

  EXCEPTION
    WHEN OTHERS THEN
      salida := 'NO FUE POSIBLE LEER LOG envioAvvillasLoc.sh.log: ' || SQLERRM;

  end verLogEnvioAvvillasLoc;

  PROCEDURE verLogEnvioDaviviendaLoc(salida OUT VARCHAR2) as
    archivo      utl_file.file_type;
    input_buffer varchar2(1000);

  begin

    archivo := utl_file.fopen('TRFDAVIVIENDA',
                              'envioDaviviendaLoc.sh.log',
                              'R');

    salida := '';
    LOOP
      BEGIN
        utl_file.get_line(archivo, input_buffer);
        salida := salida || input_buffer || chr(10);
      EXCEPTION
        when no_data_found then
          exit;
      END;
    END LOOP;

    utl_file.fclose(archivo);
  EXCEPTION
    WHEN OTHERS THEN
      salida := 'NO FUE POSIBLE LEER LOG envioDaviviendaLoc.sh.log: ' ||
                SQLERRM;

  end verLogEnvioDaviviendaLoc;

PROCEDURE generarArchivoAvvillasLoc(p_fecha   date,
                                   p_usuario varchar2,
                                   p_error   OUT VARCHAR2) as

    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);

    cadena   varchar(250);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;

    longitud number;

    CURSOR tabla IS
      select fec_dispersion,
             concepto,
             ori_idbanco,
             ori_tipocuenta,
             ori_cuenta,
             ori_nit,
             des_idbanco,
             des_tipocuenta,
             desencriptar(des_cuenta) as des_cuenta,
             des_nit,
             valor,
             referenciatrf
        from recaudo_local_disp_tot
       where fec_dispersion = p_fecha
         and ori_idbanco = '52';

  begin

    aaaammdd := to_char(p_fecha, 'yyyymmdd');
    hhmmss   := to_char(sysdate, 'hhmmss');

    archivo  := utl_file.fopen('TRFAVVILLAS',
                               'CNJ660D.TRANSFER.' || aaaammdd || '.TXT',
                               'W');
    numreg   := 1;
    vlrTotal := 0;

    for registro in tabla loop
      cadena := '1'; -- tipo registro
      cadena := cadena || aaaammdd; -- fecha generacion

      strValor := trim(to_char(numreg, '00000000'));
      cadena   := cadena || strValor; -- numero registro

      strValor := trim(to_char(registro.referenciatrf, '0000000000000000'));

      cadena := cadena || strValor;
      cadena := cadena || '0' || registro.ori_idbanco; -- banco origen

      if (registro.ori_tipocuenta = 'AHO') then
        cadena := cadena || '1'; -- tipo cuenta origen
      end if;

      if (registro.ori_tipocuenta = 'CTE') then
        cadena := cadena || '2'; -- tipo cuenta origen
      end if;

      cadena := cadena || '0000000' || registro.ori_cuenta; -- cuenta origen

      strValor := trim(to_char(registro.valor * 100, '000000000000000000'));
      cadena   := cadena || strValor; -- valor

      cadena := cadena || '0' || registro.des_idbanco; -- banco destino

      if (registro.des_tipocuenta = 'AHO') then
        cadena := cadena || '1'; -- tipo cuenta destino
      end if;

      if (registro.des_tipocuenta = 'CTE') then
        cadena := cadena || '2'; -- tipo cuenta destino
      end if;

      cadena := cadena || registro.des_cuenta; -- cuenta destino

      longitud := LENGTH(registro.des_cuenta);
      longitud := 16 - longitud;

      if (longitud > 0) then
        for idx in 1 .. longitud loop
          cadena := cadena || ' ';
        end loop;
      end if;

      cadena := cadena || 'N'; -- tipo identificacion destino
      cadena := cadena || '000000' || registro.des_nit; -- identificacion destino

      -- mensaje respuesta
      for idx in 1 .. 100 loop
        cadena := cadena || ' ';
      end loop;

      cadena := cadena || '999'; -- codigo respuesta

      longitud := LENGTH(cadena);
      longitud := 250 - longitud;

      -- filler
      for idx in 1 .. longitud loop
        cadena := cadena || '0';
      end loop;

      utl_file.put_line(archivo, cadena, true);
      numreg   := numreg + 1;
      vlrTotal := vlrTotal + registro.valor;
    end loop;

    cadena := '9'; -- tipo registro
    cadena := cadena || aaaammdd; -- fecha generacion

    strValor := trim(to_char(numreg - 1, '00000000'));
    cadena   := cadena || strValor; -- numero registro

    strValor := trim(to_char(vlrTotal * 100, '000000000000000000'));
    cadena   := cadena || strValor; -- valor

    longitud := LENGTH(cadena);
    longitud := 250 - longitud;

    -- filler
    for idx in 1 .. longitud loop
      cadena := cadena || '0';
    end loop;

    utl_file.put_line(archivo, cadena, true);

    utl_file.fclose(archivo);

  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarArchivoAvvillasLoc] ' || SQLERRM,
            p_error);

  end generarArchivoAvvillasLoc;

PROCEDURE ejecutarScriptAvvillasLoc(p_fecha   date,
                                   p_usuario varchar2,
                                   p_error   OUT VARCHAR2) as
    aaaammdd varchar(8);
    comando  varchar(250);
    salida   varchar(250);

  begin

    aaaammdd := to_char(p_fecha, 'yyyymmdd');

    comando := '/bin/sh /trfavvillas/envioAvvillasLoc.sh ' || aaaammdd;

    --salida := Shell_Run(comando);

    if (substr(salida, 0, 2) <> '0:') then
      p_error := salida;
      return;
    end if;

  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [ejecutarScriptAvvillasLoc] ' || SQLERRM,
            p_error);

  end ejecutarScriptAvvillasLoc;

PROCEDURE generarArchivoDaviviendaLoc(p_fecha   date,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2) as

    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);

    cadena   varchar(170);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
    numTotal number;

    longitud number;

    CURSOR cuentas is
      select max(tipocuenta) as tipocuenta, cuenta
        from cta_recaudo_fcm t
       where idbanco = '51'
       group by cuenta;

  begin

    aaaammdd := to_char(p_fecha, 'yyyymmdd');
    hhmmss   := to_char(sysdate, 'hhmmss');

    for cta in cuentas loop

      select sum(valor)
        into vlrTotal
        from recaudo_local_disp_tot
       where fec_dispersion = p_fecha
         and ori_idbanco = '51'
         and ori_cuenta = cta.cuenta;

      select count(*)
        into numTotal
        from recaudo_local_disp_tot
       where fec_dispersion = p_fecha
         and ori_idbanco = '51'
         and ori_cuenta = cta.cuenta;

      archivo := utl_file.fopen('TRFDAVIVIENDA',
                                cta.cuenta || '_' || aaaammdd || '.TXT',
                                'W');

      --crear header
      cadena := 'RC'; -- tipo reg
      cadena := cadena || '000000' || '8000826650'; --nit empresa
      cadena := cadena || '0000'; --codigo-servicio
      cadena := cadena || '0000'; --codigo-subservicio

      strValor := trim(to_char(to_number(cta.cuenta), '0000000000000000'));
      cadena   := cadena || strValor;

      -- tipo cuenta origen
      if (cta.tipocuenta = 'AHO') then
        cadena := cadena || 'CA';
      end if;

      if (cta.tipocuenta = 'CTE') then
        cadena := cadena || 'CC';
      end if;

      -- banco origen
      cadena := cadena || '000051';

      -- valor
      if (vlrTotal is null) then
        vlrTotal := 0;
      end if;

      strValor := trim(to_char(vlrTotal * 100, '000000000000000000'));
      cadena   := cadena || strValor; -- valor

      -- numero registro
      strValor := trim(to_char(numTotal, '000000'));
      cadena   := cadena || strValor; -- valor

      cadena := cadena || aaaammdd; -- fecha proceso

      cadena := cadena || '000000'; -- hora proceso
      cadena := cadena || '0000'; -- codigo-operador
      cadena := cadena || '9999'; -- respuesta-proceso

      cadena := cadena || '00000000'; -- fech-generacion
      cadena := cadena || '000000'; -- hora generacion
      cadena := cadena || '00'; -- ind-inscripcion
      cadena := cadena || '01'; -- tipo-identificacion
      cadena := cadena || '000000000000'; -- numero-cliente
      cadena := cadena || '0000'; -- oficina-rec-emp
      cadena := cadena || '0000000000000000000000000000000000000000'; -- filler

      utl_file.put_line(archivo, cadena, true);
      for reg in (select fec_dispersion,
                         concepto,
                         ori_idbanco,
                         ori_tipocuenta,
                         ori_cuenta,
                         ori_nit,
                         des_idbanco,
                         des_tipocuenta,
                         desencriptar(des_cuenta) as des_cuenta,
                         des_nit,
                         valor,
                         referenciatrf
                    from recaudo_local_disp_tot
                   where fec_dispersion = p_fecha
                     and ori_idbanco = '51'
                     and ori_cuenta = cta.cuenta)

       loop
        cadena := 'TR000000' || reg.des_nit; -- tipo registro

        -- nro referencia
        cadena := cadena || '0000000000000000';

        -- cuenta destino
        strValor := trim(to_char(to_number(reg.des_cuenta),
                                 '0000000000000000'));
        cadena   := cadena || strValor;

        -- tipo cuenta destino
        if (reg.des_tipocuenta = 'AHO') then
          cadena := cadena || 'CA';
        end if;

        if (reg.des_tipocuenta = 'CTE') then
          cadena := cadena || 'CC';
        end if;

        if (reg.des_idbanco = '50') then
          cadena := cadena || '000051'; --banco davivienda
        else
          cadena := cadena || '0000' || reg.des_idbanco; --banco destino
        end if;

        strValor := trim(to_char(reg.valor * 100, '000000000000000000'));
        cadena   := cadena || strValor; -- valor

        cadena := cadena || '000000'; -- numero talon
        cadena := cadena || '01'; -- tipo ide destino
        cadena := cadena || '1'; -- Validar traslados a ACH
        cadena := cadena || '9999'; -- respuesta traslado
        cadena := cadena || '0000000000000000000000000000000000000000'; --mensaje
        cadena := cadena || '000000000000000000'; -- valor acumulado
        cadena := cadena || '00000000'; --fecha a
        cadena := cadena || '0000'; -- oficina-rec-det
        cadena := cadena || '0000'; -- motivo-det
        cadena := cadena || '0000000'; -- filler

        utl_file.put_line(archivo, cadena, true);

      end loop;

      utl_file.fclose(archivo);
    end loop;

  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarArchivoDaviviendaLoc] ' || SQLERRM,
            p_error);

  end generarArchivoDaviviendaLoc;

PROCEDURE ejecutarScriptDaviviendaLoc(p_fecha   date,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2) as
    aaaammdd varchar(8);
    comando  varchar(250);
    salida   varchar(250);

  begin

    aaaammdd := to_char(p_fecha, 'yyyymmdd');

    comando := '/bin/sh /trfdavivienda/envioDaviviendaLoc.sh ' || aaaammdd;

    --salida := Shell_Run(comando);

    if (substr(salida, 0, 2) <> '0:') then
      p_error := salida;
      return;
    end if;

  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [ejecutarScriptDaviviendaLoc] ' || SQLERRM,
            p_error);

  end ejecutarScriptDaviviendaLoc;
end PK_ENVIO;
/

prompt
prompt Creating package body PK_NOVDEV
prompt ===============================
prompt
create or replace package body simit.PK_NOVDEV is
  PROCEDURE i_NovDevolucion(
                            
                            V_TIPOIDENTIFICACION VARCHAR2,
                            V_IDENTIFICACION     NUMBER,
                            V_NOMBRE             VARCHAR2,
                            V_IDBANCO            VARCHAR2,
                            V_TIPOCUENTA         VARCHAR2,
                            V_CUENTA             VARCHAR2,
                            V_CUENTAREC          VARCHAR2,
                            V_IDMUNICIPIO        VARCHAR2,
                            V_IDCONCESIONARIO    VARCHAR2,
                            V_INDTIPO            VARCHAR2,
                            V_DNS                VARCHAR2,
                            V_MOTIVO             VARCHAR2,
                            
                            V_VDEVOLUCION NUMBER,
                            V_VADICIONAL  NUMBER,
                            V_INDIVA      VARCHAR2,
                            V_INDRETE     VARCHAR2,
                            
                            V_VCONCESIONARIO       NUMBER,
                            V_VFCM                 NUMBER,
                            V_VFONDOCOBERTURAFCM   NUMBER,
                            V_VFONDOCOBERTURALIQ   NUMBER,
                            V_VEQUILIBRIOECONOMICO NUMBER,
                            V_VPOLCA               NUMBER,
                            V_VFCMPOLCA            NUMBER,
                            V_VSEVIAL3             NUMBER,
                            V_VSEVIAL27            NUMBER,
                            V_VMUNICIPIO           NUMBER,
                            V_VFCMCONTRAVENCIONAL  NUMBER,
                            V_VCONCONTRAVENCIONAL  NUMBER,
                            V_FECHA_ACT_ANO        NUMBER,
                            V_FECHA_ACT_MES        NUMBER,
                            V_FECHA_ACT_DIA        NUMBER,
                            
                            V_NUMLIQ VARCHAR2,
                            
                            V_TIPOIDENTIFICACION1 VARCHAR2,
                            V_IDENTIFICACION1     NUMBER,
                        
                            V_FECHA_LIQ_ANO        NUMBER,
                            V_FECHA_LIQ_MES        NUMBER,
                            V_FECHA_LIQ_DIA        NUMBER,
                            
                            V_USUARIO VARCHAR2,
                            V_ERROR   OUT VARCHAR2,
                            V_NOVEDAD OUT VARCHAR2
                            
                            ) AS
  
    w_fecha_act       date;
    w_fecha_liq       date;
    
    numNovedad        number;
    m_dias_activacion number;
    min_fecha_act     date;
    correo_usuario    varchar(100);
    correo_fcm        varchar(100);
  
    w_iva              number;
    w_retencion_fuente number;
    w_timbre           number;
  
    v_vIvaContrConc number;
    v_vIvaContrFcm  number;
    v_retecontr     number;
    v_vIvasevial27  number;
    v_vIvaFcmPolca  number;
    v_vTimbreSevial27 number;
    v_vReteSevial27 number;

    v_vSevialNeto number;
    v_vFcmPolcaNeto number;
    v_vFcmConNeto number;
    v_vOpeConNeto number;
    v_vMunNeto number;
    v_vPolcaNeto number;
      
    v_vReteContr number;
  
    v_idbancoRec         char(2);
    v_idConcesionarioZon char(2);
  
    numReg number;
  
  BEGIN
  
    select count(*) into numReg from fcm where nit_fcm = '8000826650';
  
    if (numReg = 0) then
      V_ERROR := 'Se deben crear paramatros fcm';
      return;
    
    end if;
  
    select iva, retencion_fuente, impuesto_timbre_tercero
      into w_iva, w_retencion_fuente, w_timbre
      from fcm
     where nit_fcm = '8000826650';
  
    select count(*)
      into numReg
      from person
     where idperson = TO_NUMBER(V_USUARIO);
  
    if (numReg = 0) then
      V_ERROR := 'Se deben crear usuario';
      return;
    
    end if;
  
    select mail
      into correo_usuario
      from person
     where idperson = TO_NUMBER(V_USUARIO);
  
    select substr(correo, 0, 100)
      into correo_fcm
      from fcm
     where nit_fcm = '8000826650';
  
    select count(*)
      into numReg
      from cta_recaudo_concesionario
     where cuenta = V_CUENTAREC
       and idconcesionario = V_IDCONCESIONARIO;
  
    if (numReg = 0) then
      V_ERROR := 'Cuenta de recaudo no existe para el concesionario';
      return;
    end if;
  
    select max(idbanco)
      into v_idbancoRec
      from cta_recaudo_concesionario
     where cuenta = V_CUENTAREC;
  
    select idconcesionario
      into v_idConcesionarioZon
      from municipio
     where idmunicipio = V_IDMUNICIPIO;
  
    select TO_DATE(V_FECHA_ACT_ANO || '-' || V_FECHA_ACT_MES || '-' ||
                   V_FECHA_ACT_DIA,
                   'YYYY-MM-DD')
      into w_fecha_act
      from DUAL;
  
      select TO_DATE(V_FECHA_LIQ_ANO || '-' || V_FECHA_LIQ_MES || '-' ||
                   V_FECHA_LIQ_DIA,
                   'YYYY-MM-DD')
      into w_fecha_liq
      from DUAL;
      
    select dias_activacion into m_dias_activacion from fcm;
  
    IF m_dias_activacion is null THEN
      V_ERROR := 'Error en parametrización (días activación)';
      return;
    end if;
  
    min_fecha_act := fn_fec_dispersion(to_date(to_char(sysdate,'YYYY-MM-DD'),'YYYY-MM-DD'),m_dias_activacion,0,'99999999');
  
    IF min_fecha_act > w_fecha_act then
      V_ERROR := 'Fecha Activación Inválida';
      return;
    end if;
  
    if w_fecha_act < sysdate then
      V_ERROR := 'Fecha Activación debe ser superior a la del sistema';
      return;
    end if;
  
    select seq_novedad.Nextval into numNovedad from dual;
  
    v_vIvaContrConc := 0;
    v_vIvaContrFcm  := 0;
    v_vRetecontr    := 0;
    v_vIvasevial27  := 0;
    v_vIvaFcmPolca  := 0;
    v_vTimbreSevial27 := 0;
    v_vReteSevial27 := 0;
    
    v_vSevialNeto := 0;
    v_vFcmPolcaNeto := 0;
    v_vFcmConNeto := 0;
    v_vOpeConNeto := 0;
    v_vMunNeto := 0;
    v_vPolcaNeto := 0;
    
  
    if V_INDIVA = 'S' then
      v_vIvaContrConc := round(v_vconcontravencional * w_iva / 100, 0);
      v_vIvaContrFcm  := round(v_vfcmcontravencional * w_iva / 100, 0);
      v_vIvasevial27  := round(V_VSEVIAL27 * w_iva / 100, 0);
      v_vIvaFcmPolca  := round(V_VFCMPOLCA * w_iva / 100, 0);
      v_vTimbreSevial27 := round(V_VSEVIAL27 * w_timbre / 100, 0);
      v_vReteSevial27 := round(V_VSEVIAL27 * w_retencion_fuente / 100, 0);
    end if;
  
    if V_INDRETE = 'S' then
      v_vRetecontr := round(v_vconcontravencional * w_retencion_fuente / 100, 0);
    end if;
    
    
  
    insert into novdevolucion
      (tipoidentificacion,
       identificacion,
       nombre,
       idbanco,
       tipocuenta,
       cuenta,
       cuentaRec,
       idmunicipio,
       idconcesionario,
       indtipo,
       motivo,
       vdevolucion,
       vconcesionario,
       vfcm,
       vfondocoberturafcm,
       vfondocoberturaliq,
       vequilibrioeconomico,
       vpolca,
       vfcmpolca,
       vsevial,
       vmunicipio,
       vfcmcontravencional,
       vconcontravencional,
       tiponov,
       numeronov,
       fechanov,
       usuarionov,
       estadonov,
       fechaact,
       vadicional,
       indiva,
       indrete,
       dnsavvillas,
       tipoidentificacion1,
       identificacion1,
       numLiquidacion,
       vsevial27,
       vIvaContrConc,
       vIvaContrFcm,
       vIvasevial27,
       vIvaFcmPolca,
       vReteContr,
       idbancoRec,
       idConcesionarioZon,
       fecPagLiq,
       vSevialNeto,
       vFcmPolcaNeto,
       vFcmConNeto,
       vOpeConNeto,
       vMunNeto,
       vPolcaNeto,
       vTimbre,
       vRetef)
    values
      (v_tipoidentificacion,
       v_identificacion,
       v_nombre,
       v_idbanco,
       v_tipocuenta,
       v_cuenta,
       v_cuentaRec,
       v_idmunicipio,
       v_idconcesionario,
       v_indtipo,
       v_motivo,
       v_vdevolucion,
       v_vconcesionario,
       v_vfcm,
       v_vfondocoberturafcm,
       v_vfondocoberturaliq,
       v_vequilibrioeconomico,
       v_vpolca,
       v_vfcmpolca,
       v_vsevial3,
       v_vmunicipio,
       v_vfcmcontravencional,
       v_vconcontravencional,
       '09', --v_tiponov, NOVEDAD DEVOLUCION
       numNovedad, -- numeronov,
       sysdate, --  fechanov,
       V_usuario, -- usuarionov
       'INGRESADA', -- estadonov,
       w_fecha_act, --  fechaact
       v_vadicional,
       v_indiva,
       v_indrete,
       V_DNS,
       v_tipoidentificacion1,
       v_identificacion1,
       V_NUMLIQ,
       V_VSEVIAL27,
       v_vIvaContrConc,
       v_vIvaContrFcm,
       v_vIvasevial27,
       v_vIvaFcmPolca,
       v_vReteContr,
       v_idbancoRec,
       v_idConcesionarioZon,
       w_fecha_liq,
       v_vsevial3 + v_vSevial27 - v_vTimbreSevial27 - v_vReteSevial27 + v_vIvasevial27,
       DECODE(v_idconcesionario,'05',0,v_vfcmpolca + v_vIvaFcmPolca + v_vTimbreSevial27 + v_vReteSevial27), 
       v_vfcmcontravencional + v_vIvaContrFcm + v_vReteContr,
       v_vconcontravencional + v_vIvaContrConc - v_vReteContr, 
       v_vmunicipio + v_vadicional - v_vIvaContrFcm - v_vIvaContrConc,
       v_vpolca - v_vIvasevial27 - v_vIvaFcmPolca,
       v_vTimbreSevial27,
       v_vReteSevial27);
  
    V_ERROR   := MSG_INS_OK;
    V_NOVEDAD := '09-' || to_char(numNovedad, '0000000');
  
    sp_envionotificacion(gruporecibe => 4,
                         grupocopia  => -1,
                         asunto      => 'Notificación de Novedad de Devolucion:  ' ||
                                        V_NOVEDAD,
                         mensaje     => 'Se ha creado una novedad de devolucion. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                        V_NOVEDAD || ' . Muchas gracias',
                         p_usuario   => V_USUARIO);
    commit;
  
    sp_log(V_USUARIO, 'i_NovDevolucion', V_NOVEDAD);
  
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            V_USUARIO || ' [i_NovDevolucion] ' || SQLERRM,
            V_ERROR);
    
  END i_NovDevolucion;

  PROCEDURE q_NovDevolucion(V_TIPONOV              VARCHAR2,
                            V_NUMERONOV            VARCHAR2,
                            V_USUARIO              VARCHAR2,
                            V_TIPOIDENTIFICACION   OUT VARCHAR2,
                            V_IDENTIFICACION       OUT NUMBER,
                            V_NOMBRE               OUT VARCHAR2,
                            V_IDBANCO              OUT VARCHAR2,
                            V_TIPOCUENTA           OUT VARCHAR2,
                            V_CUENTA               OUT VARCHAR2,
                            V_TIPOIDENTIFICACIONC  OUT VARCHAR2,
                            V_IDENTIFICACIONC      OUT NUMBER,
                            V_DNS                  OUT VARCHAR2,
                            V_CUENTAREC            OUT VARCHAR2,
                            V_IDMUNICIPIO          OUT VARCHAR2,
                            V_IDCONCESIONARIO      OUT VARCHAR2,
                            V_INDTIPO              OUT VARCHAR2,
                            V_NUMLIQUIDACION       OUT VARCHAR2,
                            V_FECLIQ               OUT DATE,
                            V_MOTIVO               OUT VARCHAR2,
                            V_INDIVA               OUT VARCHAR2,
                            V_INDRETE              OUT VARCHAR2,
                            V_VDEVOLUCION          OUT NUMBER,
                            V_VADICIONAL           OUT NUMBER,
                            V_VCONCESIONARIO       OUT NUMBER,
                            V_VFCM                 OUT NUMBER,
                            V_VFONDOCOBERTURAFCM   OUT NUMBER,
                            V_VFONDOCOBERTURALIQ   OUT NUMBER,
                            V_VEQUILIBRIOECONOMICO OUT NUMBER,
                            V_VSEVIAL              OUT NUMBER,
                            V_VPOLCA               OUT NUMBER,
                            V_VFCMPOLCA            OUT NUMBER,
                            V_SEVIAL27             OUT NUMBER,
                            V_VMUNICIPIO           OUT NUMBER,
                            V_VFCMCONTRAVENCIONAL  OUT NUMBER,
                            V_VCONCONTRAVENCIONAL  OUT NUMBER,
                            V_FECHAACT             OUT DATE,
                            V_ERROR                OUT VARCHAR2) as
  
    numReg number;
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(V_USUARIO, V_ERROR, 'pk_proc');
  
    IF not V_ERROR is null THEN
      return;
    end if;
  
    select count(*)
      into numReg
      from novdevolucion
     where tiponov = v_tiponov
       and numeronov = v_numeronov;
  
    if (numreg = 0) then
      V_ERROR := 'Novedad no existe';
      return;
    end if;
  
    select tipoidentificacion,
           identificacion,
           nombre,
           idbanco,
           tipocuenta,
           cuenta,
           idmunicipio,
           idconcesionario,
           indtipo,
           motivo,
           vdevolucion,
           vconcesionario,
           vfcm,
           vfondocoberturafcm,
           vfondocoberturaliq,
           vequilibrioeconomico,
           vpolca,
           vfcmpolca,
           vsevial,
           vmunicipio,
           vfcmcontravencional,
           vconcontravencional,
           cuentarec,
           fechaAct,
           vadicional,
           TIPOIDENTIFICACION1,
           IDENTIFICACION1,
           DNSAVVILLAS,
           NUMLIQUIDACION, 
           FECPAGLIQ,
           INDIVA,
           INDRETE,
           VSEVIAL27

      into v_tipoidentificacion,
           v_identificacion,
           v_nombre,
           v_idbanco,
           v_tipocuenta,
           v_cuenta,
           v_idmunicipio,
           v_idconcesionario,
           v_indtipo,
           v_motivo,
           v_vdevolucion,
           v_vconcesionario,
           v_vfcm,
           v_vfondocoberturafcm,
           v_vfondocoberturaliq,
           v_vequilibrioeconomico,
           v_vpolca,
           v_vfcmpolca,
           v_vsevial,
           v_vmunicipio,
           v_vfcmcontravencional,
           v_vconcontravencional,
           v_cuentarec,
           v_fechaAct,
           V_VADICIONAL,
           V_TIPOIDENTIFICACIONC,
           V_IDENTIFICACIONC,
           V_DNS,
           V_NUMLIQUIDACION, 
           V_FECLIQ,
           V_INDIVA,
           V_INDRETE,
           V_SEVIAL27          
      from novdevolucion
     where tiponov = v_tiponov
       and numeronov = v_numeronov;
  
    v_error := 'Consulta Exitosa';
  
    sp_log(V_USUARIO, 'q_NovDevolucion', V_NUMERONOV);
  
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            V_USUARIO || ' [q_NovDevolucion] ' || SQLERRM,
            V_ERROR);
    
  END q_NovDevolucion;

  PROCEDURE u_NovdevolucionEst(p_tiponov   varchar2,
                               p_numeronov varchar2,
                               p_usuario   varchar2,
                               p_estado    varchar2,
                               p_error     OUT VARCHAR2) is
  
    estado_act varchar2(100);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select TRIM(UPPER(estadonov))
          into estado_act
          from Novdevolucion
         where tiponov = p_tiponov
           and numeronov = to_number(p_numeronov);
      
        IF estado_act = p_estado THEN
          p_error := 'Novedad ya actualizada';
          return;
        END IF;
      
        IF p_estado = 'VALIDADA' THEN
          update Novdevolucion
             set estadonov  = p_estado,
                 usuarioval = p_usuario,
                 fechaval   = sysdate
           where tiponov = p_tiponov
             and numeronov = to_number(p_numeronov);
        ELSE
          IF p_estado = 'ANULADA' THEN
            update Novdevolucion
               set estadonov   = p_estado,
                   usuarioanul = p_usuario,
                   fechaanul   = sysdate
             where tiponov = p_tiponov
               and numeronov = to_number(p_numeronov);
          ELSE
            update Novdevolucion
               set estadonov = p_estado
             where tiponov = p_tiponov
               and numeronov = to_number(p_numeronov);
          END IF;
        END IF;
      
        IF p_estado = 'ANULADA' THEN
          insert into hist_vobo
            (idvobo,
             tipo,
             accion,
             usuario,
             fecha,
             referencia1,
             referencia2,
             referencia3,
             referencia4)
          values
            (seq_vobo.nextval,
             'NOVEDAD DEVOLUCION',
             'RECHAZADO',
             p_usuario,
             sysdate,
             p_tiponov || '-' || p_numeronov,
             p_estado,
             0,
             0);
        
        ELSE
          insert into hist_vobo
            (idvobo,
             tipo,
             accion,
             usuario,
             fecha,
             referencia1,
             referencia2,
             referencia3,
             referencia4)
          values
            (seq_vobo.nextval,
             'NOVEDAD DEVOLUCION',
             'APROBADO',
             p_usuario,
             sysdate,
             p_tiponov || '-' || p_numeronov,
             p_estado,
             0,
             0);
        END IF;
      
        commit;
      
        if (p_estado = 'VOBOFINANCIERA') THEN
          sp_envionotificacion(gruporecibe => 5,
                               grupocopia  => -1,
                               asunto      => 'Notificación de Novedad de Devolucion:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha creado una novedad de devolucion. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        if (p_estado = 'VOBOSIMIT') THEN
          sp_envionotificacion(gruporecibe => 6,
                               grupocopia  => -1,
                               asunto      => 'Notificación de Novedad de Devolucion:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha creado una novedad de Devolucion. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        if (p_estado = 'VALIDADA') THEN
          sp_envionotificacion(gruporecibe => 7,
                               grupocopia  => -1,
                               asunto      => 'Notificación de Novedad de Devolucion:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha aprobado una novedad de Devolucion. Por favor informar a banco novedad. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        if (p_estado = 'ANULADA') THEN
          sp_envionotificacion(gruporecibe => 3,
                               grupocopia  => -1,
                               asunto      => 'Notificación de ANULACION Novedad de Devolucion:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha ANULADO una novedad de Devolucion. Por favor verificar informacion. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        p_error := 'Actualización Exitosa';
      
        sp_log(p_usuario,
               'u_NovdevolucionEst',
               p_tiponov || '-' || p_numeronov || '-' || p_estado);
      
        commit;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO' || p_tiponov || '-' ||
                     p_numeronov;
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_NovdevolucionEst] ' || SQLERRM,
            p_error);
    
  END u_NovdevolucionEst;

  PROCEDURE q_NovDevolucionSug(V_USUARIO              VARCHAR2,
                               V_CUENTAREC            VARCHAR2,
                               V_IDMUNICIPIO          VARCHAR2,
                               V_IDCONCESIONARIO      VARCHAR2,
                               V_INDTIPO              VARCHAR2,
                               V_VDEVOLUCION          NUMBER,
                               V_ADICIONAL            NUMBER,
                               V_NUMLIQ               VARCHAR2,
                               V_INDIVA               VARCHAR2,
                               V_INDRETE              VARCHAR2,
                               V_FECLIQ               DATE,
                               V_VCONCESIONARIO       OUT NUMBER,
                               V_VFCM                 OUT NUMBER,
                               V_VFONDOCOBERTURAFCM   OUT NUMBER,
                               V_VFONDOCOBERTURALIQ   OUT NUMBER,
                               V_VEQUILIBRIOECONOMICO OUT NUMBER,
                               V_VPOLCA               OUT NUMBER,
                               V_VFCMPOLCA            OUT NUMBER,
                               V_VSEVIAL3             OUT NUMBER,
                               V_VSEVIAL27            OUT NUMBER,
                               V_VMUNICIPIO           OUT NUMBER,
                               V_VFCMCONTRAVENCIONAL  OUT NUMBER,
                               V_VCONCONTRAVENCIONAL  OUT NUMBER,
                               V_ERROR                OUT VARCHAR2) is
  
    V_VALORBASE NUMBER;
    V_NUMREG    NUMBER;
  
    V_VPOLCABASE    NUMBER;
    V_VFCMPOLCABASE NUMBER;
    V_VSEVIALBASE   NUMBER;
    V_SALARIO NUMBER;
    
    V_INDRETRO NUMBER;
  begin
  
    select count(*)
    into V_NUMREG
    from salario_minimo
    where anho = to_number(to_char(V_FECLIQ, 'yyyy'));
    
    if ( v_numreg = 0 ) then
       v_error := 'Salario Minimo no definido para el año ' || to_char(v_fecliq,'yyyy');
       return;
    end if;
    
    select valor
    into v_salario
    from salario_minimo
    where anho = to_number( to_char(v_fecliq,'yyyy'));
    
    select indretroactividad
    into V_INDRETRO
    from municipio
    where idmunicipio = v_idmunicipio;
    
    
    v_error := 'OK';
  
    if (V_INDTIPO = 'SIMIT') then
    
      V_VALORBASE            := ROUND((V_VDEVOLUCION - V_ADICIONAL) * 10 / 100,
                                      2);
                                      
      if ( V_VALORBASE < v_salario and v_indretro = 0 ) then
          V_VALORBASE := V_SALARIO;
      end if;                      
                
      V_VCONCESIONARIO       := ROUND(V_VALORBASE * 6.5 / 10, 2);
      V_VFCM                 := ROUND(V_VALORBASE * 2.5 / 10, 2);
      V_VFONDOCOBERTURAFCM   := ROUND(V_VALORBASE * 0.5 / 10, 2);
      V_VFONDOCOBERTURALIQ   := ROUND(V_VALORBASE * 0.5 / 10, 2);
      V_VEQUILIBRIOECONOMICO := 0.0;
      V_VFONDOCOBERTURALIQ   := V_VALORBASE - V_VCONCESIONARIO - V_VFCM -
                                V_VFONDOCOBERTURAFCM;
    
      IF (V_IDCONCESIONARIO = '05') THEN
        V_VCONCESIONARIO       := ROUND(V_VALORBASE * 6.45 / 10, 2);
        V_VFCM                 := ROUND(V_VALORBASE * 1.05 / 10, 2);
        V_VFONDOCOBERTURAFCM   := 0.0;
        V_VFONDOCOBERTURALIQ   := 0.0;
        V_VEQUILIBRIOECONOMICO := ROUND(V_VALORBASE * 2.5 / 10, 2);
      
        V_VEQUILIBRIOECONOMICO := V_VALORBASE - V_VCONCESIONARIO - V_VFCM;
      
      END IF;
    
      IF (ABS(V_VFONDOCOBERTURAFCM - V_VFONDOCOBERTURALIQ) = 0.02) THEN
        V_VFONDOCOBERTURAFCM := V_VFONDOCOBERTURAFCM - 0.01;
        V_VFONDOCOBERTURALIQ := V_VFONDOCOBERTURALIQ + 0.01;
      END IF;
    
      V_VMUNICIPIO := V_VDEVOLUCION - V_VALORBASE;
    
      V_VPOLCA    := 0.0;
      V_VFCMPOLCA := 0.0;
      V_VSEVIAL3  := 0.0;
      V_VSEVIAL27 := 0.0;
    
      V_VFCMCONTRAVENCIONAL := 0.0;
      V_VCONCONTRAVENCIONAL := 0.0;
    
      SELECT COUNT(*)
        INTO V_NUMREG
        FROM p_dispersion_municipio
       WHERE idmunicipio = V_IDMUNICIPIO
         AND fcm_contravencional_s > 0;
    
      IF (V_NUMREG > 0) THEN
      
        V_VALORBASE           := V_VDEVOLUCION - V_ADICIONAL - V_VALORBASE;
        V_VFCMCONTRAVENCIONAL := ROUND(V_VALORBASE * 9.5 / 90, 2);
        V_VCONCONTRAVENCIONAL := ROUND(V_VALORBASE * 9.5 / 90, 2);
        V_VMUNICIPIO          := ROUND(V_VALORBASE * 71 / 90, 2);
      
        V_VCONCONTRAVENCIONAL := V_VALORBASE - V_VFCMCONTRAVENCIONAL -
                                 V_VMUNICIPIO;
      
        V_VMUNICIPIO := V_VMUNICIPIO + V_ADICIONAL;
      
      END IF;
    
    end if;
  
    if (V_INDTIPO = 'POLCA') then
    
      V_VALORBASE            := ROUND((V_VDEVOLUCION - V_ADICIONAL) * 10 / 100,
                                      2);

      if ( V_VALORBASE < v_salario and v_indretro = 0 ) then
          V_VALORBASE := V_SALARIO;
      end if;                      

      V_VCONCESIONARIO       := ROUND(V_VALORBASE * 3.25 / 10, 2);
      V_VFCM                 := ROUND(V_VALORBASE * 3.25 / 10, 2);
      V_VFONDOCOBERTURAFCM   := ROUND(V_VALORBASE * 0.25 / 10, 2);
      V_VFONDOCOBERTURALIQ   := ROUND(V_VALORBASE * 0.25 / 10, 2);
      V_VEQUILIBRIOECONOMICO := 0.0;
      V_VSEVIAL3             := ROUND(V_VALORBASE * 3.0 / 10, 2);
    
      V_VFONDOCOBERTURALIQ := V_VALORBASE - V_VCONCESIONARIO - V_VFCM -
                              V_VFONDOCOBERTURAFCM - V_VSEVIAL3;
    
      IF (V_IDCONCESIONARIO = '05') THEN
        V_VCONCESIONARIO       := ROUND(V_VALORBASE * 3.23 / 10, 2);
        V_VFCM                 := 0.0;
        V_VFONDOCOBERTURAFCM   := 0.0;
        V_VFONDOCOBERTURALIQ   := 0.0;
        V_VEQUILIBRIOECONOMICO := ROUND(V_VALORBASE * 3.77 / 10, 2);
        V_VSEVIAL3             := ROUND(V_VALORBASE * 3.0 / 10, 2);
      
        V_VEQUILIBRIOECONOMICO := V_VALORBASE - V_VCONCESIONARIO -
                                  V_VSEVIAL3;
      
      END IF;
    
      IF (ABS(V_VFONDOCOBERTURAFCM - V_VFONDOCOBERTURALIQ) = 0.02) THEN
        V_VFONDOCOBERTURAFCM := V_VFONDOCOBERTURAFCM - 0.01;
        V_VFONDOCOBERTURALIQ := V_VFONDOCOBERTURALIQ + 0.01;
      END IF;
    
      V_VPOLCABASE := ROUND((V_VDEVOLUCION - V_ADICIONAL - V_VALORBASE ) / 2, 2);
    
      V_VPOLCA    := ROUND(V_VPOLCABASE * 40.5 / 45, 2);
      V_VFCMPOLCA := ROUND(V_VPOLCABASE * 1.8 / 45, 2);
      V_VSEVIAL27 := ROUND(V_VPOLCABASE * 2.7 / 45, 2);
    
      V_VSEVIAL27 := V_VPOLCABASE - V_VPOLCA - V_VFCMPOLCA;
      
      IF (V_IDCONCESIONARIO = '05') THEN
          V_VEQUILIBRIOECONOMICO := V_VEQUILIBRIOECONOMICO + V_VFCMPOLCA;
          V_VFCMPOLCA := 0;
      END IF;
      
      V_VFCMCONTRAVENCIONAL := 0.0;
      V_VCONCONTRAVENCIONAL := 0.0;
    
      V_VMUNICIPIO := V_VPOLCABASE + V_ADICIONAL;
    
      SELECT COUNT(*)
        INTO V_NUMREG
        FROM p_dispersion_municipio
       WHERE idmunicipio = V_IDMUNICIPIO
         AND fcm_contravencional_s > 0;
    
      IF (V_NUMREG > 0) THEN
      
        V_VALORBASE           := (V_VDEVOLUCION - V_ADICIONAL - V_VALORBASE) / 2;
        V_VFCMCONTRAVENCIONAL := ROUND(V_VALORBASE * 9.5 / 45, 2);
        V_VCONCONTRAVENCIONAL := ROUND(V_VALORBASE * 9.5 / 45, 2);
        V_VMUNICIPIO          := ROUND(V_VALORBASE * 26 / 45, 2);
      
        V_VCONCONTRAVENCIONAL := V_VALORBASE - V_VFCMCONTRAVENCIONAL -
                                 V_VMUNICIPIO;
      
        V_VMUNICIPIO := V_VMUNICIPIO + V_ADICIONAL;
      
      END IF;
    
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            V_USUARIO || ' [q_NovdevolucionSug] ' || SQLERRM,
            V_ERROR);
    
  END q_NovdevolucionSug;

  PROCEDURE contabiliza_devolucion_externo(p_feccor_ini_ano number,
                                           p_feccor_ini_mes number,
                                           p_feccor_ini_dia number,
                                           p_usuario        varchar2,
                                           p_error          OUT VARCHAR2) AS
    w_fec_cor_ini date;
    w_registros   number;
  
    w_fec_cor_ini_s char(8);
    w_concepto      varchar(250);
  
    tipoCon char(3);
  
    zt char(2);
    ze char(2);
  
    pfc1 char(4);
    fcm1 char(4);
    cop  char(3);
    c50  char(2);
    c40  char(2);
    c31  char(2);
    c01  char(2);
    c11  char(2);
    c21  char(2);
  
    v5 char(2);
  
    c20111 char(5);
    c20112 char(5);
    c20113 char(5);
    c20114 char(5);
  
    c20211 char(5);
    c20212 char(5);
    c20213 char(5);
    c20214 char(5);
  
    c20121 char(5);
    c20122 char(5);
    c20123 char(5);
    c20124 char(5);
  
    c20221 char(5);
    c20222 char(5);
    c20223 char(5);
    c20224 char(5);
  
    c201213 char(6);
    c202213 char(6);
    c200101 char(6);
  
    c200102 char(6);
    c100761 char(6);
    
    c201111 char(6);
    c201121 char(6);
    c201215 char(6);
    c201221 char(6);
  
    cZ000 char(4);
    cZ002 char(4);
    cZ005 char(4);
  
    c1401020102 char(10);
    c8000826650 char(10);
    c5810900202 char(10);
    c4810900202 char(10);
    c2905901001 char(10);
    c2905901002 char(10);
    c2905901003 char(10);
    c2905901004 char(10);
    c1470909002 char(10);
    c5111110112 char(10);
    c5815930102 char(10);
    c5815930101 char(10);
    c4815590102 char(10);
  
    c1470900601 char(10);
    c2905901005 char(10);
    c2905901009 char(10);
    c1470909003 char(10);
    cYYYYYYYYYY char(10);
  
  BEGIN
    zt := FN_DAR_PARCONTA('ZT');
    ze := FN_DAR_PARCONTA('ZE');
  
    pfc1 := FN_DAR_PARCONTA('PFC1');
    fcm1 := FN_DAR_PARCONTA('FCM1');
    cop  := FN_DAR_PARCONTA('COP');
  
    c50 := FN_DAR_PARCONTA('50');
    c40 := FN_DAR_PARCONTA('40');
    c31 := FN_DAR_PARCONTA('31');
    c01 := FN_DAR_PARCONTA('01');
    c11 := FN_DAR_PARCONTA('11');
    c21 := FN_DAR_PARCONTA('21');
  
    v5 := FN_DAR_PARCONTA('V5');
  
    c20111 := FN_DAR_PARCONTA('20111');
    c20112 := FN_DAR_PARCONTA('20112');
    c20113 := FN_DAR_PARCONTA('20113');
    c20114 := FN_DAR_PARCONTA('20114');
  
    c20211 := FN_DAR_PARCONTA('20211');
    c20212 := FN_DAR_PARCONTA('20212');
    c20213 := FN_DAR_PARCONTA('20213');
    c20214 := FN_DAR_PARCONTA('20214');
  
    c20121 := FN_DAR_PARCONTA('20121');
    c20122 := FN_DAR_PARCONTA('20122');
    c20123 := FN_DAR_PARCONTA('20123');
    c20124 := FN_DAR_PARCONTA('20124');
  
    c20221  := FN_DAR_PARCONTA('20221');
    c20222  := FN_DAR_PARCONTA('20222');
    c20223  := FN_DAR_PARCONTA('20223');
    c20224  := FN_DAR_PARCONTA('20224');
    c200101 := FN_DAR_PARCONTA('200101');
    c200102 := FN_DAR_PARCONTA('200102');
    c202213 := FN_DAR_PARCONTA('202213');
    c201213 := FN_DAR_PARCONTA('201213');
    c201111 := FN_DAR_PARCONTA('201111');
    c201121 := FN_DAR_PARCONTA('201121');
    c201215 := FN_DAR_PARCONTA('201215');
    c201221 := FN_DAR_PARCONTA('201221');
  
    c100761 := FN_DAR_PARCONTA('100761');
  
    cZ000 := FN_DAR_PARCONTA('Z000');
    cZ002 := FN_DAR_PARCONTA('Z002');
    cZ005 := FN_DAR_PARCONTA('Z005');
  
    c1401020102 := FN_DAR_PARCONTA('1401020102');
    c8000826650 := FN_DAR_PARCONTA('8000826650');
  
    c5810900202 := FN_DAR_PARCONTA('5810900202');
    c4810900202 := FN_DAR_PARCONTA('4810900202');
  
    c2905901001 := FN_DAR_PARCONTA('2905901001');
    c2905901002 := FN_DAR_PARCONTA('2905901002');
    c2905901003 := FN_DAR_PARCONTA('2905901003');
    c2905901004 := FN_DAR_PARCONTA('2905901004');
    c1470909002 := FN_DAR_PARCONTA('1470909002');
    c5111110112 := FN_DAR_PARCONTA('5111110112');
    c5815930102 := FN_DAR_PARCONTA('5815930102');
    c5815930101 := FN_DAR_PARCONTA('5815930101');
    c4815590102 := FN_DAR_PARCONTA('4815590102');
  
    c1470900601 := FN_DAR_PARCONTA('1470900601');
    c2905901005 := FN_DAR_PARCONTA('2905901005');
    c2905901009 := FN_DAR_PARCONTA('2905901009');
    c1470909003 := FN_DAR_PARCONTA('1470909003');
    cYYYYYYYYYY := FN_DAR_PARCONTA('YYYYYYYYYY');
  
    tipoCon := 'DEV';
  
    -- Obtiene fecha de cierre en formato ddMMyyyy
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select to_char(w_fec_cor_ini, 'ddMMyyyy')
      into w_fec_cor_ini_s
      from DUAL;
  
    -- elimina contabilizacion
    delete recaudo_externo_contabilidad
     where fechaDoc = w_fec_cor_ini_s
       and tipoContable = tipoCon;
  
    -- contabilizar valores de recuado simit
    -- and liquidador no sea simit capital
    -- and acuerdo de pago sea 0
    -- and valor contravencional sea 0
  
    w_concepto := 'DEV REC INGRESO PART CONCESIONARIO CONCESIONARIO  6,5% (6.45%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.cuentarec) as textocabezera,
             c40 as clavecontable,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable, c5815930102) as cuenta,
             r.vconcesionario as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c200102) as centrocosto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20111 || substr(r.idconcesionario, 2, 1),'') as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.idmunicipio AS asignacion,
             ('DEV REC ING PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(m.nit_m, 0, 9),substr(c.nit_c, 0, 9)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV REC INGRESO FONDO COB CONCESIONARIO ( 0,5%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c40 as clavecontable,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable, c5815930102) as cuenta,
             r.vfondocoberturaliq as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'', c200102) as centrocosto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20112 || substr(r.idconcesionario, 2, 1), '') as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV REC ING FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(m.nit_m, 0, 9),substr(c.nit_c, 0, 9) ) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV REC INGRESO EQUILIBRIO ECO ( 2,5%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c40 as clavecontable,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable, c5815930101) as cuenta,
             r.vequilibrioeconomico as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'', c200101) as centrocosto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20113 || substr(r.idconcesionario, 2, 1),'') as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV REC ING EQUILIBRIO ECO ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV REC INGRESO FCM ( 2,5% 0R 1,05%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c40 as clavecontable,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable, c5815930101) as cuenta,
             r.vfcm as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'', c200101) as centrocosto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20113 || substr(r.idconcesionario, 2, 1),'') as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV REC ING FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV REC INGRESO FONDO COB FCM ( 0,5%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c40 as clavecontable,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable,c5815930101) as cuenta,
             r.vfondocoberturafcm as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'' ,c200101) as centrocosto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20114 || substr(r.idconcesionario, 2, 1), '') as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV REC ING FONDO COB FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'CUENTA PAGO USUARIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c50 as clavecontable,
             cYYYYYYYYYY as cuenta,
             r.vdevolucion as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV-CXP USUARIO ' ||
             to_char(identificacion, '0000000000000') || ' ' ||
             to_char(numeronov, '0000000000')) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, municipio m
      
       where r.idmunicipio = m.idmunicipio
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV PARTICIPACION MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c01 as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.vmunicipio, 0) - ROUND(r.vivacontrfcm, 0) -
             ROUND(r.vivacontrconc, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV PARTICIPACION MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             c1470900601 as cuentadivergente,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion             r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_concesionario cr
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and R.CuentaRec = cr.cuenta
         and r.idbancorec = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.idconcesionario = cr.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV REC GASTO PART CONCESIONARIO REMO (6.5%, 6,45%))';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c50 as clavecontable,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c.cta_contable_liquidacion,c4815590102) as cuenta,
             r.vconcesionario as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c200102,'') as centrocosto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'', c20111 || substr(r.idconcesionario, 2, 1)) as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV REC GASTO PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(C.NIT_C, 0, 9),substr(m.nit_m, 0, 9)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV REC GASTO FONDO COB CONCESIONARIO ( 0,5%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c50 as clavecontable,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),C.CTA_CONTABLE_FONDO, c4815590102) as cuenta,
             r.vfondocoberturaliq as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c200102,'') as centrocosto,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c20112 || substr(r.idconcesionario, 2, 1)) as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV REC GASTO FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(C.NIT_C, 0, 9),substr(m.nit_m, 0, 9)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'OTRO ACREEDOR CONCESIONARIO ( 6,5% + 0,5%, 6.45%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION || 'G' as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c01 as clavecontable,
             substr(C.NIT_C, 0, 9) as cuenta,
             ROUND(R.vconcesionario, 0) + ROUND(R.vfondocoberturaliq, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV OTRO ACREEDOR ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(C.NIT_C, 0, 9) as nittercero,
             c1470900601 as cuentadivergente,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'CXC 10% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             (R.NUMLIQUIDACION || 'A') as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c11 as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.vconcesionario, 0) + ROUND(r.vfcm, 0) +
             ROUND(r.vfondocoberturafcm, 0) +
             ROUND(r.vfondocoberturaliq, 0) +
             ROUND(r.vequilibrioeconomico, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV CXC 10% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             c1401020102 as cuentadivergente,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'CXC 10% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             (R.NUMLIQUIDACION || 'A') as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c01 as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.vconcesionario, 0) + ROUND(r.vfcm, 0) +
             ROUND(r.vfondocoberturafcm, 0) +
             ROUND(r.vfondocoberturaliq, 0) +
             ROUND(r.vequilibrioeconomico, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV CXC 10% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             c1401020102 as cuentadivergente,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV PARTICIPACION CONTRAVENCIONAL concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c21 as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.vconcontravencional, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV PART CONTRAVENCIONAL ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             c2905901005 as cuentadivergente,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionarioZon = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV PARTICIPACION IVA CONTRAVENCIONAL concesionario';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c21 as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             ROUND(r.vivacontrconc, 2) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV PART IVA CONTRAVENCIONAL  ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             c2905901009 as cuentadivergente,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionarioZon = c.idconcesionario
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV PARTICIPACION IVA CONTRAVENCIONAL FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c40 as clavecontable,
             f.ctacon_impuestos as cuenta,
             r.vivacontrfcm as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV PARTICIPACION IVA CONTRAVENCIONAL FCM') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c, fcm f
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionarioZon = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PARTICIPACION CONTRAVENCIONAL FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c40 as clavecontable,
             f.ctacon_fcm as cuenta,
             vfcmcontravencional as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV PARTICIPACION CONTRAVENCIONAL FCM') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c, fcm f
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionarioZon = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV CRUCE CXC A SIMIT 19% IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             fcm1 as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c50 as clavecontable,
             c1470909003 as cuenta,
             (ROUND(r.vfcmcontravencional, 0) +
             ROUND(r.vconcontravencional, 0) + ROUND(r.vivacontrconc, 0) +
             ROUND(r.vivacontrfcm, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV CRUCE CXC A SIMIT') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c, fcm f
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionarioZon = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'DEV CRUCE CXP A SIMIT';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             'FCM1' as sociedad,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
             to_char(r.fechaaplicacion, 'MM') as periodo,
             cop as moneda,
             R.NUMLIQUIDACION as referencia,
             ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
             R.CuentaRec) as textocabezera,
             c21 as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (ROUND(r.vfcmcontravencional, 0) +
             ROUND(r.vconcontravencional, 0) + ROUND(r.vivacontrconc, 0) +
             ROUND(r.vivacontrfcm, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DEV CRUCE CXP A SIMIT') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
             cZ005 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from novdevolucion r, banco b, municipio m, concesionario c, fcm f
       where r.idbancorec = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionarioZon = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fechaaplicacion = w_fec_cor_ini
         and r.estadonov = 'ACTIVADA'
         and r.indTipo = 'SIMIT';
      
      w_concepto := 'DEV REC INGRESO PART CONCESIONARIO CONCESIONARIO  3,25% (3.23%)';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable,c5815930102) as cuenta,
               r.vconcesionario as importe,
               '' as indicadorimpuesto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c200102) as centrobeneficio,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20121 || substr(r.idconcesionario, 2, 1),'') as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV REC ING PART CONCES ' || c.nombre) AS textocabezera2,
               'SIMIT' AS segmento,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(m.nit_m, 0, 9),substr(c.nit_c, 0, 9)) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.estadonov = 'ACTIVADA'
           and r.indTipo = 'POLCA';
    
      w_concepto := 'DEV REC INGRESO FONDO COB CONCESIONARIO ( 0,25%)';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable,c5815930102) as cuenta,
               r.vfondocoberturaliq as importe,
               '' as indicadorimpuesto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c200102) as centrobeneficio,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20122 || substr(r.idconcesionario, 2, 1), '') as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV REC ING FONDO COB ' || c.nombre) AS textocabezera2,
               'SIMIT' AS segmento,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(m.nit_m, 0, 9),substr(c.nit_c, 0, 9)) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.estadonov = 'ACTIVADA'
           and r.indTipo = 'POLCA';
    
      w_concepto := 'DEV REC INGRESO EQUILIBRIO ECO ( 3,77%)';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable,c5815930101) as cuenta,
               r.vequilibrioeconomico as importe,
               '' as indicadorimpuesto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c200101) as centrobeneficio,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20123 || substr(r.idconcesionario, 2, 1),'') as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV REC ING EQUILIBRIO ECO ') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(m.nit_m, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.estadonov = 'ACTIVADA'
           and r.indTipo = 'POLCA';
    
      w_concepto := 'DEV REC INGRESO FCM ( 3,25% = 1.25 + 2)';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable,c5815930101) as cuenta,
               r.vfcm as importe,
               '' as indicadorimpuesto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c200101) as centrobeneficio,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20123 || substr(r.idconcesionario, 2, 1),'') as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV REC ING FCM ') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(m.nit_m, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.estadonov = 'ACTIVADA'
           and r.indTipo = 'POLCA';
    
      w_concepto := 'DEV REC INGRESO FONDO COB FCM ( 0,25%)';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable,c5815930101) as cuenta,
               r.vfondocoberturafcm as importe,
               '' as indicadorimpuesto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c200101) as centrobeneficio,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c20124 || substr(r.idconcesionario, 2, 1),'') as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV REC ING FONDO COB FCM ') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(m.nit_m, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.estadonov = 'ACTIVADA'
           and r.indTipo = 'POLCA';
    
      w_concepto := 'DEV REC INGRESO PART CONCESIONARIO SEVIAL  3,0%';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),b.cuentacontable,c5815930102) as cuenta,
               r.vsevial as importe,
               '' as indicadorimpuesto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c200102) as centrocosto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c201213,'') as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV REC ING PART CONCES SEVIAL 3.0%') AS textocabezera2,
               'SIMIT' AS segmento,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(m.nit_m, 0, 9),substr(f.nit_sevial, 0, 9)) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and f.nit_fcm = '8000826650'
           and r.estadonov = 'ACTIVADA'
           and r.indTipo = 'POLCA';
    
           w_concepto := 'CUENTA PAGO USUARIO';
       insert into recaudo_externo_contabilidad
         (fechadoc,
          clasedoc,
          sociedad,
          fechacontable,
          periodo,
          moneda,
          referencia,
          textocabezera,
          clavecontable,
          cuenta,
          importe,
          indicadorimpuesto,
          centrocosto,
          centrobeneficio,
          fechavalor,
          asignacion,
          textocabezera2,
          segmento,
          nittercero,
          cuentadivergente,
          fechabase,
          condicionpago,
          receptoralternativo,
          fechageneracion,
          idperson,
          tipocontable)
         select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
                zt as clasedoc,
                pfc1 as sociedad,
                to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
                to_char(r.fechaaplicacion, 'MM') as periodo,
                cop as moneda,
                R.NUMLIQUIDACION as referencia,
                ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
                R.CuentaRec) as textocabezera,
                c50 as clavecontable,
                cYYYYYYYYYY as cuenta,
                r.vdevolucion as importe,
                '' as indicadorimpuesto,
                '' as centrocosto,
                '' as centrobeneficio,
                to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
                R.IDMUNICIPIO AS asignacion,
                ('DEV-CXP USUARIO ' || to_char(identificacion,'0000000000000') || ' ' || to_char(numeronov,'0000000000') ) AS textocabezera2,
                'SIMIT' AS segmento,
                substr(m.nit_m, 0, 9) as nittercero,
                '' as cuentadivergente,
                '' as fechabase,
                '' as condicionpago,
                '' as receptoralternativo,
                sysdate as fechageneracion,
                to_number(p_usuario) as idperson,
                tipoCon as tipocontable
           from novdevolucion r,
                banco                          b,
                municipio                      m,
                concesionario                  c,
                cta_recaudo_concesionario      cr
          where r.idbancorec = b.idbanco
            and r.idmunicipio = m.idmunicipio
            and r.idconcesionario = c.idconcesionario
            and R.CuentaRec = cr.cuenta
            and r.idbancorec = cr.idbanco
            and r.indtipo = cr.indtipo
            and r.idconcesionario = cr.idconcesionario
            and r.fechaaplicacion = w_fec_cor_ini
            and r.estadonov = 'ACTIVADA'
            and r.indTipo = 'POLCA';
    
      w_concepto := 'DEV OTRO ACREEDOR POLCA 39,78';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c01 as clavecontable,
               substr(f.nit_polca, 0, 9) as cuenta,
               (r.vpolca - r.vivasevial27 - r.vivafcmpolca) as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV OTRO ACREEDOR POLCA 39,78') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(f.nit_polca, 0, 9) as nittercero,
               c1470900601 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               cZ005 as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.estadonov = 'ACTIVADA'
           and r.indTipo = 'POLCA';
    
      w_concepto := 'DEV PARTICIPACION MUNICIPIO';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c01 as clavecontable,
               substr(m.nit_m, 0, 9) as cuenta,
               (ROUND(r.vmunicipio, 0) - ROUND(r.vivacontrfcm, 0) - 
               ROUND(r.vivacontrconc, 0)) as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV PARTICIPACION MUNICIPIO') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(m.nit_m, 0, 9) as nittercero,
               c1470900601 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               cZ005 as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
        
      w_concepto := 'DEV REC GASTO PART CONCESIONARIO (3.25%, 3,23%))';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION || 'G' as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c50 as clavecontable,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c.cta_contable_liquidacion,c4815590102) as cuenta,
               r.vconcesionario as importe,
               '' as indicadorimpuesto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c200102,'') as centrocosto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c20121 || substr(r.idconcesionario, 2, 1)) as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV REC GASTO PART CONCES ' || c.nombre) AS textocabezera2,
               'SIMIT' AS segmento,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(C.NIT_C, 0, 9),substr(m.nit_m, 0, 9)) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV REC GASTO PART CONCESIONARIO sevial (3.0%))';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION || 'G' as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c50 as clavecontable,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c.cta_contable_liquidacion, c4815590102) as cuenta,
               r.vsevial as importe,
               '' as indicadorimpuesto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c200102,'') as centrocosto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c201213) as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV REC GASTO PART CONCES SEVIAL 3%') AS textocabezera2,
               'SIMIT' AS segmento,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(f.nit_sevial, 0, 9),substr(c.nit_c, 0, 9)) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
            and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV CXP PART SEVIAL 3%';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION || 'G' as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c01 as clavecontable,
               substr(f.nit_sevial, 0, 9) as cuenta,
               r.vsevial as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV CXP PART SEVIAL 3%') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(f.nit_sevial, 0, 9) as nittercero,
               c1470900601 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               cZ005 as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV REC GASTO FONDO COB CONCESIONARIO ( 0,25%)';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION || 'G' as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c50 as clavecontable,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),C.CTA_CONTABLE_FONDO,c4815590102) as cuenta,
               r.vfondocoberturaliq as importe,
               '' as indicadorimpuesto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),c200102,'') as centrocosto,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),'',c20122 || substr(r.idconcesionario, 2, 1) ) as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV REC GASTO FONDO COB ' || c.nombre) AS textocabezera2,
               'SIMIT' AS segmento,
               decode(to_char(r.fecpagliq,'yyyy'),to_char(w_fec_cor_ini,'yyyy'),substr(C.NIT_C, 0, 9),substr(m.nit_m, 0, 9)) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
            and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV OTRO ACREEDOR CONCESIONARIO ( 3,25% + 0,25%, 3.23% + 0%)';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION || 'G' as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c01 as clavecontable,
               substr(C.NIT_C, 0, 9) as cuenta,
               ROUND(R.vconcesionario, 0) + ROUND(R.vfondocoberturaliq, 0) as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV OTRO ACREEDOR ' || c.nombre) AS textocabezera2,
               'SIMIT' AS segmento,
               substr(C.NIT_C, 0, 9) as nittercero,
               c1470900601 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               cZ005 as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'PARTICIPACION 2.7%';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c21 as clavecontable,
               substr(f.nit_sevial, 0, 9) as cuenta,
               r.vsevial27 as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV PARTICIPACION SEVIAL 2.7 ') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(f.nit_sevial, 0, 9) as nittercero,
               c2905901001 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'PARTICIPACION IVA 2.7%';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c21 as clavecontable,
               substr(f.nit_sevial, 0, 9) as cuenta,
               r.vivasevial27 as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV PARTICIPACION IVA SEVIAL 2.7 ') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(f.nit_sevial, 0, 9) as nittercero,
               c2905901002 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV PARTICIPACION 1.8%';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               c2905901003 as cuenta,
               r.vfcmpolca as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV PARTICIPACION FCM 1.8') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(f.nit_fcm, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV PARTICIPACION IVA 1.8%';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               c2905901004 as cuenta,
               r.vivafcmpolca as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV PARTICIPACION IVA FCM 1.8') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(f.nit_fcm, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
    
      w_concepto := 'DEV CXC 10% AL MUNICIPIO';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               (R.NUMLIQUIDACION || 'A') as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c11 as clavecontable,
               substr(m.nit_m, 0, 9) as cuenta,
               (ROUND(r.vconcesionario, 0) + ROUND(r.vfcm, 0) +
               ROUND(r.vfondocoberturafcm, 0) + round(r.vfondocoberturaliq, 0) +
               ROUND(r.vequilibrioeconomico, 0) + round(r.vsevial, 0) 
               ) as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV CXC 10% AL MUNICIPIO') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(m.nit_m, 0, 9) as nittercero,
               c1401020102 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
            
    
      w_concepto := 'DEV CXC 10% AL MUNICIPIO';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               (R.NUMLIQUIDACION || 'A') as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c01 as clavecontable,
               substr(m.nit_m, 0, 9) as cuenta,
               (ROUND(r.vconcesionario, 0) + ROUND(r.vfcm, 0) +
               ROUND(r.vfondocoberturafcm, 0) + round(r.vfondocoberturaliq, 0) +
               ROUND(r.vequilibrioeconomico, 0) + round(r.vsevial, 0) 
               ) as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV CXC 10% AL MUNICIPIO') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(m.nit_m, 0, 9) as nittercero,
               c1401020102 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               cZ005 as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionario = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV PARTICIPACION CONTRAVENCIONAL concesionario';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c21 as clavecontable,
               substr(c.nit_c, 0, 9) as cuenta,
               r.vconcontravencional as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV PART CONTRAVENCIONAL ' || c.nombre) AS textocabezera2,
               'SIMIT' AS segmento,
               substr(c.nit_c, 0, 9) as nittercero,
               c2905901005 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'IVA PARTICIPACION IVA CONTRAVENCIONAL concesionario';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c21 as clavecontable,
               substr(c.nit_c, 0, 9) as cuenta,
               r.vivacontrconc as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV PART IVA CONTRAVENCIONAL  ' || c.nombre) AS textocabezera2,
               'SIMIT' AS segmento,
               substr(c.nit_c, 0, 9) as nittercero,
               c2905901009 as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV PARTICIPACION CONTRAVENCIONAL FCM';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               f.ctacon_fcm as cuenta,
               r.vfcmcontravencional as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV PARTICIPACION CONTRAVENCIONAL FCM') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(f.nit_fcm, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV PARTICIPACION IVA CONTRAVENCIONAL FCM';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               pfc1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c40 as clavecontable,
               f.ctacon_impuestos as cuenta,
               r.vivacontrfcm as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV PARTICIPACION IVA CONTRAVENCIONAL FCM') AS textocabezera2,
               'SIMIT' AS segmento,
               substr(f.nit_fcm, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV CRUCE CXC A SIMIT 19%+IVA';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               fcm1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c50 as clavecontable,
               c1470909003 as cuenta,
               (round(r.vfcmcontravencional,0) + round(r.vconcontravencional,0) + round(r.vivacontrconc,0) + round(r.vivacontrfcm,0)) as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV CRUCE CXC A SIMIT 19+iva') AS textocabezera2,
               'RECURSOPRO' AS segmento,
               substr(f.nit_fcm, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'CRUCE CXP A SIMIT';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               fcm1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c21 as clavecontable,
               substr(m.nit_m, 0, 9) as cuenta,
               (round(r.vfcmcontravencional,0) + round(r.vconcontravencional,0) + round(r.vivacontrconc,0) + round(r.vivacontrfcm,0)) as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV CRUCE CXP A SIMIT 19+iva') AS textocabezera2,
               'RECURSOPRO' AS segmento,
               substr(m.nit_m, 0, 9) as nittercero,
               '' as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
       
    
      w_concepto := 'DEV CXC A SIMIT 2.7%+1.8 + IVA';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               fcm1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c50 as clavecontable,
               c1470909002 as cuenta,
               ( round(r.vsevial27,0) + round(r.vivasevial27,0) + round(r.vfcmpolca,0) + round(r.vivafcmpolca,0) ) as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV CRUCE CXC A SIMIT 2.7%+1.8%+IVA') AS textocabezera2,
               'RECURSOPRO' AS segmento,
               substr(f.nit_fcm, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
             and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV CXP A SIMIT 2.7%+1.8 + IVA';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               zt as clasedoc,
               'FCM1' as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c21 as clavecontable,
               substr(f.nit_polca, 0, 9) as cuenta,
               ( round(r.vsevial27,0) + round(r.vivasevial27,0) + round(r.vfcmpolca,0) + round(r.vivafcmpolca,0) ) as importe,
               '' as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV CRUCE CXP A SIMIT 2.7%+1.8%+IVA') AS textocabezera2,
               'RECURSOPRO' AS segmento,
               substr(f.nit_polca, 0, 9) as nittercero,
               '' as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
      w_concepto := 'DEV GASTOS SEVIAL 2.7%+IVA';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               ze as clasedoc,
               fcm1 as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION || 'S' as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c50 as clavecontable,
               c5111110112 as cuenta,
               ( round(r.vsevial27,0) + round(r.vivasevial27,0) ) as importe,
               v5 as indicadorimpuesto,
               c100761 as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV GASTOS SEVIAL 2,7%+IVA') AS textocabezera2,
               'RECURSOPRO' AS segmento,
               substr(f.nit_sevial, 0, 9) as nittercero,
               '' as cuentadivergente,
               '' as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
    
      w_concepto := 'CXP SEVIAL 2.7%+IVA';
      insert into recaudo_externo_contabilidad
        (fechadoc,
         clasedoc,
         sociedad,
         fechacontable,
         periodo,
         moneda,
         referencia,
         textocabezera,
         clavecontable,
         cuenta,
         importe,
         indicadorimpuesto,
         centrocosto,
         centrobeneficio,
         fechavalor,
         asignacion,
         textocabezera2,
         segmento,
         nittercero,
         cuentadivergente,
         fechabase,
         condicionpago,
         receptoralternativo,
         fechageneracion,
         idperson,
         tipocontable)
        select to_char(r.fechaaplicacion, 'ddMMyyyy') as fechadoc,
               'ZE' as clasedoc,
               'FCM1' as sociedad,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechacontable,
               to_char(r.fechaaplicacion, 'MM') as periodo,
               cop as moneda,
               R.NUMLIQUIDACION || 'S' as referencia,
               ('REC ' || to_char(r.fechaaplicacion, 'ddMMyyyy') || ' ' ||
               R.CuentaRec) as textocabezera,
               c21 as clavecontable,
               substr(f.nit_sevial, 0, 9) as cuenta,
              ( round(r.vsevial27,0) + round(r.vivasevial27,0) ) as importe,
               v5 as indicadorimpuesto,
               '' as centrocosto,
               '' as centrobeneficio,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechavalor,
               R.IDMUNICIPIO AS asignacion,
               ('DEV CXP SEVIAL 2,7%+IVA') AS textocabezera2,
               'RECURSOPRO' AS segmento,
               substr(f.nit_sevial, 0, 9) as nittercero,
               '' as cuentadivergente,
               to_char(r.fechaaplicacion, 'ddMMyyyy') as fechabase,
               '' as condicionpago,
               '' as receptoralternativo,
               sysdate as fechageneracion,
               to_number(p_usuario) as idperson,
               tipoCon as tipocontable
          from novdevolucion r,
               banco                          b,
               municipio                      m,
               concesionario                  c,
               fcm                            f
         where r.idbancorec = b.idbanco
           and r.idmunicipio = m.idmunicipio
           and r.idconcesionarioZon = c.idconcesionario
           and f.nit_fcm = '8000826650'
           and r.fechaaplicacion = w_fec_cor_ini
           and r.indTipo = 'POLCA'
           and r.estadonov = 'ACTIVADA';
    
    update recaudo_externo_contabilidad r
       set r.importe = ROUND(r.importe, 0)
     where r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = tipoCon;
  
    delete recaudo_externo_contabilidad r
     where r.importe = 0
       and r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = tipoCon;
  
    w_concepto := 'AJUSTE PESOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             cop as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             (case
               when a.importe > 0 then
                c50
               else
                c40
             end) as clavecontable,
             (case
               when a.importe > 0 then
                c4810900202
               else
                c5810900202
             end) as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             a.asignacion AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from fcm f,
             (select c.referencia,
                     max(c.textocabezera) as textocabezera,
                     max(c.asignacion) as asignacion,
                     sum(case c.clavecontable
                           when c40 then
                            c.importe
                           when c01 then
                            c.importe
                           when c21 then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = pfc1
                 and tipocontable = tipoCon
               group by c.referencia) a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    w_concepto := 'AJUSTE PESOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             fcm1 as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             cop as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             (case
               when a.importe > 0 then
                c50
               else
                c40
             end) as clavecontable,
             (case
               when a.importe > 0 then
                c4810900202
               else
                c5810900202
             end) as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             a.asignacion AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from fcm f,
             (select c.referencia,
                     max(c.textocabezera) as textocabezera,
                     max(c.asignacion) as asignacion,
                     sum(case c.clavecontable
                           when c40 then
                            c.importe
                           when c01 then
                            c.importe
                           when c21 then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = fcm1
                 and tipocontable = tipoCon
               group by c.referencia) a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    commit;
  
    sp_log(p_usuario,
           'Contabiliza Devolucion',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [contabiliza_recaudo_externo] ' || SQLERRM,
            p_error);
    
  END contabiliza_devolucion_externo;

procedure aplicaNovedadesDevolucion(p_fecha date) is
    w_registros number;
    w_vlr_mun   number;
    w_vlr_cob   number;
  
    w_vfcm                 number;
    w_vconcesionario       number;
    w_vfondocoberturaliq   number;
    w_vfondocoberturafcm   number;
    w_vequilibrioeconomico number;
    w_vconcontravencional  number;
    w_vfcmcontravencional  number;
    w_vsevial              number;
    w_vfcmpolca            number;
    w_vpolca               number;
    w_vimpuestosfcm        number;
  
    c_vfcm                 number;
    c_vconcesionario       number;
    c_vfondocoberturaliq   number;
    c_vfondocoberturafcm   number;
    c_vequilibrioeconomico number;
    c_vconcontravencional  number;
    c_vfcmcontravencional  number;
    c_vsevial              number;
    c_vfcmpolca            number;
    c_vpolca               number;
    c_vimpuestosfcm        number;
  
    cursor cobrosPen is
      select tipoidentificacion, identificacion, nombre, idbanco, tipocuenta, cuenta, idconcesionario, indtipo, idmunicipio, motivo, vdevolucion, vconcesionario, vfcm, vfondocoberturafcm, vfondocoberturaliq, vequilibrioeconomico, vsevial, vfcmpolca, vmunicipio, vfcmcontravencional, vconcontravencional, tiponov, numeronov, fechanov, usuarionov, usuarioval, fechaval, fechaact, estadonov, firma1, firma2, usuarioanul, fechaanul, fechaaplicacion, vpolca, cuentarec, dnsgranbanco, dnsavvillas, indcobro, fechacobro, referenciatrf, observaciones, vadicional, fechacobro2, vivacontrconc, vivacontrfcm, vretecontr, indiva, indrete, numliquidacion, tipoidentificacion1, identificacion1, idbancorec, idconcesionariozon, vsevial27, vivasevial27, vivafcmpolca, fecpagliq, vtimbre, vretef, vsevialneto, vfcmpolcaneto, vfcmconneto, vopeconneto, vmunneto, vpolcaneto 
          from novdevolucion
       where estadonov = 'ACTIVADA'
         and fechacobro is null;
  
    cursor cobrosPenCon is
        select tipoidentificacion, identificacion, nombre, idbanco, tipocuenta, cuenta, idconcesionario, indtipo, idmunicipio, motivo, vdevolucion, vconcesionario, vfcm, vfondocoberturafcm, vfondocoberturaliq, vequilibrioeconomico, vsevial, vfcmpolca, vmunicipio, vfcmcontravencional, vconcontravencional, tiponov, numeronov, fechanov, usuarionov, usuarioval, fechaval, fechaact, estadonov, firma1, firma2, usuarioanul, fechaanul, fechaaplicacion, vpolca, cuentarec, dnsgranbanco, dnsavvillas, indcobro, fechacobro, referenciatrf, observaciones, vadicional, fechacobro2, vivacontrconc, vivacontrfcm, vretecontr, indiva, indrete, numliquidacion, tipoidentificacion1, identificacion1, idbancorec, idconcesionariozon, vsevial27, vivasevial27, vivafcmpolca, fecpagliq, vtimbre, vretef, vsevialneto, vfcmpolcaneto, vfcmconneto, vopeconneto, vmunneto, vpolcaneto 
        from novdevolucion
       where estadonov = 'ACTIVADA'
         and not fechacobro is null
         and fechaCobro2 is null;
  
  BEGIN
  
    -- adicionar pagos a usuario ya aprobados
    insert into recaudo_externo_disp_tot
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       des_idbanco,
       des_tipocuenta,
       des_cuenta,
       des_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso,
       valor,
       id_concesionario_pro,
       idmunicipio)
      select p_fecha,
             p_fecha,
             p_fecha,
             idconcesionario,
             30,
             'Pago Usuario Ide:' || identificacion || '. Novedad:' || n.numeronov ,
             '',
             '',
             cuentarec,
             '',
             idbanco,
             tipocuenta,
             encriptar(cuenta),
             identificacion,
             indtipo,
             99999999,
             sysdate,
             vdevolucion,
             '',
             idmunicipio
        from novdevolucion n
       where fechaact <= p_fecha
         and estadonov = 'VALIDADA'
         and fechaaplicacion is null;
  
    update novdevolucion
       set (fechaaplicacion, estadonov) = (select p_fecha, 'ACTIVADA'
                                             from dual)
     where estadonov = 'VALIDADA'
       and fechaact <= p_fecha
       and fechaaplicacion is null;
  
  
    update recaudo_externo_disp_tot
    set vlrDisp = valor
    where fec_corte_ini = p_fecha;
    
    
    commit;
  
    -- buscar municipios a los que se les puede cobrar
    FOR regCobro IN cobrosPen LOOP
      -- obtener valor a pagar al municipio
      select sum(valor)
        into w_vlr_mun
        from recaudo_externo_disp_tot r
       where orden = 1
         and r.idmunicipio = regCobro.Idmunicipio
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;

      if  regCobro.Idmunicipio = '08001001' then
        select sum(valor)
        into w_vlr_mun
        from recaudo_externo_disp_tot r
       where orden = 1
         and r.idmunicipio = '08001000'
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.concepto = 'Metrotransito Barranquilla'
         and r.fec_corte_ini = p_fecha;
      
      end if;
           
      if  w_vlr_mun is null then
         w_vlr_mun := 0;
      end if;
    
      -- obtener valor de cobros realizados
      select sum(vMunNeto)
        into w_vlr_cob
        from novdevolucion n
       where estadonov = 'ACTIVADA'
         and n.fechacobro = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;

      if w_vlr_cob is null then
         w_vlr_cob := 0;
      end if;
    
      -- si el municipio tiene valores disponibles 
      if (w_vlr_mun - w_vlr_cob) >= ( regCobro.vMunNeto) then
      
        -- grabar registo a restar al municipio
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 31,
                 'Vlr Dev ' || regCobro.Idmunicipio || ' ' || m.nombre || '. Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * (vMunNeto),
                 '',
                 n.idmunicipio
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov and
           n.idmunicipio = m.idmunicipio;
      
        update novdevolucion
           set fechacobro = p_fecha
         where numeronov = regCobro.Numeronov;
     
      if  regCobro.Idmunicipio <> '08001001' then
     
        update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - (regCobro.vMunNeto) 
       where r.orden = 1
        and r.idmunicipio = regCobro.Idmunicipio
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
      else
        update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - (regCobro.vMunNeto) 
       where r.orden = 1
        and r.idmunicipio = '08001000'
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.concepto = 'Metrotransito Barranquilla'
         and r.fec_corte_ini = p_fecha;
      
      end if;
      
      end if;
    
    END LOOP;
 
    commit;


    FOR regCobro IN cobrosPenCon LOOP
      -- obtener valor a pagar al concesionario, fcm y polca
      select sum(valor)
        into w_vfcm
        from recaudo_externo_disp_tot r
       where orden = 5
        and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
    
      if w_vfcm is null then
         w_vfcm := 0;
      end if;
    
    
      select sum(valor)
        into w_vconcesionario
        from recaudo_externo_disp_tot r
       where orden = 7
   and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
         
      if w_vconcesionario is null then
         w_vconcesionario := 0;
      end if;
    
    
      select sum(valor)
        into w_vfondocoberturaliq
        from recaudo_externo_disp_tot r
       where orden = 8
       and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
    
     if w_vfondocoberturaliq is null then
         w_vfondocoberturaliq := 0;
      end if;
 
      select sum(valor)
        into w_vfondocoberturafcm
        from recaudo_externo_disp_tot r
       where orden = 6
    and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
    
      if w_vfondocoberturafcm is null then
         w_vfondocoberturafcm := 0;
      end if;
 
      select sum(valor)
        into w_vequilibrioeconomico
        from recaudo_externo_disp_tot r
       where orden = 9
    and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha
         and r.concepto <> 'Impuestos FCM';
    
      if w_vequilibrioeconomico is null then
         w_vequilibrioeconomico := 0;
      end if;
 
 
      select sum(valor)
        into w_vconcontravencional
        from recaudo_externo_disp_tot r
       where orden = 13
   and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
    
      if w_vconcontravencional is null then
         w_vconcontravencional := 0;
      end if;
      
      select sum(valor)
        into w_vfcmcontravencional
        from recaudo_externo_disp_tot r
       where orden = 14
   and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
    
     if w_vfcmcontravencional is null then
         w_vfcmcontravencional := 0;
      end if;


      select sum(valor)
        into w_vsevial
        from recaudo_externo_disp_tot r
       where orden = 10
      and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
    
     if w_vsevial is null then
         w_vsevial := 0;
      end if;

      select sum(valor)
        into w_vfcmpolca
        from recaudo_externo_disp_tot r
       where orden = 11
      and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
    
      if w_vfcmpolca is null then
         w_vfcmpolca := 0;
      end if;
      
      IF regCobro.Idconcesionario = '05' THEN
         w_vequilibrioeconomico := w_vequilibrioeconomico + w_vfcmpolca;
          w_vfcmpolca := 0;
      end if;
      


      select sum(valor)
        into w_vpolca
        from recaudo_externo_disp_tot r
       where orden = 12
      and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
    
       if w_vpolca is null then
         w_vpolca := 0;
      end if; 
    
    
      select sum(valor)
        into w_vimpuestosfcm
        from recaudo_externo_disp_tot r
       where orden = 9
      and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha
         and r.concepto = 'Impuestos FCM';
    
    
       if w_vimpuestosfcm is null then
         w_vimpuestosfcm := 0;
      end if; 
      
      -- obtener valor de cobros realizados
      select sum(vconcesionario)
        into c_vconcesionario
        from novdevolucion n
       where estadonov = 'ACTIVADA'
        and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;
    
        if c_vconcesionario is null then
         c_vconcesionario := 0;
      end if; 
 
 
      select sum(vfcm)
        into c_vfcm
        from novdevolucion n
       where estadonov = 'ACTIVADA'
         and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;
    
      if c_vfcm is null then
         c_vfcm := 0;
      end if; 


      select sum(vfondocoberturafcm)
        into c_vfondocoberturafcm
        from novdevolucion n
       where estadonov = 'ACTIVADA'
        and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;
    
     if c_vfondocoberturafcm is null then
         c_vfondocoberturafcm := 0;
      end if; 


      select sum(vfondocoberturaliq)
        into c_vfondocoberturaliq
        from novdevolucion n
       where estadonov = 'ACTIVADA'
        and n.fechacobro = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;
    
     if c_vfondocoberturaliq is null then
         c_vfondocoberturaliq := 0;
      end if; 


      select sum(vequilibrioeconomico)
        into c_vequilibrioeconomico
        from novdevolucion n
       where estadonov = 'ACTIVADA'
         and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;
    
       if c_vequilibrioeconomico is null then
         c_vequilibrioeconomico := 0;
      end if; 


      select sum(vsevialneto )
        into c_vsevial
        from novdevolucion n
       where estadonov = 'ACTIVADA'
          and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;
    
      if c_vsevial is null then
         c_vsevial := 0;
      end if; 


      select sum(vFcmPolcaNeto)
        into c_vfcmpolca
        from novdevolucion n
       where estadonov = 'ACTIVADA'
         and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo; 
   
      if c_vfcmpolca is null then
         c_vfcmpolca := 0;
      end if; 

      if ( regCobro.Idconcesionario = '05') then
         c_vequilibrioeconomico := c_vequilibrioeconomico + c_vfcmpolca;
      end if;

      select sum(vFcmConNeto)
        into c_vfcmcontravencional
        from novdevolucion n
       where estadonov = 'ACTIVADA'
         and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;
    
      if c_vfcmcontravencional is null then
         c_vfcmcontravencional := 0;
      end if; 
      
      select sum(vOpeConNeto)
        into c_vconcontravencional
        from novdevolucion n
       where estadonov = 'ACTIVADA'
         and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;
    
    
      if c_vconcontravencional is null then
         c_vconcontravencional := 0;
      end if; 
      
      
      select sum(vPolcaNeto)
        into c_vpolca
        from novdevolucion n
       where estadonov = 'ACTIVADA'
         and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo;
         
       if c_vpolca is null then
         c_vpolca := 0;
      end if; 
      
      select sum(vivafcmpolca + vtimbre + vretef)
        into c_vimpuestosfcm
        from novdevolucion n
       where estadonov = 'ACTIVADA'
         and n.fechacobro2 = p_fecha
         and n.idmunicipio = regCobro.Idmunicipio
         and n.cuentarec = regCobro.Cuentarec
         and n.idconcesionario = regCobro.Idconcesionario
         and n.indtipo = regCobro.Indtipo
         AND regCobro.Idconcesionario = '05';
         
       if c_vimpuestosfcm is null then
         c_vimpuestosfcm := 0;
      end if; 
      
    
      if (w_vfcm - c_vfcm) >= regCobro.Vfcm and
         (w_vconcesionario - c_vconcesionario) >= regCobro.Vconcesionario and
         (w_vfondocoberturaliq - c_vfondocoberturaliq) >=
         regCobro.Vfondocoberturaliq and
         (w_vfondocoberturafcm - c_vfondocoberturafcm) >=
         regCobro.Vfondocoberturafcm and
         (w_vequilibrioeconomico - c_vequilibrioeconomico) >=
         regCobro.Vequilibrioeconomico and
         (w_vconcontravencional - c_vconcontravencional) >=
         regCobro.vOpeConNeto and
         (w_vfcmcontravencional - c_vfcmcontravencional) >=
         regCobro.VFcmConNeto and
         (w_vsevial - c_vsevial) >= regCobro.vSevialNeto and
         (w_vfcmpolca - c_vfcmpolca) >= regCobro.vFcmPolcaNeto and
         (w_vpolca - c_vpolca) >= regCobro.vPolcaNeto 
         
         then
      
      
        -- grabar registo a restar al vconcesionario
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 32,
                 'Vlr Dev Conc ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * (vconcesionario),
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
      
       update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - (regCobro.vconcesionario) 
       where r.orden = 7
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
              
              
      
        -- grabar registo a restar al vfcm
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 33,
                 'Vlr Dev Fcm ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * (vfcm),
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
      
       update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - (regCobro.vfcm) 
       where r.orden = 5
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
         
      
        -- grabar registo a restar al vfondocoberturafcm
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 34,
                 'Vlr Dev Fond FCM ' || regCobro.Idmunicipio || ' ' || m.nombre || '. Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * (vfondocoberturafcm),
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
   
          update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - (regCobro.vfondocoberturafcm) 
       where r.orden = 6
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
            
        -- grabar registo a restar al vfondocoberturaliq
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 35,
                 'Vlr Dev Fond Conc ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                  '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * (vfondocoberturaliq),
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
     
               update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - (regCobro.vfondocoberturaliq) 
       where r.orden = 8
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
          
        -- grabar registo a restar al vequilibrioeconomico
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 36,
                 'Vlr Dev Equil ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * (vequilibrioeconomico),
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
      
        update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - (regCobro.vequilibrioeconomico) 
       where r.orden = 9
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha
         and r.concepto <> 'Impuestos FCM';
    
       
         
        -- grabar registo a restar al VSEVIAL27+ vsevial3 + impuestos
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 37,
                 'Vlr Dev Polca Sevial ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * n.vSevialNeto,
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
      
     update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - regCobro.vSevialNeto 
       where r.orden = 10
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
         
        -- grabar registo a restar al VFCMPOLCA
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 38,
                 'Vlr Dev Polca FCM ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * n.vFcmPolcaNeto ,
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
           
        update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - regCobro.vFcmPolcaNeto 
       where r.orden = 11
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
         
        
      
        -- grabar registo a restar al vFcmCon
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 39,
                 'Vlr Dev Contrav FCM ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * n.vFcmConNeto ,
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
      
        update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - regCobro.vFcmConNeto
       where r.orden = 14
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
         
        -- grabar registo a restar al municipio
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 40,
                 'Vlr Dev Contrav Conc ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * n.vOpeConNeto,
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
      
        update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - regCobro.vOpeConNeto 
       where r.orden = 13
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;
      
        -- grabar registo a restar al POLCA
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 41,
                 'Vlr Dev POLCA ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 -1 * (vPolcaNeto),
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
     
      update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - (regCobro.vPolcaNeto) 
       where r.orden = 12
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha;

        -- grabar registo a restar iMPUESTOS fcm
        insert into recaudo_externo_disp_tot
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select p_fecha,
                 p_fecha,
                 p_fecha,
                 regCobro.Idconcesionario,
                 42,
                 'Vlr Dev Impuestos FCM ' || regCobro.Idmunicipio || ' ' || m.nombre || '.Nov:'|| n.numeronov ,
                 '',
                 '',
                 regCobro.Cuentarec,
                 '',
                 '',
                 '',
                 '',
                 '',
                 indtipo,
                 99999999,
                 sysdate,
                 decode (n.idconcesionario, '05', -1 * (vivafcmpolca + vtimbre + vretef),0 ),
                 '',
                 ''
            from novdevolucion n, municipio m
           where numeronov = regCobro.Numeronov
           and n.idmunicipio = m.idmunicipio;
     
      update recaudo_externo_disp_tot r
        set r.vlrdisp = r.vlrdisp - (regCobro.vivafcmpolca + regCobro.vtimbre + regCobro.vretef) 
       where r.orden = 9
         and r.ori_cuenta = regCobro.Cuentarec
         and r.id_concesionario_liq = regCobro.Idconcesionario
         and r.indtipo = regCobro.Indtipo
         and r.fec_corte_ini = p_fecha
         and r.concepto = 'Impuestos FCM';
          
        update novdevolucion
           set fechacobro2 = p_fecha
         where numeronov = regCobro.Numeronov;
         
         
      end if;
    
    END LOOP;
    
    commit;
    
    
     update recaudo_externo_disp_tot r
      set ( r.ori_idbanco, r.ori_tipocuenta, r.ori_nit ) = (select max(c.idbanco), max(c.tipocuenta), '8000826650'
                                 from cta_recaudo_concesionario c
                                where c.cuenta = r.ori_cuenta
                                  and c.indtipo = r.indtipo)
     where fec_corte_ini = p_fecha
      and orden >= 30 and orden <= 42;
       
     update recaudo_externo_disp_tot r
      set r.des_idbanco = r.ori_idbanco,
      r.des_tipocuenta = r.ori_tipocuenta,
      r.des_cuenta = encriptar(r.ori_cuenta),
      r.des_nit = r.ori_nit
     where fec_corte_ini = p_fecha
      and orden >= 31 and orden <= 42;

     delete recaudo_externo_disp_tot
     where fec_corte_ini = p_fecha
      and orden >= 31 and orden <= 42
      and valor = 0;
     
    update recaudo_externo_disp_tot
      set valor = valor * -1 
     where fec_corte_ini = p_fecha
      and orden >= 31 and orden <= 42;
 
   commit;
  
  END aplicaNovedadesDevolucion;
  
end PK_NOVDEV;
/

prompt
prompt Creating package body PK_PARAM
prompt ==============================
prompt
CREATE OR REPLACE PACKAGE BODY SIMIT."PK_PARAM" is

  -- Private variable declarations
  v_valida NUMBER;

  -- Function and procedure implementations

  PROCEDURE i_fecha_no_habil(p_fecha_ini_ano number,
                             p_fecha_ini_mes number,
                             p_fecha_ini_dia number,
                             p_usuario       varchar2,
                             p_error         OUT VARCHAR2) is
  
    p_fecha varchar2(8);
  
  begin
  
    select TO_CHAR(TO_DATE(p_fecha_ini_ano || '-' || p_fecha_ini_mes || '-' ||
                           p_fecha_ini_dia,
                           'YYYY-MM-DD'),
                   'YYYYMMDD')
      into p_fecha
      from DUAL;
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from fecha_no_habil t
     WHERE t.fecha = p_fecha;
    IF v_valida <> 0 THEN
      p_error := 'La fecha ya esta asociada. ';
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      insert into fecha_no_habil (fecha) values (p_fecha);
      sp_log(p_usuario, 'i_fecha_no_habil', p_fecha);
      commit;
      p_error := 'Fecha agregada Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_fecha_no_habil] ' || SQLERRM,
            p_error);
  END i_fecha_no_habil;

  PROCEDURE d_fecha_no_habil(p_fecha   varchar2,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete fecha_no_habil where fecha = p_fecha;
      sp_log(p_usuario, 'd_fecha_no_habil', p_fecha);
      commit;
      p_error := 'Fecha eliminada Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_fecha_no_habil] ' || SQLERRM,
            p_error);
  END d_fecha_no_habil;

  PROCEDURE q_fecha_no_habil(p_cursor  OUT SYS_REFCURSOR,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      open p_cursor FOR
        select * from fecha_no_habil;
      p_error := 'q_fecha_no_habil';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_fecha_no_habil] ' || SQLERRM,
            p_error);
  END q_fecha_no_habil;

  PROCEDURE i_salario_minimo(p_anho    number,
                             p_valor   number,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from salario_minimo t
     WHERE t.anho = p_anho;
  
    IF v_valida <> 0 THEN
      p_error := 'El valor ya esta asociado al a¿o. ';
    else
      insert into salario_minimo (anho, valor) values (p_anho, p_valor);
      sp_log(p_usuario, 'i_salario_minimo', p_anho || '-' || p_valor);
      commit;
      p_error := 'Salario Minimo agregado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_salario_minimo] ' || SQLERRM,
            p_error);
  END i_salario_minimo;

  PROCEDURE u_salario_minimo(p_anho    number,
                             p_valor   number,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from salario_minimo t
     WHERE t.anho = p_anho;
    IF v_valida <> 0 THEN
      update salario_minimo
         set anho = p_anho, valor = p_valor
       where anho = p_anho;
      commit;
      p_error := 'Salario Minimo Actualizado Exitosamente. ';
    else
      p_error := 'El a¿o no existe ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_salario_minimo] ' || SQLERRM,
            p_error);
  END u_salario_minimo;

  PROCEDURE d_salario_minimo(p_anho    number,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete salario_minimo where anho = p_anho;
      sp_log(p_usuario, 'd_salario_minimo', p_anho);
      commit;
      p_error := 'Salario Minimo eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_salario_minimo] ' || SQLERRM,
            p_error);
  END d_salario_minimo;

  PROCEDURE q_salario_minimo(p_cursor  OUT SYS_REFCURSOR,
                             p_usuario varchar2,
                             p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      open p_cursor FOR
        select * from salario_minimo;
      p_error := 'q_salario_minimo';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_salario_minimo] ' || SQLERRM,
            p_error);
  END q_salario_minimo;

  PROCEDURE i_concepto(p_idconcepto number,
                       p_nombre     varchar2,
                       p_usuario    varchar2,
                       p_error      OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from concepto t
     WHERE idconcepto = p_idconcepto;
    IF v_valida <> 0 THEN
      p_error := 'El valor ya esta asociado . ';
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      insert into concepto
        (idconcepto, nombre)
      values
        (p_idconcepto, p_nombre);
      sp_log(p_usuario, 'i_concepto', p_idconcepto || '-' || p_nombre);
      commit;
      p_error := 'concepto agregado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_concepto] ' || SQLERRM, p_error);
  END i_concepto;

  PROCEDURE d_concepto(p_idconcepto number,
                       p_usuario    varchar2,
                       p_error      OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete concepto where idconcepto = p_idconcepto;
      sp_log(p_usuario, 'd_concepto', p_idconcepto);
      commit;
      p_error := 'concepto eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [d_concepto] ' || SQLERRM, p_error);
  END d_concepto;

  PROCEDURE q_concepto(p_cursor  OUT SYS_REFCURSOR,
                       p_usuario varchar2,
                       p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      open p_cursor FOR
        select * from concepto;
      p_error := 'q_concepto';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_concepto] ' || SQLERRM, p_error);
  END q_concepto;

  PROCEDURE i_banco(p_idbanco     char,
                    p_nombre      varchar2,
                    p_responsable varchar2,
                    p_cargo       varchar2,
                    p_correo      varchar2,
                    p_telefono    varchar2,
                    p_dirCorres   varchar2,
                    p_usuario     varchar2,
                    p_error       OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*) INTO v_valida from banco t WHERE idbanco = p_idbanco;
    IF v_valida <> 0 THEN
      p_error := 'Banco ya existente';
    else
      insert into banco
        (idbanco, nombre, responsable, cargo, correo, telefono, dirCorres)
      values
        (p_idbanco,
         p_nombre,
         p_responsable,
         p_cargo,
         p_correo,
         p_telefono,
         p_dirCorres);
    
      p_error := MSG_INS_OK;
    
      sp_log(p_usuario,
             'i_banco',
             p_idbanco || '-' || p_nombre || '-' || p_responsable || '-' ||
             p_cargo || '-' || p_correo || '-' || p_telefono || '-' ||
             p_dirCorres);
      commit;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_banco] ' || SQLERRM, p_error);
  END i_banco;

  PROCEDURE u_banco(p_idbanco     char,
                    p_nombre      varchar2,
                    p_responsable varchar2,
                    p_cargo       varchar2,
                    p_correo      varchar2,
                    p_telefono    varchar2,
                    p_dirCorres   varchar2,
                    p_usuario     varchar2,
                    p_error       OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*) INTO v_valida from banco t WHERE idbanco = p_idbanco;
    IF v_valida <> 0 THEN
      update banco
         set nombre      = p_nombre,
             responsable = p_responsable,
             cargo       = p_cargo,
             correo      = p_correo,
             telefono    = p_telefono,
             dirCorres   = p_dirCorres
       where idbanco = p_idbanco;
      sp_log(p_usuario,
             'u_banco',
             p_idbanco || '-' || p_nombre || '-' || p_responsable || '-' ||
             p_cargo || '-' || p_correo || '-' || p_telefono || '-' ||
             p_dirCorres);
      commit;
      p_error := MSG_UPD_OK;
    else
      p_error := 'Banco no existe';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_banco] ' || SQLERRM, p_error);
  END u_banco;

  PROCEDURE d_banco(p_idbanco char,
                    p_usuario varchar2,
                    p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete banco where idbanco = p_idbanco;
      sp_log(p_usuario, 'd_banco', p_idbanco);
      commit;
      p_error := MSG_DEL_OK;
    END IF;
  
  EXCEPTION
  
    WHEN OTHERS THEN
      p_error := SQLERRM;
      sp_ex(SQLCODE, p_usuario || ' [d_banco] ' || SQLERRM, p_error);
  END d_banco;

  PROCEDURE q_banco(p_idbanco     char,
                    p_usuario     varchar2,
                    p_nombre      out varchar2,
                    p_responsable out varchar2,
                    p_cargo       out varchar2,
                    p_correo      out varchar2,
                    p_telefono    out varchar2,
                    p_dirCorres   out varchar2,
                    p_error       OUT VARCHAR2) is
  begin
  
    p_nombre      := '';
    p_responsable := '';
    p_cargo       := '';
    p_correo      := '';
    p_telefono    := '';
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select nombre, responsable, cargo, correo, telefono, dirCorres
          into p_nombre,
               p_responsable,
               p_cargo,
               p_correo,
               p_telefono,
               p_dirCorres
          from banco
         where idbanco = p_idbanco;
      
        p_error := 'Consulta Exitosa';
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_banco] ' || SQLERRM, p_error);
  END q_banco;

  PROCEDURE d_concesionario(p_idconcesionario char,
                            p_usuario         varchar2,
                            p_error           OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
    
      delete p_dispersion_concesionario
       where idconcesionario = p_idconcesionario;
    
      delete concesionario where idconcesionario = p_idconcesionario;
    
      sp_log(p_usuario, 'd_concesionario', p_idconcesionario);
      commit;
    
      p_error := MSG_DEL_OK;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_concesionario] ' || SQLERRM,
            p_error);
  END d_concesionario;

  PROCEDURE i_departamento(p_iddepartamento char,
                           p_nombre         varchar2,
                           p_usuario        varchar2,
                           p_error          OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from departamento t
     WHERE iddepartamento = p_iddepartamento;
    IF v_valida <> 0 THEN
      p_error := 'El valor ya esta asociado . ';
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      insert into departamento
        (iddepartamento, nombre)
      values
        (p_iddepartamento, p_nombre);
      sp_log(p_usuario,
             'departamento',
             p_iddepartamento || '-' || p_nombre);
      commit;
      p_error := 'departamento agregado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_departamento] ' || SQLERRM, p_error);
  END i_departamento;

  PROCEDURE d_departamento(p_iddepartamento char,
                           p_usuario        varchar2,
                           p_error          OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete departamento where iddepartamento = p_iddepartamento;
      sp_log(p_usuario, 'd_departamento', p_iddepartamento);
      commit;
      p_error := 'departamento eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [d_departamento] ' || SQLERRM, p_error);
  END d_departamento;

  PROCEDURE q_departamento(p_cursor  OUT SYS_REFCURSOR,
                           p_usuario varchar2,
                           p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      open p_cursor FOR
        select * from departamento;
      p_error := 'q_departamento';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_departamento] ' || SQLERRM, p_error);
  END q_departamento;

  PROCEDURE d_municipio(p_idmunicipio char,
                        p_usuario     varchar2,
                        p_error       OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete p_dispersion_municipio where idmunicipio = p_idmunicipio;
      delete municipio where idmunicipio = p_idmunicipio;
      sp_log(p_usuario, 'd_municipio', p_idmunicipio);
      commit;
      p_error := 'municipio eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [d_municipio] ' || SQLERRM, p_error);
  END d_municipio;

  PROCEDURE d_tercero(p_idmunicipio char,
                      p_num_tercero number,
                      p_usuario     varchar2,
                      p_error       OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete tercero
       where idmunicipio = p_idmunicipio
         and num_tercero = p_num_tercero;
      sp_log(p_usuario, 'd_tercero', p_idmunicipio || '-' || p_num_tercero);
      commit;
      p_error := 'tercero eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [d_tercero] ' || SQLERRM, p_error);
  END d_tercero;

  PROCEDURE d_cta_dispersion_concesionario(p_idconcepto      number,
                                           p_idconcesionario char,
                                           p_usuario         varchar2,
                                           p_error           OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete cta_dispersion_concesionario
       where idconcepto = p_idconcepto
         and idconcesionario = p_idconcesionario;
      sp_log(p_usuario,
             'd_cta_dispersion_concesionario',
             p_idconcepto || '-' || p_idconcesionario);
      commit;
      p_error := 'cta_dispersion_concesionario eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_cta_dispersion_concesionario] ' || SQLERRM,
            p_error);
  END d_cta_dispersion_concesionario;

  PROCEDURE i_p_dispersion_concesionario(p_idconcesionario              char,
                                         p_concesionario_s              number,
                                         p_fondo_cob_concesionario_s    number,
                                         p_fondo_cob_simit_s            number,
                                         p_simit_s                      number,
                                         p_equilibrio_economico_s       number,
                                         p_concesionario_pm             number,
                                         p_fondo_cob_concesionario_pm   number,
                                         p_fondo_cob_simit_pm           number,
                                         p_equilibrio_economico_pm      number,
                                         p_simit_pp                     number,
                                         p_sevial_pp                    number,
                                         p_equilibrio_economico_pp      number,
                                         p_polca_cp                     number,
                                         p_fcm_cp                       number,
                                         p_sevial_cp                    number,
                                         p_equilibrio_economico_cp      number,
                                         p_concesionario_s_cc           varchar2,
                                         p_fondo_cob_concesionario_s_cc varchar2,
                                         p_fondo_cob_simit_s_cc         varchar2,
                                         p_simit_s_cc                   varchar2,
                                         p_equilibrio_economico_s_cc    varchar2,
                                         p_concesionario_pm_cc          varchar2,
                                         p_fondo_cob_concesionario_pm_c varchar2,
                                         p_fondo_cob_simit_pm_cc        varchar2,
                                         p_equilibrio_economico_pm_cc   varchar2,
                                         p_simit_pp_cc                  varchar2,
                                         p_sevial_pp_cc                 varchar2,
                                         p_equilibrio_economico_pp_cc   varchar2,
                                         p_polca_cp_cc                  varchar2,
                                         p_fcm_cp_cc                    varchar2,
                                         p_sevial_cp_cc                 varchar2,
                                         p_equilibrio_economico_cp_cc   varchar2,
                                         p_simit_pm                     number,
                                         p_usuario                      varchar2,
                                         p_error                        OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from p_dispersion_concesionario t
     WHERE idconcesionario = p_idconcesionario;
    IF v_valida <> 0 THEN
      p_error := 'El valor ya esta asociado . ';
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      insert into p_dispersion_concesionario
        (idconcesionario,
         concesionario_s,
         fondo_cob_concesionario_s,
         fondo_cob_simit_s,
         simit_s,
         equilibrio_economico_s,
         concesionario_pm,
         fondo_cob_concesionario_pm,
         fondo_cob_simit_pm,
         equilibrio_economico_pm,
         simit_pp,
         sevial_pp,
         equilibrio_economico_pp,
         polca_cp,
         fcm_cp,
         sevial_cp,
         equilibrio_economico_cp,
         concesionario_s_cc,
         fondo_cob_concesionario_s_cc,
         fondo_cob_simit_s_cc,
         simit_s_cc,
         equilibrio_economico_s_cc,
         concesionario_pm_cc,
         fondo_cob_concesionario_pm_cc,
         fondo_cob_simit_pm_cc,
         equilibrio_economico_pm_cc,
         simit_pp_cc,
         sevial_pp_cc,
         equilibrio_economico_pp_cc,
         polca_cp_cc,
         fcm_cp_cc,
         sevial_cp_cc,
         equilibrio_economico_cp_cc,
         simit_pm)
      values
        (p_idconcesionario,
         p_concesionario_s,
         p_fondo_cob_concesionario_s,
         p_fondo_cob_simit_s,
         p_simit_s,
         p_equilibrio_economico_s,
         p_concesionario_pm,
         p_fondo_cob_concesionario_pm,
         p_fondo_cob_simit_pm,
         p_equilibrio_economico_pm,
         p_simit_pp,
         p_sevial_pp,
         p_equilibrio_economico_pp,
         p_polca_cp,
         p_fcm_cp,
         p_sevial_cp,
         p_equilibrio_economico_cp,
         p_concesionario_s_cc,
         p_fondo_cob_concesionario_s_cc,
         p_fondo_cob_simit_s_cc,
         p_simit_s_cc,
         p_equilibrio_economico_s_cc,
         p_concesionario_pm_cc,
         p_fondo_cob_concesionario_pm_c,
         p_fondo_cob_simit_pm_cc,
         p_equilibrio_economico_pm_cc,
         p_simit_pp_cc,
         p_sevial_pp_cc,
         p_equilibrio_economico_pp_cc,
         p_polca_cp_cc,
         p_fcm_cp_cc,
         p_sevial_cp_cc,
         p_equilibrio_economico_cp_cc,
         p_simit_pm);
      sp_log(p_usuario,
             'i_p_dispersion_concesionario',
             p_idconcesionario || '-' || p_concesionario_s || '-' ||
             p_fondo_cob_concesionario_s || '-' || p_fondo_cob_simit_s || '-' ||
             p_simit_s || '-' || p_equilibrio_economico_s || '-' ||
             p_concesionario_pm || '-' || p_fondo_cob_concesionario_pm || '-' ||
             p_fondo_cob_simit_pm || '-' || p_equilibrio_economico_pm || '-' ||
             p_simit_pp || '-' || p_sevial_pp || '-' ||
             p_equilibrio_economico_pp || '-' || p_polca_cp || '-' ||
             p_fcm_cp || '-' || p_sevial_cp || '-' ||
             p_equilibrio_economico_cp || '-' || p_concesionario_s_cc || '-' ||
             p_fondo_cob_concesionario_s_cc || '-' ||
             p_fondo_cob_simit_s_cc || '-' || p_simit_s_cc || '-' ||
             p_equilibrio_economico_s_cc || '-' || p_concesionario_pm_cc || '-' ||
             p_fondo_cob_concesionario_pm_c || '-' ||
             p_fondo_cob_simit_pm_cc || '-' || p_equilibrio_economico_pm_cc || '-' ||
             p_simit_pp_cc || '-' || p_sevial_pp_cc || '-' ||
             p_equilibrio_economico_pp_cc || '-' || p_polca_cp_cc || '-' ||
             p_fcm_cp_cc || '-' || p_sevial_cp_cc || '-' ||
             p_equilibrio_economico_cp_cc || '-' || p_simit_pm);
      commit;
      p_error := 'p_dispersion_concesionario agregado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_p_dispersion_concesionario] ' || SQLERRM,
            p_error);
  END i_p_dispersion_concesionario;

  PROCEDURE d_p_dispersion_concesionario(p_idconcesionario char,
                                         p_usuario         varchar2,
                                         p_error           OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete p_dispersion_concesionario
       where idconcesionario = p_idconcesionario;
      sp_log(p_usuario, 'd_p_dispersion_concesionario', p_idconcesionario);
      commit;
      p_error := 'p_dispersion_concesionario eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_p_dispersion_concesionario] ' || SQLERRM,
            p_error);
  END d_p_dispersion_concesionario;

  PROCEDURE q_p_dispersion_concesionario(p_cursor  OUT SYS_REFCURSOR,
                                         p_usuario varchar2,
                                         p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      open p_cursor FOR
        select * from p_dispersion_concesionario;
      p_error := 'q_p_dispersion_concesionario';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_p_dispersion_concesionario] ' || SQLERRM,
            p_error);
  END q_p_dispersion_concesionario;

  PROCEDURE i_p_dispersion_municipio(p_idmunicipio              char,
                                     p_municipio_s              number,
                                     p_fcm_contravencional_s    number,
                                     p_conces_contravencional_s number,
                                     p_acuerdopago_s            number,
                                     p_municipio_p              number,
                                     p_fcm_contravencional_p    number,
                                     p_conces_contravencional_p number,
                                     p_acuerdopago_p            number,
                                     p_usuario                  varchar2,
                                     p_error                    OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from p_dispersion_municipio t
     WHERE idmunicipio = p_idmunicipio;
    IF v_valida <> 0 THEN
      p_error := 'El valor ya esta asociado . ';
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      insert into p_dispersion_municipio
        (idmunicipio,
         municipio_s,
         fcm_contravencional_s,
         conces_contravencional_s,
         acuerdopago_s,
         municipio_p,
         fcm_contravencional_p,
         conces_contravencional_p,
         acuerdopago_p)
      values
        (p_idmunicipio,
         p_municipio_s,
         p_fcm_contravencional_s,
         p_conces_contravencional_s,
         p_acuerdopago_s,
         p_municipio_p,
         p_fcm_contravencional_p,
         p_conces_contravencional_p,
         p_acuerdopago_p);
      sp_log(p_usuario,
             'i_p_dispersion_municipio',
             p_idmunicipio || '-' || p_municipio_s || '-' ||
             p_fcm_contravencional_s || '-' || p_conces_contravencional_s || '-' ||
             p_acuerdopago_s || '-' || p_municipio_p || '-' ||
             p_fcm_contravencional_p || '-' || p_conces_contravencional_p || '-' ||
             p_acuerdopago_p);
      commit;
      p_error := 'p_dispersion_municipio agregado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_p_dispersion_municipio] ' || SQLERRM,
            p_error);
  END i_p_dispersion_municipio;

  PROCEDURE d_p_dispersion_municipio(p_idmunicipio char,
                                     p_usuario     varchar2,
                                     p_error       OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete p_dispersion_municipio where idmunicipio = p_idmunicipio;
      sp_log(p_usuario, 'd_p_dispersion_municipio', p_idmunicipio);
      commit;
      p_error := 'p_dispersion_municipio eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_p_dispersion_municipio] ' || SQLERRM,
            p_error);
  END d_p_dispersion_municipio;

  PROCEDURE q_p_dispersion_municipio(p_cursor  OUT SYS_REFCURSOR,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      open p_cursor FOR
        select * from p_dispersion_municipio;
      p_error := 'q_p_dispersion_municipio';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_p_dispersion_municipio] ' || SQLERRM,
            p_error);
  END q_p_dispersion_municipio;

  PROCEDURE q_validador_fecha(p_idmunicipio              char,
                              p_idvalidador              char,
                              p_indTipo                  char,
                              p_usuario                  varchar2,
                              p_fecha_ini                out date,
                              p_fecha_fin                out date,
                              p_p_municipio              out number,
                              p_p_fcm_contravencional    out number,
                              p_p_conces_contravencional out number,
                              p_p_acuerdopago            out number,
                              p_nit_tercero1             out varchar2,
                              p_base_tercero1            out number,
                              p_ind_base_tercero1        out number,
                              p_nit_tercero2             out varchar2,
                              p_base_tercero2            out number,
                              p_ind_base_tercero2        out number,
                              p_error                    OUT VARCHAR2
                              
                              ) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_fecha_ini                := null;
    p_fecha_fin                := null;
    p_p_municipio              := 0;
    p_p_fcm_contravencional    := 0;
    p_p_conces_contravencional := 0;
    p_p_acuerdopago            := 0;
    p_nit_tercero1             := '';
    p_base_tercero1            := 0;
    p_ind_base_tercero1        := 1;
    p_nit_tercero2             := '';
    p_base_tercero2            := 0;
    p_ind_base_tercero2        := 1;
  
    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select fecha_ini,
               fecha_fin,
               p_municipio,
               p_fcm_contravencional,
               p_conces_contravencional,
               p_acuerdopago,
               nit_tercero1,
               base_tercero1,
               ind_base_tercero1,
               nit_tercero2,
               base_tercero2,
               ind_base_tercero2
        
          into p_fecha_ini,
               p_fecha_fin,
               p_p_municipio,
               p_p_fcm_contravencional,
               p_p_conces_contravencional,
               p_p_acuerdopago,
               p_nit_tercero1,
               p_base_tercero1,
               p_ind_base_tercero1,
               p_nit_tercero2,
               p_base_tercero2,
               p_ind_base_tercero2
        
          from validador_fecha
         where idMunicipio = p_idmunicipio
           and idValidador = p_idvalidador
           and indTipo = p_indTipo;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_validador_fecha] ' || SQLERRM,
            p_error);
  END q_validador_fecha;

  PROCEDURE i_validador_fecha(p_idmunicipio              char,
                              p_idvalidador              char,
                              p_indTipo                  char,
                              p_fecha_ini_ano            number,
                              p_fecha_ini_mes            number,
                              p_fecha_ini_dia            number,
                              p_fecha_fin_ano            number,
                              p_fecha_fin_mes            number,
                              p_fecha_fin_dia            number,
                              p_p_municipio              number,
                              p_p_fcm_contravencional    number,
                              p_p_conces_contravencional number,
                              p_p_acuerdopago            number,
                              p_nit_tercero1             varchar2,
                              p_base_tercero1            number,
                              p_ind_base_tercero1        number,
                              p_nit_tercero2             varchar2,
                              p_base_tercero2            number,
                              p_ind_base_tercero2        number,
                              p_usuario                  varchar2,
                              p_error                    OUT VARCHAR2) AS
  
    w_fecha_ini validador_fecha.fecha_ini%TYPE;
    w_fecha_fin validador_fecha.fecha_ini%TYPE;
    w_operacion varchar2(250);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select TO_DATE(p_fecha_ini_ano || '-' || p_fecha_ini_mes || '-' ||
                   p_fecha_ini_dia,
                   'YYYY-MM-DD')
      into w_fecha_ini
      from DUAL;
  
    select TO_DATE(p_fecha_fin_ano || '-' || p_fecha_fin_mes || '-' ||
                   p_fecha_fin_dia,
                   'YYYY-MM-DD')
      into w_fecha_fin
      from DUAL;
  
    select COUNT(*)
      INTO v_valida
      from validador_fecha t
     where idMunicipio = p_idmunicipio
       and idValidador = p_idvalidador
       and indTipo = p_indTipo;
  
    IF v_valida <> 0 THEN
    
      p_error := 'Validador Ya existente. ';
    
    END IF;
  
    IF v_valida = 0 THEN
    
      insert into validador_fecha
        (idmunicipio,
         idValidador,
         indTipo,
         fecha_ini,
         fecha_fin,
         p_municipio,
         p_fcm_contravencional,
         p_conces_contravencional,
         p_acuerdopago,
         nit_tercero1,
         base_tercero1,
         ind_base_tercero1,
         nit_tercero2,
         base_tercero2,
         ind_base_tercero2)
      values
        (p_idmunicipio,
         p_idValidador,
         p_indTipo,
         w_fecha_ini,
         w_fecha_fin,
         p_p_municipio,
         p_p_fcm_contravencional,
         p_p_conces_contravencional,
         p_p_acuerdopago,
         p_nit_tercero1,
         p_base_tercero1,
         p_ind_base_tercero1,
         p_nit_tercero2,
         p_base_tercero2,
         p_ind_base_tercero2
         
         );
      w_operacion := 'i_validador_fecha';
    
      p_error := MSG_INS_OK;
    
      sp_log(p_usuario,
             w_operacion,
             p_idmunicipio || '-' || p_idValidador || '-' || p_indTipo || '-' ||
             p_fecha_ini_ano || '-' || p_fecha_ini_mes || '-' ||
             p_fecha_ini_dia || '-' || p_fecha_fin_ano || '-' ||
             p_fecha_fin_mes || '-' || p_fecha_fin_dia || '-' ||
             p_p_municipio || '-' || p_p_fcm_contravencional || '-' ||
             p_p_conces_contravencional || '-' || p_p_acuerdopago || '-' ||
             p_nit_tercero1 || '-' || p_base_tercero1 || '-' ||
             p_ind_base_tercero1 || '-' || p_nit_tercero2 || '-' ||
             p_base_tercero2 || '-' || p_ind_base_tercero2);
    
      commit;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_validador_fecha] ' || SQLERRM,
            p_error);
    
  END i_validador_fecha;

  PROCEDURE q_fcm(p_nit_fcm                  char,
                  p_usuario                  varchar2,
                  p_correo                   out varchar2,
                  p_cta_disp_s_banco         out varchar2,
                  p_cta_disp_s_tipo_cta      out varchar2,
                  p_cta_disp_s_cta           out varchar2,
                  p_cta_disp_p_banco         out varchar2,
                  p_cta_disp_p_tipo_cta      out varchar2,
                  p_cta_disp_p_cta           out varchar2,
                  p_iva                      out number,
                  p_retencion_fuente         out number,
                  p_impuesto_timbre_tercero  out number,
                  p_impuesto_timbre_fcm      out number,
                  p_director_ejecutivo       out varchar,
                  p_director_nacional        out varchar,
                  p_contador_general         out varchar,
                  p_coordinador_financiero   out varchar,
                  p_nit_polca                out char,
                  p_nit_sevial               out char,
                  p_ctacon_puente            out varchar,
                  p_ctacon_fondo_cobertura   out varchar,
                  p_ctacon_polca             out varchar,
                  p_ctacon_fcm               out varchar,
                  p_ctacon_fcma              out varchar,
                  p_ctacon_ingreso           out varchar,
                  p_ctacon_impuestos         out varchar,
                  p_ctacon_puente_ext        out varchar,
                  p_reteiva                  out number,
                  p_timbre_contravencional   out number,
                  p_cta_disp_pa_banco        out varchar2,
                  p_cta_disp_pa_tipo_cta     out varchar2,
                  p_cta_disp_pa_cta          out varchar2,
                  p_m_director_ejecutivo     out varchar,
                  p_m_director_nacional      out varchar,
                  p_m_contador_general       out varchar,
                  p_m_coordinador_financiero out varchar,
                  p_dias_activacion          out number,
                  p_integrado                out number,
                  p_url                      out varchar2,
                  p_error                    OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_correo                   := NULL;
    p_cta_disp_s_banco         := '00';
    p_cta_disp_s_tipo_cta      := '000';
    p_cta_disp_s_cta           := NULL;
    p_cta_disp_p_banco         := '00';
    p_cta_disp_p_tipo_cta      := '000';
    p_cta_disp_p_cta           := NULL;
    p_iva                      := 0;
    p_retencion_fuente         := 0;
    p_impuesto_timbre_tercero  := 0;
    p_impuesto_timbre_fcm      := 0;
    p_director_ejecutivo       := NULL;
    p_m_director_ejecutivo     := NULL;
    p_director_nacional        := NULL;
    p_m_director_nacional      := NULL;
    p_contador_general         := NULL;
    p_m_contador_general       := NULL;
    p_coordinador_financiero   := NULL;
    p_m_coordinador_financiero := NULL;
    p_nit_polca                := NULL;
    p_nit_sevial               := NULL;
  
    p_ctacon_puente          := NULL;
    p_ctacon_fondo_cobertura := NULL;
    p_ctacon_polca           := NULL;
    p_ctacon_fcm             := NULL;
    p_ctacon_fcma            := NULL;
    p_ctacon_ingreso         := NULL;
    p_ctacon_impuestos       := NULL;
    p_ctacon_puente_ext      := NULL;
    p_reteiva                := 0;
    p_timbre_contravencional := 0;
    p_cta_disp_pa_banco      := '00';
    p_cta_disp_pa_tipo_cta   := '000';
    p_cta_disp_pa_cta        := NULL;
    p_dias_activacion        := 0;
    p_integrado              := 0;
    p_url                    := NULL;
  
    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select correo,
               cta_disp_s_banco,
               cta_disp_s_tipo_cta,
               cta_disp_s_cta,
               cta_disp_p_banco,
               cta_disp_p_tipo_cta,
               cta_disp_p_cta,
               iva,
               retencion_fuente,
               impuesto_timbre_tercero,
               impuesto_timbre_fcm,
               director_ejecutivo,
               director_nacional,
               contador_general,
               coordinador_financiero,
               nit_polca,
               nit_sevial,
               ctacon_puente,
               ctacon_fondo_cobertura,
               ctacon_polca,
               ctacon_fcm,
               ctacon_fcma,
               ctacon_ingreso,
               ctacon_impuestos,
               ctacon_puente_ext,
               reteiva,
               timbre_contravencional,
               cta_disp_pa_banco,
               cta_disp_pa_tipo_cta,
               cta_disp_pa_cta,
               m_director_ejecutivo,
               m_director_nacional,
               m_contador_general,
               m_coordinador_financiero,
               dias_activacion,
               seguridad_integrada,
               url_seguridad
          into p_correo,
               p_cta_disp_s_banco,
               p_cta_disp_s_tipo_cta,
               p_cta_disp_s_cta,
               p_cta_disp_p_banco,
               p_cta_disp_p_tipo_cta,
               p_cta_disp_p_cta,
               p_iva,
               p_retencion_fuente,
               p_impuesto_timbre_tercero,
               p_impuesto_timbre_fcm,
               p_director_ejecutivo,
               p_director_nacional,
               p_contador_general,
               p_coordinador_financiero,
               p_nit_polca,
               p_nit_sevial,
               p_ctacon_puente,
               p_ctacon_fondo_cobertura,
               p_ctacon_polca,
               p_ctacon_fcm,
               p_ctacon_fcma,
               p_ctacon_ingreso,
               p_ctacon_impuestos,
               p_ctacon_puente_ext,
               p_reteiva,
               p_timbre_contravencional,
               p_cta_disp_pa_banco,
               p_cta_disp_pa_tipo_cta,
               p_cta_disp_pa_cta,
               p_m_director_ejecutivo,
               p_m_director_nacional,
               p_m_contador_general,
               p_m_coordinador_financiero,
               p_dias_activacion,
               p_integrado,
               p_url
          from fcm
         where nit_fcm = p_nit_fcm;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_fcm] ' || SQLERRM, p_error);
  END q_fcm;

  PROCEDURE i_fcm(p_nit_fcm                  char,
                  p_usuario                  varchar2,
                  p_correo                   varchar2,
                  p_cta_disp_s_banco         char,
                  p_cta_disp_s_tipo_cta      char,
                  p_cta_disp_s_cta           varchar2,
                  p_cta_disp_p_banco         char,
                  p_cta_disp_p_tipo_cta      char,
                  p_cta_disp_p_cta           varchar2,
                  p_iva                      number,
                  p_retencion_fuente         number,
                  p_impuesto_timbre_tercero  number,
                  p_impuesto_timbre_fcm      number,
                  p_director_ejecutivo       varchar,
                  p_director_nacional        varchar,
                  p_contador_general         varchar,
                  p_coordinador_financiero   varchar,
                  p_nit_polca                char,
                  p_nit_sevial               char,
                  p_ctacon_puente            varchar,
                  p_ctacon_fondo_cobertura   varchar,
                  p_ctacon_polca             varchar,
                  p_ctacon_fcm               varchar,
                  p_ctacon_fcma              varchar,
                  p_ctacon_ingreso           varchar,
                  p_ctacon_impuestos         varchar,
                  p_ctacon_puente_ext        varchar,
                  p_reteiva                  number,
                  p_timbre_contravencional   number,
                  p_cta_disp_pa_banco        varchar2,
                  p_cta_disp_pa_tipo_cta     varchar2,
                  p_cta_disp_pa_cta          varchar2,
                  p_m_director_ejecutivo     varchar,
                  p_m_director_nacional      varchar,
                  p_m_contador_general       varchar,
                  p_m_coordinador_financiero varchar,
                  p_dias_activacion          number,
                  p_integrado                number,
                  p_url                      varchar2,
                  p_error                    OUT VARCHAR2) AS
  
    w_operacion varchar2(250);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*) INTO v_valida from fcm t where nit_fcm = p_nit_fcm;
  
    IF v_valida <> 0 THEN
      update fcm
         set correo                   = p_correo,
             cta_disp_s_banco         = p_cta_disp_s_banco,
             cta_disp_s_tipo_cta      = p_cta_disp_s_tipo_cta,
             cta_disp_s_cta           = p_cta_disp_s_cta,
             cta_disp_p_banco         = p_cta_disp_p_banco,
             cta_disp_p_tipo_cta      = p_cta_disp_p_tipo_cta,
             cta_disp_p_cta           = p_cta_disp_p_cta,
             iva                      = p_iva,
             retencion_fuente         = p_retencion_fuente,
             impuesto_timbre_tercero  = p_impuesto_timbre_tercero,
             impuesto_timbre_fcm      = p_impuesto_timbre_fcm,
             director_ejecutivo       = p_director_ejecutivo,
             m_director_ejecutivo     = p_m_director_ejecutivo,
             director_nacional        = p_director_nacional,
             m_director_nacional      = p_m_director_nacional,
             contador_general         = p_contador_general,
             m_contador_general       = p_m_contador_general,
             coordinador_financiero   = p_coordinador_financiero,
             m_coordinador_financiero = p_m_coordinador_financiero,
             nit_polca                = p_nit_polca,
             nit_sevial               = p_nit_sevial,
             ctacon_puente            = p_ctacon_puente,
             ctacon_fondo_cobertura   = p_ctacon_fondo_cobertura,
             ctacon_polca             = p_ctacon_polca,
             ctacon_fcm               = p_ctacon_fcm,
             ctacon_fcma              = p_ctacon_fcma,
             ctacon_ingreso           = p_ctacon_ingreso,
             ctacon_impuestos         = p_ctacon_impuestos,
             ctacon_puente_ext        = p_ctacon_puente_ext,
             reteiva                  = p_reteiva,
             timbre_contravencional   = p_timbre_contravencional,
             cta_disp_pa_banco        = p_cta_disp_pa_banco,
             cta_disp_pa_tipo_cta     = p_cta_disp_pa_tipo_cta,
             cta_disp_pa_cta          = p_cta_disp_pa_cta,
             dias_activacion          = p_dias_activacion,
             seguridad_integrada      = p_integrado,
             url_seguridad            = p_url
      
       where nit_fcm = p_nit_fcm;
    
      w_operacion := 'u_fcm';
      p_error     := 'FCM Actualizado Exitosamente. ';
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into fcm
        (nit_fcm,
         correo,
         cta_disp_s_banco,
         cta_disp_s_tipo_cta,
         cta_disp_s_cta,
         cta_disp_p_banco,
         cta_disp_p_tipo_cta,
         cta_disp_p_cta,
         iva,
         retencion_fuente,
         impuesto_timbre_tercero,
         impuesto_timbre_fcm,
         director_ejecutivo,
         director_nacional,
         contador_general,
         coordinador_financiero,
         nit_polca,
         nit_sevial,
         ctacon_puente,
         ctacon_fondo_cobertura,
         ctacon_polca,
         ctacon_fcm,
         ctacon_fcma,
         ctacon_ingreso,
         ctacon_impuestos,
         ctacon_puente_ext,
         reteiva,
         timbre_contravencional,
         cta_disp_pa_banco,
         cta_disp_pa_tipo_cta,
         cta_disp_pa_cta,
         m_director_ejecutivo,
         m_director_nacional,
         m_contador_general,
         m_coordinador_financiero,
         dias_activacion,
         seguridad_integrada,
         url_seguridad)
      values
        (p_nit_fcm,
         p_correo,
         p_cta_disp_s_banco,
         p_cta_disp_s_tipo_cta,
         p_cta_disp_s_cta,
         p_cta_disp_p_banco,
         p_cta_disp_p_tipo_cta,
         p_cta_disp_p_cta,
         p_iva,
         p_retencion_fuente,
         p_impuesto_timbre_tercero,
         p_impuesto_timbre_fcm,
         p_director_ejecutivo,
         p_director_nacional,
         p_contador_general,
         p_coordinador_financiero,
         p_nit_polca,
         p_nit_sevial,
         p_ctacon_puente,
         p_ctacon_fondo_cobertura,
         p_ctacon_polca,
         p_ctacon_fcm,
         p_ctacon_fcma,
         p_ctacon_ingreso,
         p_ctacon_impuestos,
         p_ctacon_puente_ext,
         p_reteiva,
         p_timbre_contravencional,
         p_cta_disp_pa_banco,
         p_cta_disp_pa_tipo_cta,
         p_cta_disp_pa_cta,
         p_m_director_ejecutivo,
         p_m_director_nacional,
         p_m_contador_general,
         p_m_coordinador_financiero,
         p_dias_activacion,
         p_integrado,
         p_url);
    
      w_operacion := 'i_fcm';
      p_error     := 'FCM Agregado Exitosamente. ';
    
    END IF;
  
    sp_log(p_usuario,
           w_operacion,
           p_nit_fcm || '-' || p_nit_fcm || '-' || p_correo || '-' ||
           p_cta_disp_s_banco || '-' || p_cta_disp_s_tipo_cta || '-' ||
           p_cta_disp_s_cta || '-' || p_cta_disp_p_banco || '-' ||
           p_cta_disp_p_tipo_cta || '-' || p_cta_disp_p_cta || '-' || p_iva || '-' ||
           p_retencion_fuente || '-' || p_impuesto_timbre_tercero || '-' ||
           p_impuesto_timbre_fcm || '-' || p_director_ejecutivo || '-' ||
           p_director_nacional || '-' || p_contador_general || '-' ||
           p_coordinador_financiero || '-' || p_nit_polca || '-' ||
           p_nit_sevial || p_integrado || p_url);
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_fcm] ' || SQLERRM, p_error);
    
  END i_fcm;

  PROCEDURE d_cta_recaudo_fcm(p_nit_fcm char,
                              p_idbanco varchar2,
                              p_indtipo varchar2,
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete cta_recaudo_fcm
       where nit_fcm = p_nit_fcm
         and idbanco = p_idbanco
         and indtipo = p_indtipo;
    
      sp_log(p_usuario,
             'd_cta_recaudo_fcm',
             p_nit_fcm || '-' || p_idbanco || '-' || p_indtipo);
      commit;
      p_error := 'Cuenta eliminada Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_cta_recaudo_fcm] ' || SQLERRM,
            p_error);
  END d_cta_recaudo_fcm;

  PROCEDURE q_cta_recaudo_fcm(p_nit_fcm          char,
                              p_idbanco          varchar2,
                              p_indtipo          varchar2,
                              p_usuario          varchar2,
                              p_tipocuenta       out varchar2,
                              p_cuenta           out varchar2,
                              p_comision_recaudo out number,
                              p_comision_ach     out number,
                              p_cta_contable     out varchar2,
                              p_error            OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_tipocuenta       := '000';
    p_cuenta           := null;
    p_comision_recaudo := 0;
    p_comision_ach     := 0;
    p_cta_contable     := null;
  
    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select tipocuenta,
               cuenta,
               comision_recaudo,
               comision_ach,
               cta_contable
          into p_tipocuenta,
               p_cuenta,
               p_comision_recaudo,
               p_comision_ach,
               p_cta_contable
          from cta_recaudo_fcm
         where nit_fcm = p_nit_fcm
           and idbanco = p_idbanco
           and indtipo = p_indtipo;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_cta_recaudo_fcm] ' || SQLERRM,
            p_error);
  END q_cta_recaudo_fcm;

  PROCEDURE i_cta_recaudo_fcm(p_nit_fcm          char,
                              p_idbanco          varchar2,
                              p_indtipo          varchar2,
                              p_tipocuenta       varchar2,
                              p_cuenta           varchar2,
                              p_comision_recaudo number,
                              p_comision_ach     number,
                              p_cta_contable     varchar2,
                              p_usuario          varchar2,
                              p_error            OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from cta_recaudo_fcm t
     where nit_fcm = p_nit_fcm
       and idbanco = p_idbanco
       and indtipo = p_indtipo;
  
    IF v_valida <> 0 THEN
      p_error := 'Cuenta Recaudo ya existente';
    else
      insert into cta_recaudo_fcm
        (nit_fcm,
         idbanco,
         indtipo,
         tipocuenta,
         cuenta,
         comision_recaudo,
         comision_ach,
         cta_contable)
      values
        (p_nit_fcm,
         p_idbanco,
         p_indtipo,
         p_tipocuenta,
         p_cuenta,
         p_comision_recaudo,
         p_comision_ach,
         p_cta_contable);
    
      p_error := MSG_INS_OK;
    
      sp_log(p_usuario,
             'i_cta_recaudo_fcm',
             p_nit_fcm || '-' || p_idbanco || '-' || p_indtipo || '-' ||
             p_tipocuenta || '-' || p_cuenta || '-' || p_comision_recaudo || '-' ||
             p_comision_ach || '-' || p_cta_contable);
      commit;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_cta_recuado_fcm] ' || SQLERRM,
            p_error);
    
  END i_cta_recaudo_fcm;

  PROCEDURE u_cta_recaudo_fcm(p_nit_fcm          char,
                              p_idbanco          varchar2,
                              p_indtipo          varchar2,
                              p_tipocuenta       varchar2,
                              p_cuenta           varchar2,
                              p_comision_recaudo number,
                              p_comision_ach     number,
                              p_cta_contable     varchar2,
                              p_usuario          varchar2,
                              p_error            OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from cta_recaudo_fcm t
     where nit_fcm = p_nit_fcm
       and idbanco = p_idbanco
       and indtipo = p_indtipo;
  
    IF v_valida <> 0 THEN
      update cta_recaudo_fcm
         set idbanco          = p_idbanco,
             indtipo          = p_indtipo,
             tipocuenta       = p_tipocuenta,
             cuenta           = p_cuenta,
             comision_recaudo = p_comision_recaudo,
             comision_ach     = p_comision_ach,
             cta_contable     = p_cta_contable
       where nit_fcm = p_nit_fcm
         and idbanco = p_idbanco
         and indtipo = p_indtipo;
    
      sp_log(p_usuario,
             'u_cta_recaudo_fcm',
             p_nit_fcm || '-' || p_idbanco || '-' || p_indtipo || '-' ||
             p_tipocuenta || '-' || p_cuenta || '-' || p_comision_recaudo || '-' ||
             p_comision_ach || '-' || p_cta_contable);
      commit;
      p_error := MSG_UPD_OK;
    else
      p_error := 'Cuenta Recaudo Local no existe';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_cta_recuado_fcm] ' || SQLERRM,
            p_error);
  END u_cta_recaudo_fcm;

  PROCEDURE i_municipio(p_idmunicipio              varchar2,
                        p_nit_m                    varchar2,
                        p_nombre                   varchar2,
                        p_idconcesionario          varchar2,
                        p_correo                   varchar2,
                        p_indretroactividad        number,
                        p_indliq_s_ext             number,
                        p_indliq_s_local           number,
                        p_indliq_p_ext             number,
                        p_indliq_p_local           number,
                        p_indAcuerdoPago_2002      number,
                        p_idbanco                  varchar2,
                        p_tipocuenta               varchar2,
                        p_cuenta                   varchar2,
                        p_nit_cta                  varchar2,
                        p_municipio_s              number,
                        p_fcm_contravencional_s    number,
                        p_conces_contravencional_s number,
                        p_acuerdopago_s            number,
                        p_municipio_p              number,
                        p_fcm_contravencional_p    number,
                        p_conces_contravencional_p number,
                        p_acuerdopago_p            number,
                        p_usuario                  varchar2,
                        p_error                    OUT VARCHAR2
                        
                        ) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select count(*)
      INTO v_valida
      from departamento t
     where iddepartamento = substr(p_idmunicipio, 1, 2);
  
    if (v_valida = 0) then
      p_error := 'Departamento no existe';
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from municipio t
     where idmunicipio = p_idmunicipio;
  
    IF v_valida <> 0 THEN
      p_error := 'municipio ya existente';
      return;
    else
      insert into municipio
        (idmunicipio,
         nit_m,
         nombre,
         idconcesionario,
         correo,
         indretroactividad,
         idbanco,
         tipocuenta,
         cuenta,
         nit_cta,
         indliq_s_ext,
         indliq_s_local,
         indliq_p_ext,
         indliq_p_local,
         indAcuerdoPago_2002,
         iddepartamento)
      values
        (p_idmunicipio,
         p_nit_m,
         p_nombre,
         p_idconcesionario,
         p_correo,
         p_indretroactividad,
         p_idbanco,
         p_tipocuenta,
         encriptar(p_cuenta),
         p_nit_cta,
         p_indliq_s_ext,
         p_indliq_s_local,
         p_indliq_p_ext,
         p_indliq_p_local,
         p_indAcuerdoPago_2002,
         substr(p_idmunicipio, 1, 2));
    
      p_error := MSG_INS_OK;
    
      commit;
    END IF;
  
    select COUNT(*)
      INTO v_valida
      from p_dispersion_municipio t
     where idmunicipio = p_idmunicipio;
  
    IF v_valida <> 0 THEN
      p_error := 'municipio ya existente';
    else
      insert into p_dispersion_municipio
        (idmunicipio,
         municipio_s,
         fcm_contravencional_s,
         conces_contravencional_s,
         acuerdopago_s,
         municipio_p,
         fcm_contravencional_p,
         conces_contravencional_p,
         acuerdopago_p)
      values
        (p_idmunicipio,
         p_municipio_s,
         p_fcm_contravencional_s,
         p_conces_contravencional_s,
         p_acuerdopago_s,
         p_municipio_p,
         p_fcm_contravencional_p,
         p_conces_contravencional_p,
         p_acuerdopago_p);
    
      sp_log(p_usuario,
             'i_municipio',
             p_idmunicipio || '-' || p_nit_m || '-' || p_nombre || '-' ||
             p_idconcesionario || '-' || p_correo || '-' ||
             p_indretroactividad || '-' || p_idbanco || '-' || p_tipocuenta || '-' ||
             p_cuenta || '-' || p_nit_cta || '-' || p_indliq_s_ext || '-' ||
             p_indliq_s_local || '-' || p_indliq_p_ext || '-' || '-' ||
             p_indAcuerdoPago_2002 || '-' || p_indliq_p_local || '-' ||
             p_municipio_s || '-' || p_fcm_contravencional_s || '-' ||
             p_conces_contravencional_s || '-' || p_acuerdopago_s || '-' ||
             p_municipio_p || '-' || p_fcm_contravencional_p || '-' ||
             p_conces_contravencional_p || '-' || p_acuerdopago_p);
    
      commit;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_municipio] ' || SQLERRM, p_error);
    
  END i_municipio;

  PROCEDURE q_municipio(p_idmunicipio              varchar2,
                        p_usuario                  varchar2,
                        p_nit_m                    out varchar2,
                        p_nombre                   out varchar2,
                        p_idconcesionario          out varchar2,
                        p_correo                   out varchar2,
                        p_indretroactividad        out number,
                        p_indliq_s_ext             out number,
                        p_indliq_s_local           out number,
                        p_indliq_p_ext             out number,
                        p_indliq_p_local           out number,
                        p_indAcuerdoPago_2002      out number,
                        p_idbanco                  out varchar2,
                        p_tipocuenta               out varchar2,
                        p_cuenta                   out varchar2,
                        p_nit_cta                  out varchar2,
                        p_municipio_s              out number,
                        p_fcm_contravencional_s    out number,
                        p_conces_contravencional_s out number,
                        p_acuerdopago_s            out number,
                        p_municipio_p              out number,
                        p_fcm_contravencional_p    out number,
                        p_conces_contravencional_p out number,
                        p_acuerdopago_p            out number,
                        p_error                    OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_nit_m                    := '';
    p_nombre                   := '';
    p_idconcesionario          := '00';
    p_correo                   := '';
    p_indretroactividad        := 0;
    p_indliq_s_ext             := 0;
    p_indliq_s_local           := 0;
    p_indliq_p_ext             := 0;
    p_indliq_p_local           := 0;
    p_indAcuerdoPago_2002      := 0;
    p_idbanco                  := '00';
    p_tipocuenta               := '000';
    p_cuenta                   := '';
    p_nit_cta                  := '';
    p_municipio_s              := 0;
    p_fcm_contravencional_s    := 0;
    p_conces_contravencional_s := 0;
    p_acuerdopago_s            := 0;
    p_municipio_p              := 0;
    p_fcm_contravencional_p    := 0;
    p_conces_contravencional_p := 0;
    p_acuerdopago_p            := 0;
  
    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select nit_m,
               nombre,
               idconcesionario,
               correo,
               indretroactividad,
               idbanco,
               tipocuenta,
               desencriptar(cuenta),
               nit_cta,
               indliq_s_ext,
               indliq_s_local,
               indliq_p_ext,
               indliq_p_local,
               indAcuerdoPago_2002
          into p_nit_m,
               p_nombre,
               p_idconcesionario,
               p_correo,
               p_indretroactividad,
               p_idbanco,
               p_tipocuenta,
               p_cuenta,
               p_nit_cta,
               p_indliq_s_ext,
               p_indliq_s_local,
               p_indliq_p_ext,
               p_indliq_p_local,
               p_indacuerdopago_2002
        
          from municipio
         where idmunicipio = p_idmunicipio;
      
        p_error := 'Consulta Exitosa';
      
        select count(*)
          into v_valida
          from p_dispersion_municipio
         where idmunicipio = p_idmunicipio;
      
        if v_valida = 0 then
          return;
        end if;
      
        select municipio_s,
               fcm_contravencional_s,
               conces_contravencional_s,
               acuerdopago_s,
               municipio_p,
               fcm_contravencional_p,
               conces_contravencional_p,
               acuerdopago_p
          into p_municipio_s,
               p_fcm_contravencional_s,
               p_conces_contravencional_s,
               p_acuerdopago_s,
               p_municipio_p,
               p_fcm_contravencional_p,
               p_conces_contravencional_p,
               p_acuerdopago_p
        
          from p_dispersion_municipio
         where idmunicipio = p_idmunicipio;
      
        sp_log(p_usuario,
               'q_municipio',
               p_idmunicipio || '-' || p_nit_m || '-' || p_nombre || '-' ||
               p_idconcesionario || '-' || p_correo || '-' ||
               p_indretroactividad || '-' || p_idbanco || '-' ||
               p_tipocuenta || '-' || p_cuenta || '-' || p_nit_cta || '-' ||
               p_indliq_s_ext || '-' || p_indliq_s_local || '-' ||
               p_indliq_p_ext || '-' || '-' || p_indAcuerdoPago_2002 || '-' ||
               p_indliq_p_local || '-' || p_municipio_s || '-' ||
               p_fcm_contravencional_s || '-' || p_conces_contravencional_s || '-' ||
               p_acuerdopago_s || '-' || p_municipio_p || '-' ||
               p_fcm_contravencional_p || '-' || p_conces_contravencional_p || '-' ||
               p_acuerdopago_p);
      
        commit;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_municipio] ' || SQLERRM, p_error);
  END q_municipio;

  PROCEDURE i_dias_dispersion(
                              
                              p_idmunicipio char,
                              p_idbanco     char,
                              
                              p_dias_dispersion_se number,
                              p_dias_dispersion_sl number,
                              p_dias_dispersion_pe number,
                              p_dias_dispersion_pl number,
                              
                              p_frec_dispersion_se number,
                              p_frec_dispersion_sl number,
                              p_frec_dispersion_pe number,
                              p_frec_dispersion_pl number,
                              
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from dias_dispersion t
     where idmunicipio = p_idmunicipio
       and idbanco = p_idbanco;
  
    IF v_valida <> 0 THEN
      p_error := 'Dias Dispersion Ya existe ';
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into dias_dispersion
        (idmunicipio,
         idbanco,
         dias_dispersion_sl,
         frec_dispersion_sl,
         dias_dispersion_pl,
         frec_dispersion_pl,
         dias_dispersion_se,
         frec_dispersion_se,
         dias_dispersion_pe,
         frec_dispersion_pe)
      values
        (p_idmunicipio,
         p_idbanco,
         p_dias_dispersion_sl,
         p_frec_dispersion_sl,
         p_dias_dispersion_pl,
         p_frec_dispersion_pl,
         p_dias_dispersion_se,
         p_frec_dispersion_se,
         p_dias_dispersion_pe,
         p_frec_dispersion_pe
         
         );
      sp_log(p_usuario,
             'i_dias_dispersion',
             p_idmunicipio || '-' || p_idbanco || '-' ||
             p_dias_dispersion_sl || '-' || p_frec_dispersion_sl || '-' ||
             p_dias_dispersion_pl || '-' || p_frec_dispersion_pl || '-' ||
             p_dias_dispersion_se || '-' || p_frec_dispersion_se || '-' ||
             p_dias_dispersion_pe || '-' || p_frec_dispersion_pe);
      commit;
    
      p_error := MSG_INS_OK;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_dias_dispersion] ' || SQLERRM,
            p_error);
    
  END i_dias_dispersion;

  PROCEDURE u_dias_dispersion(
                              
                              p_idmunicipio char,
                              p_idbanco     char,
                              
                              p_dias_dispersion_se number,
                              p_dias_dispersion_sl number,
                              p_dias_dispersion_pe number,
                              p_dias_dispersion_pl number,
                              
                              p_frec_dispersion_se number,
                              p_frec_dispersion_sl number,
                              p_frec_dispersion_pe number,
                              p_frec_dispersion_pl number,
                              
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from dias_dispersion t
     where idmunicipio = p_idmunicipio
       and idbanco = p_idbanco;
  
    IF v_valida <> 0 THEN
      update dias_dispersion
         set dias_dispersion_se = p_dias_dispersion_se,
             dias_dispersion_sl = p_dias_dispersion_sl,
             dias_dispersion_pe = p_dias_dispersion_pe,
             dias_dispersion_pl = p_dias_dispersion_pl,
             
             frec_dispersion_se = p_frec_dispersion_se,
             frec_dispersion_sl = p_frec_dispersion_sl,
             frec_dispersion_pe = p_frec_dispersion_pe,
             frec_dispersion_pl = p_frec_dispersion_pl
       where idmunicipio = p_idmunicipio
         and idbanco = p_idbanco;
    
      sp_log(p_usuario,
             'u_dias_dispersion',
             p_idmunicipio || '-' || p_idbanco || '-' ||
             p_dias_dispersion_sl || '-' || p_frec_dispersion_sl || '-' ||
             p_dias_dispersion_pl || '-' || p_frec_dispersion_pl || '-' ||
             p_dias_dispersion_se || '-' || p_frec_dispersion_se || '-' ||
             p_dias_dispersion_pe || '-' || p_frec_dispersion_pe);
    
      commit;
    
      p_error := MSG_UPD_OK;
    
    END IF;
  
    IF v_valida = 0 THEN
      p_error := 'Registro dias dispersion no existe';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_dias_dispersion] ' || SQLERRM,
            p_error);
    
  END u_dias_dispersion;

  PROCEDURE d_dias_dispersion(p_idmunicipio char,
                              p_idbanco     char,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete dias_dispersion
       where idmunicipio = p_idmunicipio
         and idbanco = p_idbanco;
      sp_log(p_usuario,
             'd_dias_dispersion',
             p_idmunicipio || '-' || p_idbanco);
      commit;
      p_error := MSG_DEL_OK;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_dias_dispersion] ' || SQLERRM,
            p_error);
    
  END d_dias_dispersion;

  PROCEDURE q_dias_dispersion(p_idmunicipio        char,
                              p_idbanco            char,
                              p_usuario            varchar2,
                              p_dias_dispersion_se out number,
                              p_dias_dispersion_sl out number,
                              p_dias_dispersion_pe out number,
                              p_dias_dispersion_pl out number,
                              
                              p_frec_dispersion_se out number,
                              p_frec_dispersion_sl out number,
                              p_frec_dispersion_pe out number,
                              p_frec_dispersion_pl out number,
                              
                              p_error OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_dias_dispersion_se := 0;
    p_dias_dispersion_sl := 0;
    p_dias_dispersion_pe := 0;
    p_dias_dispersion_pl := 0;
  
    p_frec_dispersion_se := 0;
    p_frec_dispersion_sl := 0;
    p_frec_dispersion_pe := 0;
    p_frec_dispersion_pl := 0;
  
    -- VALIDACIONES
    -- sp_v_usuario(p_usuario, p_error,'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select dias_dispersion_sl,
               frec_dispersion_sl,
               dias_dispersion_pl,
               frec_dispersion_pl,
               dias_dispersion_se,
               frec_dispersion_se,
               dias_dispersion_pe,
               frec_dispersion_pe
        
          into p_dias_dispersion_sl,
               p_frec_dispersion_sl,
               p_dias_dispersion_pl,
               p_frec_dispersion_pl,
               p_dias_dispersion_se,
               p_frec_dispersion_se,
               p_dias_dispersion_pe,
               p_frec_dispersion_pe
        
          from dias_dispersion
         where idmunicipio = p_idmunicipio
           and idbanco = p_idbanco;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_dias_dispersion] ' || SQLERRM,
            p_error);
  END q_dias_dispersion;

  PROCEDURE i_tercero(
                      
                      p_idmunicipio   char,
                      p_nit_t         char,
                      p_nombre        varchar2,
                      p_correoTercero varchar2,
                      p_idbanco       char,
                      p_tipocuenta    char,
                      p_cuenta        varchar2,
                      p_base_s        number,
                      p_base_p        number,
                      p_ind_base      number,
                      p_num_tercero   number,
                      p_usuario       varchar2,
                      p_error         OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from tercero t
     where idmunicipio = p_idmunicipio
       and num_tercero = p_num_tercero;
  
    IF v_valida <> 0 THEN
      p_error := 'Numero Tercero ya existe';
    
    END IF;
  
    select COUNT(*)
      INTO v_valida
      from tercero t
     where idmunicipio = p_idmunicipio
       and nit_t = p_nit_t;
  
    IF v_valida <> 0 THEN
      p_error := 'Nit Tercero ya existe';
    END IF;
  
    IF v_valida = 0 THEN
      insert into tercero
        (idmunicipio,
         nit_t,
         nombre,
         correoTercero,
         idbanco,
         tipocuenta,
         cuenta,
         base_s,
         base_p,
         ind_base,
         num_tercero)
      values
        (p_idmunicipio,
         p_nit_t,
         p_nombre,
         p_correoTercero,
         p_idbanco,
         p_tipocuenta,
         encriptar(p_cuenta),
         p_base_s,
         p_base_p,
         p_ind_base,
         p_num_tercero);
    
      sp_log(p_usuario,
             'i_tercero',
             p_idmunicipio || '-' || p_nit_t || '-' || p_nombre || '-' ||
             p_idbanco || '-' || p_tipocuenta || '-' || p_cuenta || '-' ||
             p_base_s || '-' || p_base_p || '-' || p_ind_base || '-' ||
             p_num_tercero);
      commit;
    
      p_error := MSG_INS_OK;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_tercero] ' || SQLERRM, p_error);
    
  END i_tercero;

  PROCEDURE u_tercero(
                      
                      p_idmunicipio   char,
                      p_nit_t         char,
                      p_nombre        varchar2,
                      p_correoTercero varchar2,
                      p_idbanco       char,
                      p_tipocuenta    char,
                      p_cuenta        varchar2,
                      p_base_s        number,
                      p_base_p        number,
                      p_ind_base      number,
                      p_num_tercero   number,
                      p_usuario       varchar2,
                      p_error         OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from tercero t
     where idmunicipio = p_idmunicipio
       and num_tercero = p_num_tercero;
  
    IF v_valida <> 0 THEN
      update tercero
         set nombre        = p_nombre,
             correoTercero = p_correoTercero,
             idbanco       = p_idbanco,
             tipocuenta    = p_tipocuenta,
             cuenta        = encriptar(p_cuenta),
             base_s        = p_base_s,
             base_p        = p_base_p,
             ind_base      = p_ind_base,
             nit_t         = p_nit_t
       where idmunicipio = p_idmunicipio
         and num_tercero = p_num_tercero;
    
      sp_log(p_usuario,
             'u_tercero',
             p_idmunicipio || '-' || p_nit_t || '-' || p_nombre || '-' ||
             p_idbanco || '-' || p_tipocuenta || '-' || p_cuenta || '-' ||
             p_base_s || '-' || p_base_p || '-' || p_ind_base || '-' ||
             p_num_tercero);
      commit;
    
      p_error := MSG_UPD_OK;
    
    END IF;
  
    IF v_valida = 0 THEN
    
      p_error := 'Tercero No existe';
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_tercero] ' || SQLERRM, p_error);
    
  END u_tercero;

  PROCEDURE q_tercero(p_idmunicipio   char,
                      p_nit_t         out varchar2,
                      p_usuario       varchar2,
                      p_nombre        out varchar2,
                      p_correoTercero out varchar2,
                      p_idbanco       out varchar2,
                      p_tipocuenta    out varchar2,
                      p_cuenta        out varchar2,
                      p_base_s        out number,
                      p_base_p        out number,
                      p_ind_base      out number,
                      p_num_tercero   number,
                      p_error         OUT VARCHAR2
                      
                      ) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_nombre        := null;
    p_correoTercero := null;
    p_idbanco       := '00';
    p_tipocuenta    := '000';
    p_cuenta        := null;
    p_base_s        := 0;
    p_base_p        := 0;
    p_ind_base      := 1;
    p_nit_t         := null;
  
    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select nombre,
               correoTercero,
               idbanco,
               tipocuenta,
               desencriptar(cuenta),
               base_s,
               base_p,
               ind_base,
               nit_t
        
          into p_nombre,
               p_correoTercero,
               p_idbanco,
               p_tipocuenta,
               p_cuenta,
               p_base_s,
               p_base_p,
               p_ind_base,
               p_nit_t
        
          from tercero
         where idmunicipio = p_idmunicipio
           and num_tercero = p_num_tercero;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_tercero] ' || SQLERRM, p_error);
    
  END q_tercero;

  PROCEDURE i_concesionario(p_idconcesionario           char,
                            p_nit_c                     varchar2,
                            p_nombre                    varchar2,
                            p_correo                    varchar2,
                            p_concesionario_s           number,
                            p_fondo_cob_concesionario_s number,
                            p_fondo_cob_simit_s         number,
                            p_simit_s                   number,
                            p_equilibrio_economico_s    number,
                            
                            p_concesionario_pm           number,
                            p_fondo_cob_concesionario_pm number,
                            p_fondo_cob_simit_pm         number,
                            p_simit_pm                   number,
                            p_equilibrio_economico_pm    number,
                            
                            p_simit_pp                number,
                            p_sevial_pp               number,
                            p_equilibrio_economico_pp number,
                            
                            p_polca_cp                number,
                            p_fcm_cp                  number,
                            p_sevial_cp               number,
                            p_equilibrio_economico_cp number,
                            
                            p_ccLocalConS varchar2,
                            p_ccLocalSimS varchar2,
                            p_ccLocalFonS varchar2,
                            p_ccLocalCobS varchar2,
                            p_ccLocalEquS varchar2,
                            
                            p_ccExtConS varchar2,
                            p_ccExtSimS varchar2,
                            p_ccExtFonS varchar2,
                            p_ccExtCobS varchar2,
                            p_ccExtEquS varchar2,
                            
                            p_ccLocalConP varchar2,
                            p_ccLocalSimP varchar2,
                            p_ccLocalFonP varchar2,
                            p_ccLocalCobP varchar2,
                            p_ccLocalEquP varchar2,
                            
                            p_ccExtConP varchar2,
                            p_ccExtSimP varchar2,
                            p_ccExtFonP varchar2,
                            p_ccExtCobP varchar2,
                            p_ccExtEquP varchar2,
                            
                            p_ccLocalSimPP varchar2,
                            p_ccLocalSevPP varchar2,
                            p_ccLocalEquPP varchar2,
                            
                            p_ccExtSimPP varchar2,
                            p_ccExtSevPP varchar2,
                            p_ccExtEquPP varchar2,
                            
                            p_ccLocalSimCP varchar2,
                            p_ccLocalFcmCP varchar2,
                            p_ccLocalSevCP varchar2,
                            p_ccLocalEquCP varchar2,
                            
                            p_ccExtSimCP varchar2,
                            p_ccExtFcmCP varchar2,
                            p_ccExtSevCP varchar2,
                            p_ccExtEquCP varchar2,
                            
                            p_usuario varchar2,
                            p_error   OUT VARCHAR2) AS
  
    w_operacion varchar2(250);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from concesionario t
     where idconcesionario = p_idconcesionario;
  
    IF v_valida <> 0 THEN
      p_error := 'Concesionario ya existe. ';
      return;
    END IF;
  
    IF v_valida = 0 THEN
      insert into concesionario
        (idconcesionario, nit_c, nombre, correo)
      values
        (p_idconcesionario, p_nit_c, p_nombre, p_correo);
    
      w_operacion := 'i_concesionario';
      p_error     := MSG_INS_OK;
    
    END IF;
  
    select COUNT(*)
      INTO v_valida
      from p_dispersion_concesionario t
     where idconcesionario = p_idconcesionario;
  
    IF v_valida <> 0 THEN
      update p_dispersion_concesionario
         set concesionario_s           = p_concesionario_s,
             fondo_cob_concesionario_s = p_fondo_cob_concesionario_s,
             fondo_cob_simit_s         = p_fondo_cob_simit_s,
             simit_s                   = p_simit_s,
             equilibrio_economico_s    = p_equilibrio_economico_s,
             
             concesionario_pm           = p_concesionario_pm,
             fondo_cob_concesionario_pm = p_fondo_cob_concesionario_pm,
             fondo_cob_simit_pm         = p_fondo_cob_simit_pm,
             simit_pm                   = p_simit_pm,
             equilibrio_economico_pm    = p_equilibrio_economico_pm,
             
             simit_pp                = p_simit_pp,
             sevial_pp               = p_sevial_pp,
             equilibrio_economico_pp = p_equilibrio_economico_pp,
             
             polca_cp                = p_polca_cp,
             fcm_cp                  = p_fcm_cp,
             sevial_cp               = p_sevial_cp,
             equilibrio_economico_cp = p_equilibrio_economico_cp,
             
             concesionario_s_cc           = p_ccLocalConS,
             fondo_cob_concesionario_s_cc = p_ccLocalFonS,
             fondo_cob_simit_s_cc         = p_ccLocalCobS,
             simit_s_cc                   = p_ccLocalSimS,
             equilibrio_economico_s_cc    = p_ccLocalEquS,
             
             concesionario_pm_cc           = p_ccLocalConP,
             fondo_cob_concesionario_pm_cc = p_ccLocalFonP,
             fondo_cob_simit_pm_cc         = p_ccLocalCobP,
             simit_pm_cc                   = p_ccLocalSimP,
             equilibrio_economico_pm_cc    = p_ccLocalEquP,
             
             simit_pp_cc                = p_ccLocalSimPP,
             sevial_pp_cc               = p_ccLocalSevPP,
             equilibrio_economico_pp_cc = p_ccLocalEquPP,
             
             polca_cp_cc                = p_ccLocalSimCP,
             fcm_cp_cc                  = p_ccLocalFcmCP,
             sevial_cp_cc               = p_ccLocalSevCP,
             equilibrio_economico_cp_cc = p_ccLocalEquCP,
             
             CONCESIONARIO_S_CC_EXT = p_ccExtConS,
             FONCOB_CONCES_S_CC_EXT = p_ccExtFonS,
             FONCOB_SIMIT_S_CC_EXT  = p_ccExtCobS,
             SIMIT_S_CC_EXT         = p_ccExtSimS,
             EQUIL_ECON_S_CC_EXT    = p_ccExtEquS,
             
             CONCESIONARIO_PM_CC_EXT = p_ccExtConP,
             FONCOB_CONCES_PM_CC_EXT = p_ccExtFonP,
             FONCOB_SIMIT_PM_CC_EXT  = p_ccExtCobP,
             SIMIT_PM_CC_EXT         = p_ccExtSimP,
             EQUIL_ECON_PM_CC_EXT    = p_ccExtEquP,
             
             SIMIT_PP_CC_EXT      = p_ccExtSimPP,
             SEVIAL_PP_CC_EXT     = p_ccExtSevPP,
             EQUIL_ECON_PP_CC_EXT = p_ccExtEquPP,
             
             POLCA_CP_CC_EXT      = p_ccExtSimCP,
             FCM_CP_CC_EXT        = p_ccExtFcmCP,
             SEVIAL_CP_CC_EXT     = p_ccExtSevCP,
             EQUIL_ECON_CP_CC_EXT = p_ccExtEquCP
      
       where idconcesionario = p_idconcesionario;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into p_dispersion_concesionario
        (idconcesionario,
         concesionario_s,
         fondo_cob_concesionario_s,
         fondo_cob_simit_s,
         simit_s,
         equilibrio_economico_s,
         
         concesionario_pm,
         fondo_cob_concesionario_pm,
         fondo_cob_simit_pm,
         simit_pm,
         equilibrio_economico_pm,
         
         simit_pp,
         sevial_pp,
         equilibrio_economico_pp,
         
         polca_cp,
         fcm_cp,
         sevial_cp,
         equilibrio_economico_cp,
         
         concesionario_s_cc,
         fondo_cob_concesionario_s_cc,
         fondo_cob_simit_s_cc,
         simit_s_cc,
         equilibrio_economico_s_cc,
         
         concesionario_pm_cc,
         fondo_cob_concesionario_pm_cc,
         fondo_cob_simit_pm_cc,
         simit_pm_cc,
         equilibrio_economico_pm_cc,
         
         simit_pp_cc,
         sevial_pp_cc,
         equilibrio_economico_pp_cc,
         
         polca_cp_cc,
         fcm_cp_cc,
         sevial_cp_cc,
         equilibrio_economico_cp_cc,
         
         CONCESIONARIO_S_CC_EXT,
         FONCOB_CONCES_S_CC_EXT,
         FONCOB_SIMIT_S_CC_EXT,
         SIMIT_S_CC_EXT,
         EQUIL_ECON_S_CC_EXT,
         
         CONCESIONARIO_PM_CC_EXT,
         FONCOB_CONCES_PM_CC_EXT,
         FONCOB_SIMIT_PM_CC_EXT,
         SIMIT_PM_CC_EXT,
         EQUIL_ECON_PM_CC_EXT,
         
         SIMIT_PP_CC_EXT,
         SEVIAL_PP_CC_EXT,
         EQUIL_ECON_PP_CC_EXT,
         
         POLCA_CP_CC_EXT,
         FCM_CP_CC_EXT,
         SEVIAL_CP_CC_EXT,
         EQUIL_ECON_CP_CC_EXT
         
         )
      values
        (p_idconcesionario,
         p_concesionario_s,
         p_fondo_cob_concesionario_s,
         p_fondo_cob_simit_s,
         p_simit_s,
         p_equilibrio_economico_s,
         
         p_concesionario_pm,
         p_fondo_cob_concesionario_pm,
         p_fondo_cob_simit_pm,
         p_simit_pm,
         p_equilibrio_economico_pm,
         
         p_simit_pp,
         p_sevial_pp,
         p_equilibrio_economico_pp,
         
         p_polca_cp,
         p_fcm_cp,
         p_sevial_cp,
         p_equilibrio_economico_cp,
         
         p_ccLocalConS,
         p_ccLocalFonS,
         p_ccLocalCobS,
         p_ccLocalSimS,
         p_ccLocalEquS,
         
         p_ccLocalConP,
         p_ccLocalFonP,
         p_ccLocalCobP,
         p_ccLocalSimP,
         p_ccLocalEquP,
         
         p_ccLocalSimPP,
         p_ccLocalSevPP,
         p_ccLocalEquPP,
         
         p_ccLocalSimCP,
         p_ccLocalFcmCP,
         p_ccLocalSevCP,
         p_ccLocalEquCP,
         
         p_ccExtConS,
         p_ccExtFonS,
         p_ccExtCobS,
         p_ccExtSimS,
         p_ccExtEquS,
         
         p_ccExtConP,
         p_ccExtFonP,
         p_ccExtCobP,
         p_ccExtSimP,
         p_ccExtEquP,
         
         p_ccExtSimPP,
         p_ccExtSevPP,
         p_ccExtEquPP,
         
         p_ccExtSimCP,
         p_ccExtFcmCP,
         p_ccExtSevCP,
         p_ccExtEquCP
         
         );
    
    END IF;
  
    sp_log(p_usuario,
           w_operacion,
           p_idconcesionario || '-' || p_nit_c || '-' || p_nombre || '-' ||
           p_correo || '-' || p_concesionario_s || '-' ||
           p_fondo_cob_concesionario_s || '-' || p_fondo_cob_simit_s || '-' ||
           p_simit_s || '-' || p_equilibrio_economico_s || '-' ||
           
           p_concesionario_pm || '-' || p_fondo_cob_concesionario_pm || '-' ||
           p_fondo_cob_simit_pm || '-' || p_simit_pm || '-' ||
           p_equilibrio_economico_pm || '-' ||
           
           p_simit_pp || '-' || p_sevial_pp || '-' ||
           p_equilibrio_economico_pp || '-' ||
           
           p_polca_cp || '-' || p_fcm_cp || '-' || p_sevial_cp || '-' ||
           p_equilibrio_economico_cp
           
           );
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_concesionario] ' || SQLERRM,
            p_error);
    
  END i_concesionario;

  PROCEDURE u_concesionario(p_idconcesionario           char,
                            p_nit_c                     varchar2,
                            p_nombre                    varchar2,
                            p_correo                    varchar2,
                            p_concesionario_s           number,
                            p_fondo_cob_concesionario_s number,
                            p_fondo_cob_simit_s         number,
                            p_simit_s                   number,
                            p_equilibrio_economico_s    number,
                            
                            p_concesionario_pm           number,
                            p_fondo_cob_concesionario_pm number,
                            p_fondo_cob_simit_pm         number,
                            p_simit_pm                   number,
                            p_equilibrio_economico_pm    number,
                            
                            p_simit_pp                number,
                            p_sevial_pp               number,
                            p_equilibrio_economico_pp number,
                            
                            p_polca_cp                number,
                            p_fcm_cp                  number,
                            p_sevial_cp               number,
                            p_equilibrio_economico_cp number,
                            
                            p_ccLocalConS varchar2,
                            p_ccLocalSimS varchar2,
                            p_ccLocalFonS varchar2,
                            p_ccLocalCobS varchar2,
                            p_ccLocalEquS varchar2,
                            
                            p_ccExtConS varchar2,
                            p_ccExtSimS varchar2,
                            p_ccExtFonS varchar2,
                            p_ccExtCobS varchar2,
                            p_ccExtEquS varchar2,
                            
                            p_ccLocalConP varchar2,
                            p_ccLocalSimP varchar2,
                            p_ccLocalFonP varchar2,
                            p_ccLocalCobP varchar2,
                            p_ccLocalEquP varchar2,
                            
                            p_ccExtConP varchar2,
                            p_ccExtSimP varchar2,
                            p_ccExtFonP varchar2,
                            p_ccExtCobP varchar2,
                            p_ccExtEquP varchar2,
                            
                            p_ccLocalSimPP varchar2,
                            p_ccLocalSevPP varchar2,
                            p_ccLocalEquPP varchar2,
                            
                            p_ccExtSimPP varchar2,
                            p_ccExtSevPP varchar2,
                            p_ccExtEquPP varchar2,
                            
                            p_ccLocalSimCP varchar2,
                            p_ccLocalFcmCP varchar2,
                            p_ccLocalSevCP varchar2,
                            p_ccLocalEquCP varchar2,
                            
                            p_ccExtSimCP varchar2,
                            p_ccExtFcmCP varchar2,
                            p_ccExtSevCP varchar2,
                            p_ccExtEquCP varchar2,
                            
                            p_usuario varchar2,
                            p_error   OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from concesionario t
     where idconcesionario = p_idconcesionario;
  
    IF v_valida <> 0 THEN
      update concesionario
         set nit_c = p_nit_c, nombre = p_nombre, correo = p_correo
       where idconcesionario = p_idconcesionario;
    
      p_error := MSG_UPD_OK;
    
    END IF;
  
    IF v_valida = 0 THEN
      p_error := 'Concesionario No existe. ';
      return;
    END IF;
  
    select COUNT(*)
      INTO v_valida
      from p_dispersion_concesionario t
     where idconcesionario = p_idconcesionario;
  
    IF v_valida <> 0 THEN
      update p_dispersion_concesionario
         set concesionario_s           = p_concesionario_s,
             fondo_cob_concesionario_s = p_fondo_cob_concesionario_s,
             fondo_cob_simit_s         = p_fondo_cob_simit_s,
             simit_s                   = p_simit_s,
             equilibrio_economico_s    = p_equilibrio_economico_s,
             
             concesionario_pm           = p_concesionario_pm,
             fondo_cob_concesionario_pm = p_fondo_cob_concesionario_pm,
             fondo_cob_simit_pm         = p_fondo_cob_simit_pm,
             simit_pm                   = p_simit_pm,
             equilibrio_economico_pm    = p_equilibrio_economico_pm,
             
             simit_pp                = p_simit_pp,
             sevial_pp               = p_sevial_pp,
             equilibrio_economico_pp = p_equilibrio_economico_pp,
             
             polca_cp                = p_polca_cp,
             fcm_cp                  = p_fcm_cp,
             sevial_cp               = p_sevial_cp,
             equilibrio_economico_cp = p_equilibrio_economico_cp,
             
             concesionario_s_cc           = p_ccLocalConS,
             fondo_cob_concesionario_s_cc = p_ccLocalFonS,
             fondo_cob_simit_s_cc         = p_ccLocalCobS,
             simit_s_cc                   = p_ccLocalSimS,
             equilibrio_economico_s_cc    = p_ccLocalEquS,
             
             concesionario_pm_cc           = p_ccLocalConP,
             fondo_cob_concesionario_pm_cc = p_ccLocalFonP,
             fondo_cob_simit_pm_cc         = p_ccLocalCobP,
             simit_pm_cc                   = p_ccLocalSimP,
             equilibrio_economico_pm_cc    = p_ccLocalEquP,
             
             simit_pp_cc                = p_ccLocalSimPP,
             sevial_pp_cc               = p_ccLocalSevPP,
             equilibrio_economico_pp_cc = p_ccLocalEquPP,
             
             polca_cp_cc                = p_ccLocalSimCP,
             fcm_cp_cc                  = p_ccLocalFcmCP,
             sevial_cp_cc               = p_ccLocalSevCP,
             equilibrio_economico_cp_cc = p_ccLocalEquCP,
             
             CONCESIONARIO_S_CC_EXT = p_ccExtConS,
             FONCOB_CONCES_S_CC_EXT = p_ccExtFonS,
             FONCOB_SIMIT_S_CC_EXT  = p_ccExtCobS,
             SIMIT_S_CC_EXT         = p_ccExtSimS,
             EQUIL_ECON_S_CC_EXT    = p_ccExtEquS,
             
             CONCESIONARIO_PM_CC_EXT = p_ccExtConP,
             FONCOB_CONCES_PM_CC_EXT = p_ccExtFonP,
             FONCOB_SIMIT_PM_CC_EXT  = p_ccExtCobP,
             SIMIT_PM_CC_EXT         = p_ccExtSimP,
             EQUIL_ECON_PM_CC_EXT    = p_ccExtEquP,
             
             SIMIT_PP_CC_EXT      = p_ccExtSimPP,
             SEVIAL_PP_CC_EXT     = p_ccExtSevPP,
             EQUIL_ECON_PP_CC_EXT = p_ccExtEquPP,
             
             POLCA_CP_CC_EXT      = p_ccExtSimCP,
             FCM_CP_CC_EXT        = p_ccExtFcmCP,
             SEVIAL_CP_CC_EXT     = p_ccExtSevCP,
             EQUIL_ECON_CP_CC_EXT = p_ccExtEquCP
      
       where idconcesionario = p_idconcesionario;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into p_dispersion_concesionario
        (idconcesionario,
         concesionario_s,
         fondo_cob_concesionario_s,
         fondo_cob_simit_s,
         simit_s,
         equilibrio_economico_s,
         
         concesionario_pm,
         fondo_cob_concesionario_pm,
         fondo_cob_simit_pm,
         simit_pm,
         equilibrio_economico_pm,
         
         simit_pp,
         sevial_pp,
         equilibrio_economico_pp,
         
         polca_cp,
         fcm_cp,
         sevial_cp,
         equilibrio_economico_cp,
         
         concesionario_s_cc,
         fondo_cob_concesionario_s_cc,
         fondo_cob_simit_s_cc,
         simit_s_cc,
         equilibrio_economico_s_cc,
         
         concesionario_pm_cc,
         fondo_cob_concesionario_pm_cc,
         fondo_cob_simit_pm_cc,
         simit_pm_cc,
         equilibrio_economico_pm_cc,
         
         simit_pp_cc,
         sevial_pp_cc,
         equilibrio_economico_pp_cc,
         
         polca_cp_cc,
         fcm_cp_cc,
         sevial_cp_cc,
         equilibrio_economico_cp_cc,
         
         CONCESIONARIO_S_CC_EXT,
         FONCOB_CONCES_S_CC_EXT,
         FONCOB_SIMIT_S_CC_EXT,
         SIMIT_S_CC_EXT,
         EQUIL_ECON_S_CC_EXT,
         
         CONCESIONARIO_PM_CC_EXT,
         FONCOB_CONCES_PM_CC_EXT,
         FONCOB_SIMIT_PM_CC_EXT,
         SIMIT_PM_CC_EXT,
         EQUIL_ECON_PM_CC_EXT,
         
         SIMIT_PP_CC_EXT,
         SEVIAL_PP_CC_EXT,
         EQUIL_ECON_PP_CC_EXT,
         
         POLCA_CP_CC_EXT,
         FCM_CP_CC_EXT,
         SEVIAL_CP_CC_EXT,
         EQUIL_ECON_CP_CC_EXT
         
         )
      values
        (p_idconcesionario,
         p_concesionario_s,
         p_fondo_cob_concesionario_s,
         p_fondo_cob_simit_s,
         p_simit_s,
         p_equilibrio_economico_s,
         
         p_concesionario_pm,
         p_fondo_cob_concesionario_pm,
         p_fondo_cob_simit_pm,
         p_simit_pm,
         p_equilibrio_economico_pm,
         
         p_simit_pp,
         p_sevial_pp,
         p_equilibrio_economico_pp,
         
         p_polca_cp,
         p_fcm_cp,
         p_sevial_cp,
         p_equilibrio_economico_cp,
         
         p_ccLocalConS,
         p_ccLocalFonS,
         p_ccLocalCobS,
         p_ccLocalSimS,
         p_ccLocalEquS,
         
         p_ccLocalConP,
         p_ccLocalFonP,
         p_ccLocalCobP,
         p_ccLocalSimP,
         p_ccLocalEquP,
         
         p_ccLocalSimPP,
         p_ccLocalSevPP,
         p_ccLocalEquPP,
         
         p_ccLocalSimCP,
         p_ccLocalFcmCP,
         p_ccLocalSevCP,
         p_ccLocalEquCP,
         
         p_ccExtConS,
         p_ccExtFonS,
         p_ccExtCobS,
         p_ccExtSimS,
         p_ccExtEquS,
         
         p_ccExtConP,
         p_ccExtFonP,
         p_ccExtCobP,
         p_ccExtSimP,
         p_ccExtEquP,
         
         p_ccExtSimPP,
         p_ccExtSevPP,
         p_ccExtEquPP,
         
         p_ccExtSimCP,
         p_ccExtFcmCP,
         p_ccExtSevCP,
         p_ccExtEquCP
         
         );
    
    END IF;
  
    sp_log(p_usuario,
           'u_concesionario',
           p_idconcesionario || '-' || p_nit_c || '-' || p_nombre || '-' ||
           p_correo || '-' || p_concesionario_s || '-' ||
           p_fondo_cob_concesionario_s || '-' || p_fondo_cob_simit_s || '-' ||
           p_simit_s || '-' || p_equilibrio_economico_s || '-' ||
           
           p_concesionario_pm || '-' || p_fondo_cob_concesionario_pm || '-' ||
           p_fondo_cob_simit_pm || '-' || p_simit_pm || '-' ||
           p_equilibrio_economico_pm || '-' ||
           
           p_simit_pp || '-' || p_sevial_pp || '-' ||
           p_equilibrio_economico_pp || '-' ||
           
           p_polca_cp || '-' || p_fcm_cp || '-' || p_sevial_cp || '-' ||
           p_equilibrio_economico_cp
           
           );
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_concesionario] ' || SQLERRM,
            p_error);
    
  END u_concesionario;

  PROCEDURE q_concesionario(p_idconcesionario char,
                            p_usuario         varchar2,
                            p_nit_c           out varchar2,
                            p_nombre          out varchar2,
                            p_correo          out varchar2,
                            
                            p_concesionario_s           out number,
                            p_fondo_cob_concesionario_s out number,
                            p_fondo_cob_simit_s         out number,
                            p_simit_s                   out number,
                            p_equilibrio_economico_s    out number,
                            
                            p_concesionario_pm           out number,
                            p_fondo_cob_concesionario_pm out number,
                            p_fondo_cob_simit_pm         out number,
                            p_simit_pm                   out number,
                            p_equilibrio_economico_pm    out number,
                            
                            p_simit_pp                out number,
                            p_sevial_pp               out number,
                            p_equilibrio_economico_pp out number,
                            
                            p_polca_cp                out number,
                            p_fcm_cp                  out number,
                            p_sevial_cp               out number,
                            p_equilibrio_economico_cp out number,
                            
                            p_ccLocalConS out varchar2,
                            p_ccLocalSimS out varchar2,
                            p_ccLocalFonS out varchar2,
                            p_ccLocalCobS out varchar2,
                            p_ccLocalEquS out varchar2,
                            
                            p_ccExtConS out varchar2,
                            p_ccExtSimS out varchar2,
                            p_ccExtFonS out varchar2,
                            p_ccExtCobS out varchar2,
                            p_ccExtEquS out varchar2,
                            
                            p_ccLocalConP out varchar2,
                            p_ccLocalSimP out varchar2,
                            p_ccLocalFonP out varchar2,
                            p_ccLocalCobP out varchar2,
                            p_ccLocalEquP out varchar2,
                            
                            p_ccExtConP out varchar2,
                            p_ccExtSimP out varchar2,
                            p_ccExtFonP out varchar2,
                            p_ccExtCobP out varchar2,
                            p_ccExtEquP out varchar2,
                            
                            p_ccLocalSimPP out varchar2,
                            p_ccLocalSevPP out varchar2,
                            p_ccLocalEquPP out varchar2,
                            
                            p_ccExtSimPP out varchar2,
                            p_ccExtSevPP out varchar2,
                            p_ccExtEquPP out varchar2,
                            
                            p_ccLocalSimCP out varchar2,
                            p_ccLocalFcmCP out varchar2,
                            p_ccLocalSevCP out varchar2,
                            p_ccLocalEquCP out varchar2,
                            
                            p_ccExtSimCP out varchar2,
                            p_ccExtFcmCP out varchar2,
                            p_ccExtSevCP out varchar2,
                            p_ccExtEquCP out varchar2,
                            
                            p_error OUT VARCHAR2) is
    numRegistros number;
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_nit_c  := null;
    p_nombre := null;
    p_correo := null;
  
    p_concesionario_s           := 0;
    p_fondo_cob_concesionario_s := 0;
    p_fondo_cob_simit_s         := 0;
    p_simit_s                   := 0;
    p_equilibrio_economico_s    := 0;
  
    p_concesionario_pm           := 0;
    p_fondo_cob_concesionario_pm := 0;
    p_fondo_cob_simit_pm         := 0;
    p_simit_pm                   := 0;
    p_equilibrio_economico_pm    := 0;
  
    p_simit_pp                := 0;
    p_sevial_pp               := 0;
    p_equilibrio_economico_pp := 0;
  
    p_polca_cp                := 0;
    p_fcm_cp                  := 0;
    p_sevial_cp               := 0;
    p_equilibrio_economico_cp := 0;
  
    p_ccLocalConS := null;
    p_ccLocalSimS := null;
    p_ccLocalFonS := null;
    p_ccLocalCobS := null;
    p_ccLocalEquS := null;
  
    p_ccExtConS := null;
    p_ccExtSimS := null;
    p_ccExtFonS := null;
    p_ccExtCobS := null;
    p_ccExtEquS := null;
  
    p_ccLocalConP := null;
    p_ccLocalSimP := null;
    p_ccLocalFonP := null;
    p_ccLocalCobP := null;
    p_ccLocalEquP := null;
  
    p_ccExtConP := null;
    p_ccExtSimP := null;
    p_ccExtFonP := null;
    p_ccExtCobP := null;
    p_ccExtEquP := null;
  
    p_ccLocalSimPP := null;
    p_ccLocalSevPP := null;
    p_ccLocalEquPP := null;
  
    p_ccExtSimPP := null;
    p_ccExtSevPP := null;
    p_ccExtEquPP := null;
  
    p_ccLocalSimCP := null;
    p_ccLocalFcmCP := null;
    p_ccLocalSevCP := null;
    p_ccLocalEquCP := null;
  
    p_ccExtSimCP := null;
    p_ccExtFcmCP := null;
    p_ccExtSevCP := null;
    p_ccExtEquCP := null;
  
    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select nit_c, nombre, correo
          into p_nit_c, p_nombre, p_correo
          from concesionario
         where idconcesionario = p_idconcesionario;
      
        select count(*)
          into numRegistros
          from p_dispersion_concesionario
         where idconcesionario = p_idconcesionario;
      
        p_error := 'Consulta Exitosa';
      
        if numRegistros = 0 then
          return;
        end if;
      
        select concesionario_s,
               fondo_cob_concesionario_s,
               fondo_cob_simit_s,
               simit_s,
               equilibrio_economico_s,
               
               concesionario_pm,
               fondo_cob_concesionario_pm,
               fondo_cob_simit_pm,
               simit_pm,
               equilibrio_economico_pm,
               
               simit_pp,
               sevial_pp,
               equilibrio_economico_pp,
               
               polca_cp,
               fcm_cp,
               sevial_cp,
               equilibrio_economico_cp,
               
               concesionario_s_cc,
               fondo_cob_concesionario_s_cc,
               fondo_cob_simit_s_cc,
               simit_s_cc,
               equilibrio_economico_s_cc,
               
               CONCESIONARIO_S_CC_EXT,
               FONCOB_CONCES_S_CC_EXT,
               FONCOB_SIMIT_S_CC_EXT,
               SIMIT_S_CC_EXT,
               EQUIL_ECON_S_CC_EXT,
               
               concesionario_pm_cc,
               fondo_cob_concesionario_pm_cc,
               fondo_cob_simit_pm_cc,
               simit_pm_cc,
               equilibrio_economico_pm_cc,
               
               CONCESIONARIO_PM_CC_EXT,
               FONCOB_CONCES_PM_CC_EXT,
               FONCOB_SIMIT_PM_CC_EXT,
               SIMIT_PM_CC_EXT,
               EQUIL_ECON_PM_CC_EXT,
               
               simit_pp_cc,
               sevial_pp_cc,
               equilibrio_economico_pp_cc,
               
               SIMIT_PP_CC_EXT,
               SEVIAL_PP_CC_EXT,
               EQUIL_ECON_PP_CC_EXT,
               
               polca_cp_cc,
               fcm_cp_cc,
               sevial_cp_cc,
               equilibrio_economico_cp_cc,
               
               POLCA_CP_CC_EXT,
               FCM_CP_CC_EXT,
               SEVIAL_CP_CC_EXT,
               EQUIL_ECON_CP_CC_EXT
        
          into p_concesionario_s,
               p_fondo_cob_concesionario_s,
               p_fondo_cob_simit_s,
               p_simit_s,
               p_equilibrio_economico_s,
               
               p_concesionario_pm,
               p_fondo_cob_concesionario_pm,
               p_fondo_cob_simit_pm,
               p_simit_pm,
               p_equilibrio_economico_pm,
               
               p_simit_pp,
               p_sevial_pp,
               p_equilibrio_economico_pp,
               
               p_polca_cp,
               p_fcm_cp,
               p_sevial_cp,
               p_equilibrio_economico_cp,
               
               p_ccLocalConS,
               p_ccLocalFonS,
               p_ccLocalCobS,
               p_ccLocalSimS,
               p_ccLocalEquS,
               
               p_ccExtConS,
               p_ccExtFonS,
               p_ccExtCobS,
               p_ccExtSimS,
               p_ccExtEquS,
               
               p_ccLocalConP,
               p_ccLocalFonP,
               p_ccLocalCobP,
               p_ccLocalSimP,
               p_ccLocalEquP,
               
               p_ccExtConP,
               p_ccExtFonP,
               p_ccExtCobP,
               p_ccExtSimP,
               p_ccExtEquP,
               
               p_ccLocalSimPP,
               p_ccLocalSevPP,
               p_ccLocalEquPP,
               
               p_ccExtSimPP,
               p_ccExtSevPP,
               p_ccExtEquPP,
               
               p_ccLocalSimCP,
               p_ccLocalFcmCP,
               p_ccLocalSevCP,
               p_ccLocalEquCP,
               
               p_ccExtSimCP,
               p_ccExtFcmCP,
               p_ccExtSevCP,
               p_ccExtEquCP
        
          from p_dispersion_concesionario
         where idconcesionario = p_idconcesionario;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_concesionario] ' || SQLERRM,
            p_error);
    
  END q_concesionario;

  PROCEDURE i_cta_recaudo_concesionario(p_idconcesionario  char,
                                        p_idbanco          char,
                                        p_indtipo          char,
                                        p_tipocuenta       char,
                                        p_cuenta           varchar2,
                                        p_comision_recaudo number,
                                        p_comision_ach     number,
                                        p_cta_contable     varchar2,
                                        p_usuario          varchar2,
                                        p_error            OUT VARCHAR2
                                        
                                        ) as
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from cta_recaudo_concesionario t
     where idconcesionario = p_idconcesionario
       and idbanco = p_idbanco
       and indtipo = p_indtipo
       and cuenta = p_cuenta;
  
    IF v_valida <> 0 THEN
      p_error := 'Cuenta recaudo ya existente';
    else
      insert into cta_recaudo_concesionario
        (idconcesionario,
         idbanco,
         indtipo,
         tipocuenta,
         cuenta,
         comision_recaudo,
         comision_ach,
         cta_contable)
      values
        (p_idconcesionario,
         p_idbanco,
         p_indtipo,
         p_tipocuenta,
         p_cuenta,
         p_comision_recaudo,
         p_comision_ach,
         p_cta_contable);
    
      p_error := 'Cuenta Recaudo Adicionado Exitosamente. ';
    
      p_error := MSG_INS_OK;
    
      sp_log(p_usuario,
             'i_cta_recaudo_concesionario',
             p_idconcesionario || '-' || p_idbanco || '-' || p_indtipo || '-' ||
             p_tipocuenta || '-' || p_cuenta || '-' || p_comision_recaudo || '-' ||
             p_comision_ach || '-' || p_cta_contable);
      commit;
    
    END IF;
  
  END i_cta_recaudo_concesionario;

  PROCEDURE u_cta_recaudo_concesionario(
                                        
                                        p_idconcesionario  char,
                                        p_idbanco          char,
                                        p_indtipo          char,
                                        p_tipocuenta       char,
                                        p_cuenta           varchar2,
                                        p_comision_recaudo number,
                                        p_comision_ach     number,
                                        p_cta_contable     varchar2,
                                        p_usuario          varchar2,
                                        p_error            OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from cta_recaudo_concesionario t
     where idconcesionario = p_idconcesionario
       and idbanco = p_idbanco
       and indtipo = p_indtipo
       and cuenta = p_cuenta;
  
    IF v_valida <> 0 THEN
      update cta_recaudo_concesionario
         set tipocuenta = p_tipocuenta,
             --  cuenta           = p_cuenta,
             comision_recaudo = p_comision_recaudo,
             comision_ach     = p_comision_ach,
             cta_contable     = p_cta_contable
       where idconcesionario = p_idconcesionario
         and idbanco = p_idbanco
         and indtipo = p_indtipo
         and cuenta = p_cuenta;
    
      sp_log(p_usuario,
             'u_cta_recaudo_concesionario',
             p_idconcesionario || '-' || p_idbanco || '-' || p_indtipo || '-' ||
             p_tipocuenta || '-' || p_cuenta || '-' || p_comision_recaudo || '-' ||
             p_comision_ach || '-' || p_cta_contable);
      commit;
    
      p_error := MSG_UPD_OK;
    else
      p_error := 'Cuenta Recaudo no existe';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_cta_recaudo_concesionario] ' || SQLERRM,
            p_error);
    
  END u_cta_recaudo_concesionario;

  PROCEDURE d_cta_recaudo_concesionario(p_idconcesionario char,
                                        p_idbanco         char,
                                        p_indtipo         varchar2,
                                        p_cuenta          varchar2,
                                        p_usuario         varchar2,
                                        p_error           OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete cta_recaudo_concesionario
       where idconcesionario = p_idconcesionario
         and idbanco = p_idbanco
         and indtipo = p_indtipo
         and cuenta = p_cuenta;
      sp_log(p_usuario,
             'd_cta_recaudo_concesionario',
             p_idconcesionario || '-' || p_idbanco || '-' || p_indtipo);
      commit;
      p_error := MSG_DEL_OK;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_cta_recaudo_concesionario] ' || SQLERRM,
            p_error);
  END d_cta_recaudo_concesionario;

  PROCEDURE q_cta_recaudo_concesionario(p_idconcesionario  char,
                                        p_idbanco          char,
                                        p_indtipo          char,
                                        p_cuenta           varchar2,
                                        p_tipocuenta       out varchar2,
                                        p_comision_recaudo out number,
                                        p_comision_ach     out number,
                                        p_cta_contable     out varchar2,
                                        p_usuario          varchar2,
                                        p_error            OUT VARCHAR2
                                        
                                        ) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_tipocuenta       := '000';
    p_comision_recaudo := 0;
    p_comision_ach     := 0;
    p_cta_contable     := null;
  
    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select tipocuenta, comision_recaudo, comision_ach, cta_contable
          into p_tipocuenta,
               p_comision_recaudo,
               p_comision_ach,
               p_cta_contable
          from cta_recaudo_concesionario
         where idconcesionario = p_idconcesionario
           and idbanco = p_idbanco
           and indtipo = p_indtipo
           and cuenta = p_cuenta;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_cta_recaudo_concesionario] ' || SQLERRM,
            p_error);
    
  END q_cta_recaudo_concesionario;

  PROCEDURE i_cta_dispersion_concesionario(p_idconcesionario char,
                                           p_idbancorec      char,
                                           
                                           -- liquidacion externo simir
                                           p_liq1_idbanco    char,
                                           p_liq1_tipocuenta char,
                                           p_liq1_cuenta     varchar2,
                                           p_liq1_nit_c      char,
                                           
                                           -- liquidacion externo polca
                                           
                                           p_liq2_idbanco    char,
                                           p_liq2_tipocuenta char,
                                           p_liq2_cuenta     varchar2,
                                           p_liq2_nit_c      char,
                                           
                                           -- liquidacion local simir
                                           p_liq3_idbanco    char,
                                           p_liq3_tipocuenta char,
                                           p_liq3_cuenta     varchar2,
                                           p_liq3_nit_c      char,
                                           
                                           -- liquidacion local polca
                                           p_liq4_idbanco    char,
                                           p_liq4_tipocuenta char,
                                           p_liq4_cuenta     varchar2,
                                           p_liq4_nit_c      char,
                                           
                                           p_fon_idbanco    char,
                                           p_fon_tipocuenta char,
                                           p_fon_cuenta     varchar2,
                                           p_fon_nit_c      char,
                                           
                                           p_con_idbanco    char,
                                           p_con_tipocuenta char,
                                           p_con_cuenta     varchar2,
                                           p_con_nit_c      char,
                                           
                                           p_fcm_idbanco    char,
                                           p_fcm_tipocuenta char,
                                           p_fcm_cuenta     varchar2,
                                           p_fcm_nit_c      char,
                                           
                                           p_sevial_idbanco    char,
                                           p_sevial_tipocuenta char,
                                           p_sevial_cuenta     varchar2,
                                           p_sevial_nit_c      char,
                                           
                                           p_polca_idbanco    char,
                                           p_polca_tipocuenta char,
                                           p_polca_cuenta     varchar2,
                                           p_polca_nit_c      char,
                                           
                                           p_avv_idbanco    char,
                                           p_avv_tipocuenta char,
                                           p_avv_cuenta     varchar2,
                                           p_avv_nit_c      char,
                                           
                                           p_usuario varchar2,
                                           p_error   OUT VARCHAR2) AS
  
    w_operacion varchar2(250);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    -- Cuenta dispersion Liquidacion externo simit
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 1;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_liq1_idbanco,
             nit_c      = p_liq1_nit_c,
             tipocuenta = p_liq1_tipocuenta,
             cuenta     = encriptar(p_liq1_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 1;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (1,
         p_idconcesionario,
         p_idbancorec,
         p_liq1_idbanco,
         p_liq1_nit_c,
         p_liq1_tipocuenta,
         encriptar(p_liq1_cuenta));
    
    END IF;
  
    -- Cuenta dispersion Liquidacion externo polca
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 8;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_liq2_idbanco,
             nit_c      = p_liq2_nit_c,
             tipocuenta = p_liq2_tipocuenta,
             cuenta     = encriptar(p_liq2_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 8;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (8,
         p_idconcesionario,
         p_idbancorec,
         p_liq2_idbanco,
         p_liq2_nit_c,
         p_liq2_tipocuenta,
         encriptar(p_liq2_cuenta));
    
    END IF;
  
    -- Cuenta dispersion Liquidacion local simit
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 9;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_liq3_idbanco,
             nit_c      = p_liq3_nit_c,
             tipocuenta = p_liq3_tipocuenta,
             cuenta     = encriptar(p_liq3_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 9;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (9,
         p_idconcesionario,
         p_idbancorec,
         p_liq3_idbanco,
         p_liq3_nit_c,
         p_liq3_tipocuenta,
         encriptar(p_liq3_cuenta));
    
    END IF;
  
    -- Cuenta dispersion Liquidacion local simit
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 10;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_liq4_idbanco,
             nit_c      = p_liq4_nit_c,
             tipocuenta = p_liq4_tipocuenta,
             cuenta     = encriptar(p_liq4_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 10;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (10,
         p_idconcesionario,
         p_idbancorec,
         p_liq4_idbanco,
         p_liq4_nit_c,
         p_liq4_tipocuenta,
         encriptar(p_liq4_cuenta));
    
    END IF;
  
    -- Cuenta dispersion Fondo Cobertura
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 2;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_fon_idbanco,
             nit_c      = p_fon_nit_c,
             tipocuenta = p_fon_tipocuenta,
             cuenta     = encriptar(p_fon_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 2;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (2,
         p_idconcesionario,
         p_idbancorec,
         p_fon_idbanco,
         p_fon_nit_c,
         p_fon_tipocuenta,
         encriptar(p_fon_cuenta));
    
    END IF;
  
    -- Cuenta dispersion Contravencional concesionario
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 3;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_con_idbanco,
             nit_c      = p_con_nit_c,
             tipocuenta = p_con_tipocuenta,
             cuenta     = encriptar(p_con_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 3;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (3,
         p_idconcesionario,
         p_idbancorec,
         p_con_idbanco,
         p_con_nit_c,
         p_con_tipocuenta,
         encriptar(p_con_cuenta));
    
    END IF;
  
    -- Cuenta dispersion Contravencional FCM
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 4;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_fcm_idbanco,
             nit_c      = p_fcm_nit_c,
             tipocuenta = p_fcm_tipocuenta,
             cuenta     = encriptar(p_fcm_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 4;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (4,
         p_idconcesionario,
         p_idbancorec,
         p_fcm_idbanco,
         p_fcm_nit_c,
         p_fcm_tipocuenta,
         encriptar(p_fcm_cuenta));
    
    END IF;
  
    -- Cuenta dispersion sevial
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 5;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_sevial_idbanco,
             nit_c      = p_sevial_nit_c,
             tipocuenta = p_sevial_tipocuenta,
             cuenta     = encriptar(p_sevial_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 5;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (5,
         p_idconcesionario,
         p_idbancorec,
         p_sevial_idbanco,
         p_sevial_nit_c,
         p_sevial_tipocuenta,
         encriptar(p_sevial_cuenta));
    
    END IF;
  
    -- Cuenta dispersion Polca
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 6;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_polca_idbanco,
             nit_c      = p_polca_nit_c,
             tipocuenta = p_polca_tipocuenta,
             cuenta     = encriptar(p_polca_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 6;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (6,
         p_idconcesionario,
         p_idbancorec,
         p_polca_idbanco,
         p_polca_nit_c,
         p_polca_tipocuenta,
         encriptar(p_polca_cuenta));
    
    END IF;
  
    -- Cuenta dispersion Avvillas
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_concesionario t
     where idconcesionario = p_idconcesionario
       and idbancorec = p_idbancorec
       and idConcepto = 7;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_concesionario
         set idbanco    = p_avv_idbanco,
             nit_c      = p_avv_nit_c,
             tipocuenta = p_avv_tipocuenta,
             cuenta     = encriptar(p_avv_cuenta)
       where idconcesionario = p_idconcesionario
         and idbancorec = p_idbancorec
         and idConcepto = 7;
    
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_concesionario
        (idconcepto,
         idconcesionario,
         idbancorec,
         idbanco,
         nit_c,
         tipocuenta,
         cuenta)
      values
        (7,
         p_idconcesionario,
         p_idbancorec,
         p_avv_idbanco,
         p_avv_nit_c,
         p_avv_tipocuenta,
         encriptar(p_avv_cuenta));
    
    END IF;
  
    w_operacion := 'i_cta_dispersion_concesionario';
  
    sp_log(p_usuario,
           w_operacion,
           p_idconcesionario || '-' ||
           
           p_liq1_idbanco || '-' || p_liq1_tipocuenta || '-' ||
           p_liq1_nit_c || '-' || p_liq1_cuenta || '-' ||
           
           p_liq2_idbanco || '-' || p_liq2_tipocuenta || '-' ||
           p_liq2_nit_c || '-' || p_liq2_cuenta || '-' ||
           
           p_liq3_idbanco || '-' || p_liq3_tipocuenta || '-' ||
           p_liq3_nit_c || '-' || p_liq3_cuenta || '-' ||
           
           p_liq4_idbanco || '-' || p_liq4_tipocuenta || '-' ||
           p_liq4_nit_c || '-' || p_liq4_cuenta || '-' ||
           
           p_fon_idbanco || '-' || p_fon_tipocuenta || '-' || p_fon_nit_c || '-' ||
           p_fon_cuenta || '-' ||
           
           p_con_idbanco || '-' || p_con_tipocuenta || '-' || p_con_nit_c || '-' ||
           p_con_cuenta || '-' ||
           
           p_fcm_idbanco || '-' || p_fcm_tipocuenta || '-' || p_fcm_nit_c || '-' ||
           p_fcm_cuenta
           
           );
    commit;
  
    p_error := MSG_UPD_OK;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_cta_dispersion_concesionario] ' || SQLERRM,
            p_error);
    
  END i_cta_dispersion_concesionario;

  PROCEDURE q_cta_dispersion_concesionario(p_idconcesionario char,
                                           p_idbancorec      char,
                                           
                                           p_usuario varchar2,
                                           
                                           -- liquidacion externo simit
                                           p_liq1_idbanco    out varchar2,
                                           p_liq1_tipocuenta out varchar2,
                                           p_liq1_cuenta     out varchar2,
                                           p_liq1_nit_c      out varchar2,
                                           
                                           -- liquidacion externo polca
                                           p_liq2_idbanco    out varchar2,
                                           p_liq2_tipocuenta out varchar2,
                                           p_liq2_cuenta     out varchar2,
                                           p_liq2_nit_c      out varchar2,
                                           
                                           -- liquidacion externo simit
                                           p_liq3_idbanco    out varchar2,
                                           p_liq3_tipocuenta out varchar2,
                                           p_liq3_cuenta     out varchar2,
                                           p_liq3_nit_c      out varchar2,
                                           
                                           -- liquidacion externo simit
                                           p_liq4_idbanco    out varchar2,
                                           p_liq4_tipocuenta out varchar2,
                                           p_liq4_cuenta     out varchar2,
                                           p_liq4_nit_c      out varchar2,
                                           
                                           p_fon_idbanco    out varchar2,
                                           p_fon_tipocuenta out varchar2,
                                           p_fon_cuenta     out varchar2,
                                           p_fon_nit_c      out varchar2,
                                           
                                           p_con_idbanco    out varchar2,
                                           p_con_tipocuenta out varchar2,
                                           p_con_cuenta     out varchar2,
                                           p_con_nit_c      out varchar2,
                                           
                                           p_fcm_idbanco    out varchar2,
                                           p_fcm_tipocuenta out varchar2,
                                           p_fcm_cuenta     out varchar2,
                                           p_fcm_nit_c      out varchar2,
                                           
                                           p_sevial_idbanco    out varchar2,
                                           p_sevial_tipocuenta out varchar2,
                                           p_sevial_cuenta     out varchar2,
                                           p_sevial_nit_c      out varchar2,
                                           
                                           p_polca_idbanco    out varchar2,
                                           p_polca_tipocuenta out varchar2,
                                           p_polca_cuenta     out varchar2,
                                           p_polca_nit_c      out varchar2,
                                           
                                           p_avv_idbanco    out varchar2,
                                           p_avv_tipocuenta out varchar2,
                                           p_avv_cuenta     out varchar2,
                                           p_avv_nit_c      out varchar2,
                                           
                                           p_error OUT VARCHAR2) AS
  
  BEGIN
    -- INICIALIZAR SALIDA
    p_liq1_idbanco    := '00';
    p_liq1_tipocuenta := '000';
    p_liq1_cuenta     := null;
    p_liq1_nit_c      := null;
  
    p_liq2_idbanco    := '00';
    p_liq2_tipocuenta := '000';
    p_liq2_cuenta     := null;
    p_liq2_nit_c      := null;
  
    p_liq3_idbanco    := '00';
    p_liq3_tipocuenta := '000';
    p_liq3_cuenta     := null;
    p_liq3_nit_c      := null;
  
    p_liq4_idbanco    := '00';
    p_liq4_tipocuenta := '000';
    p_liq4_cuenta     := null;
    p_liq4_nit_c      := null;
  
    p_fon_idbanco    := '00';
    p_fon_tipocuenta := '000';
    p_fon_cuenta     := null;
    p_fon_nit_c      := null;
  
    p_con_idbanco    := '00';
    p_con_tipocuenta := '000';
    p_con_cuenta     := null;
    p_con_nit_c      := null;
  
    p_fcm_idbanco    := '00';
    p_fcm_tipocuenta := '000';
    p_fcm_cuenta     := null;
    p_fcm_nit_c      := null;
  
    p_sevial_idbanco    := '00';
    p_sevial_tipocuenta := '000';
    p_sevial_cuenta     := null;
    p_sevial_nit_c      := null;
  
    p_polca_idbanco    := '00';
    p_polca_tipocuenta := '000';
    p_polca_cuenta     := null;
    p_polca_nit_c      := null;
  
    p_avv_idbanco    := '00';
    p_avv_tipocuenta := '000';
    p_avv_cuenta     := null;
    p_avv_nit_c      := null;
  
    -- VALIDACIONES
    --sp_v_usuario(p_usuario, p_error,'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
      
        BEGIN
          select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
            into p_liq1_idbanco,
                 p_liq1_nit_c,
                 p_liq1_tipocuenta,
                 p_liq1_cuenta
            from cta_dispersion_concesionario
           where idconcesionario = p_idconcesionario
             and idbancorec = p_idbancorec
             and idconcepto = 1;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            p_liq1_idbanco    := '00';
            p_liq1_tipocuenta := '000';
            p_liq1_cuenta     := null;
            p_liq1_nit_c      := null;
        END;
      
        BEGIN
          select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
            into p_liq2_idbanco,
                 p_liq2_nit_c,
                 p_liq2_tipocuenta,
                 p_liq2_cuenta
            from cta_dispersion_concesionario
           where idconcesionario = p_idconcesionario
             and idbancorec = p_idbancorec
             and idconcepto = 8;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            p_liq2_idbanco    := '00';
            p_liq2_tipocuenta := '000';
            p_liq2_cuenta     := null;
            p_liq2_nit_c      := null;
        END;
      
        BEGIN
          select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
            into p_liq3_idbanco,
                 p_liq3_nit_c,
                 p_liq3_tipocuenta,
                 p_liq3_cuenta
            from cta_dispersion_concesionario
           where idconcesionario = p_idconcesionario
             and idbancorec = p_idbancorec
             and idconcepto = 9;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            p_liq3_idbanco    := '00';
            p_liq3_tipocuenta := '000';
            p_liq3_cuenta     := null;
            p_liq3_nit_c      := null;
        END;
      
        BEGIN
          select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
            into p_liq4_idbanco,
                 p_liq4_nit_c,
                 p_liq4_tipocuenta,
                 p_liq4_cuenta
            from cta_dispersion_concesionario
           where idconcesionario = p_idconcesionario
             and idbancorec = p_idbancorec
             and idconcepto = 10;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            p_liq4_idbanco    := '00';
            p_liq4_tipocuenta := '000';
            p_liq4_cuenta     := null;
            p_liq4_nit_c      := null;
        END;
      
        select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
          into p_fon_idbanco, p_fon_nit_c, p_fon_tipocuenta, p_fon_cuenta
          from cta_dispersion_concesionario
         where idconcesionario = p_idconcesionario
           and idbancorec = p_idbancorec
           and idconcepto = 2;
      
        select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
          into p_con_idbanco, p_con_nit_c, p_con_tipocuenta, p_con_cuenta
          from cta_dispersion_concesionario
         where idconcesionario = p_idconcesionario
           and idbancorec = p_idbancorec
           and idconcepto = 3;
      
        select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
          into p_fcm_idbanco, p_fcm_nit_c, p_fcm_tipocuenta, p_fcm_cuenta
          from cta_dispersion_concesionario
         where idconcesionario = p_idconcesionario
           and idbancorec = p_idbancorec
           and idconcepto = 4;
      
        select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
          into p_sevial_idbanco,
               p_sevial_nit_c,
               p_sevial_tipocuenta,
               p_sevial_cuenta
          from cta_dispersion_concesionario
         where idconcesionario = p_idconcesionario
           and idbancorec = p_idbancorec
           and idconcepto = 5;
      
        select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
          into p_polca_idbanco,
               p_polca_nit_c,
               p_polca_tipocuenta,
               p_polca_cuenta
          from cta_dispersion_concesionario
         where idconcesionario = p_idconcesionario
           and idbancorec = p_idbancorec
           and idconcepto = 6;
      
        select idbanco, nit_c, tipocuenta, desencriptar(cuenta)
          into p_avv_idbanco, p_avv_nit_c, p_avv_tipocuenta, p_avv_cuenta
          from cta_dispersion_concesionario
         where idconcesionario = p_idconcesionario
           and idbancorec = p_idbancorec
           and idconcepto = 7;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'No existe Cuentas Dispersion Concesionario';
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_cta_dispersion_concesionario] ' || SQLERRM,
            p_error);
    
  END q_cta_dispersion_concesionario;

  PROCEDURE i_recaudo_local_ajustes(
                                    
                                    p_idbanco       char,
                                    p_cta_recaudo   varchar2,
                                    p_indtipo       char,
                                    p_fec_corte_ano number,
                                    p_fec_corte_mes number,
                                    p_fec_corte_dia number,
                                    p_fec_tran_ano  number,
                                    p_fec_tran_mes  number,
                                    p_fec_tran_dia  number,
                                    p_valor_total   number,
                                    p_idmunicipio   char,
                                    p_periodo       char,
                                    p_p_consignado  number,
                                    p_usuario       varchar2,
                                    p_error         OUT VARCHAR2) AS
  
    w_fecha_cor recaudo_local_ajustes.fec_corte%TYPE;
    w_fecha_tra recaudo_local_ajustes.fec_tran%TYPE;
  
    w_operacion varchar2(250);
  
  BEGIN
  
    select TO_DATE(p_fec_corte_ano || '-' || p_fec_corte_mes || '-' ||
                   p_fec_corte_dia,
                   'YYYY-MM-DD')
      into w_fecha_cor
      from DUAL;
  
    select TO_DATE(p_fec_tran_ano || '-' || p_fec_tran_mes || '-' ||
                   p_fec_tran_dia,
                   'YYYY-MM-DD')
      into w_fecha_tra
      from DUAL;
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    insert into recaudo_local_ajustes
      (idbanco,
       cta_recaudo,
       indtipo,
       fec_corte,
       fec_tran,
       valor_total,
       idmunicipio,
       periodo,
       id_recaudo_local_ajustes,
       p_consignado)
    values
      (p_idbanco,
       p_cta_recaudo,
       p_indtipo,
       w_fecha_cor,
       w_fecha_tra,
       p_valor_total,
       p_idmunicipio,
       p_periodo,
       SEQ_RECAUDO_LOCAL_AJUSTES.NEXTVAL,
       p_p_consignado);
  
    w_operacion := 'i_recaudo_local_ajustes';
    p_error     := 'Ajuste Recaudo Local Agregado Exitosamente. ';
  
    sp_log(p_usuario,
           w_operacion,
           p_idbanco || '-' || p_cta_recaudo || '-' || p_indtipo || '-' ||
           w_fecha_cor || '-' || w_fecha_tra || '-' || p_valor_total || '-' ||
           p_idmunicipio || '-' || p_periodo);
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_recaudo_local_ajustes] ' || SQLERRM,
            p_error);
    
  END i_recaudo_local_ajustes;

  PROCEDURE d_recaudo_local_ajustes(p_id_recaudo_local_ajustes number,
                                    p_usuario                  varchar2,
                                    p_error                    OUT VARCHAR2) is
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete recaudo_local_ajustes
       where id_recaudo_local_ajustes = p_id_recaudo_local_ajustes;
      sp_log(p_usuario,
             'd_recaudo_local_ajustes',
             p_id_recaudo_local_ajustes);
      commit;
      p_error := 'Ajuste Recaudo Local eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_recaudo_local_ajustes] ' || SQLERRM,
            p_error);
  END d_recaudo_local_ajustes;

  PROCEDURE u_person(p_idperson     number,
                     p_password_ant varchar,
                     p_password_new varchar,
                     p_usuario      varchar2,
                     p_error        OUT VARCHAR2) is
  
    cantidad    number;
    v_integrada NUMBER;
  
  BEGIN
  
    -- VALIDACIONES
    /*sp_v_usuario(p_usuario, p_error,'pk_param');*/
  
    select COUNT(*)
      INTO v_valida
      from person p
     WHERE p.idperson = p_usuario;
  
    if v_valida = 0 then
      p_error := 'USUARIO NO EXISTE EN SDF';
      return;
    end if;
  
    select f.seguridad_integrada
      into v_integrada
      from fcm f
     where f.nit_fcm = '8000826650';
  
    if (v_integrada = 1) then
      p_error := 'CAMBIO DE CLAVE DEBE SER EN PAGINA SIMIT';
      return;
    end if;
  
    if (p_password_ant = p_password_new) then
      p_error := 'Clave invalida, las claves anterior y nueva tienen que ser diferentes';
    end if;
  
    if (p_error is null) then
    
      select count(*)
        into cantidad
        from person
       where idperson = p_idperson
         and password = p_password_ant
          or password =
             TRANSLATE(p_password_ant,
                       'abcdefghijklmnopqrstuvwxyz0123456789',
                       '0z1y2x3w4v5u6t7s8r9qponmlkjihgfedcba');
    
      if (cantidad = 0) then
        p_error := 'Clave anterior incorrecta';
      else
        update person
           set password = TRANSLATE(p_password_new,
                                    'abcdefghijklmnopqrstuvwxyz0123456789',
                                    '0z1y2x3w4v5u6t7s8r9qponmlkjihgfedcba')
         where idperson = p_idperson;
      
        p_error := 'Cambio de clave exitoso';
      
        sp_log(p_usuario, 'u_person', 'Realizo cambio de clave');
      
        commit;
      end if;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_person] ' || SQLERRM, p_error);
    
  END u_person;

  PROCEDURE d_validador_fecha(p_idmunicipio char,
                              p_idvalidador char,
                              p_indTipo     char,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2) is
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete validador_fecha
       where idmunicipio = p_idmunicipio
         and idvalidador = p_idvalidador
         and indtipo = p_indtipo;
      sp_log(p_usuario,
             'd_validador_fecha',
             p_idmunicipio || '-' || p_idvalidador || '-' || p_indtipo);
      commit;
      p_error := MSG_DEL_OK;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_validador_fecha] ' || SQLERRM,
            p_error);
    
  END d_validador_fecha;

  PROCEDURE u_validador_fecha(p_idmunicipio              char,
                              p_idvalidador              char,
                              p_indTipo                  char,
                              p_fecha_ini_ano            number,
                              p_fecha_ini_mes            number,
                              p_fecha_ini_dia            number,
                              p_fecha_fin_ano            number,
                              p_fecha_fin_mes            number,
                              p_fecha_fin_dia            number,
                              p_p_municipio              number,
                              p_p_fcm_contravencional    number,
                              p_p_conces_contravencional number,
                              p_p_acuerdopago            number,
                              p_nit_tercero1             varchar2,
                              p_base_tercero1            number,
                              p_ind_base_tercero1        number,
                              p_nit_tercero2             varchar2,
                              p_base_tercero2            number,
                              p_ind_base_tercero2        number,
                              p_usuario                  varchar2,
                              p_error                    OUT VARCHAR2) as
  
    w_fecha_ini validador_fecha.fecha_ini%TYPE;
    w_fecha_fin validador_fecha.fecha_ini%TYPE;
    w_operacion varchar2(250);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select TO_DATE(p_fecha_ini_ano || '-' || p_fecha_ini_mes || '-' ||
                   p_fecha_ini_dia,
                   'YYYY-MM-DD')
      into w_fecha_ini
      from DUAL;
  
    select TO_DATE(p_fecha_fin_ano || '-' || p_fecha_fin_mes || '-' ||
                   p_fecha_fin_dia,
                   'YYYY-MM-DD')
      into w_fecha_fin
      from DUAL;
  
    select COUNT(*)
      INTO v_valida
      from validador_fecha t
     where idMunicipio = p_idmunicipio
       and idValidador = p_idvalidador
       and indTipo = p_indTipo;
  
    IF v_valida <> 0 THEN
      update validador_fecha
         set fecha_ini                = w_fecha_ini,
             fecha_fin                = w_fecha_fin,
             p_municipio              = p_p_municipio,
             p_fcm_contravencional    = p_p_fcm_contravencional,
             p_conces_contravencional = p_p_conces_contravencional,
             p_acuerdopago            = p_p_acuerdopago,
             nit_tercero1             = p_nit_tercero1,
             base_tercero1            = p_base_tercero1,
             ind_base_tercero1        = p_ind_base_tercero1,
             nit_tercero2             = p_nit_tercero2,
             base_tercero2            = p_base_tercero2,
             ind_base_tercero2        = p_ind_base_tercero2
       where idMunicipio = p_idmunicipio
         and idValidador = p_idvalidador
         and indTipo = p_indTipo;
    
      w_operacion := 'u_validador_fecha';
      p_error     := MSG_UPD_OK;
    
      sp_log(p_usuario,
             w_operacion,
             p_idmunicipio || '-' || p_idValidador || '-' || p_indTipo || '-' ||
             p_fecha_ini_ano || '-' || p_fecha_ini_mes || '-' ||
             p_fecha_ini_dia || '-' || p_fecha_fin_ano || '-' ||
             p_fecha_fin_mes || '-' || p_fecha_fin_dia || '-' ||
             p_p_municipio || '-' || p_p_fcm_contravencional || '-' ||
             p_p_conces_contravencional || '-' || p_p_acuerdopago || '-' ||
             p_nit_tercero1 || '-' || p_base_tercero1 || '-' ||
             p_ind_base_tercero1 || '-' || p_nit_tercero2 || '-' ||
             p_base_tercero2 || '-' || p_ind_base_tercero2);
    
      commit;
    
    END IF;
  
    IF v_valida = 0 THEN
    
      p_error := 'Validador No existe. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_validador_fecha] ' || SQLERRM,
            p_error);
    
  END u_validador_fecha;

  PROCEDURE u_municipio(p_idmunicipio              varchar2,
                        p_nit_m                    varchar2,
                        p_nombre                   varchar2,
                        p_idconcesionario          varchar2,
                        p_correo                   varchar2,
                        p_indretroactividad        number,
                        p_indliq_s_ext             number,
                        p_indliq_s_local           number,
                        p_indliq_p_ext             number,
                        p_indliq_p_local           number,
                        p_indAcuerdoPago_2002      number,
                        p_idbanco                  varchar2,
                        p_tipocuenta               varchar2,
                        p_cuenta                   varchar2,
                        p_nit_cta                  varchar2,
                        p_municipio_s              number,
                        p_fcm_contravencional_s    number,
                        p_conces_contravencional_s number,
                        p_acuerdopago_s            number,
                        p_municipio_p              number,
                        p_fcm_contravencional_p    number,
                        p_conces_contravencional_p number,
                        p_acuerdopago_p            number,
                        p_usuario                  varchar2,
                        p_error                    OUT VARCHAR2
                        
                        ) AS
  
    w_operacion varchar2(250);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from municipio t
     where idmunicipio = p_idmunicipio;
  
    IF v_valida <> 0 THEN
      update municipio
         set nit_m               = p_nit_m,
             nombre              = p_nombre,
             idconcesionario     = p_idconcesionario,
             correo              = p_correo,
             indretroactividad   = p_indretroactividad,
             indliq_s_ext        = p_indliq_s_ext,
             indliq_s_local      = p_indliq_s_local,
             indliq_p_ext        = p_indliq_p_ext,
             indliq_p_local      = p_indliq_p_local,
             indAcuerdoPago_2002 = p_indAcuerdoPago_2002,
             idbanco             = p_idbanco,
             tipocuenta          = p_tipocuenta,
             cuenta              = encriptar(p_cuenta),
             nit_cta             = p_nit_cta
      
       where idmunicipio = p_idmunicipio;
    
      commit;
      p_error := MSG_UPD_OK;
    
    else
      p_error := 'Municipio no existe';
      return;
    
    END IF;
  
    select COUNT(*)
      INTO v_valida
      from p_dispersion_municipio t
     where idmunicipio = p_idmunicipio;
  
    IF v_valida <> 0 THEN
      update p_dispersion_municipio
         set idmunicipio              = p_idmunicipio,
             municipio_s              = p_municipio_s,
             fcm_contravencional_s    = p_fcm_contravencional_s,
             conces_contravencional_s = p_conces_contravencional_s,
             acuerdopago_s            = p_acuerdopago_s,
             municipio_p              = p_municipio_p,
             fcm_contravencional_p    = p_fcm_contravencional_p,
             conces_contravencional_p = p_conces_contravencional_p,
             acuerdopago_p            = p_acuerdopago_p
       where idmunicipio = p_idmunicipio;
    
      sp_log(p_usuario,
             w_operacion,
             p_idmunicipio || '-' || p_nit_m || '-' || p_nombre || '-' ||
             p_idconcesionario || '-' || p_correo || '-' ||
             p_indretroactividad || '-' || p_idbanco || '-' || p_tipocuenta || '-' ||
             p_cuenta || '-' || p_nit_cta || '-' || p_indliq_s_ext || '-' ||
             p_indliq_s_local || '-' || p_indliq_p_ext || '-' ||
             p_indliq_p_local || '-' || p_municipio_s || '-' ||
             p_indliq_p_local || '-' || p_fcm_contravencional_s || '-' ||
             p_conces_contravencional_s || '-' || p_acuerdopago_s || '-' ||
             p_municipio_p || '-' || p_fcm_contravencional_p || '-' ||
             p_conces_contravencional_p || '-' || p_acuerdopago_p);
    
      commit;
      p_error := MSG_UPD_OK;
    
    else
      insert into p_dispersion_municipio
        (idmunicipio,
         municipio_s,
         fcm_contravencional_s,
         conces_contravencional_s,
         acuerdopago_s,
         municipio_p,
         fcm_contravencional_p,
         conces_contravencional_p,
         acuerdopago_p)
      values
        (p_idmunicipio,
         p_municipio_s,
         p_fcm_contravencional_s,
         p_conces_contravencional_s,
         p_acuerdopago_s,
         p_municipio_p,
         p_fcm_contravencional_p,
         p_conces_contravencional_p,
         p_acuerdopago_p);
      --p_error := 'Municipio no existe';
    END IF;
  
    sp_log(p_usuario,
           'u_municipio',
           p_idmunicipio || '-' || p_nit_m || '-' || p_nombre || '-' ||
           p_idconcesionario || '-' || p_correo || '-' ||
           p_indretroactividad || '-' || p_idbanco || '-' || p_tipocuenta || '-' ||
           p_cuenta || '-' || p_nit_cta || '-' || p_indliq_s_ext || '-' ||
           p_indliq_s_local || '-' || p_indliq_p_ext || '-' || '-' ||
           p_indAcuerdoPago_2002 || '-' || p_indliq_p_local || '-' ||
           p_municipio_s || '-' || p_fcm_contravencional_s || '-' ||
           p_conces_contravencional_s || '-' || p_acuerdopago_s || '-' ||
           p_municipio_p || '-' || p_fcm_contravencional_p || '-' ||
           p_conces_contravencional_p || '-' || p_acuerdopago_p);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_municipio] ' || SQLERRM, p_error);
    
  END u_municipio;

  PROCEDURE i_cta_dispersion_fcm(P_NIT_FCM              VARCHAR2,
                                 P_IDBANCOREC           CHAR,
                                 P_CTA_DISP_S_BANCO     CHAR,
                                 P_CTA_DISP_S_TIPO_CTA  VARCHAR2,
                                 P_CTA_DISP_S_CTA       VARCHAR2,
                                 P_CTA_DISP_P_BANCO     CHAR,
                                 P_CTA_DISP_P_TIPO_CTA  VARCHAR2,
                                 P_CTA_DISP_P_CTA       VARCHAR2,
                                 P_CTA_DISP_PA_BANCO    CHAR,
                                 P_CTA_DISP_PA_TIPO_CTA VARCHAR2,
                                 P_CTA_DISP_PA_CTA      VARCHAR2,
                                 P_CTA_DISP_AC_BANCO    CHAR,
                                 P_CTA_DISP_AC_TIPO_CTA VARCHAR2,
                                 P_CTA_DISP_AC_CTA      VARCHAR2,
                                 p_usuario              varchar2,
                                 p_error                OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    -- Cuenta dispersion Liquidacion
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_fcm t
     where nit_fcm = p_nit_fcm
       and idbancorec = p_idbancorec;
  
    IF v_valida <> 0 THEN
      p_error := 'Datos Banco Recaudador ya existen';
      return;
    END IF;
  
    IF v_valida = 0 THEN
      insert into cta_dispersion_fcm
        (nit_fcm,
         idbancorec,
         cta_disp_s_banco,
         cta_disp_s_tipo_cta,
         cta_disp_s_cta,
         cta_disp_p_banco,
         cta_disp_p_tipo_cta,
         cta_disp_p_cta,
         cta_disp_pa_banco,
         cta_disp_pa_tipo_cta,
         cta_disp_pa_cta,
         cta_disp_ac_banco,
         cta_disp_ac_tipo_cta,
         cta_disp_ac_cta
         
         )
      values
        (p_nit_fcm,
         p_idbancorec,
         p_cta_disp_s_banco,
         p_cta_disp_s_tipo_cta,
         encriptar(p_cta_disp_s_cta),
         p_cta_disp_p_banco,
         p_cta_disp_p_tipo_cta,
         encriptar(p_cta_disp_p_cta),
         p_cta_disp_pa_banco,
         p_cta_disp_pa_tipo_cta,
         encriptar(p_cta_disp_pa_cta),
         p_cta_disp_ac_banco,
         p_cta_disp_ac_tipo_cta,
         encriptar(p_cta_disp_ac_cta)
         
         );
    
      sp_log(p_usuario,
             'i_cta_dispersion_fcm',
             p_nit_fcm || '-' || p_idbancorec || '-' || p_cta_disp_s_banco || '-' ||
             p_cta_disp_s_tipo_cta || '-' || p_cta_disp_s_cta || '-' ||
             
             p_cta_disp_p_banco || '-' || p_cta_disp_p_tipo_cta || '-' ||
             p_cta_disp_p_cta || '-' ||
             
             p_cta_disp_pa_banco || '-' || p_cta_disp_pa_tipo_cta || '-' ||
             p_cta_disp_pa_cta
             
             );
      commit;
    
      p_error := MSG_INS_OK;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_cta_dispersion_fcm] ' || SQLERRM,
            p_error);
    
  END i_cta_dispersion_fcm;

  PROCEDURE u_cta_dispersion_fcm(P_NIT_FCM              VARCHAR2,
                                 P_IDBANCOREC           CHAR,
                                 P_CTA_DISP_S_BANCO     CHAR,
                                 P_CTA_DISP_S_TIPO_CTA  VARCHAR2,
                                 P_CTA_DISP_S_CTA       VARCHAR2,
                                 P_CTA_DISP_P_BANCO     CHAR,
                                 P_CTA_DISP_P_TIPO_CTA  VARCHAR2,
                                 P_CTA_DISP_P_CTA       VARCHAR2,
                                 P_CTA_DISP_PA_BANCO    CHAR,
                                 P_CTA_DISP_PA_TIPO_CTA VARCHAR2,
                                 P_CTA_DISP_PA_CTA      VARCHAR2,
                                 P_CTA_DISP_AC_BANCO    CHAR,
                                 P_CTA_DISP_AC_TIPO_CTA VARCHAR2,
                                 P_CTA_DISP_AC_CTA      VARCHAR2,
                                 p_usuario              varchar2,
                                 p_error                OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    -- Cuenta dispersion Liquidacion
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_fcm t
     where nit_fcm = p_nit_fcm
       and idbancorec = p_idbancorec;
  
    IF v_valida <> 0 THEN
      update cta_dispersion_fcm
         set nit_fcm              = p_nit_fcm,
             idbancorec           = p_idbancorec,
             cta_disp_s_banco     = p_cta_disp_s_banco,
             cta_disp_s_tipo_cta  = p_cta_disp_s_tipo_cta,
             cta_disp_s_cta       = encriptar(p_cta_disp_s_cta),
             cta_disp_p_banco     = p_cta_disp_p_banco,
             cta_disp_p_tipo_cta  = p_cta_disp_p_tipo_cta,
             cta_disp_p_cta       = encriptar(p_cta_disp_p_cta),
             cta_disp_pa_banco    = p_cta_disp_pa_banco,
             cta_disp_pa_tipo_cta = p_cta_disp_pa_tipo_cta,
             cta_disp_pa_cta      = encriptar(p_cta_disp_pa_cta),
             cta_disp_ac_banco    = p_cta_disp_ac_banco,
             cta_disp_ac_tipo_cta = p_cta_disp_ac_tipo_cta,
             cta_disp_ac_cta      = encriptar(p_cta_disp_ac_cta)
      
       where nit_fcm = p_nit_fcm
         and idbancorec = p_idbancorec;
    
      p_error := MSG_UPD_OK;
    
      sp_log(p_usuario,
             'u_cta_dispersion_fcm',
             p_nit_fcm || '-' || p_idbancorec || '-' || p_cta_disp_s_banco || '-' ||
             p_cta_disp_s_tipo_cta || '-' || p_cta_disp_s_cta || '-' ||
             
             p_cta_disp_p_banco || '-' || p_cta_disp_p_tipo_cta || '-' ||
             p_cta_disp_p_cta || '-' ||
             
             p_cta_disp_pa_banco || '-' || p_cta_disp_pa_tipo_cta || '-' ||
             p_cta_disp_pa_cta
             
             );
      commit;
    
    END IF;
  
    IF v_valida = 0 THEN
      p_error := 'Datos Banco Recaudador no existen';
      return;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_cta_dispersion_fcm] ' || SQLERRM,
            p_error);
    
  END u_cta_dispersion_fcm;

  PROCEDURE q_cta_dispersion_fcm(P_NIT_FCM              VARCHAR2,
                                 P_IDBANCOREC           CHAR,
                                 P_CTA_DISP_S_BANCO     OUT VARCHAR2,
                                 P_CTA_DISP_S_TIPO_CTA  OUT VARCHAR2,
                                 P_CTA_DISP_S_CTA       OUT VARCHAR2,
                                 P_CTA_DISP_P_BANCO     OUT VARCHAR2,
                                 P_CTA_DISP_P_TIPO_CTA  OUT VARCHAR2,
                                 P_CTA_DISP_P_CTA       OUT VARCHAR2,
                                 P_CTA_DISP_PA_BANCO    OUT VARCHAR2,
                                 P_CTA_DISP_PA_TIPO_CTA OUT VARCHAR2,
                                 P_CTA_DISP_PA_CTA      OUT VARCHAR2,
                                 P_CTA_DISP_AC_BANCO    OUT VARCHAR2,
                                 P_CTA_DISP_AC_TIPO_CTA OUT VARCHAR2,
                                 P_CTA_DISP_AC_CTA      OUT VARCHAR2,
                                 p_usuario              varchar2,
                                 p_error                OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    --  sp_v_usuario(p_usuario, p_error,'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    -- Cuenta dispersion Liquidacion
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_fcm t
     where nit_fcm = p_nit_fcm
       and idbancorec = p_idbancorec;
  
    IF v_valida <> 0 THEN
      select cta_disp_s_banco,
             cta_disp_s_tipo_cta,
             desencriptar(cta_disp_s_cta),
             cta_disp_p_banco,
             cta_disp_p_tipo_cta,
             desencriptar(cta_disp_p_cta),
             cta_disp_pa_banco,
             cta_disp_pa_tipo_cta,
             desencriptar(cta_disp_pa_cta),
             cta_disp_ac_banco,
             cta_disp_ac_tipo_cta,
             desencriptar(cta_disp_ac_cta)
      
        into p_cta_disp_s_banco,
             p_cta_disp_s_tipo_cta,
             p_cta_disp_s_cta,
             p_cta_disp_p_banco,
             p_cta_disp_p_tipo_cta,
             p_cta_disp_p_cta,
             p_cta_disp_pa_banco,
             p_cta_disp_pa_tipo_cta,
             p_cta_disp_pa_cta,
             p_cta_disp_ac_banco,
             p_cta_disp_ac_tipo_cta,
             p_cta_disp_ac_cta
      
        from cta_dispersion_fcm
       where nit_fcm = p_nit_fcm
         and idbancorec = p_idbancorec;
      p_error := 'Consulta Exitosa';
    END IF;
  
    IF v_valida = 0 THEN
      p_error := 'Datos Banco Recaudador no existen';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_cta_dispersion_fcm] ' || SQLERRM,
            p_error);
    
  END q_cta_dispersion_fcm;

  PROCEDURE d_cta_dispersion_fcm(P_NIT_FCM    VARCHAR2,
                                 P_IDBANCOREC CHAR,
                                 p_usuario    varchar2,
                                 p_error      OUT VARCHAR2) AS
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_param');
    IF not P_ERROR is null THEN
      return;
    end if;
  
    -- Cuenta dispersion Liquidacion
    select COUNT(*)
      INTO v_valida
      from cta_dispersion_fcm t
     where nit_fcm = p_nit_fcm
       and idbancorec = p_idbancorec;
  
    IF v_valida <> 0 THEN
      delete cta_dispersion_fcm
       where nit_fcm = p_nit_fcm
         and idbancorec = p_idbancorec;
    
      sp_log(p_usuario,
             'd_cta_dispersion_fcm',
             p_nit_fcm || '-' || p_idbancorec);
    
      commit;
    
      p_error := MSG_DEL_OK;
    END IF;
  
    IF v_valida = 0 THEN
      p_error := 'Datos Banco Recaudador no existen';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_cta_dispersion_fcm] ' || SQLERRM,
            p_error);
    
  END d_cta_dispersion_fcm;

  PROCEDURE validarRangoFecha(p_fecha_ini_ano number,
                              p_fecha_ini_mes number,
                              p_fecha_ini_dia number,
                              p_fecha_fin_ano number,
                              p_fecha_fin_mes number,
                              p_fecha_fin_dia number,
                              p_indtipo       char,
                              p_idmunicipio   char,
                              p_idvalidador   char,
                              p_error         OUT VARCHAR2) AS
  
    w_fecha_ini validador_fecha.fecha_ini%TYPE;
    w_fecha_fin validador_fecha.fecha_fin%TYPE;
  
    CURSOR validar is
      select idvalidador, fecha_ini, fecha_fin
        from validador_fecha t
       where indtipo = p_indtipo
         and idmunicipio = p_idmunicipio;
  
    f_ini     date;
    f_fin     date;
    validador char(3);
  
  BEGIN
  
    select TO_DATE(p_fecha_ini_ano || '-' || p_fecha_ini_mes || '-' ||
                   p_fecha_ini_dia,
                   'YYYY-MM-DD')
      into w_fecha_ini
      from DUAL;
  
    select TO_DATE(p_fecha_fin_ano || '-' || p_fecha_fin_mes || '-' ||
                   p_fecha_fin_dia,
                   'YYYY-MM-DD')
      into w_fecha_fin
      from DUAL;
  
    p_error := 'FECHAOK';
  
    OPEN validar;
    LOOP
      FETCH validar
        INTO validador, f_ini, f_fin;
      EXIT WHEN validar%NOTFOUND;
      if (validador != p_idvalidador) then
        IF ((w_fecha_ini >= f_ini) and (w_fecha_ini <= f_fin)) OR
           ((w_fecha_fin >= f_ini) and (w_fecha_fin <= f_fin)) THEN
          p_error := 'FECHANOK';
        end if;
      END IF;
    
    END LOOP;
    commit;
    CLOSE validar;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, ' [d_validador_fecha] ' || SQLERRM, p_error);
    
  END validarRangoFecha;

  PROCEDURE u_NovmunicipioEst(p_tiponov   varchar2,
                              p_numeronov varchar2,
                              p_usuario   varchar2,
                              p_estado    varchar2,
                              p_error     OUT VARCHAR2) is
  
    estado_act varchar2(100);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select TRIM(UPPER(estadonov))
          into estado_act
          from Novmunicipio
         where tiponov = p_tiponov
           and numeronov = to_number(p_numeronov);
      
        IF estado_act = p_estado THEN
          p_error := 'Novedad ya actualizada';
          return;
        END IF;
      
        IF p_estado = 'VALIDADA' THEN
          update Novmunicipio
             set estadonov  = p_estado,
                 usuarioval = p_usuario,
                 fechaval   = sysdate
           where tiponov = p_tiponov
             and numeronov = to_number(p_numeronov);
        ELSE
          IF p_estado = 'ANULADA' THEN
            update Novmunicipio
               set estadonov   = p_estado,
                   usuarioanul = p_usuario,
                   fechaanul   = sysdate
             where tiponov = p_tiponov
               and numeronov = to_number(p_numeronov);
          ELSE
            update Novmunicipio
               set estadonov = p_estado
             where tiponov = p_tiponov
               and numeronov = to_number(p_numeronov);
          END IF;
        END IF;
      
        IF p_estado = 'ANULADA' THEN
          insert into hist_vobo
            (idvobo,
             tipo,
             accion,
             usuario,
             fecha,
             referencia1,
             referencia2,
             referencia3,
             referencia4)
          values
            (seq_vobo.nextval,
             'NOVEDAD MUNICIPIO',
             'RECHAZADO',
             p_usuario,
             sysdate,
             p_tiponov || '-' || p_numeronov,
             p_estado,
             0,
             0);
        
        ELSE
          insert into hist_vobo
            (idvobo,
             tipo,
             accion,
             usuario,
             fecha,
             referencia1,
             referencia2,
             referencia3,
             referencia4)
          values
            (seq_vobo.nextval,
             'NOVEDAD MUNICIPIO',
             'APROBADO',
             p_usuario,
             sysdate,
             p_tiponov || '-' || p_numeronov,
             p_estado,
             0,
             0);
        END IF;
      
        commit;
      
        if (p_estado = 'VOBOFINANCIERA') THEN
          sp_envionotificacion(gruporecibe => 5,
                               grupocopia  => -1,
                               asunto      => 'Notificaci¿n de Novedad de Municipio:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha creado una novedad financiera de municipio. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        if (p_estado = 'VOBOSIMIT') THEN
          sp_envionotificacion(gruporecibe => 6,
                               grupocopia  => -1,
                               asunto      => 'Notificaci¿n de Novedad de Municipio:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha creado una novedad financiera de municipio. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        if (p_estado = 'VALIDADA') THEN
          sp_envionotificacion(gruporecibe => 7,
                               grupocopia  => -1,
                               asunto      => 'Notificaci¿n de Novedad de Municipio:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha aprobado una novedad financiera de municipio. Por favor informar a banco novedad. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        if (p_estado = 'ANULADA') THEN
          sp_envionotificacion(gruporecibe => 3,
                               grupocopia  => -1,
                               asunto      => 'Notificaci¿n de ANULACION Novedad de Municipio:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha ANULADO una novedad financiera de municipio. Por favor verificar informacion. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        p_error := 'Actualizaci¿n Exitosa';
      
        sp_log(p_usuario,
               'u_NovmunicipioEst',
               p_tiponov || '-' || p_numeronov || '-' || p_estado);
      
        commit;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO' || p_tiponov || '-' ||
                     p_numeronov;
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_NovmunicipioEst] ' || SQLERRM,
            p_error);
  END u_NovmunicipioEst;

  PROCEDURE a_parConta(v_idparametro varchar2,
                       v_parametro   varchar2,
                       v_descripcion varchar2,
                       v_usuario     number,
                       v_cod_error   out number,
                       v_msg_error   out varchar2) is
    numReg number;
  BEGIN
  
    select count(*)
      into numReg
      from par_conta
     where upper(idparametro) = upper(v_idparametro);
  
    if (numReg > 0) then
      v_cod_error := 0001;
      v_msg_error := 'Registro ya existe';
      return;
    end if;
  
    insert into par_conta
      (idparametro, parametro, descripcion)
    values
      (v_idparametro, v_parametro, v_descripcion);
  
    commit;
  
    sp_log(v_usuario, 'a_parConta', v_idparametro);
  
    v_cod_error := 0000;
    v_msg_error := 'Registro agregado correctamente';
  
  EXCEPTION
    WHEN OTHERS THEN
      v_cod_error := SQLCODE;
      v_msg_error := SQLERRM;
    
  END a_parConta;

  PROCEDURE m_parConta(v_idparametro varchar2,
                       v_parametro   varchar2,
                       v_descripcion varchar2,
                       v_usuario     number,
                       v_cod_error   out number,
                       v_msg_error   out varchar2) is
    numReg number;
  BEGIN
  
    select count(*)
      into numReg
      from par_conta
     where upper(idparametro) = upper(v_idparametro);
  
    if (numReg = 0) then
      v_cod_error := 0001;
      v_msg_error := 'Registro no existe';
      return;
    end if;
  
update par_conta
   set parametro = v_parametro,
       descripcion = v_descripcion
 where idparametro = v_idparametro;
 
  
    commit;
  
    sp_log(v_usuario, 'm_parConta', v_idparametro);
  
    v_cod_error := 0000;
    v_msg_error := 'Registro modificado correctamente';
  
  EXCEPTION
    WHEN OTHERS THEN
      v_cod_error := SQLCODE;
      v_msg_error := SQLERRM;
    
  END m_parConta;

  PROCEDURE d_parConta(v_idparametro varchar2,
                       v_usuario     number,
                       v_cod_error   out number,
                       v_msg_error   out varchar2) is
    numReg number;
  BEGIN
  
    select count(*)
      into numReg
      from par_conta
     where upper(idparametro) = upper(v_idparametro);
  
    if (numReg = 0) then
      v_cod_error := 0001;
      v_msg_error := 'Registro no existe';
      return;
    end if;
  
delete par_conta
 where idparametro = v_idparametro;
 
  
    commit;
  
    sp_log(v_usuario, 'd_parConta', v_idparametro);
  
    v_cod_error := 0000;
    v_msg_error := 'Registro eliminado correctamente';
  
  EXCEPTION
    WHEN OTHERS THEN
      v_cod_error := SQLCODE;
      v_msg_error := SQLERRM;
    
  END d_parConta;
  
end pk_param;
/

prompt
prompt Creating package body PK_PROC
prompt =============================
prompt
create or replace package body simit.pk_proc is

  -- Private variable declarations
  v_valida NUMBER;
  PROCEDURE i_archivoBin(p_filename varchar2,
                         p_bfile    blob,
                         p_usuario  varchar2,
                         p_error    OUT VARCHAR2) is
    p_uploadid number;
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      select seq_uploads.nextval into p_uploadid from dual;
      insert into uploadBin
        (uploadid, filename, bfile, usuario, fecha, valida)
      values
        (p_uploadid, p_filename, p_bfile, p_usuario, sysdate, 0);
    
      --p_error := p_uploadid;
    
      v_archivoBin(p_uploadid, p_usuario, p_error);
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_archivoBin] ' || SQLERRM, p_error);
  END i_archivoBin;

  PROCEDURE v_archivoBin(p_uploadid number,
                         p_usuario  varchar2,
                         p_error    OUT VARCHAR2) is
  
    vblob   BLOB;
    vstart  NUMBER := 1;
    bytelen NUMBER := 32000;
    len     NUMBER;
    my_vr   RAW(32000);
    x       NUMBER;
  
    nomArchivo VARCHAR2(255);
    l_output   utl_file.file_type;
  
    directorio varchar2(255);
    ext        varchar2(255);
  
    comando varchar(250);
    salida  varchar(250);
  
    archivo      utl_file.file_type;
    input_buffer varchar2(1000);
  
    V_FECHAPROCESO              DATE;
    NUMEROREGISTRO              NUMBER;
    REFERENCIA                  VARCHAR2(16);
    BANCOORIGEN                 CHAR(2);
    TIPODECUENTAORIGEN          CHAR(3);
    v_NUMERODECUENTAORIGEN      VARCHAR2(16);
    VALORTRANSFERENCIA          NUMBER;
    BANCODESTINO                CHAR(2);
    TIPODECUENTADESTINO         CHAR(3);
    NUMERODECUENTADESTINO       VARCHAR2(16);
    TIPOIDENTIFICACIONDESTINO   CHAR(1);
    NUMEROIDENTIFICACIONDESTINO VARCHAR2(16);
    MENSAJEDERESPUESTA          VARCHAR2(100);
    CODIGODERESPUESTA           VARCHAR2(7);
    FECHACARGUE                 DATE;
    USUARIOCARGUE               NUMBER;
  
    primero number;
  
    v_tipoCargue  char(3);
    v_bancoOrigen char(2);
  
    v_regOk number;
  
    v_nocruzo number;
  
    result token_list;
  
    CURSOR tabla IS
      select fechaproceso,
             numeroregistro,
             referencia,
             bancoorigen,
             tipodecuentaorigen,
             numerodecuentaorigen,
             valortransferencia,
             bancodestino,
             tipodecuentadestino,
             numerodecuentadestino,
             tipoidentificaciondestino,
             numeroidentificaciondestino,
             mensajederespuesta,
             codigoderespuesta,
             fechacargue,
             usuariocargue,
             tipocargue,
             rowid
        from resulproctrf
       where FECHAPROCESO = v_fechaProceso
         and BANCOORIGEN = v_bancoOrigen
         and tipoCargue = v_tipoCargue;
  
    CURSOR tablaBan IS
      select fechaproceso,
             numeroregistro,
             referencia,
             bancoorigen,
             tipodecuentaorigen,
             numerodecuentaorigen,
             valortransferencia,
             bancodestino,
             tipodecuentadestino,
             numerodecuentadestino,
             tipoidentificaciondestino,
             numeroidentificaciondestino,
             mensajederespuesta,
             codigoderespuesta,
             fechacargue,
             usuariocargue,
             tipocargue,
             rowid
        from resulproctrf
       where FECHAPROCESO = v_fechaProceso
         and BANCOORIGEN = v_bancoOrigen
         and tipoCargue = v_tipoCargue
         and numerodecuentaorigen = v_NUMERODECUENTAORIGEN;
  
    regCon rowid;
  
  BEGIN
  
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
    IF not (P_ERROR is null) THEN
      RETURN;
    END IF;
  
    -- convertir archivo blob en archivo en sistema operativo
    SELECT COUNT(*)
      INTO v_valida
      FROM uploadBin
     WHERE uploadid = p_uploadid;
  
    IF (v_valida = 0) THEN
      p_error := 'Archivo no ha sido cargado';
      return;
    END IF;
  
    SELECT lower(filename)
      INTO nomArchivo
      FROM uploadBin
     WHERE uploadid = p_uploadid;
  
    -- define output directory
    directorio := 'TRFAVVILLAS';
  
    if (substr(nomArchivo, 1, 3) = 'cnj') then
      directorio := 'TRFAVVILLAS';
    end if;
  
    if (substr(nomArchivo, 1, 2) = 'sr') then
      directorio := 'TRFDAVIVIENDA';
    end if;
  
    if (substr(nomArchivo, 1, 2) = 'rs') then
      directorio := 'TRFDAVIVIENDA';
    end if;
  
    if (substr(nomArchivo, 1, 2) = 'sm') then
      directorio := 'TRFDAVIVIENDA';
    end if;
  
    l_output := utl_file.fopen(directorio, nomArchivo, 'wb', 32760);
  
    vstart  := 1;
    bytelen := 32000;
  
    -- get length of blob
    SELECT dbms_lob.getlength(bFile)
      INTO len
      FROM uploadBin
     WHERE uploadid = p_uploadid;
  
    -- save blob length
    x := len;
  
    -- select blob into variable
    SELECT bfile INTO vblob FROM uploadBin WHERE uploadid = p_uploadid;
  
    -- if small enough for a single write
    IF len < 32760 THEN
      utl_file.put_raw(l_output, vblob);
      utl_file.fflush(l_output);
    ELSE
      -- write in pieces
      vstart := 1;
      WHILE vstart < len and bytelen > 0 LOOP
        dbms_lob.read(vblob, bytelen, vstart, my_vr);
      
        utl_file.put_raw(l_output, my_vr);
        utl_file.fflush(l_output);
      
        -- set the start position for the next cut
        vstart := vstart + bytelen;
      
        -- set the end position if less than 32000 bytes
        x := x - bytelen;
        IF x < 32000 THEN
          bytelen := x;
        END IF;
      END LOOP;
    END IF;
  
    utl_file.fclose(l_output);
  
    ext := substr(nomArchivo, LENGTH(nomArchivo) - 2, LENGTH(nomArchivo));
  
    -- desencriptar si esta encriptado
    if (ext = 'pgp' or ext = 'gpg') then
    
      if (directorio = 'TRFAVVILLAS') then
        comando := '/bin/sh /trfavvillas/desencriptarArchivo.sh ' ||
                   nomArchivo;
      end if;
    
      if (directorio = 'TRFDAVIVIENDA') then
        comando := '/bin/sh /trfdavivienda/desencriptarArchivo.sh ' ||
                   nomArchivo;
      end if;
    
      salida := Shell_Run(comando);
    
      if (substr(salida, 0, 2) <> '0:') then
        p_error := salida;
        return;
      end if;
    
      nomArchivo := substr(nomArchivo, 1, LENGTH(nomArchivo) - 4);
    
    end if;
  
    -- cargar plano a tabla
  
    archivo := utl_file.fopen(directorio, nomArchivo, 'R');
    primero := 0;
  
    FECHACARGUE   := sysdate;
    USUARIOCARGUE := to_number(p_usuario);
  
    LOOP
      BEGIN
        utl_file.get_line(archivo, input_buffer);
      EXCEPTION
        when no_data_found then
          exit;
      END;
    
      v_regOk := 0;
    
      if (primero = 0) then
      
        if (substr(nomArchivo, 1, 7) = 'cnj653d') then
          v_tipoCargue   := 'TRF';
          v_bancoOrigen  := '52';
          v_fechaProceso := to_date(substr(input_buffer, 2, 8), 'yyyymmdd');
        end if;
      
        if (substr(nomArchivo, 1, 7) = 'cnj306d') then
          v_tipoCargue   := 'ACH';
          v_bancoOrigen  := '52';
          v_fechaProceso := to_date(substr(input_buffer, 2, 8), 'yyyymmdd');
        end if;
      
        if (substr(nomArchivo, 1, 2) = 'rs') then
          v_tipoCargue   := 'TRF';
          v_bancoOrigen  := '50';
          v_fechaProceso := to_date(substr(input_buffer, 1, 6), 'yymmdd');
        end if;
      
        if (substr(nomArchivo, 1, 2) = 'sr') then
          v_tipoCargue           := 'ACH';
          v_bancoOrigen          := '50';
          v_fechaProceso         := to_date(substr(nomArchivo, 14, 8),
                                            'yyyymmdd');
          v_NUMERODECUENTAORIGEN := substr(nomArchivo, 4, 9);
        end if;
      
        if (substr(nomArchivo, 1, 2) = 'sm') then
          v_tipoCargue           := 'ACH';
          v_bancoOrigen          := '50';
          v_fechaProceso         := to_date(substr(nomArchivo, 12, 6),
                                            'yymmdd');
          v_NUMERODECUENTAORIGEN := substr(nomArchivo, 3, 9);
        end if;
      
        if (substr(nomArchivo, 1, 2) <> 'sm' and
           substr(nomArchivo, 1, 2) <> 'sr') then
          delete resulproctrf
           where FECHAPROCESO = v_fechaProceso
             and BANCOORIGEN = v_bancoOrigen
             and tipoCargue = v_tipoCargue;
        else
          delete resulproctrf
           where FECHAPROCESO = v_fechaProceso
             and BANCOORIGEN = v_bancoOrigen
             and tipoCargue = v_tipoCargue
             and NUMERODECUENTAORIGEN = v_NUMERODECUENTAORIGEN;
        
        end if;
      
        commit;
      
        primero := 1;
      end if;
    
      -- cargar estructura avvillas - registros de detalle
      if (substr(nomArchivo, 1, 3) = 'cnj') and
         substr(input_buffer, 1, 1) = '1' then
      
        v_regOk := 1;
      
        V_FECHAPROCESO     := to_date(substr(input_buffer, 2, 8),
                                      'yyyymmdd');
        NUMEROREGISTRO     := to_number(substr(input_buffer, 10, 8),
                                        '99999999');
        REFERENCIA         := substr(input_buffer, 18, 16);
        BANCOORIGEN        := substr(input_buffer, 35, 2);
        TIPODECUENTAORIGEN := 'AHO';
        if (substr(input_buffer, 37, 1) = '2') then
          TIPODECUENTAORIGEN := 'CTE';
        end if;
        v_NUMERODECUENTAORIGEN := substr(input_buffer, 45, 9);
        VALORTRANSFERENCIA     := to_number(substr(input_buffer, 54, 18),
                                            '999999999999999999');
        VALORTRANSFERENCIA     := VALORTRANSFERENCIA / 100;
        BANCODESTINO           := substr(input_buffer, 73, 2);
      
        TIPODECUENTADESTINO := 'AHO';
        if (substr(input_buffer, 75, 1) = '2') then
          TIPODECUENTADESTINO := 'CTE';
        end if;
      
        NUMERODECUENTADESTINO       := trim(substr(input_buffer, 76, 16));
        TIPOIDENTIFICACIONDESTINO   := substr(input_buffer, 92, 1);
        NUMEROIDENTIFICACIONDESTINO := substr(input_buffer, 99, 10);
        MENSAJEDERESPUESTA          := trim(substr(input_buffer, 109, 100));
        CODIGODERESPUESTA           := substr(input_buffer, 209, 3);
      
      end if;
    
      if (substr(nomArchivo, 1, 2) = 'rs') then
      
        v_regOk := 1;
      
        V_FECHAPROCESO         := to_date(substr(input_buffer, 1, 6),
                                          'yymmdd');
        NUMEROREGISTRO         := 0;
        REFERENCIA             := '';
        BANCOORIGEN            := '50';
        TIPODECUENTAORIGEN     := 'AHO';
        v_NUMERODECUENTAORIGEN := trim(substr(input_buffer, 21, 16));
        VALORTRANSFERENCIA     := to_number(substr(input_buffer, 53, 18),
                                            '999999999999999999');
        VALORTRANSFERENCIA     := VALORTRANSFERENCIA / 100;
        BANCODESTINO           := '';
      
        TIPODECUENTADESTINO := '';
      
        NUMERODECUENTADESTINO       := trim(substr(input_buffer, 37, 16));
        TIPOIDENTIFICACIONDESTINO   := '';
        NUMEROIDENTIFICACIONDESTINO := '';
        MENSAJEDERESPUESTA          := 'RECHAZO EN PREVALIDACION';
        CODIGODERESPUESTA           := substr(input_buffer, 71, 7);
        CODIGODERESPUESTA           := '999';
      end if;
      /*
        if (substr(nomArchivo, 1, 2) = 'sr') then
      
          v_regOk := 1;
      
          V_FECHAPROCESO         := to_date(substr(input_buffer, 146, 8),
                                            'yyyymmdd');
          NUMEROREGISTRO         := 0;
          REFERENCIA             := substr(input_buffer, 17, 16);
          BANCOORIGEN            := '50';
          TIPODECUENTAORIGEN     := 'AHO';
          v_NUMERODECUENTAORIGEN := '';
          VALORTRANSFERENCIA     := to_number(substr(input_buffer, 57, 18),
                                              '999999999999999999');
          VALORTRANSFERENCIA     := VALORTRANSFERENCIA / 100;
          BANCODESTINO           := substr(input_buffer, 55, 2);
      
          TIPODECUENTADESTINO := 'AHO';
      
          if (substr(input_buffer, 49, 2) <> 'CA') then
            TIPODECUENTADESTINO := 'CTE';
          end if;
      
          NUMERODECUENTADESTINO       := trim(substr(input_buffer, 33, 16));
          TIPOIDENTIFICACIONDESTINO   := '';
          NUMEROIDENTIFICACIONDESTINO := substr(input_buffer, 8, 10);
          MENSAJEDERESPUESTA          := trim(substr(input_buffer, 88, 40));
          if (MENSAJEDERESPUESTA = '' or MENSAJEDERESPUESTA is null) then
            MENSAJEDERESPUESTA := 'RECHAZO ACH';
          end if;
          CODIGODERESPUESTA := substr(input_buffer, 84, 4);
          CODIGODERESPUESTA := '000';
      
          if (MENSAJEDERESPUESTA = '' or MENSAJEDERESPUESTA is null) then
            CODIGODERESPUESTA := '999';
          end if;
      
        end if;
      */
    
      if (substr(nomArchivo, 1, 2) = 'sr') then
      
        if (substr(input_buffer, 1, 2) = 'RC') then
          if (v_NUMERODECUENTAORIGEN <> substr(input_buffer, 34, 9)) then
            p_error := 'Cuenta no corresponde a la contenida en el archivo. El archivo contiene la cuenta  ' ||
                       substr(input_buffer, 34, 9);
            utl_file.fclose(archivo);
            return;
          end if;
        end if;
      
        if (substr(input_buffer, 1, 2) = 'TR') then
          v_regOk := 1;
        end if;
      
        if (v_regOk = 1) then
          V_FECHAPROCESO     := v_fechaProceso;
          NUMEROREGISTRO     := 0;
          REFERENCIA         := '';
          BANCOORIGEN        := '50';
          TIPODECUENTAORIGEN := 'AHO';
          VALORTRANSFERENCIA := to_number(substr(input_buffer, 59, 18),
                                          '999999999999999999');
          VALORTRANSFERENCIA := VALORTRANSFERENCIA / 100;
          BANCODESTINO       := substr(input_buffer, 57, 2);
        
          TIPODECUENTADESTINO := 'AHO';
        
          if (substr(input_buffer, 51, 2) <> 'CA') then
            TIPODECUENTADESTINO := 'CTE';
          end if;
        
          NUMERODECUENTADESTINO       := substr(input_buffer, 35, 16);
          TIPOIDENTIFICACIONDESTINO   := '';
          NUMEROIDENTIFICACIONDESTINO := substr(input_buffer, 9, 10);
          MENSAJEDERESPUESTA          := trim(substr(input_buffer, 90, 40));
          CODIGODERESPUESTA           := substr(input_buffer, 87, 3);
        
        end if;
      
      end if;
    
      if (substr(nomArchivo, 1, 2) = 'sm') then
        -- se esta generando con ;
        result := tokenize(str => input_buffer, delim => ';');
      
        v_regOk := 1;
      
        if (result(1) is null) then
          v_regOk := 0;
        end if;
      
        if (v_regOk = 1 and lower(result(1)) = 'destino') then
          v_regOk := 0;
        end if;
      
        if (v_regOk = 1 and lower(result(1)) = 'identificacion') then
          v_regOk := 0;
        end if;
      
        if (v_regOk = 1) then
          V_FECHAPROCESO := to_date(substr(nomArchivo, 12, 6), 'yymmdd');
          NUMEROREGISTRO := 0;
        
          if (substr(result(5), 1, 1) = '$') then
            if (substr(result(5), LENGTH(result(5)) - 2, 1) = ',') then
              result(5) := replace(result(5), '.', '');
              result(5) := replace(result(5), ',', '.');
              result(5) := replace(result(5), ' ', '');
            else
              if (substr(result(5), LENGTH(result(5)) - 2, 1) = '.') then
                result(5) := replace(result(5), ',', '');
                result(5) := replace(result(5), ' ', '');
              end if;
            end if;
          
          end if;
        
          REFERENCIA := '';
        
          BANCOORIGEN            := '50';
          TIPODECUENTAORIGEN     := 'AHO';
          v_NUMERODECUENTAORIGEN := substr(nomArchivo, 3, 9);
          VALORTRANSFERENCIA     := to_number(result(5),
                                              '$999999999999999999.99');
        
          BANCODESTINO := '';
        
          TIPODECUENTADESTINO := '';
        
          NUMERODECUENTADESTINO       := result(3);
          TIPOIDENTIFICACIONDESTINO   := '';
          NUMEROIDENTIFICACIONDESTINO := result(1);
          MENSAJEDERESPUESTA          := result(6);
          if (instr(lower(result(6)), 'devolucion', 1) > 0 or
             instr(lower(result(6)), 'rechazo', 1) > 0) then
            MENSAJEDERESPUESTA := result(7);
          end if;
        
          if (instr(lower(result(6)), 'devolucion', 1) > 0 or
             instr(lower(result(6)), 'rechazo', 1) > 0) then
            CODIGODERESPUESTA := '999';
          else
            CODIGODERESPUESTA := '000';
          end if;
        
        end if;
      
      end if;
    
      if (v_regOk = 1) then
      
        insert into resulproctrf
          (fechaproceso,
           numeroregistro,
           referencia,
           bancoorigen,
           tipodecuentaorigen,
           numerodecuentaorigen,
           valortransferencia,
           bancodestino,
           tipodecuentadestino,
           numerodecuentadestino,
           tipoidentificaciondestino,
           numeroidentificaciondestino,
           mensajederespuesta,
           codigoderespuesta,
           fechacargue,
           usuariocargue,
           tipoCargue)
        values
          (v_fechaproceso,
           numeroregistro,
           referencia,
           bancoorigen,
           tipodecuentaorigen,
           v_numerodecuentaorigen,
           valortransferencia,
           bancodestino,
           tipodecuentadestino,
           numerodecuentadestino,
           tipoidentificaciondestino,
           numeroidentificaciondestino,
           mensajederespuesta,
           codigoderespuesta,
           fechacargue,
           usuariocargue,
           v_tipoCargue);
      
      end if;
    
    END LOOP;
  
    utl_file.fclose(archivo);
  
    commit;
  
    -- realiza conciliacion de registros avvillas
    if (v_bancoOrigen = '52') then
      for registro in tabla loop
        -- ubicar registro a conciliar por referencia
        if (registro.referencia <> '0000000000000000') then
        
          begin
            select rowid
              into regCon
              from recaudo_externo_disp_tot
             where referenciatrf = to_number(registro.referencia);
          
          EXCEPTION
            WHEN OTHERS THEN
              regCon := null;
          end;
        end if;
      
        -- ubicar registro por datos
        if (registro.referencia = '0000000000000000') then
        
          select count(*)
            into v_valida
            from recaudo_externo_disp_tot
           where fec_dispersion <= registro.fechaProceso
             and fec_dispersion >= (registro.fechaProceso - 5)
             and to_number(ori_cuenta) =
                 to_number(registro.numerodecuentaorigen)
             and to_number(simit.desencriptar(des_cuenta)) =
                 to_number(registro.numerodecuentadestino)
             and valor = registro.valortransferencia;
        
          if (v_valida = 1) then
            select rowid
              into regCon
              from recaudo_externo_disp_tot
             where fec_dispersion <= registro.fechaProceso
               and fec_dispersion >= (registro.fechaProceso - 5)
               and to_number(ori_cuenta) =
                   to_number(registro.numerodecuentaorigen)
               and to_number(simit.desencriptar(des_cuenta)) =
                   to_number(registro.numerodecuentadestino)
               and valor = registro.valortransferencia;
          end if;
        
          if (v_valida > 1) then
            select max(rowid)
              into regCon
              from recaudo_externo_disp_tot
             where fec_dispersion <= registro.fechaProceso
               and fec_dispersion >= (registro.fechaProceso - 5)
               and to_number(ori_cuenta) =
                   to_number(registro.numerodecuentaorigen)
               and to_number(simit.desencriptar(des_cuenta)) =
                   to_number(registro.numerodecuentadestino)
               and valor = registro.valortransferencia
               and rowid not in
                   (select regcruzo
                      from resulproctrf
                     where FECHAPROCESO = v_fechaProceso
                       and BANCOORIGEN = v_bancoOrigen
                       and tipoCargue = v_tipoCargue
                       and numerodecuentaorigen = v_NUMERODECUENTAORIGEN
                       and regcruzo is not null);
          
          end if;
        
          if (v_valida = 0) then
            regCon := null;
          end if;
        
        end if;
      
        -- actualizar transferencias rechazadas
        if (regCon is not null and registro.codigoderespuesta <> '000') then
        
          update recaudo_externo_disp_tot r
             set r.estadotrf        = 'REC',
                 r.fechadevolucion  = registro.fechaproceso,
                 r.motivodevolucion = registro.mensajederespuesta,
                 r.codigodevolucion = registro.codigoderespuesta
           where r.rowid = regCon;
        
          update resulproctrf
             set regcruzo = regCon
           where rowid = registro.rowid;
        
        end if;
      
        -- actualizar transferencias rechazadas
        if (regCon is not null and registro.codigoderespuesta = '000') then
          update resulproctrf
             set regcruzo = regCon
           where rowid = registro.rowid;
        end if;
      
        -- actualizar transferencias internas exitosas
        if (regCon is not null and registro.codigoderespuesta = '000' and
           registro.bancodestino = '52') then
        
          update recaudo_externo_disp_tot r
             set r.estadotrf       = 'EXI',
                 r.fechaconfirmada = registro.fechaproceso
           where r.rowid = regCon;
        
          update resulproctrf
             set regcruzo = regCon
           where rowid = registro.rowid;
        
        end if;
      
      -- actualizar transferencias ACH
      /* No es necesario dado que las transferencias ach son aceptadas siempre
                                                  el estado ENV significa Enviado a Banco pero sin confirmar
                                                  if (regCon is not null and registro.codigoderespuesta = '000' and
                                                     registro.bancodestino <> '52') then
                  
                                                    update recaudo_externo_disp_tot r
                                                       set r.estadotrf       = 'ACH',
                                                           r.fechaEnvioAch = registro.fechaproceso
                                                     where r.rowid = regCon;
                  
                                                    update resulproctrf
                                                       set regcruzo = regCon
                                                     where rowid = registro.rowid;
                  
                                                  end if;
                                                  */
      
      end loop;
    
    end if;
  
    -- realiza conciliacion de registros bancafe
    if (v_bancoOrigen = '50') then
    
      for registro in tablaBan loop
        -- ubicar registro por datos
        if (registro.referencia = '' or registro.referencia is null) then
        
          regCon := null;
        
          select count(*)
            into v_valida
            from recaudo_externo_disp_tot
           where fec_dispersion <= registro.fechaProceso
             and fec_dispersion >= (registro.fechaProceso - 60)
             and to_number(ori_cuenta) =
                 to_number(registro.numerodecuentaorigen)
             and to_number(simit.desencriptar(des_cuenta)) =
                 to_number(registro.numerodecuentadestino)
             and valor = registro.valortransferencia;
        
          if (v_valida = 1) then
            select rowid
              into regCon
              from recaudo_externo_disp_tot
             where fec_dispersion <= registro.fechaProceso
               and fec_dispersion >= (registro.fechaProceso - 60)
               and to_number(ori_cuenta) =
                   to_number(registro.numerodecuentaorigen)
               and to_number(simit.desencriptar(des_cuenta)) =
                   to_number(registro.numerodecuentadestino)
               and valor = registro.valortransferencia;
          
          end if; --  if (v_valida = 1) then
        
          if (v_valida > 1) then
            select max(rowid)
              into regCon
              from recaudo_externo_disp_tot
             where fec_dispersion <= registro.fechaProceso
               and fec_dispersion >= (registro.fechaProceso - 60)
               and to_number(ori_cuenta) =
                   to_number(registro.numerodecuentaorigen)
               and to_number(simit.desencriptar(des_cuenta)) =
                   to_number(registro.numerodecuentadestino)
               and valor = registro.valortransferencia
               and rowid not in
                   (select regcruzo
                      from resulproctrf
                     where FECHAPROCESO = v_fechaProceso
                       and BANCOORIGEN = v_bancoOrigen
                       and tipoCargue = v_tipoCargue
                       and numerodecuentaorigen = v_NUMERODECUENTAORIGEN
                       and regcruzo is not null);
          
          end if; -- if (v_valida > 1) then
        
          if (v_valida = 0) then
            regCon := null;
          end if; -- if (v_valida = 0) then
        
          if (regCon is null) then
          
            select count(*)
              into v_valida
              from recaudo_externo_disp_tot
             where fec_dispersion <= registro.fechaProceso
               and fec_dispersion >= (registro.fechaProceso - 60)
               and to_number(ori_cuenta) =
                   to_number(registro.numerodecuentaorigen)
               and instr(simit.desencriptar(des_cuenta),
                         substr(registro.numerodecuentadestino, 5, 12)) > 0
               and valor = registro.valortransferencia;
          
            if (v_valida = 1) then
              select rowid
                into regCon
                from recaudo_externo_disp_tot
               where fec_dispersion <= registro.fechaProceso
                 and fec_dispersion >= (registro.fechaProceso - 60)
                 and to_number(ori_cuenta) =
                     to_number(registro.numerodecuentaorigen)
                 and instr(simit.desencriptar(des_cuenta),
                           substr(registro.numerodecuentadestino, 5, 12)) > 0
                 and valor = registro.valortransferencia;
            
            end if; -- if (v_valida = 1) then
          
            if (v_valida > 1) then
              select max(rowid)
                into regCon
                from recaudo_externo_disp_tot
               where fec_dispersion <= registro.fechaProceso
                 and fec_dispersion >= (registro.fechaProceso - 60)
                 and to_number(ori_cuenta) =
                     to_number(registro.numerodecuentaorigen)
                 and instr(simit.desencriptar(des_cuenta),
                           substr(registro.numerodecuentadestino, 5, 12)) > 0
                 and valor = registro.valortransferencia
                 and rowid not in
                     (select regcruzo
                        from resulproctrf
                       where FECHAPROCESO = v_fechaProceso
                         and BANCOORIGEN = v_bancoOrigen
                         and tipoCargue = v_tipoCargue
                         and numerodecuentaorigen = v_NUMERODECUENTAORIGEN
                         and regcruzo is not null);
            
            end if; -- if (v_valida > 1) then
          
          end if; -- if (regCon is null ) then
        
          -- actualizar transferencias rechazadas
          if (regCon is not null and registro.codigoderespuesta <> '000') then
          
            update recaudo_externo_disp_tot r
               set r.estadotrf        = 'REC',
                   r.fechadevolucion  = registro.fechaproceso,
                   r.motivodevolucion = registro.mensajederespuesta,
                   r.codigodevolucion = registro.codigoderespuesta
             where r.rowid = regCon;
          
            update resulproctrf
               set regcruzo = regCon
             where rowid = registro.rowid;
          
          end if; --  if (regCon is not null and registro.codigoderespuesta <> '000') then
        
          -- actualizar transferencias exitosas
          if (regCon is not null and registro.codigoderespuesta = '000') then
          
            /*
              update recaudo_externo_disp_tot r
                 set r.estadotrf       = 'EXI',
                     r.fechaconfirmada = registro.fechaproceso
               where r.rowid = regCon;
            */
          
            update resulproctrf
               set regcruzo = regCon
             where rowid = registro.rowid;
          
          end if; -- if (regCon is not null and registro.codigoderespuesta = '000') then
        
        end if; -- if (registro.referencia = '' or registro.referencia is null) then
      end loop;
    
    end if;
  
    commit;
  
    if (substr(nomArchivo, 1, 2) <> 'sm' and
       substr(nomArchivo, 1, 2) <> 'sr') then
    
      select count(*)
        into v_valida
        from resulproctrf
       where FECHAPROCESO = v_fechaProceso
         and BANCOORIGEN = v_bancoOrigen
         and tipoCargue = v_tipoCargue;
    else
      select count(*)
        into v_valida
        from resulproctrf
       where FECHAPROCESO = v_fechaProceso
         and BANCOORIGEN = v_bancoOrigen
         and tipoCargue = v_tipoCargue
         and numerodecuentaorigen = v_numerodecuentaorigen;
    end if;
  
    p_error := 'Cargue exitoso. Registros cargados:' || v_valida;
  
    if (substr(nomArchivo, 1, 2) <> 'sm' and
       substr(nomArchivo, 1, 2) <> 'sr') then
    
      select count(*)
        into v_nocruzo
        from resulproctrf
       where FECHAPROCESO = v_fechaProceso
         and BANCOORIGEN = v_bancoOrigen
         and tipoCargue = v_tipoCargue
         and regcruzo is not null;
    else
      select count(*)
        into v_nocruzo
        from resulproctrf
       where FECHAPROCESO = v_fechaProceso
         and BANCOORIGEN = v_bancoOrigen
         and tipoCargue = v_tipoCargue
         and numerodecuentaorigen = v_numerodecuentaorigen
         and regcruzo is not null;
    end if;
  
    p_error := p_error || ' Registros cruzados:' || v_nocruzo;
  
    if (v_valida <> v_nocruzo) then
      p_error := p_error ||
                 '.ERROR FALTAN REGISTROS POR CRUZAR INFORMAR AL ADMINISTRADOR';
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [v_archivoBin] ' || SQLERRM, p_error);
  END v_archivoBin;

  PROCEDURE i_archivo(p_filename varchar2,
                      p_cfile    clob,
                      p_usuario  varchar2,
                      p_error    OUT VARCHAR2) is
    p_uploadid number;
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      select seq_uploads.nextval into p_uploadid from dual;
      insert into upload
        (uploadid, filename, cfile, usuario, fecha, valida)
      values
        (p_uploadid, p_filename, p_cfile, p_usuario, sysdate, 0);
      p_error := p_uploadid;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_archivo] ' || SQLERRM, p_error);
  END i_archivo;

  PROCEDURE v_archivo(p_tipocargue      varchar2,
                      p_uploadid        number,
                      p_idbanco         char,
                      p_cta_recaudo_fcm varchar2,
                      p_usuario         varchar2,
                      p_error           OUT VARCHAR2) is
  
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
    IF P_ERROR is null THEN
    
      -- Si pasa todas las validaciones
      IF (p_tipocargue = 'REC' and p_idbanco <> '52') THEN
        p_error := 'Formato no soportado';
        return;
      END IF;
    
      IF (p_tipocargue = 'REC' and p_idbanco = '52') THEN
      
        p_error := fn_divide_archivo_avvillas(p_uploadid        => p_uploadid,
                                              p_idbanco         => p_idbanco,
                                              p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                                              p_usuario         => p_usuario,
                                              p_error           => p_error);
      END IF;
    
      IF (p_tipocargue = 'DEP') THEN
      
        p_error := fn_divide_archivo_dep(p_uploadid        => p_uploadid,
                                         p_idbanco         => p_idbanco,
                                         p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                                         p_usuario         => p_usuario,
                                         p_error           => p_error);
      END IF;
    
      IF (p_tipocargue = 'SIN') THEN
      
        p_error := fn_divide_archivo_sin(p_uploadid        => p_uploadid,
                                         p_idbanco         => p_idbanco,
                                         p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                                         p_usuario         => p_usuario,
                                         p_error           => p_error);
      END IF;
    
      IF (p_tipocargue = 'IDE') THEN
      
        cargarIdeMasiva(p_uploadid        => p_uploadid,
                        p_idbanco         => p_idbanco,
                        p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                        p_usuario         => p_usuario,
                        p_error           => p_error);
      
      END IF;
    
      IF (p_tipocargue = 'EXT') THEN
      
        if (p_idbanco = '52') then
          cargarExtAvvillas(p_uploadid        => p_uploadid,
                            p_idbanco         => p_idbanco,
                            p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                            p_usuario         => p_usuario,
                            p_error           => p_error);
        end if;
      
        if (p_idbanco = '02') then
          cargarExtPopular(p_uploadid        => p_uploadid,
                           p_idbanco         => p_idbanco,
                           p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                           p_usuario         => p_usuario,
                           p_error           => p_error);
        end if;
      
        if (p_idbanco = '40') then
          cargarExtAgrario(p_uploadid        => p_uploadid,
                           p_idbanco         => p_idbanco,
                           p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                           p_usuario         => p_usuario,
                           p_error           => p_error);
        end if;
      
        if (p_idbanco = '50') then
          cargarExtBancafe(p_uploadid        => p_uploadid,
                           p_idbanco         => p_idbanco,
                           p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                           p_usuario         => p_usuario,
                           p_error           => p_error);
        end if;
      
        if (p_idbanco = '51') then
          cargarExtDavivienda(p_uploadid        => p_uploadid,
                              p_idbanco         => p_idbanco,
                              p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                              p_usuario         => p_usuario,
                              p_error           => p_error);
        end if;
      
      END IF;
    
      IF (p_tipocargue = 'MOV') THEN
      
        if (p_idbanco = '52') then
          cargarMovAvvillas(p_uploadid        => p_uploadid,
                            p_idbanco         => p_idbanco,
                            p_cta_recaudo_fcm => p_cta_recaudo_fcm,
                            p_usuario         => p_usuario,
                            p_error           => p_error);
        end if;
      
      end if;
    
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [v_archivo] ' || SQLERRM, p_error);
  END v_archivo;

  PROCEDURE cargarExtAvvillas(p_uploadid        NUMBER,
                              p_idbanco         char,
                              p_cta_recaudo_fcm varchar2,
                              p_usuario         varchar2,
                              p_error           OUT VARCHAR2) is
  
    v_cuenta        varchar2(16);
    v_indtipo       char(5);
    v_cfile         clob;
    l_clob_len      PLS_INTEGER;
    l_pos           PLS_INTEGER := 1;
    l_amount        BINARY_INTEGER := 32767;
    v_encabezado    VARCHAR2(500) := 'Fecha de aplicacion,Fecha de transaccion,Descripcion,documento,Origen,Valor Total,Valor Efectivo,Valor Cheque,D- Debito C- Credito,Codigo de Transaccion';
    vBuffer         VARCHAR2(32767);
    v_finlinea      varchar(2);
    v_nombreArchivo varchar2(255);
    v_periodo       char(6);
    r               mvtoavvillas_temp%rowtype;
    linea           varchar2(1000);
  
    i     number := 1;
    tk    number := 1;
    v_chr NUMBER := 13; -- 1 tipo de Enter
  
    v_registros number;
    w_registros number;
    v_total     number;
  
    campo token_list;
  
    CURSOR tabla IS
      select idbanco,
             cuenta,
             periodo,
             numerotrx,
             fechatrx,
             descripciontrx,
             valortrx,
             oficinaorigen,
             indtipo,
             idmunicipio,
             p_consignado,
             fechacargue,
             usuariocargue,
             fechaidentificacion,
             usuarioidentificacion,
             indtipoiden,
             idmunicipioiden,
             p_consignadoiden,
             observaciones,
             numsecuenciareg,
             estadoiden
        from trxsinidentificar
       where idbanco = '52'
         and cuenta = v_cuenta
         and periodo = v_periodo
         and descripciontrx like 'NC TRANS ACH%';
  
    v_idMunicipio char(8);
    v_nit         char(9);
    v_reg         number;
  
  BEGIN
  
    delete from mvtoAvvillas_temp;
  
    v_cuenta  := Substr(p_cta_recaudo_fcm,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 2) + 1,
                        Length(p_cta_recaudo_fcm));
    v_indtipo := Substr(p_cta_recaudo_fcm,
                        1,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 1) - 1);
  
    select cfile, filename
      into v_cfile, v_nombreArchivo
      from upload
     where uploadid = p_uploadid;
  
    v_periodo := Substr(v_nombreArchivo, 1, 6);
  
    select count(*)
      into v_registros
      from mvtoavvillas
     where numerocuenta = v_cuenta
       and periodo = v_periodo;
  
    if (v_registros > 0) then
      delete from mvtoavvillas
       where numerocuenta = v_cuenta
         and periodo = v_periodo;
    
      select count(*)
        into v_registros
        from trxsinidentificar
       where cuenta = v_cuenta
         and periodo = v_periodo;
    
      if (v_registros > 0) then
      
        delete from trxsinidentificar
         where cuenta = v_cuenta
           and periodo = v_periodo;
      
      end if;
    
      commit;
    
      --p_error :='Extracto de cuenta ' || v_cuenta || ' del periodo ' || v_periodo || ' ya cargado. Solicitar reproceso' ;
      --return;
    end if;
  
    l_clob_len := dbms_lob.getlength(v_cfile);
  
    v_finlinea := chr(13) || chr(10);
  
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
      v_finlinea := chr(13);
      l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
      IF l_amount < 1 THEN
        v_finlinea := chr(10);
        l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
        IF l_amount < 1 THEN
          p_error := '||Formato desconocido de archivo';
          return;
        end if;
      end if;
    end if;
  
    --Registro #1
    dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
  
    if replace(Substr(vBuffer, 12, 9), ' ', '0') <> v_cuenta then
      p_error := 'Movimiento no corresponde a cuenta seleccionada. Mvto pertenece a la cuenta ' ||
                 replace(Substr(vBuffer, 12, 9), ' ', '0');
      return;
    end if;
  
    l_pos := l_pos + l_amount + length(v_finlinea) - 1;
  
    --Registro #2
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos, 1);
    IF l_amount < 1 THEN
      p_error := 'No existe Encabezado';
      return;
    else
      l_amount := l_amount - l_pos;
      dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      if (instr(lower(vBuffer), lower(v_encabezado)) = 0) then
        p_error := 'Encabezado erroneo. encabezado leido: ' ||
                   lower(vBuffer) || '*' || lower(v_encabezado);
        return;
      end if;
    end if;
  
    l_pos := l_pos + l_amount + length(v_finlinea);
  
    --Informacion
    WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
      l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos + 1, 1);
      IF l_amount < 1 THEN
        p_error := 'Registro ' || i || ' Invalido';
        return;
      else
        l_amount := l_amount - l_pos;
        dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      
        linea := vBuffer;
        campo := tokenize(str => linea, delim => ',');
      
        if (campo(1) is null) then
          p_error := 'Error en registro ' || i || '. Formato errado. ' ||
                     '. Datos registro: ' || vBuffer;
          return;
        
        end if;
        BEGIN
          r.numerocuenta     := v_cuenta;
          r.periodo          := v_periodo;
          r.fechaaplicacion  := to_date(campo(1), 'yyyymmdd');
          r.fechatransaccion := to_date(campo(2), 'yyyymmdd');
          r.descripcion      := campo(3);
          r.documento        := campo(4);
          r.origen           := campo(5);
          r.valortotal       := to_number(campo(6), '9999999999999999.99');
          r.valorefectivo    := to_number(campo(7), '9999999999999999.99');
          r.valorcheque      := to_number(campo(8), '9999999999999999.99');
          r.debitocredito    := campo(9);
          r.codigotrn        := campo(10);
        EXCEPTION
          WHEN OTHERS THEN
            p_error := 'Error en registro ' || i || '. Mensaje: ' ||
                       SQLERRM || '. Datos registro: ' || vBuffer;
            return;
        END;
      
      end if;
      l_pos := l_pos + l_amount + length(v_finlinea);
      i     := i + 1;
    
      insert into mvtoavvillas_temp values r;
    END LOOP;
  
    insert into mvtoavvillas
      (numeroTrx,
       numerocuenta,
       periodo,
       fechaaplicacion,
       fechatransaccion,
       descripcion,
       documento,
       origen,
       valortotal,
       valorefectivo,
       valorcheque,
       debitocredito,
       codigotrn)
      select seq_mvto.nextval,
             numerocuenta,
             periodo,
             fechaaplicacion,
             fechatransaccion,
             descripcion,
             documento,
             origen,
             valortotal,
             valorefectivo,
             valorcheque,
             debitocredito,
             codigotrn
        from mvtoavvillas_temp;
  
    insert into trxsinidentificar
      (idbanco,
       cuenta,
       periodo,
       numerotrx,
       fechatrx,
       descripciontrx,
       valortrx,
       oficinaorigen,
       indtipo,
       idmunicipio,
       p_consignado,
       fechacargue,
       usuariocargue,
       fechaidentificacion,
       usuarioidentificacion,
       indtipoiden,
       idmunicipioiden,
       p_consignadoiden,
       observaciones,
       numsecuenciareg,
       estadoiden)
      select '52' as idBanco,
             numerocuenta,
             periodo,
             numeroTrx,
             fechatransaccion,
             descripcion,
             valortotal,
             origen,
             v_indtipo as indTipo,
             '' as idMunicipio,
             decode(v_indtipo, 'SIMIT', 10, 55) as p_consignado,
             sysdate,
             p_usuario,
             null as fechaIde,
             null as usuarioIde,
             null as indtipoiden,
             null as idmunicipioiden,
             null p_consignadoiden,
             null as observaciones,
             seq_ide.nextval as numsecuenciareg,
             'SI' as estadoiden
        from mvtoavvillas
       where numerocuenta = v_cuenta
         and periodo = v_periodo
         and descripcion in
             (select concepto from conceptosidentificar where idbanco = '52');
  
    insert into trxsinidentificar
      (idbanco,
       cuenta,
       periodo,
       numerotrx,
       fechatrx,
       descripciontrx,
       valortrx,
       oficinaorigen,
       indtipo,
       idmunicipio,
       p_consignado,
       fechacargue,
       usuariocargue,
       fechaidentificacion,
       usuarioidentificacion,
       indtipoiden,
       idmunicipioiden,
       p_consignadoiden,
       observaciones,
       numsecuenciareg,
       estadoiden)
      select '52' as idBanco,
             numerocuenta,
             periodo,
             numeroTrx,
             fechatransaccion,
             descripcion,
             valortotal,
             origen,
             v_indtipo as indTipo,
             '' as idMunicipio,
             decode(v_indtipo, 'SIMIT', 10, 55) as p_consignado,
             sysdate,
             p_usuario,
             null as fechaIde,
             null as usuarioIde,
             null as indtipoiden,
             null as idmunicipioiden,
             null p_consignadoiden,
             null as observaciones,
             seq_ide.nextval as numsecuenciareg,
             'SI' as estadoiden
        from mvtoavvillas
       where numerocuenta = v_cuenta
         and periodo = v_periodo
         and descripcion like 'NC TRANS ACH%';
  
    for registro in tabla loop
      v_idMunicipio := null;
      if (substr(registro.descripciontrx, 18, 1) = '0') then
        v_nit := substr(registro.descripciontrx, 19, 9);
      else
        v_nit := substr(registro.descripciontrx, 18, 9);
      end if;
    
      select count(*)
        into v_reg
        from municipio
       where instr(nit_m, v_nit) > 0;
    
      if (v_reg > 0) then
      
        select substr(min(idMunicipio), 1, 8)
          into v_idMunicipio
          from municipio
         where instr(nit_m, v_nit) > 0;
      else
        select count(*)
          into v_reg
          from municipio
         where instr(nit_cta, v_nit) > 0;
      
        if (v_reg > 0) then
        
          select substr(min(idMunicipio), 1, 8)
            into v_idMunicipio
            from municipio
           where instr(nit_cta, v_nit) > 0;
        
        end if;
      end if;
    
      if (v_idMunicipio is not null) then
        update trxsinidentificar
           set idmunicipio = v_idMunicipio
         where numsecuenciareg = registro.numsecuenciareg;
      
        update trxsinidentificar
           set concesionariozon =
               (select m.idconcesionario
                  from municipio m
                 where m.idmunicipio = v_idMunicipio)
         where numsecuenciareg = registro.numsecuenciareg;
      
      end if;
    
    end loop;
  
    commit;
  
    i := i - 1;
    if p_error is null then
      p_error := 'El archivo se VALIDO exitosamente. Registros: ' || i;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [cargarExtAvvillas] ' || SQLERRM,
            p_error);
    
  end cargarExtAvvillas;

  PROCEDURE cargarExtPopular(p_uploadid        NUMBER,
                             p_idbanco         char,
                             p_cta_recaudo_fcm varchar2,
                             p_usuario         varchar2,
                             p_error           OUT VARCHAR2) is
  
    v_cuenta        varchar2(16);
    v_indtipo       char(5);
    v_cfile         clob;
    l_clob_len      PLS_INTEGER;
    l_pos           PLS_INTEGER := 1;
    l_amount        BINARY_INTEGER := 32767;
    v_encabezado    VARCHAR2(500) := 'Fecha de aplicacion,Hora,Fecha de transaccion,Transaccion,Causal,Descripcion,documento,Origen,Valor Total,Valor Efectivo,Valor Cheque,D- Debito C- Credito ';
    vBuffer         VARCHAR2(32767);
    v_finlinea      varchar(2);
    v_nombreArchivo varchar2(255);
    v_periodo       char(6);
    r               mvtopopular_temp%rowtype;
    linea           varchar2(1000);
  
    i     number := 1;
    tk    number := 1;
    v_chr NUMBER := 13; -- 1 tipo de Enter
  
    v_registros number;
    w_registros number;
    v_total     number;
  
    campo token_list;
  
  BEGIN
  
    delete from mvtoPopular_temp;
  
    v_cuenta  := Substr(p_cta_recaudo_fcm,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 2) + 1,
                        Length(p_cta_recaudo_fcm));
    v_indtipo := Substr(p_cta_recaudo_fcm,
                        1,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 1) - 1);
  
    select cfile, filename
      into v_cfile, v_nombreArchivo
      from upload
     where uploadid = p_uploadid;
  
    v_periodo := Substr(v_nombreArchivo, 1, 6);
  
    select count(*)
      into v_registros
      from mvtopopular
     where numerocuenta = v_cuenta
       and periodo = v_periodo;
  
    if (v_registros > 0) then
      delete from mvtopopular
       where numerocuenta = v_cuenta
         and periodo = v_periodo;
    
      select count(*)
        into v_registros
        from trxsinidentificar
       where cuenta = v_cuenta
         and periodo = v_periodo;
    
      if (v_registros > 0) then
      
        delete from trxsinidentificar
         where cuenta = v_cuenta
           and periodo = v_periodo;
      
      end if;
    
      commit;
    
      --p_error :='Extracto de cuenta ' || v_cuenta || ' del periodo ' || v_periodo || ' ya cargado. Solicitar reproceso' ;
      -- return;
    end if;
  
    l_clob_len := dbms_lob.getlength(v_cfile);
  
    v_finlinea := chr(13) || chr(10);
  
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
      v_finlinea := chr(13);
      l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
      IF l_amount < 1 THEN
        v_finlinea := chr(10);
        l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
        IF l_amount < 1 THEN
          p_error := '||Formato desconocido de archivo';
          return;
        end if;
      end if;
    end if;
  
    --Registro #1
    dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
  
    if replace(Substr(vBuffer, 12, 9), ' ', '2200') <> v_cuenta then
      p_error := 'Movimiento no corresponde a cuenta seleccionada. Mvto pertenece a la cuenta ' ||
                 replace(Substr(vBuffer, 12, 9), ' ', '2200');
      return;
    end if;
  
    l_pos := l_pos + l_amount + length(v_finlinea) - 1;
  
    --Registro #2
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos, 1);
    IF l_amount < 1 THEN
      p_error := 'No existe Encabezado';
      return;
    else
      l_amount := l_amount - l_pos;
      dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      if (instr(lower(vBuffer), lower(v_encabezado)) = 0) then
        p_error := 'Encabezado erroneo. encabezado leido: ' ||
                   lower(vBuffer) || '*' || lower(v_encabezado);
        return;
      end if;
    end if;
  
    l_pos := l_pos + l_amount + length(v_finlinea);
  
    --Informacion
    WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
      l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos + 1, 1);
      IF l_amount < 1 THEN
        p_error := 'Registro ' || i || ' Invalido';
        return;
      else
        l_amount := l_amount - l_pos;
        dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      
        linea := vBuffer;
        campo := tokenize(str => linea, delim => ',');
      
        if (campo(1) is null) then
          p_error := 'Error en registro ' || i || '. Formato errado. ' ||
                     '. Datos registro: ' || vBuffer;
          return;
        
        end if;
        BEGIN
          r.numerocuenta     := v_cuenta;
          r.periodo          := v_periodo;
          r.fechaaplicacion  := to_date(campo(1), 'yyyymmdd');
          r.hora             := campo(2);
          r.fechatransaccion := to_date(campo(3), 'yyyymmdd');
          r.transaccion      := campo(4);
          r.causal           := campo(5);
          r.descripcion      := campo(6);
          r.documento        := campo(7);
          r.origen           := campo(8);
          r.valortotal       := to_number(campo(9), '9999999999999999.99');
          r.valorefectivo    := to_number(campo(10), '9999999999999999.99');
          r.valorcheque      := to_number(campo(11), '9999999999999999.99');
          r.debitocredito    := campo(12);
        EXCEPTION
          WHEN OTHERS THEN
            p_error := 'Error en registro ' || i || '. Mensaje: ' ||
                       SQLERRM || '. Datos registro: ' || vBuffer;
            return;
        END;
      
      end if;
      l_pos := l_pos + l_amount + length(v_finlinea);
      i     := i + 1;
    
      insert into mvtoPopular_temp values r;
    END LOOP;
  
    insert into mvtopopular
      (numeroTrx,
       numerocuenta,
       periodo,
       fechaaplicacion,
       hora,
       fechatransaccion,
       transaccion,
       causal,
       descripcion,
       documento,
       origen,
       valortotal,
       valorefectivo,
       valorcheque,
       debitocredito)
      select seq_mvto.nextval,
             numerocuenta,
             periodo,
             fechaaplicacion,
             hora,
             fechatransaccion,
             transaccion,
             causal,
             descripcion,
             documento,
             origen,
             valortotal,
             valorefectivo,
             valorcheque,
             debitocredito
        from mvtopopular_temp;
  
    insert into trxsinidentificar
      (idbanco,
       cuenta,
       periodo,
       numerotrx,
       fechatrx,
       descripciontrx,
       valortrx,
       oficinaorigen,
       fechacargue,
       usuariocargue,
       numsecuenciareg,
       estadoiden,
       indTipo,
       p_Consignado)
      select '02',
             numerocuenta,
             periodo,
             numeroTrx,
             fechatransaccion,
             descripcion,
             valortotal,
             origen,
             sysdate,
             p_usuario,
             seq_ide.nextval,
             'SI',
             v_indtipo as indTipo,
             decode(v_indtipo, 'SIMIT', 10, 55) as p_consignado
        from mvtopopular
       where numerocuenta = v_cuenta
         and periodo = v_periodo
         and descripcion in
             (select concepto from conceptosidentificar where idbanco = '02');
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(idmunicipio)
              from oficinabanco o
             where o.idbanco = '02'
               and instr(o.nombre, t.oficinaorigen) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(idmunicipio)
              from oficinabanco o
             where o.idbanco = '02'
               and instr(t.oficinaorigen, o.nombre) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.concesionariozon =
           (select m.idconcesionario
              from municipio m
             where m.idmunicipio = t.idmunicipio)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is not null;
  
    commit;
  
    i := i - 1;
    if p_error is null then
      p_error := 'El archivo se VALIDO exitosamente. Registros: ' || i;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [cargarExtPopular] ' || SQLERRM,
            p_error);
    
  end cargarExtPopular;

  PROCEDURE cargarExtAgrario(p_uploadid        NUMBER,
                             p_idbanco         char,
                             p_cta_recaudo_fcm varchar2,
                             p_usuario         varchar2,
                             p_error           OUT VARCHAR2) is
  
    v_cuenta        varchar2(16);
    v_indtipo       char(5);
    v_cfile         clob;
    l_clob_len      PLS_INTEGER;
    l_pos           PLS_INTEGER := 1;
    l_amount        BINARY_INTEGER := 32767;
    v_encabezado    VARCHAR2(500) := 'Fecha;Cod. Trn.;Descripcion Movimiento;Referencia;Debito;Credito;Imp. GMF;Oficina;';
    vBuffer         VARCHAR2(32767);
    v_finlinea      varchar(2);
    v_nombreArchivo varchar2(255);
    v_periodo       char(6);
    r               mvtoAgrario_temp%rowtype;
    linea           varchar2(1000);
  
    i     number := 1;
    tk    number := 1;
    v_chr NUMBER := 13; -- 1 tipo de Enter
  
    v_registros number;
    w_registros number;
    v_total     number;
    finLinea    boolean;
  
    campo token_list;
  
  BEGIN
  
    delete from mvtoAgrario_temp;
  
    v_cuenta  := Substr(p_cta_recaudo_fcm,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 2) + 1,
                        Length(p_cta_recaudo_fcm));
    v_indtipo := Substr(p_cta_recaudo_fcm,
                        1,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 1) - 1);
  
    select cfile, filename
      into v_cfile, v_nombreArchivo
      from upload
     where uploadid = p_uploadid;
  
    v_periodo := Substr(v_nombreArchivo, 1, 6);
  
    select count(*)
      into v_registros
      from mvtoAgrario
     where numerocuenta = v_cuenta
       and periodo = v_periodo;
  
    if (v_registros > 0) then
      delete from mvtoAgrario
       where numerocuenta = v_cuenta
         and periodo = v_periodo;
    
      select count(*)
        into v_registros
        from trxsinidentificar
       where cuenta = v_cuenta
         and periodo = v_periodo;
    
      if (v_registros > 0) then
      
        delete from trxsinidentificar
         where cuenta = v_cuenta
           and periodo = v_periodo;
      
      end if;
    
      commit;
    
      --p_error :='Extracto de cuenta ' || v_cuenta || ' del periodo ' || v_periodo || ' ya cargado. Solicitar reproceso' ;
      --return;
    end if;
  
    l_clob_len := dbms_lob.getlength(v_cfile);
  
    v_finlinea := chr(13) || chr(10);
  
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
      v_finlinea := chr(13);
      l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
      IF l_amount < 1 THEN
        v_finlinea := chr(10);
        l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
        IF l_amount < 1 THEN
          p_error := '||Formato desconocido de archivo';
          return;
        end if;
      end if;
    end if;
  
    --Registro #1
    dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
  
    if (instr(lower(vBuffer), lower(v_encabezado)) = 0) then
      p_error := 'Encabezado erroneo. encabezado leido: ' || lower(vBuffer) || '*' ||
                 lower(v_encabezado);
      return;
    end if;
  
    l_pos := l_pos + l_amount + length(v_finlinea) - 1;
  
    --Informacion
    WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
      l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos + 1, 1);
      IF l_amount < 1 THEN
        p_error := 'Registro ' || i || ' Invalido';
        return;
      else
        l_amount := l_amount - l_pos;
        dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      
        linea := vBuffer;
      
        finLinea := false;
        if (linea = ';;;;;;;;') then
          finLinea := true;
        end if;
      
        campo := tokenize(str => linea, delim => ';');
      
        if (campo(1) is null and not finLinea) then
          p_error := 'Error en registro ' || i || '. Formato errado. ' ||
                     '. Datos registro: ' || vBuffer;
          return;
        
        end if;
      
        if (not finLinea) then
          BEGIN
            r.numerocuenta          := v_cuenta;
            r.periodo               := v_periodo;
            r.fecha                 := to_date(campo(1), 'dd/mm/yyyy');
            r.codigotransaccion     := campo(2);
            r.descripcionmovimiento := campo(3);
            r.referencia            := campo(4);
          
            if (campo(5) is null) then
              r.debito := 0;
            else
              r.debito := to_number(campo(5), '9999,999,999,999,999.99');
            end if;
          
            if (campo(6) is null) then
              r.credito := 0;
            else
              r.credito := to_number(campo(6), '9999,999,999,999,999.99');
            end if;
          
            if (campo(7) is null) then
              r.impuestogmf := 0;
            else
              r.impuestogmf := to_number(campo(7),
                                         '9999,999,999,999,999.99');
            end if;
          
            r.oficina := campo(8);
          
          EXCEPTION
            WHEN OTHERS THEN
              p_error := 'Error en registro ' || i || '. Mensaje: ' ||
                         SQLERRM || '. Datos registro: ' || vBuffer;
              return;
          END;
        
        end if;
      
      end if;
    
      l_pos := l_pos + l_amount + length(v_finlinea);
    
      if (not finLinea) then
        i := i + 1;
        insert into mvtoAgrario_temp values r;
      end if;
    END LOOP;
  
    insert into mvtoagrario
      (numeroTrx,
       numerocuenta,
       periodo,
       fecha,
       codigotransaccion,
       descripcionmovimiento,
       referencia,
       debito,
       credito,
       impuestogmf,
       oficina)
      select seq_mvto.nextval,
             numerocuenta,
             periodo,
             fecha,
             codigotransaccion,
             descripcionmovimiento,
             referencia,
             debito,
             credito,
             impuestogmf,
             oficina
        from mvtoagrario_temp;
  
    insert into trxsinidentificar
      (idbanco,
       cuenta,
       periodo,
       numerotrx,
       fechatrx,
       descripciontrx,
       valortrx,
       oficinaorigen,
       fechacargue,
       usuariocargue,
       numsecuenciareg,
       estadoiden,
       indTipo,
       p_consignado)
      select '40',
             numerocuenta,
             periodo,
             numeroTrx,
             fecha,
             descripcionmovimiento,
             credito,
             oficina,
             sysdate,
             p_usuario,
             seq_ide.nextval,
             'SI',
             v_indtipo as indTipo,
             decode(v_indtipo, 'SIMIT', 10, 55) as p_consignado
        from mvtoagrario
       where numerocuenta = v_cuenta
         and periodo = v_periodo
         and descripcionmovimiento in
             (select concepto from conceptosidentificar where idbanco = '40');
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(idmunicipio)
              from oficinabanco o
             where o.idbanco = '40'
               and instr(o.nombre, t.oficinaorigen) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(idmunicipio)
              from oficinabanco o
             where o.idbanco = '40'
               and instr(t.oficinaorigen, o.nombre) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.concesionariozon =
           (select m.idconcesionario
              from municipio m
             where m.idmunicipio = t.idmunicipio)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is not null;
  
    commit;
  
    i := i - 1;
    if p_error is null then
      p_error := 'El archivo se VALIDO exitosamente. Registros: ' || i;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [cargarExtAgrario] ' || SQLERRM,
            p_error);
    
  end cargarExtAgrario;

  PROCEDURE cargarExtBancafe(p_uploadid        NUMBER,
                             p_idbanco         char,
                             p_cta_recaudo_fcm varchar2,
                             p_usuario         varchar2,
                             p_error           OUT VARCHAR2) is
  
    v_cuenta        varchar2(16);
    v_indtipo       char(5);
    v_cfile         clob;
    l_clob_len      PLS_INTEGER;
    l_pos           PLS_INTEGER := 1;
    l_amount        BINARY_INTEGER := 32767;
    v_encabezado    VARCHAR2(500) := 'Fecha;Cod. Trn.;Descripcion Movimiento;Referencia;Debito;Credito;Imp. GMF;Oficina;';
    vBuffer         VARCHAR2(32767);
    v_finlinea      varchar(2);
    v_nombreArchivo varchar2(255);
    v_periodo       char(6);
    r               mvtoBancafe_temp%rowtype;
    linea           varchar2(1000);
  
    i     number := 1;
    tk    number := 1;
    v_chr NUMBER := 13; -- 1 tipo de Enter
  
    v_registros number;
    w_registros number;
    v_total     number;
    finLinea    boolean;
  
    campo token_list;
  
  BEGIN
  
    delete from mvtoBancafe_temp;
  
    v_cuenta  := Substr(p_cta_recaudo_fcm,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 2) + 1,
                        Length(p_cta_recaudo_fcm));
    v_indtipo := Substr(p_cta_recaudo_fcm,
                        1,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 1) - 1);
  
    select cfile, filename
      into v_cfile, v_nombreArchivo
      from upload
     where uploadid = p_uploadid;
  
    v_periodo := Substr(v_nombreArchivo, 1, 6);
  
    select count(*)
      into v_registros
      from mvtoBancafe
     where numerocuenta = v_cuenta
       and periodo = v_periodo;
  
    if (v_registros > 0) then
      delete from mvtoBancafe
       where numerocuenta = v_cuenta
         and periodo = v_periodo;
    
      select count(*)
        into v_registros
        from trxsinidentificar
       where cuenta = v_cuenta
         and periodo = v_periodo;
    
      if (v_registros > 0) then
      
        delete from trxsinidentificar
         where cuenta = v_cuenta
           and periodo = v_periodo;
      
      end if;
    
      --p_error :='Extracto de cuenta ' || v_cuenta || ' del periodo ' || v_periodo || ' ya cargado. Solicitar reproceso' ;
      --return;
    end if;
  
    l_clob_len := dbms_lob.getlength(v_cfile);
  
    v_finlinea := chr(13) || chr(10);
  
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
      v_finlinea := chr(13);
      l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
      IF l_amount < 1 THEN
        v_finlinea := chr(10);
        l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
        IF l_amount < 1 THEN
          p_error := '||Formato desconocido de archivo';
          return;
        end if;
      end if;
    end if;
  
    --Informacion
    WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
      l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos + 1, 1);
      IF l_amount < 1 THEN
        p_error := 'Registro ' || i || ' Invalido';
        return;
      else
        l_amount := l_amount - l_pos;
        dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      
        linea := vBuffer;
      
        BEGIN
          if (v_cuenta <> substr(linea, 20, 9)) then
            p_error := 'Archivo no corresponde a la cuenta. Cuenta del archivo  ' ||
                       substr(linea, 20, 9) || '- Cuenta ingresada: ' ||
                       v_cuenta;
            return;
          end if;
        
          r.numerocuenta     := v_cuenta;
          r.periodo          := v_periodo;
          r.tipodoc          := substr(linea, 1, 1);
          r.numerodocumento  := substr(linea, 8, 9);
          r.codigoaplicacion := substr(linea, 17, 1);
          r.numerocta        := substr(linea, 20, 9);
          r.fechaproceso     := to_date(substr(linea, 29, 8), 'yyyymmdd');
          r.fechatrx         := to_date(substr(linea, 37, 8), 'yyyymmdd');
          r.codigotrx        := substr(linea, 45, 4);
          r.descripciontrx   := trim(substr(linea, 49, 40)) || ' ' ||
                                substr(linea, 201, 24);
          r.oficinasede      := substr(linea, 89, 5);
          r.oficinareceptora := substr(linea, 94, 5);
          r.nombreoficina    := trim(substr(linea, 99, 20));
          r.nrodocumento     := substr(linea, 119, 11);
          r.tipoespecie      := substr(linea, 130, 2);
          r.valortrx         := to_number(substr(linea, 132, 15),
                                          '999999999999999') / 100;
          r.saldoanterior    := to_number(substr(linea, 147, 15),
                                          '999999999999999') / 10;
          r.tiporecaudo      := substr(linea, 162, 1);
          r.fuentetrx        := '';
          r.codigoiac        := '';
          r.referencia1      := substr(linea, 177, 24);
          r.referencia2      := substr(linea, 201, 24);
          r.secuencia        := substr(linea, 225, 9);
          r.tipotrx          := substr(linea, 234, 1);
        
        EXCEPTION
          WHEN OTHERS THEN
            p_error := 'Error en registro ' || i || '. Mensaje: ' ||
                       SQLERRM || '. Datos registro: ' || vBuffer;
            return;
        END;
      
      end if;
    
      l_pos := l_pos + l_amount + length(v_finlinea);
    
      i := i + 1;
      insert into mvtoBancafe_temp values r;
    
    END LOOP;
  
    insert into mvtobancafe
      (numeroTrx,
       numerocuenta,
       periodo,
       tipodoc,
       numerodocumento,
       codigoaplicacion,
       numerocta,
       fechaproceso,
       fechatrx,
       codigotrx,
       descripciontrx,
       oficinasede,
       oficinareceptora,
       nombreoficina,
       nrodocumento,
       tipoespecie,
       valortrx,
       saldoanterior,
       tiporecaudo,
       fuentetrx,
       codigoiac,
       referencia1,
       referencia2,
       secuencia,
       tipotrx)
      select seq_mvto.nextval,
             numerocuenta,
             periodo,
             tipodoc,
             numerodocumento,
             codigoaplicacion,
             numerocta,
             fechaproceso,
             fechatrx,
             codigotrx,
             descripciontrx,
             oficinasede,
             oficinareceptora,
             nombreoficina,
             nrodocumento,
             tipoespecie,
             valortrx,
             saldoanterior,
             tiporecaudo,
             fuentetrx,
             codigoiac,
             referencia1,
             referencia2,
             secuencia,
             tipotrx
        from mvtobancafe_temp;
  
    commit;
  
    insert into trxsinidentificar
      (idbanco,
       cuenta,
       periodo,
       numerotrx,
       fechatrx,
       descripciontrx,
       valortrx,
       oficinaorigen,
       fechacargue,
       usuariocargue,
       numsecuenciareg,
       estadoiden,
       indTipo,
       p_consignado,
       observaciones)
      select '50',
             numerocuenta,
             periodo,
             numeroTrx,
             fechatrx,
             descripciontrx,
             valortrx,
             nombreoficina,
             sysdate,
             p_usuario,
             seq_ide.nextval,
             'SI',
             v_indtipo as indTipo,
             decode(v_indtipo, 'SIMIT', 10, 55) as p_consignado,
             referencia1 || referencia2
        from mvtobancafe
       where numerocuenta = v_cuenta
         and periodo = v_periodo
         and descripciontrx in
             (select concepto from conceptosidentificar where idbanco = '50');
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select m.idmunicipio
              from municipio m, mvtobancafe b
             where t.numerotrx = b.numerotrx
               and instr(b.descripciontrx, 'CONSIGNACION CONVENIO') > 0
               and substr(b.referencia2, 22, 3) = '000'
               and m.idmunicipio = substr(b.referencia2, 17, 8))
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(m.idmunicipio)
              from municipio m, mvtobancafe b
             where t.numerotrx = b.numerotrx
               and instr(b.descripciontrx, 'CONSIGNACION CONVENIO') > 0
               and substr(b.referencia2, 22, 3) <> '000'
               and instr(m.idmunicipio, substr(b.referencia2, 20, 5)) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(m.idmunicipio)
              from municipio m, mvtobancafe b
             where t.numerotrx = b.numerotrx
               and instr(b.descripciontrx, 'CONSIGNACION CONVENIO') > 0
               and instr(m.nit_m, substr(b.referencia1, 16, 9)) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(m.idmunicipio)
              from municipio m, mvtobancafe b
             where t.numerotrx = b.numerotrx
               and instr(b.descripciontrx, 'CONSIGNACION CONVENIO') > 0
               and instr(m.nit_m, substr(b.referencia1, 15, 9)) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(m.idmunicipio)
              from municipio m, mvtobancafe b
             where t.numerotrx = b.numerotrx
               and instr(b.descripciontrx, 'CONSIGNACION CONVENIO') > 0
               and instr(m.nit_cta, substr(b.referencia1, 16, 9)) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(m.idmunicipio)
              from municipio m, mvtobancafe b
             where t.numerotrx = b.numerotrx
               and instr(b.descripciontrx, 'CONSIGNACION CONVENIO') > 0
               and instr(m.nit_cta, substr(b.referencia1, 15, 9)) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(idmunicipio)
              from oficinabanco o
             where o.idbanco = '50'
               and instr(t.oficinaorigen, o.nombre) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(idmunicipio)
              from oficinabanco o
             where o.idbanco = '50'
               and instr(o.nombre, t.oficinaorigen) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.concesionariozon =
           (select m.idconcesionario
              from municipio m
             where m.idmunicipio = t.idmunicipio)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is not null;
  
    commit;
  
    i := i - 1;
    if p_error is null then
      p_error := 'El archivo se VALIDO exitosamente. Registros: ' || i;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [cargarExtBancafe] ' || SQLERRM,
            p_error);
    
  end cargarExtBancafe;

  PROCEDURE cargarExtDavivienda(p_uploadid        NUMBER,
                                p_idbanco         char,
                                p_cta_recaudo_fcm varchar2,
                                p_usuario         varchar2,
                                p_error           OUT VARCHAR2) is
  
    v_cuenta        varchar2(16);
    v_indtipo       char(5);
    v_cfile         clob;
    l_clob_len      PLS_INTEGER;
    l_pos           PLS_INTEGER := 1;
    l_amount        BINARY_INTEGER := 32767;
    v_encabezado    VARCHAR2(500) := '';
    vBuffer         VARCHAR2(32767);
    v_finlinea      varchar(2);
    v_nombreArchivo varchar2(255);
    v_periodo       char(6);
    r               mvtoDavivienda_temp%rowtype;
    linea           varchar2(1000);
  
    i     number := 1;
    tk    number := 1;
    v_chr NUMBER := 13; -- 1 tipo de Enter
  
    v_registros number;
    w_registros number;
    v_total     number;
    finLinea    boolean;
  
    campo token_list;
  
  BEGIN
  
    delete from mvtoDavivienda_temp;
  
    v_cuenta  := Substr(p_cta_recaudo_fcm,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 2) + 1,
                        Length(p_cta_recaudo_fcm));
    v_indtipo := Substr(p_cta_recaudo_fcm,
                        1,
                        Instrb(p_cta_recaudo_fcm, '-', 1, 1) - 1);
  
    select cfile, filename
      into v_cfile, v_nombreArchivo
      from upload
     where uploadid = p_uploadid;
  
    v_periodo := Substr(v_nombreArchivo, 1, 6);
  
    select count(*)
      into v_registros
      from mvtoDavivienda
     where numerocuenta = v_cuenta
       and periodo = v_periodo;
  
    if (v_registros > 0) then
      delete from mvtoDavivienda
       where numerocuenta = v_cuenta
         and periodo = v_periodo;
    
      select count(*)
        into v_registros
        from trxsinidentificar
       where cuenta = v_cuenta
         and periodo = v_periodo;
    
      if (v_registros > 0) then
      
        delete from trxsinidentificar
         where cuenta = v_cuenta
           and periodo = v_periodo;
      
      end if;
    
      --p_error :='Extracto de cuenta ' || v_cuenta || ' del periodo ' || v_periodo || ' ya cargado. Solicitar reproceso' ;
      --return;
    end if;
  
    l_clob_len := dbms_lob.getlength(v_cfile);
  
    v_finlinea := chr(13) || chr(10);
  
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
      v_finlinea := chr(13);
      l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
      IF l_amount < 1 THEN
        v_finlinea := chr(10);
        l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
        IF l_amount < 1 THEN
          p_error := '||Formato desconocido de archivo';
          return;
        end if;
      end if;
    end if;
  
    --Informacion
    WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
      l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos + 1, 1);
      IF l_amount < 1 THEN
        p_error := 'Registro ' || i || ' Invalido';
        return;
      else
        l_amount := l_amount - l_pos;
        dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      
        linea := vBuffer;
      
        BEGIN
          if (v_cuenta <> substr(linea, 20, 9)) then
            p_error := 'Archivo no corresponde a la cuenta. Cuenta del archivo  ' ||
                       substr(linea, 20, 9) || '- Cuenta ingresada: ' ||
                       v_cuenta;
            return;
          end if;
        
          r.numerocuenta     := v_cuenta;
          r.periodo          := v_periodo;
          r.tipo             := substr(linea, 1, 4);
          r.fechaproceso     := to_date(substr(linea, 5, 8), 'yyyymmdd');
          r.cuenta           := substr(linea, 20, 9);
          r.fechareal        := to_date(substr(linea, 29, 8), 'yyyymmdd');
          r.hora             := substr(linea, 37, 6);
          r.terminal         := substr(linea, 43, 6);
          r.talon            := substr(linea, 49, 8);
          r.valorcheque      := to_number(substr(linea, 57, 19),
                                          'S999999999999999999') / 100;
          r.valortotal       := to_number(substr(linea, 76, 19),
                                          'S999999999999999999') / 100;
          r.valorunidad      := to_number(substr(linea, 95, 19),
                                          'S999999999999999999') / 10000;
          r.oficinarecaudo   := substr(linea, 114, 4);
          r.motivo           := substr(linea, 118, 4);
          r.referencia1      := substr(linea, 122, 16);
          r.referencia2      := substr(linea, 138, 16);
          r.saldoantes       := to_number(substr(linea, 154, 19),
                                          'S999999999999999999') / 100;
          r.indicadorexcento := substr(linea, 173, 2);
          r.valorexcento     := to_number(substr(linea, 175, 19),
                                          'S999999999999999999') / 100;
          r.canal            := substr(linea, 194, 2);
          r.causaldevolucion := substr(linea, 196, 4);
          r.jornada          := substr(linea, 200, 1);
        
        EXCEPTION
          WHEN OTHERS THEN
            p_error := 'Error en registro ' || i || '. Mensaje: ' ||
                       SQLERRM || '. Datos registro: ' || vBuffer;
            return;
        END;
      
      end if;
    
      l_pos := l_pos + l_amount + length(v_finlinea);
    
      i := i + 1;
      insert into mvtoDavivienda_temp values r;
    
    END LOOP;
  
    insert into mvtodavivienda
      (numerocuenta,
       periodo,
       tipo,
       fechaproceso,
       cuenta,
       fechareal,
       hora,
       terminal,
       talon,
       valorcheque,
       valortotal,
       valorunidad,
       oficinarecaudo,
       motivo,
       referencia1,
       referencia2,
       saldoantes,
       indicadorexcento,
       valorexcento,
       canal,
       causaldevolucion,
       jornada,
       numerotrx)
      select numerocuenta,
             periodo,
             tipo,
             fechaproceso,
             cuenta,
             fechareal,
             hora,
             terminal,
             talon,
             valorcheque,
             valortotal,
             valorunidad,
             oficinarecaudo,
             motivo,
             referencia1,
             referencia2,
             saldoantes,
             indicadorexcento,
             valorexcento,
             canal,
             causaldevolucion,
             jornada,
             seq_mvto.nextval
        from mvtodavivienda_temp;
  
    update mvtodavivienda m
       set m.nombreTipo =
           (select t.descripcion from tipoMvto t where t.tipo = m.tipo)
     where m.numerocuenta = v_cuenta
       and m.periodo = v_periodo;
  
    commit;
  
    insert into trxsinidentificar
      (idbanco,
       cuenta,
       periodo,
       numerotrx,
       fechatrx,
       descripciontrx,
       valortrx,
       oficinaorigen,
       fechacargue,
       usuariocargue,
       numsecuenciareg,
       estadoiden,
       indTipo,
       p_consignado,
       observaciones)
      select '51',
             numerocuenta,
             periodo,
             numeroTrx,
             fechaReal,
             nombreTipo,
             valorTotal,
             oficinaRecaudo,
             sysdate,
             p_usuario,
             seq_ide.nextval,
             'SI',
             v_indtipo as indTipo,
             decode(v_indtipo, 'SIMIT', 10, 55) as p_consignado,
             referencia1 || referencia2
        from mvtoDavivienda
       where numerocuenta = v_cuenta
         and periodo = v_periodo
         and tipo in ('0034', '0035', '0036', '0039');
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select m.idmunicipio
              from municipio m, mvtoDavivienda b
             where t.numerotrx = b.numerotrx
               and m.idmunicipio = substr(b.referencia2, 9, 8))
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo;
  
    update trxsinidentificar t
       set t.idmunicipio =
           (select min(m.idmunicipio)
              from municipio m, mvtobancafe b
             where t.numerotrx = b.numerotrx
               and instr(m.nit_m, substr(b.referencia1, 7, 9)) > 0)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is null;
  
    update trxsinidentificar t
       set t.concesionariozon =
           (select m.idconcesionario
              from municipio m
             where m.idmunicipio = t.idmunicipio)
     where t.cuenta = v_cuenta
       and t.periodo = v_periodo
       and t.idmunicipio is not null;
  
    update trxsinidentificar t
       set fechaidentificacion = SYSDATE,
           indtipoiden         = indtipo,
           idmunicipioiden     = '00000001',
           p_consignadoiden    = p_consignado,
           observaciones       = 'DEPOSITO IGNORADO AUTOMATICAMENTE',
           estadoiden          = 'ID'
     where cuenta in ('186992822', '186992681')
       and idmunicipio in ('25377000',
                           '25183000',
                           '25214000',
                           '25473000',
                           '25151000',
                           '25612000',
                           '25260000',
                           '25754000',
                           '25875000',
                           '25899000')
       AND t.cuenta = v_cuenta
       and t.periodo = v_periodo;
  
    COMMIT;
  
    commit;
  
    i := i - 1;
    if p_error is null then
      p_error := 'El archivo se VALIDO exitosamente. Registros: ' || i;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [cargarExtDavivienda] ' || SQLERRM,
            p_error);
    
  end cargarExtDavivienda;

  PROCEDURE cargarMovAvvillas(p_uploadid        NUMBER,
                              p_idbanco         char,
                              p_cta_recaudo_fcm varchar2,
                              p_usuario         varchar2,
                              p_error           OUT VARCHAR2) is
  
    v_cuenta        varchar2(16);
    v_indtipo       char(5);
    v_cfile         clob;
    l_clob_len      PLS_INTEGER;
    l_pos           PLS_INTEGER := 1;
    l_amount        BINARY_INTEGER := 32767;
    v_encabezado    VARCHAR2(500) := 'Fecha de aplicacion,Fecha de transaccion,Descripcion,documento,Origen,Valor Total,Valor Efectivo,Valor Cheque,D- Debito C- Credito,Codigo de Transaccion';
    vBuffer         VARCHAR2(32767);
    v_finlinea      varchar(2);
    v_nombreArchivo varchar2(255);
    v_periodo       char(6);
    v_quincena      char(2);
    r               mvtoavvillas_temp%rowtype;
    linea           varchar2(1000);
  
    i     number := 1;
    tk    number := 1;
    v_chr NUMBER := 13; -- 1 tipo de Enter
  
    v_registros number;
    w_registros number;
    v_total     number;
  
    campo token_list;
  
    CURSOR tabla IS
      select idbanco,
             cuenta,
             periodo,
             numerotrx,
             fechatrx,
             descripciontrx,
             valortrx,
             oficinaorigen,
             indtipo,
             idmunicipio,
             p_consignado,
             fechacargue,
             usuariocargue,
             fechaidentificacion,
             usuarioidentificacion,
             indtipoiden,
             idmunicipioiden,
             p_consignadoiden,
             observaciones,
             numsecuenciareg,
             estadoiden,
             quincena
        from trxsinidentificar
       where idbanco = '52'
         and cuenta = v_cuenta
         and periodo = v_periodo
         and quincena = v_quincena
         and descripciontrx like 'NC TRANS ACH%';
  
    v_idMunicipio char(8);
    v_nit         char(9);
    v_reg         number;
  
  BEGIN
  
    delete from mvtoAvvillas_temp;
  
    /*    v_cuenta  := Substr(p_cta_recaudo_fcm,
                            Instrb(p_cta_recaudo_fcm, '-', 1, 2) + 1,
                            Length(p_cta_recaudo_fcm));
        v_indtipo := Substr(p_cta_recaudo_fcm,
                            1,
                            Instrb(p_cta_recaudo_fcm, '-', 1, 1) - 1);
    */
    select cfile, filename
      into v_cfile, v_nombreArchivo
      from upload
     where uploadid = p_uploadid;
  
    v_periodo  := Substr(v_nombreArchivo, 1, 6);
    v_quincena := Substr(v_nombreArchivo, 7, 2);
  
    l_clob_len := dbms_lob.getlength(v_cfile);
  
    v_finlinea := chr(13) || chr(10);
  
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
      v_finlinea := chr(13);
      l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
      IF l_amount < 1 THEN
        v_finlinea := chr(10);
        l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
        IF l_amount < 1 THEN
          p_error := '||Formato desconocido de archivo';
          return;
        end if;
      end if;
    end if;
  
    --Registro #1
    dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
  
    /*    if replace(Substr(vBuffer, 12, 9), ' ', '0') <> v_cuenta then
          p_error := 'Movimiento no corresponde a cuenta seleccionada. Mvto pertenece a la cuenta ' ||
                     replace(Substr(vBuffer, 12, 9), ' ', '0');
          return;
        end if;
    */
  
    v_cuenta := replace(Substr(vBuffer, 12, 9), ' ', '0');
  
    select indtipo
      into v_indtipo
      from cta_recaudo_fcm
     where cuenta = v_cuenta
       and idbanco = '52';
  
    select count(*)
      into v_registros
      from mvtoavvillas
     where numerocuenta = v_cuenta
       and periodo = v_periodo
       and quincena = v_quincena;
  
    if (v_registros > 0) then
      delete from mvtoavvillas
       where numerocuenta = v_cuenta
         and periodo = v_periodo
         and quincena = v_quincena;
    
      select count(*)
        into v_registros
        from trxsinidentificar
       where cuenta = v_cuenta
         and periodo = v_periodo
         and quincena = v_quincena;
    
      if (v_registros > 0) then
      
        delete from trxsinidentificar
         where cuenta = v_cuenta
           and periodo = v_periodo
           and quincena = v_quincena;
      
      end if;
    
      commit;
    
      --p_error :='Extracto de cuenta ' || v_cuenta || ' del periodo ' || v_periodo || ' ya cargado. Solicitar reproceso' ;
      --return;
    end if;
  
    l_pos := l_pos + l_amount + length(v_finlinea) - 1;
  
    --Registro #2
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos, 1);
    IF l_amount < 1 THEN
      p_error := 'No existe Encabezado';
      return;
    else
      l_amount := l_amount - l_pos;
      dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      if (instr(lower(vBuffer), lower(v_encabezado)) = 0) then
        p_error := 'Encabezado erroneo. encabezado leido: ' ||
                   lower(vBuffer) || '*' || lower(v_encabezado);
        return;
      end if;
    end if;
  
    l_pos := l_pos + l_amount + length(v_finlinea);
  
    --Informacion
    WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
      l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos + 1, 1);
      IF l_amount < 1 THEN
        p_error := 'Registro ' || i || ' Invalido';
        return;
      else
        l_amount := l_amount - l_pos;
        dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      
        linea := vBuffer;
        campo := tokenize(str => linea, delim => ',');
      
        if (campo(1) is null) then
          p_error := 'Error en registro ' || i || '. Formato errado. ' ||
                     '. Datos registro: ' || vBuffer;
          return;
        
        end if;
        BEGIN
          r.numerocuenta     := v_cuenta;
          r.periodo          := v_periodo;
          r.fechaaplicacion  := to_date(campo(1), 'yyyymmdd');
          r.fechatransaccion := to_date(campo(2), 'yyyymmdd');
          r.descripcion      := campo(3);
          r.documento        := campo(4);
          r.origen           := campo(5);
          r.valortotal       := to_number(campo(6), '9999999999999999.99');
          r.valorefectivo    := to_number(campo(7), '9999999999999999.99');
          r.valorcheque      := to_number(campo(8), '9999999999999999.99');
          r.debitocredito    := campo(9);
          r.codigotrn        := campo(10);
          r.quincena         := v_quincena;
        
        EXCEPTION
          WHEN OTHERS THEN
            p_error := 'Error en registro ' || i || '. Mensaje: ' ||
                       SQLERRM || '. Datos registro: ' || vBuffer;
            return;
        END;
      
      end if;
      l_pos := l_pos + l_amount + length(v_finlinea);
      i     := i + 1;
    
      insert into mvtoavvillas_temp values r;
    END LOOP;
  
    insert into mvtoavvillas
      (numeroTrx,
       numerocuenta,
       periodo,
       fechaaplicacion,
       fechatransaccion,
       descripcion,
       documento,
       origen,
       valortotal,
       valorefectivo,
       valorcheque,
       debitocredito,
       codigotrn,
       quincena)
      select seq_mvto.nextval,
             numerocuenta,
             periodo,
             fechaaplicacion,
             fechatransaccion,
             descripcion,
             documento,
             origen,
             valortotal,
             valorefectivo,
             valorcheque,
             debitocredito,
             codigotrn,
             quincena
        from mvtoavvillas_temp;
  
    insert into trxsinidentificar
      (idbanco,
       cuenta,
       periodo,
       numerotrx,
       fechatrx,
       descripciontrx,
       valortrx,
       oficinaorigen,
       indtipo,
       idmunicipio,
       p_consignado,
       fechacargue,
       usuariocargue,
       fechaidentificacion,
       usuarioidentificacion,
       indtipoiden,
       idmunicipioiden,
       p_consignadoiden,
       observaciones,
       numsecuenciareg,
       estadoiden,
       quincena)
      select '52' as idBanco,
             numerocuenta,
             periodo,
             numeroTrx,
             fechatransaccion,
             descripcion,
             valortotal,
             origen,
             v_indtipo as indTipo,
             '' as idMunicipio,
             decode(v_indtipo, 'SIMIT', 10, 55) as p_consignado,
             sysdate,
             p_usuario,
             null as fechaIde,
             null as usuarioIde,
             null as indtipoiden,
             null as idmunicipioiden,
             null p_consignadoiden,
             null as observaciones,
             seq_ide.nextval as numsecuenciareg,
             'SI' as estadoiden,
             quincena
        from mvtoavvillas
       where numerocuenta = v_cuenta
         and periodo = v_periodo
         and quincena = v_quincena
         and descripcion in
             (select concepto from conceptosidentificar where idbanco = '52');
  
    insert into trxsinidentificar
      (idbanco,
       cuenta,
       periodo,
       numerotrx,
       fechatrx,
       descripciontrx,
       valortrx,
       oficinaorigen,
       indtipo,
       idmunicipio,
       p_consignado,
       fechacargue,
       usuariocargue,
       fechaidentificacion,
       usuarioidentificacion,
       indtipoiden,
       idmunicipioiden,
       p_consignadoiden,
       observaciones,
       numsecuenciareg,
       estadoiden,
       quincena)
      select '52' as idBanco,
             numerocuenta,
             periodo,
             numeroTrx,
             fechatransaccion,
             descripcion,
             valortotal,
             origen,
             v_indtipo as indTipo,
             '' as idMunicipio,
             decode(v_indtipo, 'SIMIT', 10, 55) as p_consignado,
             sysdate,
             p_usuario,
             null as fechaIde,
             null as usuarioIde,
             null as indtipoiden,
             null as idmunicipioiden,
             null p_consignadoiden,
             null as observaciones,
             seq_ide.nextval as numsecuenciareg,
             'SI' as estadoiden,
             quincena
        from mvtoavvillas
       where numerocuenta = v_cuenta
         and periodo = v_periodo
         and quincena = v_quincena
         and descripcion like 'NC TRANS ACH%';
  
    for registro in tabla loop
      v_idMunicipio := null;
      if (substr(registro.descripciontrx, 18, 1) = '0') then
        v_nit := substr(registro.descripciontrx, 19, 9);
      else
        v_nit := substr(registro.descripciontrx, 18, 9);
      end if;
    
      select count(*)
        into v_reg
        from municipio
       where instr(nit_m, v_nit) > 0;
    
      if (v_reg > 0) then
      
        select substr(min(idMunicipio), 1, 8)
          into v_idMunicipio
          from municipio
         where instr(nit_m, v_nit) > 0;
      else
        select count(*)
          into v_reg
          from municipio
         where instr(nit_cta, v_nit) > 0;
      
        if (v_reg > 0) then
        
          select substr(min(idMunicipio), 1, 8)
            into v_idMunicipio
            from municipio
           where instr(nit_cta, v_nit) > 0;
        
        end if;
      end if;
    
      if (v_idMunicipio is not null) then
        update trxsinidentificar
           set idmunicipio = v_idMunicipio
         where numsecuenciareg = registro.numsecuenciareg;
      
        update trxsinidentificar
           set concesionariozon =
               (select m.idconcesionario
                  from municipio m
                 where m.idmunicipio = v_idMunicipio)
         where numsecuenciareg = registro.numsecuenciareg;
      
      end if;
    
    end loop;
  
    commit;
  
    i := i - 1;
    if p_error is null then
      p_error := 'El archivo se VALIDO exitosamente. Registros: ' || i;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [cargarMovAvvillas] ' || SQLERRM,
            p_error);
    
  end cargarMovAvvillas;

  PROCEDURE cargarIdeMasiva(p_uploadid        NUMBER,
                            p_idbanco         char,
                            p_cta_recaudo_fcm varchar2,
                            p_usuario         varchar2,
                            p_error           OUT VARCHAR2) is
  
    v_cuenta        varchar2(16);
    v_indtipo       char(5);
    v_cfile         clob;
    l_clob_len      PLS_INTEGER;
    l_pos           PLS_INTEGER := 1;
    l_amount        BINARY_INTEGER := 32767;
    v_encabezado    VARCHAR2(500) := 'Concesionario Zonal;Estado ;Periodo;Cuenta;Municipio Propuesto;DIVIPO Propuesto ;Tipo Propuesto;% Propuesto;DIVIPO Asignado ;Municipio Asignado;Tipo Asignado;% Asignado;Valor Transaccion;Banco;Cuenta;Periodo;Fecha Transaccion;Descripcion;Oficina;secuencia';
    vBuffer         VARCHAR2(32767);
    v_finlinea      varchar(2);
    v_nombreArchivo varchar2(255);
    v_periodo       char(6);
    v_quincena      char(2);
    r               idemasivo_temp%rowtype;
    linea           varchar2(1000);
  
    i     number := 1;
    tk    number := 1;
    v_chr NUMBER := 13; -- 1 tipo de Enter
  
    v_registros number;
    w_registros number;
    v_total     number;
  
    campo token_list;
  
    v_idMunicipio char(8);
    v_nit         char(9);
    v_reg         number;
    v_aplicar     number;
    v_numreg      number;
  
    v_mensaje varchar2(250);
    v_i       number;
    v_error   number;
  
    CURSOR tabla IS
      select concesionario,
             estado,
             periodo,
             cuenta,
             municipioprop,
             divipoprop,
             tipoprop,
             porcentajeprop,
             divipoasig,
             municipioasig,
             tipoasig,
             porcentajeasig,
             valortrn,
             banco,
             cuentatrn,
             periodotrn,
             fechatrn,
             descripciontrn,
             oficinatrn,
             secuenciatrn
        from idemasivo_temp;
  
  BEGIN
  
    delete from idemasivo_temp;
  
    commit;
  
    select cfile, filename
      into v_cfile, v_nombreArchivo
      from upload
     where uploadid = p_uploadid;
  
    l_clob_len := dbms_lob.getlength(v_cfile);
  
    v_finlinea := chr(13) || chr(10);
  
    l_amount := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
    IF l_amount < 1 THEN
      v_finlinea := chr(13);
      l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
      IF l_amount < 1 THEN
        v_finlinea := chr(10);
        l_amount   := dbms_lob.instr(v_cfile, v_finlinea, 1, 1);
        IF l_amount < 1 THEN
          p_error := '||Formato desconocido de archivo';
          return;
        end if;
      end if;
    end if;
  
    --Registro #1
    dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
  
    /*if (instr(lower(vBuffer), lower(v_encabezado)) = 0) then
        p_error := 'Encabezado erroneo. encabezado leido: ' || lower(vBuffer) || '*' ||
                   lower(v_encabezado);
        return;
      end if;
    */
    l_pos := l_pos + l_amount + length(v_finlinea) - 1;
  
    --Informacion
    WHILE l_pos < l_clob_len - 1 and p_error is null LOOP
      l_amount := dbms_lob.instr(v_cfile, v_finlinea, l_pos + 1, 1);
      IF l_amount < 1 THEN
        p_error := 'Registro ' || i || ' Invalido';
        return;
      else
        l_amount := l_amount - l_pos;
        dbms_lob.read(v_cfile, l_amount, l_pos, vBuffer);
      
        linea := vBuffer;
        campo := tokenize(str => linea, delim => ',');
      
        if (campo(1) is null) then
        
          p_error := 'Error en registro ' || i || '. Formato errado. ' ||
                     '. Datos registro: ' || vBuffer;
          return;
        
        end if;
        BEGIN
          r.concesionario := campo(1);
          r.estado        := campo(2);
          r.periodo       := campo(3);
          r.cuenta        := campo(4);
          r.municipioprop := campo(5);
        
          if (substr(campo(6), 1, 1) = '''') then
            r.divipoprop := substr(campo(6), 2, 8);
          else
            r.divipoprop := campo(6);
          end if;
        
          if (substr(campo(6), 1, 1) = '''') then
            r.divipoasig := substr(campo(6), 2, 8);
          else
            r.divipoasig := campo(6);
          end if;
        
          r.tipoprop := campo(8);
          r.tipoasig := campo(8);
        
          r.porcentajeprop := to_number(campo(9), '99.99');
          r.porcentajeasig := to_number(campo(9), '99.99');
        
          r.valortrn       := campo(10);
          r.banco          := campo(11);
          r.cuentatrn      := campo(12);
          r.periodotrn     := campo(13);
          r.fechatrn       := campo(14);
          r.descripciontrn := campo(15);
          r.oficinatrn     := campo(16);
          r.secuenciatrn   := to_number(campo(17));
        
        EXCEPTION
          WHEN OTHERS THEN
            p_error := 'Error en registro ' || i || '. Mensaje: ' ||
                       SQLERRM || '. Datos registro: ' || vBuffer;
            return;
        END;
      
      end if;
      l_pos := l_pos + l_amount + length(v_finlinea);
      i     := i + 1;
    
      insert into idemasivo_temp values r;
    END LOOP;
  
    commit;
  
    v_mensaje := '';
    v_i       := 1;
    v_error   := 0;
  
    for registro in (select * from idemasivo_temp) loop
      v_aplicar := 1;
    
      if (not upper(registro.tipoasig) = 'POLCA' and
         not upper(registro.tipoasig) = 'SIMIT') then
        v_aplicar := 0;
        v_mensaje := 'Tipo comparendo errado en registro ' || to_char(v_i);
        v_error   := 1;
      end if;
    
      if (not registro.porcentajeasig = 10 and
         not registro.porcentajeasig = 45 and
         not registro.porcentajeasig = 55) then
        v_aplicar := 0;
        v_mensaje := 'Porcentaje consignacion errado en registro ' ||
                     to_char(v_i);
        v_error   := 1;
      end if;
    
      if (upper(registro.tipoasig) = 'SIMIT' and
         registro.porcentajeasig > 10) then
        v_aplicar := 0;
        v_mensaje := 'Porcentaje SIMIT errado en registro ' || to_char(v_i);
        v_error   := 1;
      end if;
    
      select count(*)
        into v_numreg
        from municipio m
       where m.idmunicipio = registro.divipoasig
         and m.idmunicipio <> '00000000';
    
      if (v_numreg = 0) then
        v_aplicar := 0;
        v_mensaje := 'Municipio errado en registro ' || to_char(v_i);
        v_error   := 1;
      end if;
    
      select count(*)
        into v_numreg
        from trxsinidentificar t
       where t.numsecuenciareg = registro.secuenciatrn;
    
      if (v_numreg = 0) then
        v_aplicar := 0;
        v_mensaje := 'Transaccion identificada no existe, registro ' ||
                     to_char(v_i);
        v_error   := 1;
      end if;
    
      v_i := v_i + 1;
    
    end loop;
  
    if (v_error = 1) then
      p_error := 'Archivo con inconsistencias. No se aplica ningun registro. ' ||
                 v_mensaje;
    else
    
      for registro in (select * from idemasivo_temp) loop
      
        update trxsinidentificar t
           set t.indtipoiden           = registro.tipoasig,
               t.idmunicipioiden       = registro.divipoasig,
               t.p_consignadoiden      = registro.porcentajeasig,
               t.observaciones         = 'IDENTIFICADO MASIVAMENTE',
               t.estadoiden            = 'ID',
               t.fechaidentificacion   = sysdate,
               t.usuarioidentificacion = to_number(p_usuario)
         where t.numsecuenciareg = registro.secuenciatrn;
      
      end loop;
      commit;
    
    end if;
  
    i := i - 1;
    if p_error is null then
      p_error := 'El archivo se proceso correctamente. Registros aplicados: ' || i;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [cargarIdeMasiva] ' || SQLERRM,
            p_error);
    
  end cargarIdeMasiva;

  PROCEDURE i_Novmunicipio(p_idmunicipio              varchar2,
                           p_nit_m                    varchar2,
                           p_nombre                   varchar2,
                           p_idconcesionario          varchar2,
                           p_correo                   varchar2,
                           p_indretroactividad        number,
                           p_indliq_s_ext             number,
                           p_indliq_s_local           number,
                           p_indliq_p_ext             number,
                           p_indliq_p_local           number,
                           p_indAcuerdoPago_2002      number,
                           p_idbanco                  varchar2,
                           p_tipocuenta               varchar2,
                           p_cuenta                   varchar2,
                           p_nit_cta                  varchar2,
                           p_municipio_s              number,
                           p_fcm_contravencional_s    number,
                           p_conces_contravencional_s number,
                           p_acuerdopago_s            number,
                           p_municipio_p              number,
                           p_fcm_contravencional_p    number,
                           p_conces_contravencional_p number,
                           p_acuerdopago_p            number,
                           p_usuario                  varchar2,
                           p_fecha_act_ano            number,
                           p_fecha_act_mes            number,
                           p_fecha_act_dia            number,
                           p_firma1                   varchar2,
                           p_firma2                   varchar2,
                           p_dnsAvvillas              varchar2,
                           p_dnsDavivienda            varchar2,
                           p_error                    OUT VARCHAR2,
                           p_novedad                  OUT varchar2
                           
                           ) AS
  
    w_fecha_act       date;
    numNovedad        number;
    m_dias_activacion number;
    min_fecha_act     date;
    correo_usuario    varchar(100);
    correo_fcm        varchar(100);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    select mail
      into correo_usuario
      from person
     where idperson = TO_NUMBER(p_usuario);
  
    select substr(correo, 0, 100)
      into correo_fcm
      from fcm
     where nit_fcm = '8000826650';
  
    select count(*)
      INTO v_valida
      from departamento t
     where iddepartamento = substr(p_idmunicipio, 1, 2);
  
    select TO_DATE(p_fecha_act_ano || '-' || p_fecha_act_mes || '-' ||
                   p_fecha_act_dia,
                   'YYYY-MM-DD')
      into w_fecha_act
      from DUAL;
  
    if (v_valida = 0) then
      p_error := 'Departamento no existe';
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from municipio t
     where idmunicipio = p_idmunicipio;
  
    IF v_valida <> 0 THEN
      p_error := 'municipio ya existente';
      return;
    else
      select dias_activacion into m_dias_activacion from fcm;
      IF m_dias_activacion is null THEN
        p_error := 'Error en parametrizaci¿n (d¿as activaci¿n)';
        return;
      ELSE
        min_fecha_act := fn_fec_dispersion(to_date(to_char(sysdate,
                                                           'yyyy-mm-dd'),
                                                   'yyyy-mm-dd'),
                                           m_dias_activacion,
                                           0,
                                           '99999999');
        IF min_fecha_act > w_fecha_act then
          p_error := 'Fecha Activaci¿n Inv¿lida';
          return;
        ELSE
          select seq_novedad.Nextval into numNovedad from dual;
        
          insert into novmunicipio
            (idmunicipio,
             nit_m,
             nombre,
             idconcesionario,
             correo,
             indretroactividad,
             idbanco,
             tipocuenta,
             cuenta,
             nit_cta,
             indliq_s_ext,
             indliq_s_local,
             indliq_p_ext,
             indliq_p_local,
             indAcuerdoPago_2002,
             iddepartamento,
             TIPONOV,
             NUMERONOV,
             FECHANOV,
             USUARIONOV,
             FECHAACT,
             ESTADONOV,
             FIRMA1,
             FIRMA2,
             municipio_s,
             fcm_contravencional_s,
             conces_contravencional_s,
             acuerdopago_s,
             municipio_p,
             fcm_contravencional_p,
             conces_contravencional_p,
             acuerdopago_p,
             dnsavvillas,
             dnsgranbanco)
          values
            (p_idmunicipio,
             p_nit_m,
             p_nombre,
             p_idconcesionario,
             p_correo,
             p_indretroactividad,
             p_idbanco,
             p_tipocuenta,
             encriptar(p_cuenta),
             p_nit_cta,
             p_indliq_s_ext,
             p_indliq_s_local,
             p_indliq_p_ext,
             p_indliq_p_local,
             p_indAcuerdoPago_2002,
             substr(p_idmunicipio, 1, 2),
             '01', -- NOVEDAD ADICION MUNICIPIO
             numNovedad,
             sysdate,
             p_usuario,
             w_fecha_act,
             'INGRESADA',
             p_firma1,
             p_firma2,
             p_municipio_s,
             p_fcm_contravencional_s,
             p_conces_contravencional_s,
             p_acuerdopago_s,
             p_municipio_p,
             p_fcm_contravencional_p,
             p_conces_contravencional_p,
             p_acuerdopago_p,
             p_dnsAvvillas,
             p_dnsDavivienda);
        
          p_error   := MSG_INS_OK;
          p_novedad := '01-' || to_char(numNovedad, '0000000');
        
          sp_envionotificacion(gruporecibe => 4,
                               grupocopia  => -1,
                               asunto      => 'Notificaci¿n de Novedad de Municipio:  ' ||
                                              p_novedad,
                               mensaje     => 'Se ha creado una novedad financiera de municipio. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                              p_novedad ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
          commit;
        END IF;
      END IF;
    END IF;
  
    sp_log(p_usuario,
           'i_Novmunicipio',
           p_idmunicipio || '-' || p_nit_m || '-' || p_nombre || '-' ||
           p_idconcesionario || '-' || p_correo || '-' ||
           p_indretroactividad || '-' || p_idbanco || '-' || p_tipocuenta || '-' ||
           p_cuenta || '-' || p_nit_cta || '-' || p_indliq_s_ext || '-' ||
           p_indliq_s_local || '-' || p_indliq_p_ext || '-' || '-' ||
           p_indAcuerdoPago_2002 || '-' || p_indliq_p_local || '-' ||
           p_municipio_s || '-' || p_fcm_contravencional_s || '-' ||
           p_conces_contravencional_s || '-' || p_acuerdopago_s || '-' ||
           p_municipio_p || '-' || p_fcm_contravencional_p || '-' ||
           p_conces_contravencional_p || '-' || p_acuerdopago_p);
  
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_Novmunicipio] ' || SQLERRM, p_error);
    
  END i_Novmunicipio;

  PROCEDURE q_Novmunicipio(p_tiponov                  varchar2,
                           p_numeronov                varchar2,
                           p_usuario                  varchar2,
                           p_idmunicipio              out varchar2,
                           p_nit_m                    out varchar2,
                           p_nombre                   out varchar2,
                           p_idconcesionario          out varchar2,
                           p_correo                   out varchar2,
                           p_indretroactividad        out number,
                           p_indliq_s_ext             out number,
                           p_indliq_s_local           out number,
                           p_indliq_p_ext             out number,
                           p_indliq_p_local           out number,
                           p_indAcuerdoPago_2002      out number,
                           p_idbanco                  out varchar2,
                           p_tipocuenta               out varchar2,
                           p_cuenta                   out varchar2,
                           p_nit_cta                  out varchar2,
                           p_municipio_s              out number,
                           p_fcm_contravencional_s    out number,
                           p_conces_contravencional_s out number,
                           p_acuerdopago_s            out number,
                           p_municipio_p              out number,
                           p_fcm_contravencional_p    out number,
                           p_conces_contravencional_p out number,
                           p_acuerdopago_p            out number,
                           p_fechaact                 out date,
                           p_firma1                   out varchar2,
                           p_firma2                   out varchar2,
                           p_estadonov                out varchar2,
                           p_dnsAvvilas               out varchar2,
                           p_dnsGranbanco             out varchar2,
                           p_error                    OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_idmunicipio              := '';
    p_nit_m                    := '';
    p_nombre                   := '';
    p_idconcesionario          := '00';
    p_correo                   := '';
    p_indretroactividad        := 0;
    p_indliq_s_ext             := 0;
    p_indliq_s_local           := 0;
    p_indliq_p_ext             := 0;
    p_indliq_p_local           := 0;
    p_indAcuerdoPago_2002      := 0;
    p_idbanco                  := '00';
    p_tipocuenta               := '000';
    p_cuenta                   := '';
    p_nit_cta                  := '';
    p_municipio_s              := 0;
    p_fcm_contravencional_s    := 0;
    p_conces_contravencional_s := 0;
    p_acuerdopago_s            := 0;
    p_municipio_p              := 0;
    p_fcm_contravencional_p    := 0;
    p_conces_contravencional_p := 0;
    p_acuerdopago_p            := 0;
    p_fechaact                 := null;
    p_firma1                   := '';
    p_firma2                   := '';
    p_estadonov                := '';
    p_dnsAvvilas               := '';
    p_dnsGranbanco             := '';
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select idmunicipio,
               nit_m,
               nombre,
               idconcesionario,
               correo,
               indretroactividad,
               idbanco,
               tipocuenta,
               desencriptar(cuenta),
               nit_cta,
               indliq_s_ext,
               indliq_s_local,
               indliq_p_ext,
               indliq_p_local,
               indAcuerdoPago_2002,
               municipio_s,
               fcm_contravencional_s,
               conces_contravencional_s,
               acuerdopago_s,
               municipio_p,
               fcm_contravencional_p,
               conces_contravencional_p,
               acuerdopago_p,
               fechaact,
               firma1,
               firma2,
               estadonov,
               dnsAvvillas,
               dnsGranbanco
          into p_idmunicipio,
               p_nit_m,
               p_nombre,
               p_idconcesionario,
               p_correo,
               p_indretroactividad,
               p_idbanco,
               p_tipocuenta,
               p_cuenta,
               p_nit_cta,
               p_indliq_s_ext,
               p_indliq_s_local,
               p_indliq_p_ext,
               p_indliq_p_local,
               p_indacuerdopago_2002,
               p_municipio_s,
               p_fcm_contravencional_s,
               p_conces_contravencional_s,
               p_acuerdopago_s,
               p_municipio_p,
               p_fcm_contravencional_p,
               p_conces_contravencional_p,
               p_acuerdopago_p,
               p_fechaact,
               p_firma1,
               p_firma2,
               p_estadonov,
               p_dnsAvvilas,
               p_dnsGranbanco
          from Novmunicipio
         where tiponov = p_tiponov
           and numeronov = to_number(p_numeronov);
      
        p_error := 'Consulta Exitosa';
      
        sp_log(p_usuario,
               'q_Novmunicipio',
               p_tiponov || '-' || p_numeronov || '-' || p_idmunicipio || '-' ||
               p_nit_m || '-' || p_nombre || '-' || p_idconcesionario || '-' ||
               p_correo || '-' || p_indretroactividad || '-' || p_idbanco || '-' ||
               p_tipocuenta || '-' || p_cuenta || '-' || p_nit_cta || '-' ||
               p_indliq_s_ext || '-' || p_indliq_s_local || '-' ||
               p_indliq_p_ext || '-' || '-' || p_indAcuerdoPago_2002 || '-' ||
               p_indliq_p_local || '-' || p_municipio_s || '-' ||
               p_fcm_contravencional_s || '-' || p_conces_contravencional_s || '-' ||
               p_acuerdopago_s || '-' || p_municipio_p || '-' ||
               p_fcm_contravencional_p || '-' || p_conces_contravencional_p || '-' ||
               p_acuerdopago_p || '-' || p_firma1 || '-' || p_firma2);
      
        commit;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_Novmunicipio] ' || SQLERRM, p_error);
  END q_Novmunicipio;

  PROCEDURE q_NovmunicipioE(p_tiponov   varchar2,
                            p_numeronov number,
                            p_usuario   varchar2,
                            p_estadonov out varchar2,
                            p_error     OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_estadonov := '';
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select estadonov
          into p_estadonov
          from Novmunicipio
         where tiponov = p_tiponov
           and numeronov = p_numeronov;
      
        p_error := 'Consulta Exitosa';
      
        sp_log(p_usuario, 'q_NovmunicipioE', p_estadonov);
      
        commit;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_NovmunicipioE] ' || SQLERRM,
            p_error);
  END q_NovmunicipioE;

  PROCEDURE u_NovmunicipioEst(p_tiponov   varchar2,
                              p_numeronov varchar2,
                              p_usuario   varchar2,
                              p_estado    varchar2,
                              p_error     OUT VARCHAR2) is
  
    estado_act varchar2(100);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select TRIM(UPPER(estadonov))
          into estado_act
          from Novmunicipio
         where tiponov = p_tiponov
           and numeronov = to_number(p_numeronov);
      
        IF estado_act = p_estado THEN
          p_error := 'Novedad ya actualizada';
          return;
        END IF;
      
        IF p_estado = 'VALIDADA' THEN
          update Novmunicipio
             set estadonov  = p_estado,
                 usuarioval = p_usuario,
                 fechaval   = sysdate
           where tiponov = p_tiponov
             and numeronov = to_number(p_numeronov);
        ELSE
          IF p_estado = 'ANULADA' THEN
            update Novmunicipio
               set estadonov   = p_estado,
                   usuarioanul = p_usuario,
                   fechaanul   = sysdate
             where tiponov = p_tiponov
               and numeronov = to_number(p_numeronov);
          ELSE
            update Novmunicipio
               set estadonov = p_estado
             where tiponov = p_tiponov
               and numeronov = to_number(p_numeronov);
          END IF;
        END IF;
      
        IF p_estado = 'ANULADA' THEN
          insert into hist_vobo
            (idvobo,
             tipo,
             accion,
             usuario,
             fecha,
             referencia1,
             referencia2,
             referencia3,
             referencia4)
          values
            (seq_vobo.nextval,
             'NOVEDAD MUNICIPIO',
             'RECHAZADO',
             p_usuario,
             sysdate,
             p_tiponov || '-' || p_numeronov,
             p_estado,
             0,
             0);
        
        ELSE
          insert into hist_vobo
            (idvobo,
             tipo,
             accion,
             usuario,
             fecha,
             referencia1,
             referencia2,
             referencia3,
             referencia4)
          values
            (seq_vobo.nextval,
             'NOVEDAD MUNICIPIO',
             'APROBADO',
             p_usuario,
             sysdate,
             p_tiponov || '-' || p_numeronov,
             p_estado,
             0,
             0);
        END IF;
      
        commit;
      
        if (p_estado = 'VOBOFINANCIERA') THEN
          sp_envionotificacion(gruporecibe => 5,
                               grupocopia  => -1,
                               asunto      => 'Notificaci¿n de Novedad de Municipio:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha creado una novedad financiera de municipio. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        if (p_estado = 'VOBOSIMIT') THEN
          sp_envionotificacion(gruporecibe => 6,
                               grupocopia  => -1,
                               asunto      => 'Notificaci¿n de Novedad de Municipio:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha creado una novedad financiera de municipio. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        if (p_estado = 'VALIDADA') THEN
          sp_envionotificacion(gruporecibe => 7,
                               grupocopia  => -1,
                               asunto      => 'Notificaci¿n de Novedad de Municipio:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha aprobado una novedad financiera de municipio. Por favor informar a banco novedad. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        if (p_estado = 'ANULADA') THEN
          sp_envionotificacion(gruporecibe => 3,
                               grupocopia  => -1,
                               asunto      => 'Notificaci¿n de ANULACION Novedad de Municipio:  ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov,
                               mensaje     => 'Se ha ANULADO una novedad financiera de municipio. Por favor verificar informacion. NUMERO NOVEDAD ' ||
                                              p_tiponov || '-' ||
                                              p_numeronov ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
        END IF;
      
        p_error := 'Actualizaci¿n Exitosa';
      
        sp_log(p_usuario,
               'u_NovmunicipioEst',
               p_tiponov || '-' || p_numeronov || '-' || p_estado);
      
        commit;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO' || p_tiponov || '-' ||
                     p_numeronov;
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_NovmunicipioEst] ' || SQLERRM,
            p_error);
  END u_NovmunicipioEst;

  PROCEDURE u_Novmunicipio(p_idmunicipio              varchar2,
                           p_nit_m                    varchar2,
                           p_nombre                   varchar2,
                           p_idconcesionario          varchar2,
                           p_correo                   varchar2,
                           p_indretroactividad        number,
                           p_indliq_s_ext             number,
                           p_indliq_s_local           number,
                           p_indliq_p_ext             number,
                           p_indliq_p_local           number,
                           p_indAcuerdoPago_2002      number,
                           p_idbanco                  varchar2,
                           p_tipocuenta               varchar2,
                           p_cuenta                   varchar2,
                           p_nit_cta                  varchar2,
                           p_municipio_s              number,
                           p_fcm_contravencional_s    number,
                           p_conces_contravencional_s number,
                           p_acuerdopago_s            number,
                           p_municipio_p              number,
                           p_fcm_contravencional_p    number,
                           p_conces_contravencional_p number,
                           p_acuerdopago_p            number,
                           p_usuario                  varchar2,
                           p_fecha_act_ano            number,
                           p_fecha_act_mes            number,
                           p_fecha_act_dia            number,
                           p_firma1                   varchar2,
                           p_firma2                   varchar2,
                           p_dnsAvvillas              varchar2,
                           p_dnsDavivienda            varchar2,
                           p_error                    OUT VARCHAR2,
                           p_novedad                  OUT varchar2) AS
  
    w_fecha_act       date;
    numNovedad        number;
    m_dias_activacion number;
    min_fecha_act     date;
    correo_usuario    varchar(100);
    correo_fcm        varchar(100);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    select mail
      into correo_usuario
      from person
     where idperson = TO_NUMBER(p_usuario);
  
    select substr(correo, 0, 100)
      into correo_fcm
      from fcm
     where nit_fcm = '8000826650';
  
    select count(*)
      INTO v_valida
      from departamento t
     where iddepartamento = substr(p_idmunicipio, 1, 2);
  
    select TO_DATE(p_fecha_act_ano || '-' || p_fecha_act_mes || '-' ||
                   p_fecha_act_dia,
                   'YYYY-MM-DD')
      into w_fecha_act
      from DUAL;
  
    if (v_valida = 0) then
      p_error := 'Departamento no existe';
      return;
    end if;
  
    select COUNT(*)
      INTO v_valida
      from municipio t
     where idmunicipio = p_idmunicipio;
  
    select seq_novedad.Nextval into numNovedad from dual;
  
    IF v_valida = 0 THEN
      p_error := 'Municipio No existe';
      return;
    else
      select dias_activacion into m_dias_activacion from fcm;
      IF m_dias_activacion is null THEN
        p_error := 'Error en parametrizaci¿n (d¿as activaci¿n)';
        return;
      ELSE
        min_fecha_act := fn_fec_dispersion(sysdate,
                                           m_dias_activacion,
                                           0,
                                           '99999999');
        IF min_fecha_act > w_fecha_act then
          p_error := 'Fecha Activaci¿n Inv¿lida';
          return;
        ELSE
        
          insert into novmunicipio
            (idmunicipio,
             nit_m,
             nombre,
             idconcesionario,
             correo,
             indretroactividad,
             idbanco,
             tipocuenta,
             cuenta,
             nit_cta,
             indliq_s_ext,
             indliq_s_local,
             indliq_p_ext,
             indliq_p_local,
             indAcuerdoPago_2002,
             iddepartamento,
             TIPONOV,
             NUMERONOV,
             FECHANOV,
             USUARIONOV,
             FECHAACT,
             ESTADONOV,
             FIRMA1,
             FIRMA2,
             municipio_s,
             fcm_contravencional_s,
             conces_contravencional_s,
             acuerdopago_s,
             municipio_p,
             fcm_contravencional_p,
             conces_contravencional_p,
             acuerdopago_p,
             dnsavvillas,
             dnsgranbanco)
          values
            (p_idmunicipio,
             p_nit_m,
             p_nombre,
             p_idconcesionario,
             p_correo,
             p_indretroactividad,
             p_idbanco,
             p_tipocuenta,
             encriptar(p_cuenta),
             p_nit_cta,
             p_indliq_s_ext,
             p_indliq_s_local,
             p_indliq_p_ext,
             p_indliq_p_local,
             p_indAcuerdoPago_2002,
             substr(p_idmunicipio, 1, 2),
             '02', -- NOVEDAD ADICION MUNICIPIO
             numNovedad,
             sysdate,
             p_usuario,
             w_fecha_act,
             'INGRESADA',
             p_firma1,
             p_firma2,
             p_municipio_s,
             p_fcm_contravencional_s,
             p_conces_contravencional_s,
             p_acuerdopago_s,
             p_municipio_p,
             p_fcm_contravencional_p,
             p_conces_contravencional_p,
             p_acuerdopago_p,
             p_dnsAvvillas,
             p_dnsDavivienda);
        
          p_error   := MSG_UPD_OK;
          p_novedad := '02-' || to_char(numNovedad, '0000000');
          sp_envionotificacion(gruporecibe => 3,
                               grupocopia  => 2,
                               asunto      => 'Notificaci¿n de Novedad de Municipio:  ' ||
                                              p_novedad,
                               mensaje     => 'Se ha creado una novedad financiera de municipio. Por favor verificarla y dar su visto bueno. NUMERO NOVEDAD ' ||
                                              p_novedad ||
                                              ' . Muchas gracias',
                               p_usuario   => p_usuario);
        
          commit;
        END IF;
      END IF;
    END IF;
  
    sp_log(p_usuario,
           'u_Novmunicipio',
           p_idmunicipio || '-' || p_nit_m || '-' || p_nombre || '-' ||
           p_idconcesionario || '-' || p_correo || '-' ||
           p_indretroactividad || '-' || p_idbanco || '-' || p_tipocuenta || '-' ||
           p_cuenta || '-' || p_nit_cta || '-' || p_indliq_s_ext || '-' ||
           p_indliq_s_local || '-' || p_indliq_p_ext || '-' || '-' ||
           p_indAcuerdoPago_2002 || '-' || p_indliq_p_local || '-' ||
           p_municipio_s || '-' || p_fcm_contravencional_s || '-' ||
           p_conces_contravencional_s || '-' || p_acuerdopago_s || '-' ||
           p_municipio_p || '-' || p_fcm_contravencional_p || '-' ||
           p_conces_contravencional_p || '-' || p_acuerdopago_p);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_Novmunicipio] ' || SQLERRM, p_error);
    
  END u_Novmunicipio;

  PROCEDURE i_Novterceros(p_idmunicipio   char,
                          p_nit_t         char,
                          p_nombre        varchar2,
                          p_correoTercero varchar2,
                          p_idbanco       char,
                          p_tipocuenta    char,
                          p_cuenta        varchar2,
                          p_base_s        number,
                          p_base_p        number,
                          p_ind_base      number,
                          p_num_tercero   number,
                          p_usuario       varchar2,
                          p_tiponov       varchar2,
                          p_fecha_act_ano number,
                          p_fecha_act_mes number,
                          p_fecha_act_dia number,
                          p_firma1        varchar2,
                          p_firma2        varchar2,
                          p_dnsavvillas   varchar2,
                          p_dnsgranbanco  varchar2,
                          p_error         OUT VARCHAR2,
                          p_novedad       OUT varchar2) AS
  
    w_fecha_act       date;
    numNovedad        number;
    m_dias_activacion number;
    min_fecha_act     date;
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    select TO_DATE(p_fecha_act_ano || '-' || p_fecha_act_mes || '-' ||
                   p_fecha_act_dia,
                   'YYYY-MM-DD')
      into w_fecha_act
      from DUAL;
  
    select dias_activacion into m_dias_activacion from fcm;
    IF m_dias_activacion is null THEN
      p_error := 'Error en parametrizaci¿n (d¿as activaci¿n)';
      return;
    ELSE
      min_fecha_act := fn_fec_dispersion(sysdate,
                                         m_dias_activacion,
                                         0,
                                         '99999999');
      IF min_fecha_act > w_fecha_act then
        p_error := 'Fecha Activaci¿n Inv¿lida';
        return;
      ELSE
        select seq_novedad.Nextval into numNovedad from dual;
      
        insert into novtercero
          (idmunicipio,
           nit_t,
           nombre,
           correoTercero,
           idbanco,
           tipocuenta,
           cuenta,
           base_s,
           base_p,
           ind_base,
           num_tercero,
           tiponov,
           numeronov,
           fechanov,
           usuarionov,
           fechaact,
           firma1,
           firma2,
           estadonov,
           dnsavvillas,
           dnsgranbanco)
        values
          (p_idmunicipio,
           p_nit_t,
           p_nombre,
           p_correoTercero,
           p_idbanco,
           p_tipocuenta,
           encriptar(p_cuenta),
           p_base_s,
           p_base_p,
           p_ind_base,
           p_num_tercero,
           p_tiponov,
           numNovedad,
           sysdate,
           p_usuario,
           w_fecha_act,
           p_firma1,
           p_firma2,
           'INGRESADA',
           p_dnsavvillas,
           p_dnsgranbanco);
      
        p_error   := MSG_INS_OK;
        p_novedad := p_tiponov || '-' || to_char(numNovedad, '0000000');
      
        sp_log(p_usuario,
               'i_Novterceros',
               p_idmunicipio || '-' || p_nit_t || '-' || p_nombre || '-' ||
               p_idbanco || '-' || p_tipocuenta || '-' || p_cuenta || '-' ||
               p_base_s || '-' || p_base_p || '-' || p_ind_base || '-' ||
               p_num_tercero || '-' || p_tiponov || '-' || w_fecha_act || '-' ||
               p_firma1 || '-' || p_firma2);
        commit;
      
        sp_envionotificacion(gruporecibe => 4,
                             grupocopia  => -1,
                             asunto      => 'Notificaci¿n de Novedad Tercero:  ' ||
                                            p_novedad,
                             mensaje     => 'Se ha creado una novedad financiera de Tercero. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                            p_novedad || ' . Muchas gracias',
                             p_usuario   => p_usuario);
      
      END IF;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [i_Novterceros] ' || SQLERRM, p_error);
  END i_Novterceros;

  PROCEDURE u_NovtercerosEst(p_tiponov   varchar2,
                             p_numeronov number,
                             p_usuario   varchar2,
                             p_estado    varchar2,
                             p_error     OUT VARCHAR2) is
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        IF p_estado = 'VALIDADA' THEN
          update Novtercero
             set estadonov  = p_estado,
                 usuarioval = p_usuario,
                 fechaval   = sysdate
           where tiponov = p_tiponov
             and numeronov = p_numeronov;
        ELSE
          IF p_estado = 'ANULADA' THEN
            update Novtercero
               set estadonov   = p_estado,
                   usuarioanul = p_usuario,
                   fechaanul   = sysdate
             where tiponov = p_tiponov
               and numeronov = p_numeronov;
          ELSE
            update Novtercero
               set estadonov = p_estado
             where tiponov = p_tiponov
               and numeronov = p_numeronov;
          END IF;
        END IF;
        p_error := 'Actualizaci¿n Exitosa';
      
        sp_log(p_usuario,
               'u_NovtercerosEst',
               p_tiponov || '-' || p_numeronov || '-' || p_estado);
        commit;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_NovtercerosEst] ' || SQLERRM,
            p_error);
  END u_NovtercerosEst;

  PROCEDURE q_Novtercero(p_tiponov       varchar2,
                         p_numeronov     number,
                         p_usuario       varchar2,
                         p_idmunicipio   out varchar2,
                         p_nit_t         out varchar2,
                         p_nombre        out varchar2,
                         p_correoTercero out varchar2,
                         p_idbanco       out varchar2,
                         p_tipocuenta    out varchar2,
                         p_cuenta        out varchar2,
                         p_base_s        out number,
                         p_base_p        out number,
                         p_ind_base      out number,
                         p_num_tercero   out number,
                         p_fechaact      out date,
                         p_firma1        out varchar2,
                         p_firma2        out varchar2,
                         p_estadonov     out varchar2,
                         p_error         OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_nombre        := null;
    p_correoTercero := null;
    p_idbanco       := '00';
    p_tipocuenta    := '000';
    p_cuenta        := null;
    p_base_s        := 0;
    p_base_p        := 0;
    p_ind_base      := 1;
    p_nit_t         := null;
    p_fechaact      := null;
    p_firma1        := '';
    p_firma2        := '';
    p_estadonov     := '';
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select idmunicipio,
               nombre,
               correoTercero,
               idbanco,
               tipocuenta,
               desencriptar(cuenta),
               base_s,
               base_p,
               ind_base,
               num_tercero,
               nit_t,
               fechaact,
               firma1,
               firma2,
               estadonov
        
          into p_idmunicipio,
               p_nombre,
               p_correoTercero,
               p_idbanco,
               p_tipocuenta,
               p_cuenta,
               p_base_s,
               p_base_p,
               p_ind_base,
               p_num_tercero,
               p_nit_t,
               p_fechaact,
               p_firma1,
               p_firma2,
               p_estadonov
          from novtercero
         where tiponov = p_tiponov
           and numeronov = p_numeronov;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_Novtercero] ' || SQLERRM, p_error);
  END q_Novtercero;

  PROCEDURE q_NovterceroE(p_tiponov   varchar2,
                          p_numeronov number,
                          p_usuario   varchar2,
                          p_estadonov out varchar2,
                          p_error     OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_estadonov := '';
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select estadonov
          into p_estadonov
          from novtercero
         where tiponov = p_tiponov
           and numeronov = p_numeronov;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_NovterceroE] ' || SQLERRM, p_error);
  END q_NovterceroE;

  PROCEDURE i_NovDiasDispersion(p_idmunicipio        char,
                                p_idbanco            char,
                                p_dias_dispersion_se number,
                                p_dias_dispersion_sl number,
                                p_dias_dispersion_pe number,
                                p_dias_dispersion_pl number,
                                p_frec_dispersion_se number,
                                p_frec_dispersion_sl number,
                                p_frec_dispersion_pe number,
                                p_frec_dispersion_pl number,
                                p_usuario            varchar2,
                                p_tiponov            varchar2,
                                p_fecha_act_ano      number,
                                p_fecha_act_mes      number,
                                p_fecha_act_dia      number,
                                p_firma1             varchar2,
                                p_firma2             varchar2,
                                p_nombre             varchar2,
                                p_dnsAvvillas        varchar2,
                                p_dnsGranbanco       varchar2,
                                p_error              OUT VARCHAR2,
                                p_novedad            OUT varchar2) AS
    w_fecha_act       date;
    numNovedad        number;
    m_dias_activacion number;
    min_fecha_act     date;
    correo_usuario    varchar(100);
    correo_fcm        varchar(100);
    p_nom             varchar2(250);
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    select mail
      into correo_usuario
      from person
     where idperson = TO_NUMBER(p_usuario);
  
    select substr(correo, 0, 100)
      into correo_fcm
      from fcm
     where nit_fcm = '8000826650';
  
    IF p_tiponov = '06' THEN
      select COUNT(*)
        INTO v_valida
        from dias_dispersion t
       where idmunicipio = p_idmunicipio
         and idbanco = p_idbanco;
    
      IF v_valida <> 0 THEN
        p_error := 'Dias Dispersion Ya existe ';
        return;
      END IF;
    ELSE
      select COUNT(*)
        INTO v_valida
        from dias_dispersion t
       where idmunicipio = p_idmunicipio
         and idbanco = p_idbanco;
    
      IF v_valida = 0 THEN
        p_error := 'Registro dias dispersion no existe';
        return;
      END IF;
    END IF;
  
    select TO_DATE(p_fecha_act_ano || '-' || p_fecha_act_mes || '-' ||
                   p_fecha_act_dia,
                   'YYYY-MM-DD')
      into w_fecha_act
      from DUAL;
  
    select dias_activacion into m_dias_activacion from fcm;
    IF m_dias_activacion is null THEN
      p_error := 'Error en parametrizaci¿n (d¿as activaci¿n)';
      return;
    ELSE
      min_fecha_act := fn_fec_dispersion(sysdate,
                                         m_dias_activacion,
                                         0,
                                         '99999999');
      IF min_fecha_act > w_fecha_act then
        p_error := 'Fecha Activaci¿n Inv¿lida';
        return;
      ELSE
        select seq_novedad.Nextval into numNovedad from dual;
      
        select COUNT(*)
          INTO v_valida
          from municipio
         where idmunicipio = p_idmunicipio;
      
        if (v_valida > 0) then
        
          select nombre
            into p_nom
            from municipio
           where idmunicipio = p_idmunicipio;
        
        end if;
      
        if (v_valida = 0) then
        
          select max(nombre)
            into p_nom
            from novmunicipio
           where idmunicipio = p_idmunicipio;
        
        end if;
      
        insert into novdias_dispersion
          (idmunicipio,
           idbanco,
           dias_dispersion_sl,
           frec_dispersion_sl,
           dias_dispersion_pl,
           frec_dispersion_pl,
           dias_dispersion_se,
           frec_dispersion_se,
           dias_dispersion_pe,
           frec_dispersion_pe,
           tiponov,
           numeronov,
           fechanov,
           usuarionov,
           fechaact,
           firma1,
           firma2,
           estadonov,
           dnsavvillas,
           dnsgranbanco,
           nombre)
        values
          (p_idmunicipio,
           p_idbanco,
           p_dias_dispersion_sl,
           p_frec_dispersion_sl,
           p_dias_dispersion_pl,
           p_frec_dispersion_pl,
           p_dias_dispersion_se,
           p_frec_dispersion_se,
           p_dias_dispersion_pe,
           p_frec_dispersion_pe,
           p_tiponov,
           numNovedad,
           sysdate,
           p_usuario,
           w_fecha_act,
           p_firma1,
           p_firma2,
           'INGRESADA',
           p_dnsAvvillas,
           p_dnsGranbanco,
           p_nom);
      
        select COUNT(*)
          INTO v_valida
          from municipio
         where idmunicipio = p_idmunicipio;
      
        if (v_valida = 0) then
        
          insert into municipio
            (idmunicipio, nombre, iddepartamento)
          values
            (p_idmunicipio, p_nom, substr(p_idmunicipio, 0, 2));
        end if;
      
        sp_log(p_usuario,
               'i_NovDiasDispersion',
               p_idmunicipio || '-' || p_idbanco || '-' ||
               p_dias_dispersion_sl || '-' || p_frec_dispersion_sl || '-' ||
               p_dias_dispersion_pl || '-' || p_frec_dispersion_pl || '-' ||
               p_dias_dispersion_se || '-' || p_frec_dispersion_se || '-' ||
               p_dias_dispersion_pe || '-' || p_frec_dispersion_pe || '-' ||
               p_tiponov || '-' || numNovedad || '-' || p_usuario || '-' ||
               w_fecha_act || '-' || p_firma1 || '-' || p_firma2);
        commit;
      
        p_error   := MSG_INS_OK;
        p_novedad := p_tiponov || '-' || to_char(numNovedad, '0000000');
      
        sp_envionotificacion(gruporecibe => 4,
                             grupocopia  => -1,
                             asunto      => 'Notificaci¿n de Novedad Dias de Dispersion Municipio:  ' ||
                                            p_novedad,
                             mensaje     => 'Se ha creado una novedad financiera de Dias de Dispersion Municipio. Por favor verificar y dar su visto bueno. NUMERO NOVEDAD ' ||
                                            p_novedad || ' . Muchas gracias',
                             p_usuario   => p_usuario);
      
      END IF;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_NovDiasDispersion] ' || SQLERRM,
            p_error);
    
  END i_NovDiasDispersion;

  PROCEDURE q_NovDiasDispersion(p_tiponov            varchar2,
                                p_numeronov          number,
                                p_usuario            varchar2,
                                p_idmunicipio        out char,
                                p_idbanco            out char,
                                p_dias_dispersion_se out number,
                                p_dias_dispersion_sl out number,
                                p_dias_dispersion_pe out number,
                                p_dias_dispersion_pl out number,
                                p_frec_dispersion_se out number,
                                p_frec_dispersion_sl out number,
                                p_frec_dispersion_pe out number,
                                p_frec_dispersion_pl out number,
                                p_fechaact           out date,
                                p_firma1             out varchar2,
                                p_firma2             out varchar2,
                                p_estadonov          out varchar2,
                                p_error              OUT VARCHAR2) IS
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_dias_dispersion_se := 0;
    p_dias_dispersion_sl := 0;
    p_dias_dispersion_pe := 0;
    p_dias_dispersion_pl := 0;
  
    p_frec_dispersion_se := 0;
    p_frec_dispersion_sl := 0;
    p_frec_dispersion_pe := 0;
    p_frec_dispersion_pl := 0;
    p_fechaact           := null;
    p_firma1             := '';
    p_firma2             := '';
    p_estadonov          := '';
    p_idmunicipio        := null;
    p_idbanco            := null;
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select idmunicipio,
               idbanco,
               dias_dispersion_sl,
               frec_dispersion_sl,
               dias_dispersion_pl,
               frec_dispersion_pl,
               dias_dispersion_se,
               frec_dispersion_se,
               dias_dispersion_pe,
               frec_dispersion_pe,
               fechaact,
               firma1,
               firma2,
               estadonov
          into p_idmunicipio,
               p_idbanco,
               p_dias_dispersion_sl,
               p_frec_dispersion_sl,
               p_dias_dispersion_pl,
               p_frec_dispersion_pl,
               p_dias_dispersion_se,
               p_frec_dispersion_se,
               p_dias_dispersion_pe,
               p_frec_dispersion_pe,
               p_fechaact,
               p_firma1,
               p_firma2,
               p_estadonov
          from novdias_dispersion
         where tiponov = p_tiponov
           and numeronov = p_numeronov;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
        
      END;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_NovDiasDispersion] ' || SQLERRM,
            p_error);
    
  END q_NovDiasDispersion;

  PROCEDURE q_NovDiasDispersionE(p_tiponov   varchar2,
                                 p_numeronov number,
                                 p_usuario   varchar2,
                                 p_estadonov out varchar2,
                                 p_error     OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_estadonov := '';
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select estadonov
          into p_estadonov
          from novdias_dispersion
         where tiponov = p_tiponov
           and numeronov = p_numeronov;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_NovDiasDispersionE] ' || SQLERRM,
            p_error);
  END q_NovDiasDispersionE;

  PROCEDURE u_NovDiasDispersionEst(p_tiponov   varchar2,
                                   p_numeronov number,
                                   p_usuario   varchar2,
                                   p_estado    varchar2,
                                   p_error     OUT VARCHAR2) is
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        IF p_estado = 'VALIDADA' THEN
          update NovDias_Dispersion
             set estadonov  = p_estado,
                 usuarioval = p_usuario,
                 fechaval   = sysdate
           where tiponov = p_tiponov
             and numeronov = p_numeronov;
        ELSE
          IF p_estado = 'ANULADA' THEN
            update NovDias_Dispersion
               set estadonov   = p_estado,
                   usuarioanul = p_usuario,
                   fechaanul   = sysdate
             where tiponov = p_tiponov
               and numeronov = p_numeronov;
          ELSE
            update NovDias_Dispersion
               set estadonov = p_estado
             where tiponov = p_tiponov
               and numeronov = p_numeronov;
          END IF;
        END IF;
        p_error := 'Actualizaci¿n Exitosa';
      
        sp_log(p_usuario,
               'u_NovDiasDispersionEst',
               p_tiponov || '-' || p_numeronov || '-' || p_estado);
        commit;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_NovDiasDispersionEst] ' || SQLERRM,
            p_error);
  END u_NovDiasDispersionEst;

  PROCEDURE q_NovValidador_fecha(p_tiponov                  varchar2,
                                 p_numeronov                number,
                                 p_usuario                  varchar2,
                                 p_idmunicipio              out char,
                                 p_idvalidador              out char,
                                 p_indTipo                  out char,
                                 p_fecha_ini                out date,
                                 p_fecha_fin                out date,
                                 p_p_municipio              out number,
                                 p_p_fcm_contravencional    out number,
                                 p_p_conces_contravencional out number,
                                 p_p_acuerdopago            out number,
                                 p_nit_tercero1             out varchar2,
                                 p_base_tercero1            out number,
                                 p_ind_base_tercero1        out number,
                                 p_nit_tercero2             out varchar2,
                                 p_base_tercero2            out number,
                                 p_ind_base_tercero2        out number,
                                 p_fechaact                 out date,
                                 p_firma1                   out varchar2,
                                 p_firma2                   out varchar2,
                                 p_estadonov                out varchar2,
                                 p_error                    OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_idmunicipio              := '';
    p_idvalidador              := '';
    p_indTipo                  := '';
    p_fecha_ini                := null;
    p_fecha_fin                := null;
    p_p_municipio              := 0;
    p_p_fcm_contravencional    := 0;
    p_p_conces_contravencional := 0;
    p_p_acuerdopago            := 0;
    p_nit_tercero1             := '';
    p_base_tercero1            := 0;
    p_ind_base_tercero1        := 1;
    p_nit_tercero2             := '';
    p_base_tercero2            := 0;
    p_ind_base_tercero2        := 1;
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select idmunicipio,
               idvalidador,
               indTipo,
               fecha_ini,
               fecha_fin,
               p_municipio,
               p_fcm_contravencional,
               p_conces_contravencional,
               p_acuerdopago,
               nit_tercero1,
               base_tercero1,
               ind_base_tercero1,
               nit_tercero2,
               base_tercero2,
               ind_base_tercero2,
               fechaact,
               firma1,
               firma2,
               estadonov
          into p_idmunicipio,
               p_idvalidador,
               p_indTipo,
               p_fecha_ini,
               p_fecha_fin,
               p_p_municipio,
               p_p_fcm_contravencional,
               p_p_conces_contravencional,
               p_p_acuerdopago,
               p_nit_tercero1,
               p_base_tercero1,
               p_ind_base_tercero1,
               p_nit_tercero2,
               p_base_tercero2,
               p_ind_base_tercero2,
               p_fechaact,
               p_firma1,
               p_firma2,
               p_estadonov
          from Novvalidador_fecha
         where tiponov = p_tiponov
           and numeronov = p_numeronov;
      
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_NovValidador_fecha] ' || SQLERRM,
            p_error);
  END q_NovValidador_fecha;

  PROCEDURE i_NovValidador_fecha(p_idmunicipio              char,
                                 p_idvalidador              char,
                                 p_indTipo                  char,
                                 p_fecha_ini_ano            number,
                                 p_fecha_ini_mes            number,
                                 p_fecha_ini_dia            number,
                                 p_fecha_fin_ano            number,
                                 p_fecha_fin_mes            number,
                                 p_fecha_fin_dia            number,
                                 p_p_municipio              number,
                                 p_p_fcm_contravencional    number,
                                 p_p_conces_contravencional number,
                                 p_p_acuerdopago            number,
                                 p_nit_tercero1             varchar2,
                                 p_base_tercero1            number,
                                 p_ind_base_tercero1        number,
                                 p_nit_tercero2             varchar2,
                                 p_base_tercero2            number,
                                 p_ind_base_tercero2        number,
                                 p_usuario                  varchar2,
                                 p_tiponov                  varchar2,
                                 p_fecha_act_ano            number,
                                 p_fecha_act_mes            number,
                                 p_fecha_act_dia            number,
                                 p_firma1                   varchar2,
                                 p_firma2                   varchar2,
                                 p_error                    OUT VARCHAR2,
                                 p_novedad                  OUT varchar2) AS
  
    w_fecha_ini       validador_fecha.fecha_ini%TYPE;
    w_fecha_fin       validador_fecha.fecha_ini%TYPE;
    w_operacion       varchar2(250);
    w_fecha_act       date;
    numNovedad        number;
    m_dias_activacion number;
    min_fecha_act     date;
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    select TO_DATE(p_fecha_ini_ano || '-' || p_fecha_ini_mes || '-' ||
                   p_fecha_ini_dia,
                   'YYYY-MM-DD')
      into w_fecha_ini
      from DUAL;
  
    select TO_DATE(p_fecha_fin_ano || '-' || p_fecha_fin_mes || '-' ||
                   p_fecha_fin_dia,
                   'YYYY-MM-DD')
      into w_fecha_fin
      from DUAL;
  
    IF p_tiponov = '09' THEN
      Select COUNT(*)
        INTO v_valida
        from validador_fecha t
       where idMunicipio = p_idmunicipio
         and idValidador = p_idvalidador
         and indTipo = p_indTipo;
      IF v_valida <> 0 THEN
        p_error := 'Validador Ya existente. ';
        return;
      END IF;
    ELSE
      Select COUNT(*)
        INTO v_valida
        from validador_fecha t
       where idMunicipio = p_idmunicipio
         and idValidador = p_idvalidador
         and indTipo = p_indTipo;
      IF v_valida = 0 THEN
        p_error := 'Registro Validador No existe. ';
        return;
      END IF;
    END IF;
  
    select TO_DATE(p_fecha_act_ano || '-' || p_fecha_act_mes || '-' ||
                   p_fecha_act_dia,
                   'YYYY-MM-DD')
      into w_fecha_act
      from DUAL;
  
    select dias_activacion into m_dias_activacion from fcm;
    IF m_dias_activacion is null THEN
      p_error := 'Error en parametrizaci¿n (d¿as activaci¿n)';
      return;
    ELSE
      min_fecha_act := fn_fec_dispersion(sysdate,
                                         m_dias_activacion,
                                         0,
                                         '99999999');
      IF min_fecha_act > w_fecha_act then
        p_error := 'Fecha Activaci¿n Inv¿lida';
        return;
      ELSE
        select seq_novedad.Nextval into numNovedad from dual;
      
        insert into Novvalidador_fecha
          (idmunicipio,
           idValidador,
           indTipo,
           fecha_ini,
           fecha_fin,
           p_municipio,
           p_fcm_contravencional,
           p_conces_contravencional,
           p_acuerdopago,
           nit_tercero1,
           base_tercero1,
           ind_base_tercero1,
           nit_tercero2,
           base_tercero2,
           ind_base_tercero2,
           tiponov,
           numeronov,
           fechanov,
           usuarionov,
           fechaact,
           firma1,
           firma2,
           estadonov)
        values
          (p_idmunicipio,
           p_idValidador,
           p_indTipo,
           w_fecha_ini,
           w_fecha_fin,
           p_p_municipio,
           p_p_fcm_contravencional,
           p_p_conces_contravencional,
           p_p_acuerdopago,
           p_nit_tercero1,
           p_base_tercero1,
           p_ind_base_tercero1,
           p_nit_tercero2,
           p_base_tercero2,
           p_ind_base_tercero2,
           p_tiponov,
           numNovedad,
           sysdate,
           p_usuario,
           w_fecha_act,
           p_firma1,
           p_firma2,
           'INGRESADA');
      
        w_operacion := 'i_NovValidador_fecha';
      
        p_error := MSG_INS_OK;
      
        p_novedad := p_tiponov || '-' || to_char(numNovedad, '0000000');
      
        sp_log(p_usuario,
               w_operacion,
               p_idmunicipio || '-' || p_idValidador || '-' || p_indTipo || '-' ||
               p_fecha_ini_ano || '-' || p_fecha_ini_mes || '-' ||
               p_fecha_ini_dia || '-' || p_fecha_fin_ano || '-' ||
               p_fecha_fin_mes || '-' || p_fecha_fin_dia || '-' ||
               p_p_municipio || '-' || p_p_fcm_contravencional || '-' ||
               p_p_conces_contravencional || '-' || p_p_acuerdopago || '-' ||
               p_nit_tercero1 || '-' || p_base_tercero1 || '-' ||
               p_ind_base_tercero1 || '-' || p_nit_tercero2 || '-' ||
               p_base_tercero2 || '-' || p_ind_base_tercero2);
      
        commit;
      END IF;
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_NovValidador_fecha] ' || SQLERRM,
            p_error);
    
  END i_NovValidador_fecha;

  PROCEDURE q_NovValidador_fechaE(p_tiponov   varchar2,
                                  p_numeronov number,
                                  p_usuario   varchar2,
                                  p_estadonov out varchar2,
                                  p_error     OUT VARCHAR2) is
  BEGIN
  
    -- INICIALIZAR SALIDA
    p_estadonov := '';
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        select estadonov
          into p_estadonov
          from novvalidador_fecha
         where tiponov = p_tiponov
           and numeronov = p_numeronov;
        p_error := 'Consulta Exitosa';
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_NovValidador_fechaE] ' || SQLERRM,
            p_error);
  END q_NovValidador_fechaE;

  PROCEDURE u_NovValidador_fechaEst(p_tiponov   varchar2,
                                    p_numeronov number,
                                    p_usuario   varchar2,
                                    p_estado    varchar2,
                                    p_error     OUT VARCHAR2) is
  
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      BEGIN
        IF p_estado = 'VALIDADA' THEN
          update NovValidador_Fecha
             set estadonov  = p_estado,
                 usuarioval = p_usuario,
                 fechaval   = sysdate
           where tiponov = p_tiponov
             and numeronov = p_numeronov;
        ELSE
          IF p_estado = 'ANULADA' THEN
            update NovValidador_Fecha
               set estadonov   = p_estado,
                   usuarioanul = p_usuario,
                   fechaanul   = sysdate
             where tiponov = p_tiponov
               and numeronov = p_numeronov;
          ELSE
            update NovValidador_Fecha
               set estadonov = p_estado
             where tiponov = p_tiponov
               and numeronov = p_numeronov;
          END IF;
        END IF;
        p_error := 'Actualizaci¿n Exitosa';
      
        sp_log(p_usuario,
               'u_NovValidador_fechaEst',
               p_tiponov || '-' || p_numeronov || '-' || p_estado);
        commit;
      
      EXCEPTION
        WHEN OTHERS THEN
          p_error := 'NO EXISTE REGISTRO';
      END;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [u_NovValidador_fechaEst] ' || SQLERRM,
            p_error);
  END u_NovValidador_fechaEst;

  -- Function and procedure implementations
  PROCEDURE aprobar_reproceso(p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_tipo        varchar2,
                              p_motivo      varchar2,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    w_registros   number;
    descTipo      varchar2(250);
  
  begin
    -- VALIDACIONES
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
    END IF;
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    descTipo := '';
  
    if p_tipo = 'E' then
      begin
      
        descTipo := 'REPROCESO DISTRIBUCION RECAUDO EXTERNO';
      
        delete recaudo_externo_causacion
         where fec_corte_ini = w_fec_cor_ini;
      
        delete recaudo_externo_contabilidad
         where fechadoc = to_char(w_fec_cor_ini, 'yyyyMMdd');
      
        delete recaudo_externo_disp where fec_corte_ini = w_fec_cor_ini;
      
        delete recaudo_externo_liquidacion where fec_corte = w_fec_cor_ini;
      
      end;
    end if;
  
    if p_tipo = 'L' then
      begin
      
        descTipo := 'REPROCESO DISTRIBUCION RECAUDO LOCAL';
      
        delete recaudo_local_causacion where fec_corte_ini = w_fec_cor_ini;
      
        delete recaudo_local_disp where fec_corte = w_fec_cor_ini;
      
        delete recaudo_local_liquidacion where fec_corte = w_fec_cor_ini;
      
        update trxsinidentificar
           set fechaliq = null
         where estadoiden = 'ID'
           and fechaliq = w_fec_cor_ini;
      
      end;
    end if;
  
    if p_tipo = 'T' then
      begin
      
        descTipo := 'REPROCESO TRANFERENCIA RECAUDO EXTERNO';
      
        DELETE recaudo_externo_disp_tot
         where fec_dispersion = w_fec_cor_ini;
      
        update novdevolucion
           set (fechaaplicacion, estadonov) =
               (select null, 'VALIDADA' from dual)
         where estadonov = 'ACTIVADA'
           and fechaaplicacion = w_fec_cor_ini;
      
        update novdevolucion
           set fechacobro = null
         where fechacobro = w_fec_cor_ini;
      
        update novdevolucion
           set fechacobro2 = null
         where fechacobro2 = w_fec_cor_ini;
      
        update recaudo_externo_disp_tot
           set fechareenvio = null
         where indreenvio = 'S'
           and FECHAACTREEENVIO = w_fec_cor_ini
           and fechareenvio = w_fec_cor_ini;
      
      end;
    end if;
  
    if p_tipo = 'B' then
      begin
      
        descTipo := 'REPROCESO ENVIO A BANCO';
      
        update recaudo_externo_disp_tot
           set enviadobanco = 0
         where fec_corte_ini = w_fec_cor_ini;
      end;
    end if;
  
    insert into reproceso
      (fechareg, fecha, tipo, usuario, motivo)
    values
      (sysdate, w_fec_cor_ini, p_tipo, p_usuario, p_motivo);
  
    commit;
  
    sp_envioNotificacion(grupoRecibe => 3,
                         grupoCopia  => 2,
                         asunto      => 'SDF - Notificacion ' || descTipo ||
                                        ' del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd'),
                         mensaje     => 'El sistema SDF informa que autorizo el ' ||
                                        descTipo || ' del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd') ||
                                        '. Por el siguiente motivo ' ||
                                        p_motivo,
                         p_usuario   => p_usuario);
  
    p_error := 'Aprobacion Correcta : ' || p_fec_ini_ano || '-' ||
               p_fec_ini_mes || '-' || p_fec_ini_dia;
  
    sp_log(p_usuario,
           'aprobar_reproceso',
           p_tipo || '-' || p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
           p_fec_ini_dia);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [aprobar_reproceso] ' || SQLERRM,
            p_error);
    
  end aprobar_reproceso;

  PROCEDURE l_recaudo_local(p_fec_ini_ano number,
                            p_fec_ini_mes number,
                            p_fec_ini_dia number,
                            p_fec_fin_ano number,
                            p_fec_fin_mes number,
                            p_fec_fin_dia number,
                            p_banco       varchar2,
                            p_usuario     varchar2,
                            p_error       OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    w_registros   number;
  
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    select count(*)
      into w_registros
      from recaudo_local_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    if (w_registros > 0) then
      p_error := 'Distribucion ya ejecutada. Solicitar reproceso';
      return;
    end if;
  
    sp_liquida_recaudo_local(w_fec_cor_ini,
                             w_fec_cor_fin,
                             p_banco,
                             p_usuario,
                             p_error);
  
    IF not P_ERROR is null THEN
      return;
    end if;
  
    dispersa_recaudo_local(p_fec_ini_ano,
                           p_fec_ini_mes,
                           p_fec_ini_dia,
                           p_fec_fin_ano,
                           p_fec_fin_mes,
                           p_fec_fin_dia,
                           p_banco,
                           p_usuario,
                           p_error);
  
    pk_recloc.contabiliza_recaudo_local(p_fec_ini_ano,
                                        p_fec_ini_mes,
                                        p_fec_ini_dia,
                                        p_fec_fin_ano,
                                        p_fec_fin_mes,
                                        p_fec_fin_dia,
                                        p_banco,
                                        p_usuario,
                                        p_error);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [l_recaudo_local] ' || SQLERRM,
            p_error);
  END l_recaudo_local;

  procedure sp_liquida_recaudo_local(p_fec_ini date,
                                     p_fec_fin date,
                                     p_banco   varchar2,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2) is
    dd dias_dispersion%rowtype;
  
    w_registros   number;
    w_idmunicipio char(8);
    w_idbanco     char(2);
  
  BEGIN
  
    delete recaudo_local_liquidacion
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    insert into recaudo_local_liquidacion
      (idrecaudo_local_liquidacion,
       idbanco,
       cta_recaudo,
       indtipo,
       fec_corte,
       fec_tran,
       oficina_origen,
       valor_efectivo,
       valor_cheque,
       valor_total,
       nit_m,
       idmunicipio,
       iddepartamento,
       indorigen,
       p_consignado)
      select seq_recaudo_local_liquidacion.Nextval,
             idbanco,
             cta_recaudo,
             indtipo,
             fec_corte,
             fec_tran,
             oficina_origen,
             valor_efectivo,
             valor_cheque,
             valor_total,
             nit_m,
             idmunicipio,
             Substr(idmunicipio, 1, 2),
             'REC',
             p_consignado
        from recaudo_local
       where fec_corte >= p_fec_ini
         and fec_corte <= p_fec_fin
         and decode(idbanco, '52', '52', '99') = p_banco;
  
    insert into recaudo_local_liquidacion
      (idrecaudo_local_liquidacion,
       idbanco,
       cta_recaudo,
       indtipo,
       fec_corte,
       fec_tran,
       oficina_origen,
       valor_efectivo,
       valor_cheque,
       valor_total,
       nit_m,
       idmunicipio,
       iddepartamento,
       indorigen,
       p_consignado)
      select SEQ_RECAUDO_LOCAL_LIQUIDACION.Nextval,
             idbanco,
             cta_recaudo,
             indtipo,
             fec_corte,
             fec_tran,
             null, --oficina_origen
             valor_total, --valor_efectivo
             0, --valor_cheque
             valor_total,
             null, --nit_m
             idmunicipio,
             Substr(idmunicipio, 1, 2),
             'AJU',
             p_consignado
        from recaudo_local_ajustes
       where fec_corte >= p_fec_ini
         and fec_corte <= p_fec_fin
         and decode(idbanco, '52', '52', '99') = p_banco;
  
    insert into recaudo_local_liquidacion
      (idrecaudo_local_liquidacion,
       idbanco,
       cta_recaudo,
       indtipo,
       fec_corte,
       fec_tran,
       oficina_origen,
       valor_efectivo,
       valor_cheque,
       valor_total,
       nit_m,
       idmunicipio,
       iddepartamento,
       indorigen,
       p_consignado,
       idrecaudolocal_liquidacion)
      select seq_recaudo_local_liquidacion.Nextval,
             idbanco,
             cuenta,
             indtipoiden,
             p_fec_fin,
             fechatrx,
             oficinaorigen,
             valortrx, --valor_efectivo
             0, -- valor_cheque
             valortrx, -- valor_total
             null, -- nit_m
             idmunicipioiden,
             Substr(idmunicipioiden, 1, 2),
             'IDE',
             p_consignadoiden,
             numsecuenciareg
        from trxsinidentificar
       where estadoiden = 'ID'
         and fechaliq is null
         and idmunicipioiden <> '00000001'
         and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion
       set idrecaudolocal_liquidacion = idrecaudo_local_liquidacion
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and decode(idbanco, '52', '52', '99') = p_banco
       and idrecaudolocal_liquidacion is null;
  
    update recaudo_local_liquidacion l
       set (l.idconcesionario, l.ind_proceso) =
           (select m.idconcesionario, m.indliq_s_local
              from municipio m
             where m.idmunicipio = l.idmunicipio)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and l.indtipo = 'SIMIT'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set (l.idconcesionario, l.ind_proceso) =
           (select m.idconcesionario, m.indliq_p_local
            
              from municipio m
             where m.idmunicipio = l.idmunicipio)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    /* Se elimina porq no se requiere esta validacion para reacaudo local 09/12/15 20:00*/
    -- verifica que todos los municipios esten parametrizados
    select count(*)
      into w_registros
      from recaudo_local_liquidacion
     where idconcesionario is null
       and fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    IF w_registros > 0 THEN
      select idmunicipio
        into w_idMunicipio
        from recaudo_local_liquidacion
       where idconcesionario is null
         and fec_corte >= p_fec_ini
         and fec_corte <= p_fec_fin
         and decode(idbanco, '52', '52', '99') = p_banco
         and rownum = 1;
    
      p_error := 'PROCESO NO EJECUTADO. MUNICIPIO SIN PARAMETRIZAR: ' ||
                 w_idMunicipio;
      RETURN;
    END IF;
    /**/
    update recaudo_local_liquidacion l
       set (l.dias_dispersion, l.frec_dispersion) =
           (select dd.dias_dispersion_sl, dd.frec_dispersion_sl
              from dias_dispersion dd
             where dd.idmunicipio = l.idmunicipio
               and dd.idbanco = l.idbanco)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and l.indtipo = 'SIMIT'
       and ind_proceso = 1
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set (l.dias_dispersion, l.frec_dispersion) =
           (select dd.dias_dispersion_pl, dd.frec_dispersion_pl
              from dias_dispersion dd
             where dd.idmunicipio = l.idmunicipio
               and dd.idbanco = l.idbanco)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and l.indtipo = 'POLCA'
       and ind_proceso = 1
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- verifica que todos los municipios tengas fechas de dispersion
    select count(*)
      into w_registros
      from recaudo_local_liquidacion
     where dias_dispersion is null
       and fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    IF w_registros > 0 THEN
      select idmunicipio, idbanco
        into w_idMunicipio, w_idbanco
        from recaudo_local_liquidacion
       where dias_dispersion is null
         and fec_corte >= p_fec_ini
         and fec_corte <= p_fec_fin
         and ind_proceso = 1
         and rownum = 1
         and decode(idbanco, '52', '52', '99') = p_banco;
    
      p_error := 'PROCESO NO EJECUTADO. MUNICIPIO SIN DIAS DISPERSION: ' ||
                 w_idMunicipio || ' BANCO: ' || w_idbanco;
      RETURN;
    END IF;
  
    -- calcula fecha dispersion avvillas 5 dia habil despues de la quincena
    update recaudo_local_liquidacion l
       set l.fec_dispersion = fn_fec_dispersion(fn_fec_dispersion(l.fec_corte,
                                                                  0,
                                                                  2,
                                                                  p_usuario),
                                                4,
                                                0,
                                                p_usuario)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and decode(idbanco, '52', '52', '99') = p_banco
       and idbanco = '52';
  
    -- calcula fecha dispersion otros bancos a los 20 dias del mes
    update recaudo_local_liquidacion l
       set l.fec_dispersion = fn_fec_dispersion(to_date(to_char(fn_fec_dispersion(l.fec_corte,
                                                                                  0,
                                                                                  3,
                                                                                  p_usuario),
                                                                'yyyymm') || '20',
                                                        'yyyymmdd'),
                                                0,
                                                0,
                                                p_usuario)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and decode(idbanco, '52', '52', '99') = p_banco
       and idbanco <> '52';
  
    update recaudo_local_liquidacion l
       set l.s_valor_0 =
           (select c.comision_recaudo * (1 + (fcm.iva / 100))
              from cta_recaudo_fcm c, fcm
             where l.idbanco = c.idbanco
               and l.cta_recaudo = c.cuenta)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- SIMIT
  
    update recaudo_local_liquidacion l
       set (l.s_valor_1, l.s_valor_2, l.s_valor_3, l.s_valor_4, l.s_valor_5) =
           (select l.valor_total * (p.simit_s / 10),
                   l.valor_total * (p.concesionario_s / 10),
                   l.valor_total * (p.fondo_cob_concesionario_s / 10),
                   l.valor_total * (p.fondo_cob_simit_s / 10),
                   l.valor_total * (p.equilibrio_economico_s / 10)
              from p_dispersion_concesionario p
             where l.idconcesionario = p.idconcesionario)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'SIMIT'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- redondear a dos decimales todos los calculos
    update recaudo_local_liquidacion l
       set l.s_valor_0 = ROUND(l.s_valor_0, 2),
           l.s_valor_1 = ROUND(l.s_valor_1, 2),
           l.s_valor_2 = ROUND(l.s_valor_2, 2),
           l.s_valor_3 = ROUND(l.s_valor_3, 2)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'SIMIT'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- ajustar decimales
    update recaudo_local_liquidacion l
       set l.s_valor_4 = l.valor_total - l.s_valor_1 - l.s_valor_2 -
                         l.s_valor_3
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'SIMIT'
       and l.s_valor_5 = 0
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set l.s_valor_5 = l.valor_total - l.s_valor_1 - l.s_valor_2 -
                         l.s_valor_3
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'SIMIT'
       and l.s_valor_5 <> 0
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- calcular netos
    update recaudo_local_liquidacion l
       set l.s_valor_6 = l.s_valor_2 - l.s_valor_0
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'SIMIT'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- POLCA
    update recaudo_local_liquidacion l
       set (l.p_valor_7,
            l.p_valor_8,
            l.p_valor_9,
            l.p_valor_10,
            l.p_valor_11,
            l.p_valor_12,
            l.p_valor_13,
            l.p_valor_14,
            l.p_valor_15,
            l.p_valor_16,
            l.p_valor_17,
            l.p_valor_18) =
           (select l.valor_total * (p.simit_pm / 55),
                   l.valor_total * (p.concesionario_pm / 55),
                   l.valor_total * (p.fondo_cob_concesionario_pm / 55),
                   l.valor_total * (p.fondo_cob_simit_pm / 55),
                   l.valor_total * (p.equilibrio_economico_pm / 55),
                   l.valor_total * (p.simit_pp / 55),
                   l.valor_total * (p.sevial_pp / 55),
                   l.valor_total * (p.equilibrio_economico_pp / 55),
                   l.valor_total * (p.polca_cp / 55),
                   l.valor_total * (p.fcm_cp / 55),
                   l.valor_total * (p.sevial_cp / 55),
                   l.valor_total * (p.equilibrio_economico_cp / 55)
            
              from p_dispersion_concesionario p, fcm
             where l.idconcesionario = p.idconcesionario)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- ajusta municipios que solo consignan el 10%
    update recaudo_local_liquidacion l
       set (l.p_valor_7,
            l.p_valor_8,
            l.p_valor_9,
            l.p_valor_10,
            l.p_valor_11,
            l.p_valor_12,
            l.p_valor_13,
            l.p_valor_14,
            l.p_valor_15,
            l.p_valor_16,
            l.p_valor_17,
            l.p_valor_18) =
           (select l.valor_total * (p.simit_pm / 10),
                   l.valor_total * (p.concesionario_pm / 10),
                   l.valor_total * (p.fondo_cob_concesionario_pm / 10),
                   l.valor_total * (p.fondo_cob_simit_pm / 10),
                   l.valor_total * (p.equilibrio_economico_pm / 10),
                   l.valor_total * (p.simit_pp / 10),
                   l.valor_total * (p.sevial_pp / 10),
                   l.valor_total * (p.equilibrio_economico_pp / 10),
                   0.0, --l.valor_total * (p.polca_cp / 55),
                   0.0, -- l.valor_total *(p.fcm_cp / 55),
                   0.0, -- l.valor_total *(p.sevial_cp / 55),
                   0.0 --l.valor_total * (p.equilibrio_economico_cp / 55)
              from p_dispersion_concesionario p, fcm
             where l.idconcesionario = p.idconcesionario)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and p_consignado = 10
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- ajusta municipios que solo consignan el 45%
    update recaudo_local_liquidacion l
       set (l.p_valor_7,
            l.p_valor_8,
            l.p_valor_9,
            l.p_valor_10,
            l.p_valor_11,
            l.p_valor_12,
            l.p_valor_13,
            l.p_valor_14,
            l.p_valor_15,
            l.p_valor_16,
            l.p_valor_17,
            l.p_valor_18) =
           (select 0.0, -- l.valor_total * (p.simit_pm / 10),
                   0.0, -- l.valor_total *(p.concesionario_pm / 10) ,
                   0.0, -- l.valor_total *(p.fondo_cob_concesionario_pm / 10),
                   0.0, -- l.valor_total *(p.fondo_cob_simit_pm / 10),
                   0.0, -- l.valor_total *(p.equilibrio_economico_pm / 10),
                   0.0, -- l.valor_total * (p.simit_pp / 10),
                   0.0, -- l.valor_total *(p.sevial_pp / 10),
                   0.0, -- l.valor_total * (p.equilibrio_economico_pp / 10),
                   l.valor_total * (p.polca_cp / 45),
                   l.valor_total * (p.fcm_cp / 45),
                   l.valor_total * (p.sevial_cp / 45),
                   l.valor_total * (p.equilibrio_economico_cp / 45)
              from p_dispersion_concesionario p, fcm
             where l.idconcesionario = p.idconcesionario)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and p_consignado = 45
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- redondear a dos decimales todos los calculos
    update recaudo_local_liquidacion l
       set l.p_valor_7  = ROUND(l.p_valor_7, 2),
           l.p_valor_8  = ROUND(l.p_valor_8, 2),
           l.p_valor_9  = ROUND(l.p_valor_9, 2),
           l.p_valor_10 = ROUND(l.p_valor_10, 2),
           l.p_valor_11 = ROUND(l.p_valor_11, 2),
           l.p_valor_12 = ROUND(l.p_valor_12, 2),
           l.p_valor_13 = ROUND(l.p_valor_13, 2),
           l.p_valor_14 = ROUND(l.p_valor_14, 2),
           l.p_valor_15 = ROUND(l.p_valor_15, 2),
           l.p_valor_16 = ROUND(l.p_valor_16, 2),
           l.p_valor_17 = ROUND(l.p_valor_17, 2),
           l.p_valor_18 = ROUND(l.p_valor_18, 2)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set l.p_valor_9 = l.valor_total - l.p_valor_7 - l.p_valor_8 -
                         l.p_valor_10 - l.p_valor_11 - l.p_valor_12 -
                         l.p_valor_13 - l.p_valor_14 - l.p_valor_15 -
                         l.p_valor_16 - l.p_valor_17 - l.p_valor_18
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set l.p_valor_10 = ROUND((l.p_valor_9 + l.p_valor_10) / 2, 2)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set l.p_valor_9 = l.valor_total - l.p_valor_7 - l.p_valor_8 -
                         l.p_valor_10 - l.p_valor_11 - l.p_valor_12 -
                         l.p_valor_13 - l.p_valor_14 - l.p_valor_15 -
                         l.p_valor_16 - l.p_valor_17 - l.p_valor_18
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set (l.p_valor_19,
            l.p_valor_20,
            l.p_valor_21,
            l.p_valor_22,
            l.p_valor_23) =
           (select l.p_valor_16 * (fcm.iva / 100),
                   l.p_valor_17 * (fcm.iva / 100),
                   l.p_valor_17 * (fcm.retencion_fuente / 100),
                   l.p_valor_17 * (fcm.impuesto_timbre_tercero / 100),
                   (l.p_valor_16 + l.p_valor_17 + l.p_valor_18) *
                   (fcm.impuesto_timbre_fcm / 100)
              from fcm)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- caluclar netos
    update recaudo_local_liquidacion l
       set l.p_valor_24 = l.p_valor_13 + l.p_valor_17 + l.p_valor_20 -
                          l.p_valor_21 - l.p_valor_22,
           l.p_valor_25 = l.p_valor_8 - l.s_valor_0,
           l.p_valor_26 = l.p_valor_16 + l.p_valor_19 + l.p_valor_21 +
                          l.p_valor_22,
           l.p_valor_27 = l.p_valor_7 + l.p_valor_12,
           l.p_valor_28 = l.p_valor_11 + l.p_valor_14 + l.p_valor_18,
           l.p_valor_15 = l.p_valor_15 - l.p_valor_19 - l.p_valor_20
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set l.p_valor_19 = ROUND(l.p_valor_19, 2),
           l.p_valor_20 = ROUND(l.p_valor_20, 2),
           l.p_valor_21 = ROUND(l.p_valor_21, 2),
           l.p_valor_22 = ROUND(l.p_valor_22, 2),
           l.p_valor_23 = ROUND(l.p_valor_23, 2),
           l.p_valor_24 = ROUND(l.p_valor_24, 2),
           l.p_valor_25 = ROUND(l.p_valor_25, 2),
           l.p_valor_26 = ROUND(l.p_valor_26, 2),
           l.p_valor_27 = ROUND(l.p_valor_27, 2),
           l.p_valor_28 = ROUND(l.p_valor_28, 2)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set l.p_valor_9 = l.valor_total - l.p_valor_27 - l.p_valor_10 -
                         l.p_valor_25 - l.p_valor_13 - l.p_valor_17 -
                         l.p_valor_20 - l.p_valor_16 - l.p_valor_19 -
                         l.p_valor_15
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set l.p_valor_10 = ROUND((l.p_valor_9 + l.p_valor_10) / 2, 2)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_liquidacion l
       set l.p_valor_9 = l.valor_total - l.p_valor_27 - l.p_valor_10 -
                         l.p_valor_25 - l.p_valor_13 - l.p_valor_17 -
                         l.p_valor_20 - l.p_valor_16 - l.p_valor_19 -
                         l.p_valor_15
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and l.indtipo = 'POLCA'
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- actualizar diferencias en el Fon Cobertura de 0.02 para ajustar
    update recaudo_local_liquidacion l
       set l.s_valor_3 = l.s_valor_3 - 0.01,
           l.s_valor_4 = l.s_valor_4 + 0.01
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and (l.s_valor_3 - l.s_valor_4) = 0.02
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- actualizar datos del proceso
    update recaudo_local_liquidacion l
       set l.fecha_proceso = sysdate, l.usuario_proceso = p_usuario
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- actualiza nit BANCO Concesionario
    update recaudo_local_liquidacion l
       set l.nit_concesionario =
           (select nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = l.idconcesionario
               and c.idconcepto = 1
               and c.idbancorec = l.idbanco)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    -- actualiza nit fondo cobertura concesioanrio
    update recaudo_local_liquidacion l
       set l.nit_fondo =
           (select nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = l.idconcesionario
               and c.idconcepto = 2
               and c.idbancorec = l.idbanco)
     where fec_corte >= p_fec_ini
       and fec_corte <= p_fec_fin
       and ind_proceso = 1
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    update trxsinidentificar
       set fechaliq = p_fec_fin
     where estadoiden = 'ID'
       and fechaliq is null
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [sp_liquida_recaudo_local] ' || SQLERRM,
            p_error);
  end sp_liquida_recaudo_local;

  PROCEDURE carga_recaudo_externo(p_feccor_ini_ano number,
                                  p_feccor_ini_mes number,
                                  p_feccor_ini_dia number,
                                  p_feccor_fin_ano number,
                                  p_feccor_fin_mes number,
                                  p_feccor_fin_dia number,
                                  p_usuario        varchar2,
                                  p_error          OUT VARCHAR2) AS
  
    w_fec_cor_ini     recaudo_externo.fec_corte%TYPE;
    w_fec_cor_fin     recaudo_externo.fec_corte%TYPE;
    w_fecha           recaudo_externo.fec_corte%TYPE;
    w_registros       number;
    w_num_liquidacion recaudo_externo.Num_Liquidacion%TYPE;
  
  BEGIN
  
    -- pendiente validador fecha, indfecha2002, cruce de informacion
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
    IF NOT P_ERROR is null THEN
      RETURN;
    END IF;
  
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_feccor_fin_ano || '-' || p_feccor_fin_mes || '-' ||
                   p_feccor_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    -- Cambio: Abril/30
    -- Validar proceso de liquidacion antes de cargar nuevamente
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_externo_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin;
  
    IF w_registros > 0 THEN
      p_error := 'PROCESO NO EJECUTADO. PROCESO YA LIQUIDADO. SOLICITAR AUTORIZACION';
      RETURN;
    END IF;
  
    -- elimina liquidaciones y cargues anteriores
    delete recaudo_externo_liquidacion
     where id_recaudo_externo in
           (select id_recaudo_externo
              from recaudo_externo
             where fec_corte >= w_fec_cor_ini
               and fec_corte <= w_fec_cor_fin);
  
    delete recaudo_externo
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin;
  
    commit;
    -- inserta recaudo externo cargado por simit
    insert into recaudo_externo
      (id_recaudo_externo,
       idbanco,
       cta_recaudo,
       fec_corte,
       fec_tran,
       valor_efectivo,
       valor_cheque,
       valor_total,
       num_liquidacion,
       identificacion,
       idmunicipio,
       valor_adicional,
       iddepartamento,
       validador_fecha,
       indfecha2002)
      SELECT SEQ_RECAUDO_EXTERNO.NEXTVAL,
             SUBSTR(b.cod_banco, 1, 2) cod_banco,
             SUBSTR(b.cuenta, 1, 12) cuenta,
             trunc(a.fecha_contable),
             trunc(a.fecha_transaccion),
             a.total_recaudo,
             0,
             a.total_recaudo,
             SUBSTR(a.numero_referencia, 1, 10) numero_referencia,
             a.identificacion,
             SUBSTR(a.id_secretaria_origen, 1, 8) id_secretaria_origen,
             a.valor_adicional,
             SUBSTR(a.id_secretaria_origen, 1, 2) iddepartamento,
             SUBSTR(a.validador_fecha, 1, 3),
             a.indicador_fecha
      /*      FROM quipux.simit_recaudo_detalle a, quipux.simit_recaudo b */
        FROM quipux.recaudo_det_proyecta a, quipux.recaudo_proyecta b
      
       where a.id_procedencia_pago in ('2', '11')
         and a.consecutivo_recaudo = b.consecutivo_recaudo
         and b.cod_banco in (50, 51, 52)
            /*and a.codigo_banco in (50,52)*/
         and a.fecha_contable >= w_fec_cor_ini
         and a.fecha_contable <= w_fec_cor_fin;
    w_registros := SQL%ROWCOUNT;
  
    insert into recaudo_externo
      (id_recaudo_externo,
       idbanco,
       cta_recaudo,
       fec_corte,
       fec_tran,
       valor_efectivo,
       valor_cheque,
       valor_total,
       num_liquidacion,
       identificacion,
       idmunicipio,
       valor_adicional,
       iddepartamento,
       validador_fecha,
       indfecha2002)
      SELECT SEQ_RECAUDO_EXTERNO.NEXTVAL,
             SUBSTR(b.cod_banco, 1, 2) cod_banco,
             SUBSTR(b.cuenta, 1, 12) cuenta,
             trunc(c.fecha_carga),
             trunc(a.fecha_transaccion),
             a.total_recaudo,
             0,
             a.total_recaudo,
             SUBSTR(a.numero_referencia, 1, 10) numero_referencia,
             a.identificacion,
             SUBSTR(a.id_secretaria_origen, 1, 8) id_secretaria_origen,
             a.valor_adicional,
             SUBSTR(a.id_secretaria_origen, 1, 2) iddepartamento,
             SUBSTR(a.validador_fecha, 1, 3),
             a.indicador_fecha
      /*       FROM quipux.simit_recaudo_detalle a,
                  quipux.simit_recaudo         b,
      */
        FROM quipux.recaudo_det_proyecta a,
             quipux.recaudo_proyecta     b,
             
             quipux.simit_carga_informacion c
       where a.id_procedencia_pago = '2'
         and a.consecutivo_recaudo = b.consecutivo_recaudo
         and b.cod_banco not in (50, 51, 52)
            /*and a.codigo_banco not in (50,52)*/
         and b.id_proceso_carga = c.id_proceso_carga
         and c.id_tipo_archivo in (4, 8)
         and trunc(c.fecha_carga) >= w_fec_cor_ini
         and trunc(c.fecha_carga) <= w_fec_cor_fin;
    w_registros := SQL%ROWCOUNT;
  
    commit;
  
    select count(*)
      into w_registros
      from recaudo_externo
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and valor_total < valor_adicional;
  
    IF w_registros > 0 THEN
    
      select num_liquidacion
        into w_num_liquidacion
        from recaudo_externo
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and valor_total < valor_adicional
         and rownum = 1;
    
      p_error := 'PROCESO NO EJECUTADO. LIQUIDACION ERRADA VTOTAL < VADICIONAL: ' ||
                 w_num_liquidacion;
    
      delete recaudo_externo
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
    
      commit;
    
      return;
    
    END IF;
  
    -- INICIO Ajuste Hugo C 10/10/13
  
    SELECT COUNT(*)
      INTO w_registros
      FROM (select NUM_LIQUIDACION
              from recaudo_externo
             where fec_corte >= w_fec_cor_ini
               and fec_corte <= w_fec_cor_fin
             GROUP BY NUM_LIQUIDACION
            HAVING count(*) > 1);
  
    IF w_registros > 0 THEN
    
      SELECT NUM_LIQUIDACION
        INTO w_num_liquidacion
        FROM (select NUM_LIQUIDACION
                from recaudo_externo
               where fec_corte >= w_fec_cor_ini
                 and fec_corte <= w_fec_cor_fin
               GROUP BY NUM_LIQUIDACION
              HAVING count(*) > 1)
       WHERE ROWNUM = 1;
    
      p_error := 'PROCESO NO EJECUTADO.LIQUIDACION DUPLICADA EN SIMIT: ' ||
                 w_num_liquidacion;
    
      delete recaudo_externo
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
    
      commit;
    
      return;
    
    END IF;
  
    -- FIN Ajuste Hugo C 10/10/13
  
    -- actualiza cuenta de avvillas para completar dato¿  update recaudo_externo
  
    update recaudo_externo
       set cta_recaudo = '0' || cta_recaudo
     where substr(cta_recaudo, 1, 2) = '86'
       and fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin;
  
    -- actualiza cuenta de bancafe para completar dato
    /*    update recaudo_externo
          set cta_recaudo = '00' || cta_recaudo
        where substr(cta_recaudo, 1, 2) = '18'
          and fec_corte >= w_fec_cor_ini
          and fec_corte <= w_fec_cor_fin;
    */
  
    -- actualiza banco basado en la cuenta de recaudo
    update recaudo_externo r
       set r.idbanco =
           (select max(c.idbanco)
              from cta_recaudo_concesionario c
             where c.cuenta = r.cta_recaudo)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin;
  
    -- actualizar fecha de corte avvillas cuando es fin de mes sab, dom o festivo a d
    -- dia habil anterior
    /*
        update recaudo_externo
        set fec_corte = fn_fec_dispersion(fec_corte,-1,0,p_usuario)
        where idBanco = '52'
           and fec_corte >= w_fec_cor_ini
           and fec_corte <= w_fec_cor_fin
           and fec_corte <> fn_fec_dispersion(fec_corte,0,0,p_usuario);
    */
  
    -- actualiza validador si esta vacio
    update recaudo_externo
       set validador_fecha = '000'
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and validador_fecha is null;
  
    -- actualiza validador si esta vacio
    update recaudo_externo
       set indfecha2002 = '0'
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and indfecha2002 is null;
  
    -- actualiza datos basado en el comparendo
    /*    update recaudo_externo l
       set (l.fec_comparendo, l.tipo_identificacion, l.nombre_infractor, l.apellido_infractor, l.num_comparendo) = (select c.fecha             fec_comparendo,
                                                                                                                           c.id_tipo_documento tipo_identificacion,
                                                                                                                           c.nombre            nombre_infractor,
                                                                                                                           c.apellido          apellido_infractor,
                                                                                                                           c.orden_comparendo  num_comparendo
    
                                                                                                                      from quipux.simit_det_liquida_comparendo a,
                                                                                                                           quipux.simit_comparendo             c
                                                                                                                     where a.cod_liquidacion =
                                                                                                                           substr(l.num_liquidacion,1,9)
                                                                                                                       and a.orden_comparendo =
                                                                                                                           c.orden_comparendo
                                                                                                                       and c.id_secretaria =
                                                                                                                           l.idmunicipio
                                                                                                                       and c.documento_identidad =
                                                                                                                           l.identificacion
                                                                                                                       and a.id_tipo_documento = c.id_tipo_documento   )
    
     where l.fec_corte >= w_fec_cor_ini
       and l.fec_corte <= w_fec_cor_fin;
    
    
    -- actualiza datos basado en la resolucion
    
       update recaudo_externo l
          set (l.num_resolucion, l.fec_resolucion, l.tipo_identificacion, l.nombre_infractor, l.apellido_infractor, l.fec_comparendo, l.num_comparendo) = (select c.nro_resolucion   num_resolucion,
                                                                                                                                                                  c.fecha_resolucion fec_resolucion,
                                                                                                                                                                  c.id_tipo_doc      tipo_identificacion,
                                                                                                                                                                  c.nombres          nombre_infractor,
                                                                                                                                                                  c.apellidos        apellido_infractor,
                                                                                                                                                                  c.fecha_comparendo fec_comparendo,
                                                                                                                                                                  c.nro_comparendo   num_comparendo
                                                                                                                                                             from quipux.simit_detalle_liquida b,
                                                                                                                                                                  quipux.simit_resolucion      c
                                                                                                                                                            where l.num_liquidacion =
                                                                                                                                                                  b.cod_liquidacion
                                                                                                                                                              and b.consecutivo_cartera =
                                                                                                                                                                  c.consecutivo_cartera
    
                                                                                                                                                           )
        where l.fec_corte >= w_fec_cor_ini
          and l.fec_corte <= w_fec_cor_fin;
    */
  
    w_fecha := w_fec_cor_ini;
    while (w_fecha <= w_fec_cor_fin) loop
      sp_paralelo_temp(p_fecha => w_fecha);
      w_fecha := w_fecha + 1;
    end loop;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_externo
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin;
    commit;
  
    p_error := 'Recaudo Externo Cargado exitosamente. Registros: ' ||
               w_registros;
  
    sp_log(p_usuario,
           'Carga Recaudo Externo',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia || '-' || p_feccor_fin_ano || '-' ||
           p_feccor_fin_mes || '-' || p_feccor_fin_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [carga_recaudo_externo] ' || SQLERRM,
            p_error);
    
  END carga_recaudo_externo;

  PROCEDURE transferir_recaudo_externo(p_fec_ini_ano number,
                                       p_fec_ini_mes number,
                                       p_fec_ini_dia number,
                                       p_usuario     varchar2,
                                       p_error       OUT VARCHAR2) as
  
    w_fec_trf_ini date;
    w_registros   number;
    p_ajuste      number;
  
  begin
    -- VALIDACIONES
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
    END IF;
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_trf_ini
      from DUAL;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_externo_disp_tot
     where fec_dispersion = w_fec_trf_ini;
  
    IF w_registros > 0 THEN
      p_error := 'PROCESO NO EJECUTADO. PROCESO YA TRANSFERIDO. SOLICITAR AUTORIZACION';
      RETURN;
    END IF;
  
    insert into recaudo_externo_disp_tot
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       des_idbanco,
       des_tipocuenta,
       des_cuenta,
       des_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso,
       valor,
       id_concesionario_pro,
       idmunicipio,
       vlrdisp)
      select w_fec_trf_ini,
             w_fec_trf_ini,
             w_fec_trf_ini,
             id_concesionario_liq,
             orden,
             concepto,
             ori_idbanco,
             ori_tipocuenta,
             ori_cuenta,
             ori_nit,
             des_idbanco,
             des_tipocuenta,
             des_cuenta,
             des_nit,
             indtipo,
             p_usuario,
             sysdate,
             sum(valor),
             id_concesionario_pro,
             idmunicipio,
             sum(valor)
        from recaudo_externo_disp
       where fec_dispersion = w_fec_trf_ini
       group by fec_dispersion,
                id_concesionario_liq,
                orden,
                concepto,
                ori_idbanco,
                ori_tipocuenta,
                ori_cuenta,
                ori_nit,
                des_idbanco,
                des_tipocuenta,
                des_cuenta,
                des_nit,
                indtipo,
                id_concesionario_pro,
                idmunicipio;
  
    pk_novdev.aplicaNovedadesDevolucion(w_fec_trf_ini);
  
    update recaudo_externo_disp_tot
       set id_concesionario_pro = '00'
     where fec_corte_ini = w_fec_trf_ini
       and id_concesionario_pro is null;
  
    update recaudo_externo_disp_tot
       set idmunicipio = '00000000'
     where fec_corte_ini = w_fec_trf_ini
       and idmunicipio is null;
  
    update recaudo_externo_disp_tot
       set referenciatrf = seq_transferencia.nextval
     where fec_corte_ini = w_fec_trf_ini;
  
    update recaudo_externo_disp_tot
       set enviadobanco = 0
     where fec_corte_ini = w_fec_trf_ini;
  
    update recaudo_externo_disp_tot
       set valor = vlrDisp
     where fec_corte_ini = w_fec_trf_ini
       and orden < 30;
  
    commit;
  
    PK_CONTA_EXT.contabiliza_pago_externo(p_fec_ini_ano,
                                          p_fec_ini_mes,
                                          p_fec_ini_dia,
                                          p_usuario,
                                          p_error);
  
    -- inserta reeenvios de devoluciones ach aprobadas
    insert into recaudo_externo_disp_tot
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       des_idbanco,
       des_tipocuenta,
       des_cuenta,
       des_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso,
       valor,
       deb_cta_con,
       deb_cen_cos,
       deb_nit_ter,
       cre_cta_con,
       cre_cen_cos,
       cre_nit_ter,
       concepto_con,
       id_concesionario_pro,
       idmunicipio,
       enviadobanco,
       referenciatrf,
       estadotrf,
       fechaenvio,
       fechaconfirmada,
       fechadevolucion,
       motivodevolucion,
       codigodevolucion,
       fechaenvioach,
       vlrdisp,
       fechareenvio,
       indreenvio,
       des_idbancorev,
       des_tipocuentarev,
       des_cuentarev,
       des_nitrev,
       referenciatrfori)
      select w_fec_trf_ini,
             w_fec_trf_ini,
             w_fec_trf_ini,
             id_concesionario_liq,
             orden,
             'REENV-' || concepto,
             ori_idbanco,
             ori_tipocuenta,
             ori_cuenta,
             ori_nit,
             des_idbancorev,
             des_tipocuentarev,
             des_cuentarev,
             des_nitrev,
             indtipo,
             p_usuario,
             sysdate,
             valor,
             deb_cta_con,
             deb_cen_cos,
             deb_nit_ter,
             cre_cta_con,
             cre_cen_cos,
             cre_nit_ter,
             concepto_con,
             id_concesionario_pro,
             idmunicipio,
             0,
             seq_transferencia.nextval,
             '',
             null,
             null,
             null,
             '',
             '',
             null,
             valor,
             null,
             '',
             '',
             '',
             '',
             '',
             referenciatrf
        from recaudo_externo_disp_tot
       where indreenvio = 'S'
         and FECHAACTREEENVIO = w_fec_trf_ini
         and fechareenvio is null;
  
    commit;
  
    -- contabiliza reeenvios de devoluciones ach
    pk_devolach.contabiliza_reenvio_ach(p_fec_ini_ano,
                                        p_fec_ini_mes,
                                        p_fec_ini_dia,
                                        p_usuario,
                                        p_error);
  
    update recaudo_externo_disp_tot
       set fechareenvio = w_fec_trf_ini
     where indreenvio = 'S'
       and FECHAACTREEENVIO = w_fec_trf_ini
       and fechareenvio is null;
  
    IF not P_ERROR is null THEN
      delete recaudo_externo_disp_tot where fec_dispersion = w_fec_trf_ini;
      commit;
    
      return;
    END IF;
  
    select max(importe)
      into p_ajuste
      from recaudo_externo_contabilidad
     where textocabezera2 = 'AJUSTE PESOS'
       and fechadoc = to_char(w_fec_trf_ini, 'ddMMyyyy')
       and tipocontable = 'PAG';
  
    PK_NOVDEV.contabiliza_devolucion_externo(p_fec_ini_ano,
                                             p_fec_ini_mes,
                                             p_fec_ini_dia,
                                             p_usuario,
                                             p_error);
  
    IF not P_ERROR is null THEN
      delete recaudo_externo_disp_tot where fec_dispersion = w_fec_trf_ini;
      commit;
    
      return;
    END IF;
  
    -- confirma transferencias ach avvillas pasados 3 dias habiles
    update recaudo_externo_disp_tot r
       set r.estadotrf = 'EXI', r.fechaconfirmada = sysdate
     where --r.ori_idbanco = '52'
    --and r.des_idbanco <> '52'
     (r.estadotrf = 'ENV' or r.estadotrf is null)
    --and r.enviadobanco = 1
     and r.fec_dispersion <= fn_fec_dispersion(w_fec_trf_ini, -3, 0, p_usuario);
  
    -- obtiene cantidad de registros procesados
    select count(*)
      into w_registros
      from recaudo_externo_disp_tot
     where fec_dispersion = w_fec_trf_ini;
  
    p_error := 'Transferencia generada OK. Registros: ' || w_registros || ': ' ||
               to_char(w_fec_trf_ini, 'yyyy-mm-dd');
  
    if (p_ajuste > 5000) then
      p_error := 'Recuado Externo Liquidado OK. POSIBLE ERROR DE CONTABILIDAD. FAVOR VERIFICAR.Registros: ' ||
                 w_registros || ': ' ||
                 to_char(w_fec_trf_ini, 'yyyy-mm-dd');
    end if;
  
    sp_envioNotificacion(grupoRecibe => 3,
                         grupoCopia  => 2,
                         asunto      => 'SDF - Proceso de transferencia del dia ' ||
                                        to_char(w_fec_trf_ini, 'yyyy-MM-dd'),
                         mensaje     => 'El sistema SDF informa que se ha ejecutado el proceso de transferencia, del dia ' ||
                                        to_char(w_fec_trf_ini, 'yyyy-MM-dd') ||
                                        '. Favor verificar y dar su visto bueno. Se genero el siguiente mensaje en el proceso de transferencia ' ||
                                        p_error,
                         p_usuario   => p_usuario);
  
    sp_log(p_usuario,
           'transferir_recaudo_externo',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia);
  
    commit;
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [transferir_recaudo_externo] ' || SQLERRM,
            p_error);
    
  END transferir_recaudo_externo;

  PROCEDURE liquida_recaudo_externo(p_feccor_ini_ano number,
                                    p_feccor_ini_mes number,
                                    p_feccor_ini_dia number,
                                    p_usuario        varchar2,
                                    p_error          OUT VARCHAR2) AS
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    w_registros   number;
    w_registros1  number;
  
    w_idMunicipio char(8);
    w_fec_corte   date;
    w_cta_recaudo varchar2(500);
    w_mensaje     varchar2(500);
    p_ajuste      number;
  
  BEGIN
  
    -- VALIDACIONES
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
      IF not P_ERROR is null THEN
        return;
      END IF;
    END IF;
  
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_externo_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin;
  
    IF w_registros > 0 THEN
      p_error := 'PROCESO NO EJECUTADO. PROCESO YA LIQUIDADO. SOLICITAR AUTORIZACION';
      RETURN;
    END IF;
  
    -- obtiene cantidad de registros actualizados
    /*
    select count(*)
      into w_registros
      from recaudo_externo_disp_tot
     where fec_dispersion > w_fec_cor_ini;
    
    IF w_registros > 0 THEN
      p_error := 'SE HA REALIZADO YA UN PROCESO DE TRANSFERENCIA SUPERIOR A LA FECHA DE LIQUIDACION. SOLICITAR APROBACION ';
      RETURN;
    END IF;
    
    */
  
    aplicaNovedadesMunicipio(w_fec_cor_fin);
    aplicaNovedadesDiasMunicipio(w_fec_cor_fin);
    aplicaNovedadesTercero(w_fec_cor_fin);
  
    --aplicaNovedadesTercero(w_fec_cor_fin);
    -- elimina liquidaciones anteriores
    delete recaudo_externo_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin;
  
    -- inserta liquidaciones a procesar
    insert into recaudo_externo_liquidacion
      (id_recaudo_externo_liquidacion,
       id_recaudo_externo,
       idmunicipio,
       fec_corte,
       usuario_proceso,
       fecha_proceso,
       num_liquidacion,
       id_concesionario_liq,
       indtipo,
       idbanco,
       valor_total,
       valor_adicional,
       validador_fecha,
       indfecha2002,
       cta_recaudo,
       ind_base_ter1,
       ind_base_ter2,
       ind_base_ter3,
       ind_base_ter4,
       por_base_ter1,
       por_base_ter2,
       por_base_ter3,
       por_base_ter4)
      select seq_recaudo_externo_liq.nextval,
             id_recaudo_externo,
             idmunicipio,
             fec_corte,
             p_usuario,
             sysdate,
             num_liquidacion,
             '0' || SUBSTR(num_liquidacion, 9, 1), -- concesionario liquidador
             decode(SUBSTR(num_liquidacion, 8, 1), '1', 'POLCA', 'SIMIT'), -- tipo comparendo
             idbanco,
             valor_total,
             valor_adicional,
             validador_fecha,
             indfecha2002,
             cta_recaudo,
             0, -- ind_base_ter1,
             0, -- ind_base_ter2,
             0, -- ind_base_ter3,
             0, -- ind_base_ter4,
             0, -- por_base_ter1,
             0, -- por_base_ter2,
             0, -- por_base_ter3,
             0 --por_base_ter4
        from recaudo_externo
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
  
    -- obtiene concsionario propietario, indicador de proceso y retroactividad
    update recaudo_externo_liquidacion a
       set (a.id_concesionario_pro, a.ind_proceso, a.indretroactividad) =
           (select m.idconcesionario,
                   (case
                     when a.indtipo = 'SIMIT' then
                      m.indliq_s_ext
                     else
                      m.indliq_p_ext
                   end),
                   m.indretroactividad
              from municipio m
             where m.idmunicipio = a.idmunicipio)
     where a.fec_corte >= w_fec_cor_ini
       and a.fec_corte <= w_fec_cor_fin;
  
    -- verifica que todos los municipios esten parametrizados
  
    select count(*)
      into w_registros
      from recaudo_externo_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and id_concesionario_pro is null;
  
    IF w_registros > 0 THEN
      select idMunicipio
        into w_idMunicipio
        from recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and id_concesionario_pro is null
         and rownum = 1;
    
      delete recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
    
      commit;
    
      p_error := 'PROCESO NO EJECUTADO. MUNICIPIO SIN PARAMETRIZAR: ' ||
                 w_idMunicipio;
      RETURN;
    END IF;
  
    -- actualizar informacion de tercero 1
    update recaudo_externo_liquidacion a
       set (ind_base_ter1, por_base_ter1, nom_ter1) =
           (select ind_base,
                   (case
                     when a.indtipo = 'SIMIT' then
                      base_s
                     else
                      base_p
                   end),
                   nombre
              from tercero t
             where a.idmunicipio = t.idmunicipio
               and num_tercero = 1)
     where a.fec_corte >= w_fec_cor_ini
       and a.fec_corte <= w_fec_cor_fin;
  
    -- actualizar informacion de tercero 2
    update recaudo_externo_liquidacion a
       set (ind_base_ter2, por_base_ter2, nom_ter2) =
           (select ind_base,
                   (case
                     when a.indtipo = 'SIMIT' then
                      base_s
                     else
                      base_p
                   end),
                   nombre
              from tercero t
             where a.idmunicipio = t.idmunicipio
               and num_tercero = 2)
     where a.fec_corte >= w_fec_cor_ini
       and a.fec_corte <= w_fec_cor_fin;
  
    -- actualizar informacion de tercero 3
  
    update recaudo_externo_liquidacion a
       set (ind_base_ter3, por_base_ter3, nom_ter3) =
           (select ind_base,
                   (case
                     when a.indtipo = 'SIMIT' then
                      base_s
                     else
                      base_p
                   end),
                   nombre
              from tercero t
             where a.idmunicipio = t.idmunicipio
               and num_tercero = 3)
     where a.fec_corte >= w_fec_cor_ini
       and a.fec_corte <= w_fec_cor_fin;
  
    -- actualizar informacion de tercero 4
  
    update recaudo_externo_liquidacion a
       set (ind_base_ter4, por_base_ter4, nom_ter4) =
           (select ind_base,
                   (case
                     when a.indtipo = 'SIMIT' then
                      base_s
                     else
                      base_p
                   end),
                   nombre
              from tercero t
             where a.idmunicipio = t.idmunicipio
               and num_tercero = 4)
     where a.fec_corte >= w_fec_cor_ini
       and a.fec_corte <= w_fec_cor_fin;
  
    -- verificar datos vacios de terceros
    update recaudo_externo_liquidacion a
       set (a.ind_base_ter1, a.por_base_ter1, a.nom_ter1) =
           (select 0, 0, '' from dual)
     where a.fec_corte >= w_fec_cor_ini
       and a.fec_corte <= w_fec_cor_fin
       and a.ind_proceso = 1
       and a.ind_base_ter1 is null;
  
    update recaudo_externo_liquidacion a
       set (a.ind_base_ter2, a.por_base_ter2, a.nom_ter2) =
           (select 0, 0, '' from dual)
     where a.fec_corte >= w_fec_cor_ini
       and a.fec_corte <= w_fec_cor_fin
       and a.ind_proceso = 1
       and a.ind_base_ter2 is null;
  
    update recaudo_externo_liquidacion a
       set (a.ind_base_ter3, a.por_base_ter3, a.nom_ter3) =
           (select 0, 0, '' from dual)
     where a.fec_corte >= w_fec_cor_ini
       and a.fec_corte <= w_fec_cor_fin
       and a.ind_proceso = 1
       and a.ind_base_ter3 is null;
  
    update recaudo_externo_liquidacion a
       set (a.ind_base_ter4, a.por_base_ter4, a.nom_ter4) =
           (select 0, 0, '' from dual)
     where a.fec_corte >= w_fec_cor_ini
       and a.fec_corte <= w_fec_cor_fin
       and a.ind_proceso = 1
       and a.ind_base_ter4 is null;
  
    -- obtiene fecha de dispersion
    update recaudo_externo_liquidacion l
       set (l.dias_dispersion, l.frec_dispersion) =
           (select (case
                     when l.indtipo = 'SIMIT' then
                      dd.dias_dispersion_se
                     else
                      dd.dias_dispersion_pe
                   end),
                   (case
                     when l.indtipo = 'SIMIT' then
                      dd.frec_dispersion_se
                     else
                      dd.frec_dispersion_pe
                   end)
              from dias_dispersion dd
             where dd.idmunicipio = l.idmunicipio
               and dd.idbanco = l.idbanco)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1;
  
    -- verifica que todos los municipios tengan fecha dispersion
    select count(*)
      into w_registros
      from recaudo_externo_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and dias_dispersion is null
       and ind_proceso = 1;
  
    IF w_registros > 0 THEN
      select a.idMunicipio || ' ' || b.nombre || ' Banco: ' || a.idbanco
        into w_mensaje
        from recaudo_externo_liquidacion a, municipio b
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and a.dias_dispersion is null
         and a.idmunicipio = b.idmunicipio
         and a.ind_proceso = 1
         and rownum = 1;
    
      delete recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
    
      commit;
    
      p_error := 'PROCESO NO EJECUTADO. MUNICIPIO SIN DIAS DE DISPERSION: ' ||
                 w_mensaje;
      RETURN;
    END IF;
  
    update recaudo_externo_liquidacion l
       set l.fec_dispersion = fn_fec_dispersion(l.fec_corte,
                                                l.dias_dispersion,
                                                l.frec_dispersion,
                                                p_usuario)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1;
  
    -- actualiza salario minimo
    update recaudo_externo_liquidacion l
       set smdlv =
           (select valor
              from salario_minimo
             where anho = to_char(l.fec_corte, 'yyyy'))
     where l.fec_corte >= w_fec_cor_ini
       and l.fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1;
  
    -- verifica que todos los recaudos tengan salario minimo
    select count(*)
      into w_registros
      from recaudo_externo_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and smdlv is null
       and ind_proceso = 1;
  
    IF w_registros > 0 THEN
      select to_char(fec_corte, 'yyyy')
        into w_mensaje
        from recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and smdlv is null
         and ind_proceso = 1
         and rownum = 1;
    
      delete recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
    
      commit;
    
      p_error := 'PROCESO NO EJECUTADO. FECHA CORTE SIN SALARIO MINIMO: ' ||
                 w_mensaje;
      RETURN;
    END IF;
  
    -- calcular comision de recaudo
    update recaudo_externo_liquidacion l
       set l.s_valor_0 =
           (select c.comision_recaudo
              from cta_recaudo_concesionario c
             where l.idbanco = c.idbanco
               and l.indtipo = c.indtipo
               and l.cta_recaudo = c.cuenta
               and l.id_concesionario_liq = c.idconcesionario)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1;
  
    -- valida que se tenga comisiones de recaudo
    select count(*)
      into w_registros
      from recaudo_externo_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and s_valor_0 is null
       and ind_proceso = 1;
  
    IF w_registros > 0 THEN
      select 'Cuenta: ' || cta_recaudo || ' Banco: ' || idbanco ||
             ' Concesionario:' || id_concesionario_liq || ' Tipo:' ||
             indtipo || ' Liquidacion:' || num_liquidacion
        into w_cta_recaudo
        from recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and s_valor_0 is null
         and ind_proceso = 1
         and rownum = 1;
    
      delete recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
    
      commit;
    
      p_error := 'PROCESO NO EJECUTADO. CUENTA RECAUDO NO DEFINIDA: ' ||
                 w_cta_recaudo;
      RETURN;
    END IF;
  
    select count(*)
      into w_registros
      from recaudo_externo_liquidacion l
     where not l.validador_fecha in
            (select distinct idvalidador from validador_fecha)
       and l.validador_fecha <> '000';
  
    IF w_registros > 0 THEN
    
      delete recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
    
      commit;
    
      p_error := 'PROCESO NO EJECUTADO. VALIDADOR FECHA NO DEFINIDO';
      RETURN;
    
    END IF;
  
    ----------------------------------------- SIMIT -----------------------------------
    -- calcular simit base
    update recaudo_externo_liquidacion l
       set s_valor_1 = valor_total - valor_adicional,
           s_valor_2 =
           (valor_total - valor_adicional) / 10
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- ajustar simit base para cumplir ley
    update recaudo_externo_liquidacion l
       set s_valor_2 = (case
                         when s_valor_2 < smdlv and s_valor_1 >= smdlv and
                              indretroactividad = 0 then
                          smdlv
                         when s_valor_2 < smdlv and s_valor_1 < smdlv and
                              indretroactividad = 0 then
                          s_valor_1
                         when s_valor_2 < smdlv and s_valor_1 >= smdlv and
                              indretroactividad = 1 and indfecha2002 = 0 then
                          smdlv
                         when s_valor_2 < smdlv and s_valor_1 < smdlv and
                              indretroactividad = 1 and indfecha2002 = 0 then
                          s_valor_1
                         else
                          s_valor_2
                       end)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- calcular valor simit, concesionario liquidador, fondo concesionario, fondo simit, equilibrio, base ot
    update recaudo_externo_liquidacion l
       set (l.s_valor_3,
            l.s_valor_4,
            l.s_valor_5,
            l.s_valor_6,
            l.s_valor_7,
            l.s_valor_8) =
           (select l.s_valor_2 * (p.simit_s / 10),
                   l.s_valor_2 * (p.concesionario_s / 10),
                   l.s_valor_2 * (p.fondo_cob_concesionario_s / 10),
                   l.s_valor_2 * (p.fondo_cob_simit_s / 10),
                   l.s_valor_2 * (p.equilibrio_economico_s / 10),
                   l.s_valor_1 - s_valor_2
              from p_dispersion_concesionario p
             where p.idconcesionario = l.id_concesionario_liq)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- calcular base contravencional
    update recaudo_externo_liquidacion l
       set (l.s_valor_9) =
           (select l.s_valor_8 *
                   ((p.fcm_contravencional_s + p.conces_contravencional_s) / 100) / 0.9
              from p_dispersion_municipio p
             where p.idmunicipio = l.idmunicipio)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set (l.s_valor_9) =
           (select l.s_valor_8 *
                   ((v.p_fcm_contravencional + v.p_conces_contravencional) / 100) / 0.9
              from validador_fecha v
             where v.idmunicipio = l.idmunicipio
               and v.idValidador = l.validador_fecha
               and v.indtipo = 'SIMIT')
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.validador_fecha <> '000'
       and l.ind_proceso = 1;
  
    -- calcular valor operador contravencional
    update recaudo_externo_liquidacion l
       set (l.s_valor_11) =
           (select l.s_valor_8 * ((p.conces_contravencional_s) / 100) / 0.9
              from p_dispersion_municipio p
             where p.idmunicipio = l.idmunicipio)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set (l.s_valor_11) =
           (select l.s_valor_8 * ((v.p_conces_contravencional) / 100) / 0.9
              from validador_fecha v
             where v.idmunicipio = l.idmunicipio
               and v.idValidador = l.validador_fecha
               and v.indtipo = 'SIMIT')
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.validador_fecha <> '000'
       and l.ind_proceso = 1;
  
    -- calcular valor fcm contravencional
    update recaudo_externo_liquidacion l
       set (l.s_valor_12) = l.s_valor_9 - l.s_valor_11
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- calcular acuerdo de pago
    update recaudo_externo_liquidacion l
       set (l.s_valor_10) =
           (select l.s_valor_8 * (p.acuerdopago_s / 100) / 0.9
              from p_dispersion_municipio p
             where p.idmunicipio = l.idmunicipio)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set (l.s_valor_10) =
           (select l.s_valor_8 * ((v.p_acuerdopago) / 100) / 0.9
              from validador_fecha v
             where v.idmunicipio = l.idmunicipio
               and v.idValidador = l.validador_fecha
               and v.indtipo = 'SIMIT')
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.validador_fecha <> '000'
       and l.ind_proceso = 1;
  
    -- calcula base municipio sin impuestos
    update recaudo_externo_liquidacion l
       set (l.s_valor_13) =
           (l.s_valor_8 - l.s_valor_10 - l.s_valor_11 - l.s_valor_12)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- calcula base municipio, iva contravencional, timbre contravencional, retefuente contravencional, reteiva contravencional
    -- este calculo si el valor del municipio es posible descontar el iva
  
    update recaudo_externo_liquidacion l
       set (l.s_valor_13,
            l.s_valor_14,
            l.s_valor_15,
            l.s_valor_16,
            l.s_valor_17,
            l.s_valor_30) =
           (select l.s_valor_8 - l.s_valor_10 - l.s_valor_11 - l.s_valor_12 -
                   ((l.s_valor_11 + l.s_valor_12) * fcm.iva / 100),
                   (l.s_valor_11 + l.s_valor_12) * (fcm.iva / 100),
                   (l.s_valor_11 + l.s_valor_12) * (0 / 100), -- timbre contravencional en 0.0 debe ser fcm.timbre_contravencional
                   (l.s_valor_11) * (fcm.retencion_fuente / 100),
                   (l.s_valor_11 + l.s_valor_12) * (fcm.iva / 100) *
                   (fcm.reteiva / 100), -- reteiva en 0%
                   (l.s_valor_11) * (0 / 100) -- timbre contravencional concesionario en 0.0 debe ser fcm.impuesto_timbre_tercero
              from fcm) --- Registro Unico
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.s_valor_13 > 0
       and l.ind_proceso = 1;
  
    -- calcula base municipio, iva contravencional, timbre contravencional, retefuente contravencional, reteiva contravencional
    -- este calculo si el valor del municipio es 0, se descuenta iva del acuerdo de pago
  
    update recaudo_externo_liquidacion l
       set (l.s_valor_10,
            l.s_valor_14,
            l.s_valor_15,
            l.s_valor_16,
            l.s_valor_17,
            l.s_valor_30) =
           (select l.s_valor_10 -
                   ((l.s_valor_11 + l.s_valor_12) * fcm.iva / 100),
                   (l.s_valor_11 + l.s_valor_12) * (fcm.iva / 100),
                   (l.s_valor_11 + l.s_valor_12) * (0 / 100), -- timbre contravencional en 0.0 debe ser fcm.timbre_contravencional
                   (l.s_valor_11) * (fcm.retencion_fuente / 100),
                   (l.s_valor_11 + l.s_valor_12) * (fcm.iva / 100) *
                   (fcm.reteiva / 100), -- reteiva en 0%
                   (l.s_valor_11) * (0 / 100) -- timbre contravencional concesionario en 0.0 debe ser fcm.impuesto_timbre_tercero
              from fcm) --- Registro Unico
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.s_valor_13 = 0
       and l.ind_proceso = 1;
  
    -- para terceros con base de liquidacion el recaudo calcular y descontar el valor de ot
    update recaudo_externo_liquidacion l
       set l.s_valor_13 = l.s_valor_13 - (s_valor_1 * por_base_ter1) / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter1 = 3
       and l.s_valor_13 > (s_valor_1 * por_base_ter1) / 100
       and por_base_ter1 > 0
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_13 = l.s_valor_13 - (s_valor_1 * por_base_ter2) / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter2 = 3
       and l.s_valor_13 > (s_valor_1 * por_base_ter2) / 100
       and por_base_ter2 > 0
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_13 = l.s_valor_13 - (s_valor_1 * por_base_ter3) / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter3 = 3
       and l.s_valor_13 > (s_valor_1 * por_base_ter3) / 100
       and por_base_ter3 > 0
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_13 = l.s_valor_13 - (s_valor_1 * por_base_ter4) / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter4 = 3
       and l.s_valor_13 > (s_valor_1 * por_base_ter4) / 100
       and por_base_ter4 > 0
       and l.ind_proceso = 1;
  
    -- calcula base para cada tercero
    update recaudo_externo_liquidacion l
       set l.s_valor_18 = (case
                            when ind_base_ter1 = 1 then
                             s_valor_8
                            when ind_base_ter1 = 2 then
                             valor_adicional
                            when ind_base_ter1 = 3 then
                             valor_total - valor_adicional
                            when ind_base_ter1 = 4 then
                             s_valor_13
                            else
                             0.0
                          end),
           l.s_valor_20 = (case
                            when ind_base_ter2 = 1 then
                             s_valor_8
                            when ind_base_ter2 = 2 then
                             valor_adicional
                            when ind_base_ter2 = 3 then
                             valor_total - valor_adicional
                            when ind_base_ter2 = 4 then
                             s_valor_13
                            else
                             0.0
                          end),
           l.s_valor_22 = (case
                            when ind_base_ter3 = 1 then
                             s_valor_8
                            when ind_base_ter3 = 2 then
                             valor_adicional
                            when ind_base_ter3 = 3 then
                             valor_total - valor_adicional
                            when ind_base_ter3 = 4 then
                             s_valor_13
                            else
                             0.0
                          end),
           l.s_valor_24 = (case
                            when ind_base_ter1 = 1 then
                             s_valor_8
                            when ind_base_ter3 = 2 then
                             valor_adicional
                            when ind_base_ter3 = 3 then
                             valor_total - valor_adicional
                            when ind_base_ter3 = 4 then
                             s_valor_13
                            else
                             0.0
                          end)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- calcula valor para cada tercero
    update recaudo_externo_liquidacion l
       set l.s_valor_19 = l.s_valor_18 * por_base_ter1 / 90
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_21 = l.s_valor_20 * por_base_ter2 / 90
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter2 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_23 = l.s_valor_22 * por_base_ter3 / 90
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter3 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_25 = l.s_valor_24 * por_base_ter4 / 90
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter4 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_19 = l.s_valor_18 * por_base_ter1 / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter1 <> 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_21 = l.s_valor_20 * por_base_ter2 / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter2 <> 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_23 = l.s_valor_22 * por_base_ter3 / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter3 <> 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_25 = l.s_valor_24 * por_base_ter4 / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and ind_base_ter4 <> 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set (l.s_valor_13) =
           (select l.s_valor_8 - l.s_valor_10 - l.s_valor_11 - l.s_valor_12 -
                   ((l.s_valor_11 + l.s_valor_12) * fcm.iva / 100) -- reteiva 50%
              from fcm) --- Registro Unico
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- verificar que el valor del tercero nosea mayor que el ot
    update recaudo_externo_liquidacion l
       set l.s_valor_19 = l.s_valor_13,
           l.s_valor_20 = 0,
           l.s_valor_21 = 0,
           l.s_valor_22 = 0,
           l.s_valor_23 = 0,
           l.s_valor_24 = 0,
           l.s_valor_25 = 0
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.s_valor_19 > l.s_valor_13
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_21 = l.s_valor_13 - l.s_valor_19,
           l.s_valor_22 = 0,
           l.s_valor_23 = 0,
           l.s_valor_24 = 0,
           l.s_valor_25 = 0
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.s_valor_21 > (l.s_valor_13 - l.s_valor_19)
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_23 = l.s_valor_13 - l.s_valor_19 - l.s_valor_21,
           l.s_valor_24 = 0,
           l.s_valor_25 = 0
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.s_valor_23 > (l.s_valor_13 - l.s_valor_19 - l.s_valor_21)
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_25 = l.s_valor_13 - l.s_valor_19 - l.s_valor_21 -
                          l.s_valor_23
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.s_valor_25 >
           (l.s_valor_13 - l.s_valor_19 - l.s_valor_21 - l.s_valor_23)
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    -- calcular valor operador contravencional con impuestos
    update recaudo_externo_liquidacion l
       set (l.s_valor_11) = l.s_valor_11 + l.s_valor_14 / 2 - l.s_valor_30 -
                            l.s_valor_16
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- calcular valor fcm contravencional con impuestos
    update recaudo_externo_liquidacion l
       set (l.s_valor_12) = l.s_valor_12 + l.s_valor_14 / 2 + l.s_valor_30 +
                            l.s_valor_16
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- ajusta a dos decimales
    update recaudo_externo_liquidacion l
       set l.s_valor_0  = ROUND(l.s_valor_0, 2),
           l.s_valor_1  = ROUND(l.s_valor_1, 2),
           l.s_valor_2  = ROUND(l.s_valor_2, 2),
           l.s_valor_3  = ROUND(l.s_valor_3, 2),
           l.s_valor_4  = ROUND(l.s_valor_4, 2),
           l.s_valor_5  = ROUND(l.s_valor_5, 2),
           l.s_valor_6  = ROUND(l.s_valor_6, 2),
           l.s_valor_7  = ROUND(l.s_valor_7, 2),
           l.s_valor_8  = ROUND(l.s_valor_8, 2),
           l.s_valor_9  = ROUND(l.s_valor_9, 2),
           l.s_valor_10 = ROUND(l.s_valor_10, 2),
           l.s_valor_11 = ROUND(l.s_valor_11, 2),
           l.s_valor_12 = ROUND(l.s_valor_12, 2),
           l.s_valor_13 = ROUND(l.s_valor_13, 2),
           l.s_valor_14 = ROUND(l.s_valor_14, 2),
           l.s_valor_15 = ROUND(l.s_valor_15, 2),
           l.s_valor_16 = ROUND(l.s_valor_16, 2),
           l.s_valor_17 = ROUND(l.s_valor_17, 2),
           l.s_valor_18 = ROUND(l.s_valor_18, 2),
           l.s_valor_19 = ROUND(l.s_valor_19, 2),
           l.s_valor_20 = ROUND(l.s_valor_20, 2),
           l.s_valor_21 = ROUND(l.s_valor_21, 2),
           l.s_valor_22 = ROUND(l.s_valor_22, 2),
           l.s_valor_23 = ROUND(l.s_valor_23, 2),
           l.s_valor_24 = ROUND(l.s_valor_24, 2),
           l.s_valor_25 = ROUND(l.s_valor_25, 2)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- calcula netos
    update recaudo_externo_liquidacion l
       set l.s_valor_26 = l.s_valor_13 - l.s_valor_19 - l.s_valor_21 -
                          l.s_valor_23 - l.s_valor_25 + l.s_valor_17 +
                          l.valor_adicional,
           l.s_valor_27 = l.s_valor_11 + l.s_valor_14 - l.s_valor_15 -
                          l.s_valor_16 - l.s_valor_17,
           l.s_valor_28 = l.s_valor_4 - l.s_valor_0,
           l.s_valor_29 = l.s_valor_12 + l.s_valor_15 + l.s_valor_16
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    -- ajusta decimales
  
    update recaudo_externo_liquidacion l
       set l.s_valor_6 = (case
                           when l.s_valor_7 = 0.0 then
                            l.valor_total - l.s_valor_3 - l.s_valor_4 -
                            l.s_valor_5 - l.s_valor_10 - l.s_valor_11 -
                            l.s_valor_12 - l.s_valor_26 - l.s_valor_19 -
                            l.s_valor_21 - l.s_valor_23 - l.s_valor_25
                           else
                            l.s_valor_6
                         end),
           l.s_valor_7 = (case
                           when l.s_valor_7 <> 0.0 then
                            l.s_valor_1 - l.s_valor_3 - l.s_valor_4 -
                            l.s_valor_5 - l.s_valor_8
                           else
                            l.s_valor_7
                         end)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'SIMIT'
       and l.ind_proceso = 1;
  
    ------------------------------------ POLCA -----------------------------------------------
    -- calcular simit base
    update recaudo_externo_liquidacion l
       set p_valor_1 = valor_total - valor_adicional,
           p_valor_2 =
           (valor_total - valor_adicional) / 10
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- ajustar simit base para cumplir ley
    update recaudo_externo_liquidacion l
       set p_valor_2 = (case
                         when p_valor_2 < smdlv and p_valor_1 >= smdlv and
                              indretroactividad = 0 then
                          smdlv
                         when p_valor_2 < smdlv and p_valor_1 < smdlv and
                              indretroactividad = 0 then
                          p_valor_1
                         when p_valor_2 < smdlv and p_valor_1 >= smdlv and
                              indretroactividad = 1 and indfecha2002 = 0 then
                          smdlv
                         when p_valor_2 < smdlv and p_valor_1 < smdlv and
                              indretroactividad = 1 and indfecha2002 = 0 then
                          p_valor_1
                         else
                          p_valor_2
                       end)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- calcular valor simit, concesionario liquidador, fondo concesionario, fondo simit, equilibrio,  valor simit, sevial, equilibrio, base polca, base ot
    update recaudo_externo_liquidacion l
       set (l.p_valor_3,
            l.p_valor_4,
            l.p_valor_5,
            l.p_valor_6,
            l.p_valor_7,
            l.p_valor_8,
            l.p_valor_9,
            l.p_valor_10,
            l.p_valor_11,
            l.p_valor_21) =
           (select l.p_valor_2 * (p.simit_pm / 10),
                   l.p_valor_2 * (p.concesionario_pm / 10),
                   l.p_valor_2 * (p.fondo_cob_concesionario_pm / 10),
                   l.p_valor_2 * (p.fondo_cob_simit_pm / 10),
                   l.p_valor_2 * (p.equilibrio_economico_pm / 10),
                   l.p_valor_2 * (p.simit_pp / 10),
                   l.p_valor_2 * (p.sevial_pp / 10),
                   l.p_valor_2 * (p.equilibrio_economico_pp / 10),
                   (l.p_valor_1 - l.p_valor_2) / 2,
                   (l.p_valor_1 - l.p_valor_2) / 2
              from p_dispersion_concesionario p
             where p.idconcesionario = l.id_concesionario_liq)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- calcular valor polca, fcm polca, sevial polca y equilibrio polca
    update recaudo_externo_liquidacion l
       set (l.p_valor_12, l.p_valor_13, l.p_valor_14, l.p_valor_15) =
           (select l.p_valor_11 * (p.polca_cp / 45),
                   l.p_valor_11 * (p.fcm_cp / 45),
                   l.p_valor_11 * (p.sevial_cp / 45),
                   l.p_valor_11 * (p.equilibrio_economico_cp / 45)
              from p_dispersion_concesionario p, fcm
             where p.idconcesionario = l.id_concesionario_liq)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- calcular impuestos por convenio polca
    update recaudo_externo_liquidacion l
       set (l.p_valor_16,
            l.p_valor_17,
            l.p_valor_18,
            l.p_valor_19,
            l.p_valor_20) =
           (select (l.p_valor_13 + l.p_valor_15) * fcm.iva / 100,
                   (l.p_valor_13 + l.p_valor_14 + l.p_valor_15) *
                   fcm.impuesto_timbre_fcm / 100,
                   l.p_valor_14 * fcm.iva / 100,
                   l.p_valor_14 * fcm.retencion_fuente / 100,
                   l.p_valor_14 * fcm.impuesto_timbre_tercero / 100
              from fcm)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- calcular VSevial27 con impuestos
    update recaudo_externo_liquidacion l
       set l.p_valor_14 = p_valor_14 - p_valor_20 - p_valor_19 + p_valor_18
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- actualizar Valor FCM con equilibrio pra simit capital
    update recaudo_externo_liquidacion l
       set l.p_valor_13 = l.p_valor_15
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.id_concesionario_liq = 5
       and l.ind_proceso = 1;
  
    -- calcular VFCM18 con impuestos
    update recaudo_externo_liquidacion l
       set l.p_valor_13 = p_valor_13 + p_valor_20 + p_valor_19 + p_valor_16
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- calcular base contravencional
  
    update recaudo_externo_liquidacion l
       set (l.p_valor_22) =
           (select l.p_valor_21 *
                   ((p.fcm_contravencional_p + p.conces_contravencional_p) / 100) / 0.45
              from p_dispersion_municipio P
             where l.idmunicipio = p.idmunicipio)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.validador_fecha = '000'
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set (l.p_valor_22) =
           (select l.p_valor_21 *
                   ((v.p_fcm_contravencional + v.p_conces_contravencional) / 100) / 0.45
              from validador_fecha v
             where v.idmunicipio = l.idmunicipio
               and v.idValidador = l.validador_fecha
               and v.indtipo = 'POLCA')
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.validador_fecha <> '000'
       and l.ind_proceso = 1;
  
    -- calcular valor operador contravencional
    update recaudo_externo_liquidacion l
       set (l.p_valor_24) =
           (select l.p_valor_21 * ((p.conces_contravencional_p) / 100) / 0.45
              from p_dispersion_municipio p
             where p.idmunicipio = l.idmunicipio)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set (l.p_valor_24) =
           (select l.p_valor_21 * ((v.p_conces_contravencional) / 100) / 0.45
              from validador_fecha v
             where v.idmunicipio = l.idmunicipio
               and v.idValidador = l.validador_fecha
               and v.indtipo = 'POLCA')
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.validador_fecha <> '000'
       and l.ind_proceso = 1;
  
    -- calcular valor fcm contravencional
    update recaudo_externo_liquidacion l
       set (l.p_valor_25) = l.p_valor_22 - l.p_valor_24
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- calcular acuerdo de pago
    update recaudo_externo_liquidacion l
       set (l.p_valor_23) =
           (select (l.p_valor_21) * (p.acuerdopago_p / 100) / 0.45
              from p_dispersion_municipio p
             where p.idmunicipio = l.idmunicipio)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set (l.p_valor_23) =
           (select (l.p_valor_21) * (v.p_acuerdopago / 100) / 0.45
              from validador_fecha v
             where v.idmunicipio = l.idmunicipio
               and v.idValidador = l.validador_fecha
               and v.indtipo = 'POLCA')
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.validador_fecha <> '000'
       and l.ind_proceso = 1;
  
    /* cambio autorizado por edwin pena 28/may/2008
        -- calcular base contravencional y acuerdo de pago
        update recaudo_externo_liquidacion l
           set (l.p_valor_22, l.p_valor_23) = (select l.p_valor_1 *
                                                      (p.fcm_contravencional_p +
                                                      p.conces_contravencional_p) / 100,
                                                      l.p_valor_1 *
                                                      p.acuerdopago_p / 100
                                                 from p_dispersion_municipio p
                                                where p.idmunicipio =
                                                      l.idmunicipio)
         where fec_corte >= w_fec_cor_ini
           and fec_corte <= w_fec_cor_fin
           and l.indtipo = 'POLCA'
           and l.ind_proceso = 1;
    
        -- calcula acuerdo pago, contrav concesionario y contrav fcm
        update recaudo_externo_liquidacion l
           set l.p_valor_23 = (case when p_valor_22 <> 0.0 and p_valor_21 <= p_valor_22 then 0.0 else p_valor_23 end),
               l.p_valor_24 = (case when p_valor_22 <> 0.0 and p_valor_21 > p_valor_22 then p_valor_22 / 2 when p_valor_22 <> 0.0 and p_valor_21 <= p_valor_22 then p_valor_21 / 2 else 0.0 end),
               l.p_valor_25 = (case when p_valor_22 <> 0.0 and p_valor_21 > p_valor_22 then p_valor_22 / 2 when p_valor_22 <> 0.0 and p_valor_21 <= p_valor_22 then p_valor_21 / 2 else 0.0 end)
         where fec_corte >= w_fec_cor_ini
           and fec_corte <= w_fec_cor_fin
           and l.indtipo = 'POLCA'
           and l.ind_proceso = 1;
    
    */
  
    -- calcula base municipos sin impuestos
    update recaudo_externo_liquidacion l
       set l.p_valor_26 = l.p_valor_21 - p_valor_23 - p_valor_24 -
                          p_valor_25
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- calula base municipio, iva contravencional, timbre contravencional, retefuente contravencional, reteica contravencional
    -- esto si el valor del municipio cubre el iva por contravencional
    update recaudo_externo_liquidacion l
       set (l.p_valor_26,
            l.p_valor_27,
            l.p_valor_28,
            l.p_valor_29,
            l.p_valor_30,
            p_valor_44) =
           (select l.p_valor_21 - l.p_valor_23 - l.p_valor_24 - l.p_valor_25 -
                   ((l.p_valor_24 + l.p_valor_25) * fcm.iva / 100),
                   
                   (l.p_valor_24 + l.p_valor_25) * (fcm.iva / 100),
                   
                   (l.p_valor_24 + l.p_valor_25) * (0 / 100), -- timbre contravencional en 0.0 debe ser fcm.impuesto_timbre_fcm
                   
                   (l.p_valor_24) * (fcm.retencion_fuente / 100),
                   
                   (l.p_valor_24 + l.p_valor_25) * (fcm.iva / 100) *
                   (fcm.reteiva / 100), -- reteiva 50%
                   
                   (l.p_valor_24) * (0 / 100) --timbre concesionario contravencional en 0 debe ser fcm.impuesto_timbre_tercero
            
              from fcm) --- Registro Unico
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.p_valor_26 > 0
       and l.ind_proceso = 1;
  
    -- calula base municipio, iva contravencional, timbre contravencional, retefuente contravencional, reteica contravencional
    -- esto si el valor del municipio es o, se descuenta impuestos de acuerdo
    update recaudo_externo_liquidacion l
       set (l.p_valor_23,
            l.p_valor_27,
            l.p_valor_28,
            l.p_valor_29,
            l.p_valor_30,
            p_valor_44) =
           (select l.p_valor_23 -
                   ((l.p_valor_24 + l.p_valor_25) * fcm.iva / 100),
                   
                   (l.p_valor_24 + l.p_valor_25) * (fcm.iva / 100),
                   
                   (l.p_valor_24 + l.p_valor_25) * (0 / 100), -- timbre contravencional en 0.0 debe ser fcm.impuesto_timbre_fcm
                   
                   (l.p_valor_24) * (fcm.retencion_fuente / 100),
                   
                   (l.p_valor_24 + l.p_valor_25) * (fcm.iva / 100) *
                   (fcm.reteiva / 100), -- reteiva 50%
                   
                   (l.p_valor_24) * (0 / 100) --timbre concesionario contravencional en 0 debe ser fcm.impuesto_timbre_tercero
            
              from fcm) --- Registro Unico
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.p_valor_26 = 0
       and l.ind_proceso = 1;
  
    -- para terceros con base de liquidacion el recaudo calcular y descontar el valor de ot
    update recaudo_externo_liquidacion l
       set l.p_valor_26 = l.p_valor_26 - (p_valor_1 * por_base_ter1) / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter1 = 3
       and l.p_valor_26 > (p_valor_1 * por_base_ter1) / 100
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_26 = l.p_valor_26 - (p_valor_1 * por_base_ter2) / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter2 = 3
       and l.p_valor_26 > (p_valor_1 * por_base_ter2) / 100
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_26 = l.p_valor_26 - (p_valor_1 * por_base_ter3) / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter3 = 3
       and l.p_valor_26 > (p_valor_1 * por_base_ter3) / 100
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_26 = l.p_valor_26 - (p_valor_1 * por_base_ter4) / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter4 = 3
       and l.p_valor_26 > (p_valor_1 * por_base_ter4) / 100
       and l.ind_proceso = 1;
  
    -- calcula base para cada tercero
    update recaudo_externo_liquidacion l
       set l.p_valor_31 = (case
                            when ind_base_ter1 = 1 then
                             p_valor_21
                            when ind_base_ter1 = 2 then
                             valor_adicional
                            when ind_base_ter1 = 3 then
                             valor_total - valor_adicional
                            when ind_base_ter1 = 4 then
                             p_valor_26
                            else
                             0.0
                          end),
           l.p_valor_33 = (case
                            when ind_base_ter2 = 1 then
                             p_valor_21
                            when ind_base_ter2 = 2 then
                             valor_adicional
                            when ind_base_ter2 = 3 then
                             valor_total - valor_adicional
                            when ind_base_ter2 = 4 then
                             p_valor_26
                            else
                             0.0
                          end),
           l.p_valor_35 = (case
                            when ind_base_ter3 = 1 then
                             p_valor_21
                            when ind_base_ter3 = 2 then
                             valor_adicional
                            when ind_base_ter3 = 3 then
                             valor_total - valor_adicional
                            when ind_base_ter3 = 4 then
                             p_valor_26
                            else
                             0.0
                          end),
           l.p_valor_37 = (case
                            when ind_base_ter1 = 1 then
                             p_valor_21
                            when ind_base_ter3 = 2 then
                             valor_adicional
                            when ind_base_ter3 = 3 then
                             valor_total - valor_adicional
                            when ind_base_ter3 = 4 then
                             p_valor_26
                            else
                             0.0
                          end)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    commit;
  
    -- calcula valor para cada tercero
    update recaudo_externo_liquidacion l
       set l.p_valor_32 = l.p_valor_31 * por_base_ter1 / 45
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_34 = l.p_valor_33 * por_base_ter2 / 45
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter2 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_36 = l.p_valor_35 * por_base_ter3 / 45
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter3 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_38 = l.p_valor_37 * por_base_ter4 / 45
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter4 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_32 = l.p_valor_31 * por_base_ter1 / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter1 <> 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_34 = l.p_valor_33 * por_base_ter2 / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter2 <> 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_36 = l.p_valor_35 * por_base_ter3 / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter3 <> 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_38 = l.p_valor_37 * por_base_ter4 / 100
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and ind_base_ter4 <> 1
       and l.ind_proceso = 1;
  
    -- calula base municipio
    update recaudo_externo_liquidacion l
       set (l.p_valor_26) =
           (select l.p_valor_21 - l.p_valor_23 - l.p_valor_24 - l.p_valor_25 -
                   ((l.p_valor_24 + l.p_valor_25) * fcm.iva / 100)
              from fcm) --- Registro Unico
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- verificar que no sea mayor al ot
    update recaudo_externo_liquidacion l
       set p_valor_32   = p_valor_26,
           l.p_valor_33 = 0,
           l.p_valor_34 = 0,
           l.p_valor_35 = 0,
           l.p_valor_36 = 0,
           l.p_valor_37 = 0,
           l.p_valor_39 = 0
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and p_valor_32 > p_valor_26
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set p_valor_34   = p_valor_26 - p_valor_32,
           l.p_valor_35 = 0,
           l.p_valor_36 = 0,
           l.p_valor_37 = 0,
           l.p_valor_39 = 0
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and p_valor_34 > (p_valor_26 - p_valor_32)
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set p_valor_36   = p_valor_26 - p_valor_32 - p_valor_34,
           l.p_valor_37 = 0,
           l.p_valor_39 = 0
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and p_valor_36 > (p_valor_26 - p_valor_32 - p_valor_34)
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set p_valor_38 = p_valor_26 - p_valor_32 - p_valor_34 - p_valor_36
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and p_valor_38 > (p_valor_26 - p_valor_32 - p_valor_34 - p_valor_36)
       and ind_base_ter1 = 1
       and l.ind_proceso = 1;
  
    -- calcular valor operador contravencional con impuestos
    update recaudo_externo_liquidacion l
       set (l.p_valor_24) = l.p_valor_24 + l.p_valor_27 / 2 - l.p_valor_44 -
                            l.p_valor_29
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- calcular valor fcm contravencional con impuestos
    update recaudo_externo_liquidacion l
       set (l.p_valor_25) = l.p_valor_25 + l.p_valor_27 / 2 + l.p_valor_44 +
                            l.p_valor_29
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- ajusta a dos decimales
    update recaudo_externo_liquidacion l
       set l.s_valor_0  = ROUND(l.s_valor_0, 2),
           l.p_valor_1  = ROUND(l.p_valor_1, 2),
           l.p_valor_2  = ROUND(l.p_valor_2, 2),
           l.p_valor_3  = ROUND(l.p_valor_3, 2),
           l.p_valor_4  = ROUND(l.p_valor_4, 2),
           l.p_valor_5  = ROUND(l.p_valor_5, 2),
           l.p_valor_6  = ROUND(l.p_valor_6, 2),
           l.p_valor_7  = ROUND(l.p_valor_7, 2),
           l.p_valor_8  = ROUND(l.p_valor_8, 2),
           l.p_valor_9  = ROUND(l.p_valor_9, 2),
           l.p_valor_10 = ROUND(l.p_valor_10, 2),
           l.p_valor_11 = ROUND(l.p_valor_11, 2),
           l.p_valor_12 = ROUND(l.p_valor_12, 2),
           l.p_valor_13 = ROUND(l.p_valor_13, 2),
           l.p_valor_14 = ROUND(l.p_valor_14, 2),
           l.p_valor_15 = ROUND(l.p_valor_15, 2),
           l.p_valor_16 = ROUND(l.p_valor_16, 2),
           l.p_valor_17 = ROUND(l.p_valor_17, 2),
           l.p_valor_18 = ROUND(l.p_valor_18, 2),
           l.p_valor_19 = ROUND(l.p_valor_19, 2),
           l.p_valor_20 = ROUND(l.p_valor_20, 2),
           l.p_valor_21 = ROUND(l.p_valor_21, 2),
           l.p_valor_22 = ROUND(l.p_valor_22, 2),
           l.p_valor_23 = ROUND(l.p_valor_23, 2),
           l.p_valor_24 = ROUND(l.p_valor_24, 2),
           l.p_valor_25 = ROUND(l.p_valor_25, 2),
           l.p_valor_26 = ROUND(l.p_valor_26, 2),
           l.p_valor_27 = ROUND(l.p_valor_27, 2),
           l.p_valor_28 = ROUND(l.p_valor_28, 2),
           l.p_valor_29 = ROUND(l.p_valor_29, 2),
           l.p_valor_30 = ROUND(l.p_valor_30, 2),
           l.p_valor_31 = ROUND(l.p_valor_31, 2),
           l.p_valor_32 = ROUND(l.p_valor_32, 2),
           l.p_valor_33 = ROUND(l.p_valor_33, 2),
           l.p_valor_34 = ROUND(l.p_valor_34, 2),
           l.p_valor_35 = ROUND(l.p_valor_35, 2),
           l.p_valor_36 = ROUND(l.p_valor_36, 2),
           l.p_valor_37 = ROUND(l.p_valor_37, 2),
           l.p_valor_38 = ROUND(l.p_valor_38, 2)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- calcula netos
    update recaudo_externo_liquidacion l
       set l.p_valor_39 = l.p_valor_26 - l.p_valor_32 - l.p_valor_34 -
                          l.p_valor_36 - l.p_valor_38 + l.p_valor_30 +
                          valor_adicional,
           l.p_valor_40 = l.p_valor_24 + l.p_valor_27 - l.p_valor_28 -
                          l.p_valor_29 - l.p_valor_30,
           l.p_valor_41 = l.p_valor_4 - l.s_valor_0,
           l.p_valor_42 = l.p_valor_25 + l.p_valor_28 + l.p_valor_29 +
                          l.p_valor_19 + l.p_valor_20 + l.p_valor_16 +
                          l.p_valor_13,
           l.p_valor_43 = l.p_valor_9 + l.p_valor_14 + l.p_valor_18 -
                          l.p_valor_19 - l.p_valor_20 - l.p_valor_16
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.ind_proceso = 1;
  
    -- ajusta decimales
    update recaudo_externo_liquidacion l
       set l.p_valor_6 = l.p_valor_1 + l.valor_adicional - l.p_valor_3 -
                         l.p_valor_4 - l.p_valor_5 - l.p_valor_8 -
                         decode(l.id_concesionario_liq, 5, 0, l.p_valor_7) -
                         decode(l.id_concesionario_liq, 5, l.p_valor_7, 0) -
                         l.p_valor_9 - l.p_valor_10 - l.p_valor_13 -
                         l.p_valor_14 - l.p_valor_12 + l.p_valor_18 +
                         l.p_valor_16 - l.p_valor_24 - l.p_valor_25 -
                         l.p_valor_23 - l.p_valor_32 - l.p_valor_34 -
                         l.p_valor_36 - l.p_valor_39
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.p_valor_7 = 0.0
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_13 = l.p_valor_1 + l.valor_adicional - l.p_valor_3 -
                          l.p_valor_4 - l.p_valor_5 - l.p_valor_6 -
                          l.p_valor_8 -
                          decode(l.id_concesionario_liq, 5, 0, l.p_valor_7) -
                          decode(l.id_concesionario_liq, 5, l.p_valor_7, 0) -
                          l.p_valor_9 - l.p_valor_10 - l.p_valor_14 -
                          l.p_valor_12 + l.p_valor_18 + l.p_valor_16 -
                          l.p_valor_24 - l.p_valor_25 - l.p_valor_23 -
                          l.p_valor_32 - l.p_valor_34 - l.p_valor_36 -
                          l.p_valor_39
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.indtipo = 'POLCA'
       and l.p_valor_7 <> 0.0
       and l.ind_proceso = 1;
  
    ------------------------------------------------------------------------------------------
  
    update recaudo_externo_liquidacion l
       set l.fec_dispersion_con = fn_fec_dispersion(w_fec_cor_ini,
                                                    0,
                                                    3,
                                                    p_usuario)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1;
  
    -- actualiza fecha dispersion municipio a inicio de mes
    -- para municipios no especiales y de recaudo pse
    update recaudo_externo_liquidacion l
       set l.fec_dispersion = fn_fec_dispersion(w_fec_cor_ini,
                                                0,
                                                3,
                                                p_usuario)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.cta_recaudo = '059007559'
       and l.idmunicipio not in
           (select distinct idmunicipio
              from dias_dispersion t
             where idbanco = '52'
               and frec_dispersion_se <> 0)
       and l.ind_proceso = 1;
  
    -- actualiza cuenta municipio
    update recaudo_externo_liquidacion l
       set (l.nit_municipio, l.idbancomun, l.tipocuentamun, l.ctamun) =
           (select m.nit_cta, m.idbanco, m.tipocuenta, m.cuenta
              from municipio m
             where m.idmunicipio = l.idmunicipio)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1;
  
    -- actualiza nit de metrotransito
    update recaudo_externo_liquidacion l
       set (l.nit_municipio, l.idbancomun, l.tipocuentamun, l.ctamun) =
           (select m.nit_cta, m.idbanco, m.tipocuenta, m.cuenta
              from municipio m
             where m.idmunicipio = '08001001')
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1
       and l.validador_fecha in ('001', '002', '003', '004')
       and l.idmunicipio = '08001000';
  
    -- actualiza nit de dpat atlantico
    update recaudo_externo_liquidacion l
       set (l.nit_municipio, l.idbancomun, l.tipocuentamun, l.ctamun) =
           (select m.nit_cta, m.idbanco, m.tipocuenta, m.cuenta
              from municipio m
             where m.idmunicipio = '08000000')
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1
       and l.validador_fecha in ('005', '006', '007', '008')
       and l.idmunicipio in ('08573000', '08296000');
  
    -- actualiza nit BANCO Concesionario
    update recaudo_externo_liquidacion l
       set l.nit_concesionario =
           (select nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = l.id_concesionario_liq
               and c.idconcepto = 1
               and c.idbancorec = l.idbanco)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1;
  
    -- actualiza nit fondo cobertura concesioanrio
    update recaudo_externo_liquidacion l
       set l.nit_fondo =
           (select nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = l.id_concesionario_liq
               and c.idconcepto = 2
               and c.idbancorec = l.idbanco)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1;
  
    -- actualiza nit contravencional
    update recaudo_externo_liquidacion l
       set l.nit_concesionariozon =
           (select nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = l.id_concesionario_pro
               and c.idconcepto = 3
               and c.idbancorec = l.idbanco)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and l.ind_proceso = 1;
  
    update recaudo_externo_liquidacion r
       set (nit_tercero1, nit_tercero2, nit_tercero3, nit_tercero4) =
           (select '0000000000', '0000000000', '0000000000', '0000000000'
              from dual)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and r.ind_proceso = 1;
  
    update recaudo_externo_liquidacion r
       set nit_tercero1 =
           (select nit_t
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and t.num_tercero = 1)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and r.ind_base_ter1 > 0
       and r.ind_proceso = 1;
  
    update recaudo_externo_liquidacion r
       set nit_tercero2 =
           (select nit_t
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and t.num_tercero = 2)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and r.ind_base_ter2 > 0
       and r.ind_proceso = 1;
  
    update recaudo_externo_liquidacion r
       set nit_tercero3 =
           (select nit_t
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and t.num_tercero = 3)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and r.ind_base_ter3 > 0
       and r.ind_proceso = 1;
  
    update recaudo_externo_liquidacion r
       set nit_tercero4 =
           (select nit_t
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and t.num_tercero = 4)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and r.ind_base_ter4 > 0
       and r.ind_proceso = 1;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_5 = round((l.s_valor_5 + l.s_valor_6) -
                               (l.s_valor_5 + l.s_valor_6) / 2,
                               2),
           l.s_valor_6 =
           (l.s_valor_5 + l.s_valor_6) -
           round((l.s_valor_5 + l.s_valor_6) -
                 (l.s_valor_5 + l.s_valor_6) / 2,
                 2)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1
       and abs(l.s_valor_5 - l.s_valor_6) > 0.01;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_5 = round((l.p_valor_5 + l.p_valor_6) -
                               (l.p_valor_5 + l.p_valor_6) / 2,
                               2),
           l.p_valor_6 =
           (l.p_valor_5 + l.p_valor_6) -
           round((l.p_valor_5 + l.p_valor_6) -
                 (l.p_valor_5 + l.p_valor_6) / 2,
                 2)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1
       and abs(l.p_valor_5 - l.p_valor_6) > 0.01;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_5 = l.s_valor_5 - 0.01,
           l.s_valor_6 = l.s_valor_6 + 0.01
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1
       and (l.s_valor_5 - l.s_valor_6) = 0.02;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_6 = l.s_valor_6 - 0.01,
           l.s_valor_5 = l.s_valor_5 + 0.01
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1
       and (l.s_valor_6 - l.s_valor_5) = 0.02;
  
    update recaudo_externo_liquidacion l
       set l.s_valor_6 = l.s_valor_5, l.s_valor_5 = l.s_valor_6
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1
       and (l.s_valor_5 - l.s_valor_6) = 0.01;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_5 = l.p_valor_5 - 0.01,
           l.p_valor_6 = l.p_valor_6 + 0.01
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1
       and (l.p_valor_5 - l.p_valor_6) = 0.02;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_6 = l.p_valor_6 - 0.01,
           l.p_valor_5 = l.p_valor_5 + 0.01
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1
       and (l.p_valor_6 - l.p_valor_5) = 0.02;
  
    update recaudo_externo_liquidacion l
       set l.p_valor_6 = l.p_valor_5, l.p_valor_5 = l.p_valor_6
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and ind_proceso = 1
       and (l.p_valor_5 - l.p_valor_6) = 0.01;
  
    commit;
  
    PK_CONTA_EXT.contabiliza_recaudo_externo(p_feccor_ini_ano,
                                             p_feccor_ini_mes,
                                             p_feccor_ini_dia,
                                             p_usuario,
                                             p_error);
  
    IF not P_ERROR is null THEN
      -- elimina liquidaciones anteriores
      delete recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
    
      commit;
    
      return;
    END IF;
  
    dispersa_recaudo_externo(p_feccor_ini_ano,
                             p_feccor_ini_mes,
                             p_feccor_ini_dia,
                             p_usuario,
                             p_error);
  
    IF not P_ERROR is null THEN
      -- elimina liquidaciones anteriores
      delete recaudo_externo_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin;
    
      return;
    END IF;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_externo_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin;
  
    p_error := 'Recuado Externo Liquidado OK. Registros: ' || w_registros ||
               ' : ' || p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
               p_feccor_ini_dia;
  
    select max(importe)
      into p_ajuste
      from recaudo_externo_contabilidad
     where textocabezera2 = 'AJUSTE PESOS'
       and fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = 'REC';
  
    if (p_ajuste > 100) then
      p_error := 'Recuado Externo Liquidado OK. POSIBLE ERROR DE CONTABILIDAD. FAVOR VERIFICAR.Registros: ' ||
                 w_registros || ': ' || p_feccor_ini_ano || '-' ||
                 p_feccor_ini_mes || '-' || p_feccor_ini_dia;
    end if;
  
    sp_envioNotificacion(grupoRecibe => 3,
                         grupoCopia  => 2,
                         asunto      => 'SDF - Proceso de distribucion del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd'),
                         mensaje     => 'El sistema SDF informa que se ha ejecutado el proceso de distribucion, del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd') ||
                                        '. Favor verificar y dar su visto bueno. Se genero el siguiente mensaje en el proceso de distribucion ' ||
                                        p_error,
                         p_usuario   => p_usuario);
  
    sp_log(p_usuario,
           'Liquida Recaudo Externo',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [liquida_recaudo_externo] ' || SQLERRM,
            p_error);
    
  END liquida_recaudo_externo;

  PROCEDURE dispersa_recaudo_local(p_fec_ini_ano number,
                                   p_fec_ini_mes number,
                                   p_fec_ini_dia number,
                                   p_fec_fin_ano number,
                                   p_fec_fin_mes number,
                                   p_fec_fin_dia number,
                                   p_banco       varchar2,
                                   p_usuario     varchar2,
                                   p_error       OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    /*w_fecmin_cor_ini date;*/
    /*w_fecmax_cor_fin date;*/
    w_registros number;
  
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    delete from recaudo_local_disp
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    -- obtiene valor simit
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             1, -- orden
             sum(s_valor_1),
             'Simit', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'SIMIT'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- neto simit por polca
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             1, -- orden
             sum(p_valor_27),
             'Simit', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- obtiene valor concesionario
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             2, -- orden
             sum(s_valor_6),
             'Concesionario', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'SIMIT'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- neto concesionario por polca
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             2, -- orden
             sum(p_valor_25),
             'Concesionario', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- obtiene valor fondo cobertura concesionario
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             3, -- orden
             sum(s_valor_3),
             'Fondo Cobertura Concesionario', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'SIMIT'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- fondo cobertura concesionario
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             3, -- orden
             sum(p_valor_9),
             'Fondo Cobertura Concesionario', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- obtiene valor fondo cobertura simit
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             4, -- orden
             sum(s_valor_4),
             'Fondo Cobertura Simit', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'SIMIT'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- fondo cobertura simit
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             4, -- orden
             sum(p_valor_10),
             'Fondo Cobertura Simit', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- obtiene valor equilibrio economico
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             5, -- orden
             sum(s_valor_5),
             'Equilibrio Economico', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'SIMIT'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- equilibrio economico
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             5, -- orden
             sum(p_valor_28),
             'Equilibrio Economico', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- obtiene valor SEVIAL
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             6, -- orden
             sum(p_valor_24),
             'Sevial', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- obtiene valor polca
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             7, -- orden
             sum(p_valor_15),
             'Polca', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- obtiene valor FCM polca
    insert into recaudo_local_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       idconcesionario,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             idconcesionario,
             8, -- orden
             sum(p_valor_26),
             'FCM Polca', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_local_liquidacion
       where fec_corte >= w_fec_cor_ini
         and fec_corte <= w_fec_cor_fin
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and decode(idbanco, '52', '52', '99') = p_banco
       group by idconcesionario, fec_dispersion, idbanco, cta_recaudo;
  
    -- actualiza cuenta financiera simit
    update recaudo_local_disp r
       set (r.des_idbanco, r.des_tipocuenta, r.des_cuenta, r.des_nit) =
           (select c.cta_disp_s_banco,
                   c.cta_disp_s_tipo_cta,
                   c.cta_disp_s_cta,
                   c.nit_fcm
              from cta_dispersion_fcm c
             where c.nit_fcm = '8000826650'
               and c.idbancorec = r.ori_idbanco)
     where r.fec_corte_ini = w_fec_cor_ini
       and r.fec_corte_fin = w_fec_cor_fin
       and r.indtipo = 'SIMIT'
       and r.concepto = 'Simit'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set (r.des_idbanco, r.des_tipocuenta, r.des_cuenta, r.des_nit) =
           (select c.cta_disp_p_banco,
                   c.cta_disp_p_tipo_cta,
                   c.cta_disp_p_cta,
                   c.nit_fcm
              from cta_dispersion_fcm c
             where c.nit_fcm = '8000826650'
               and c.idbancorec = r.ori_idbanco)
     where r.fec_corte_ini = w_fec_cor_ini
       and r.fec_corte_fin = w_fec_cor_fin
       and r.indtipo = 'POLCA'
       and r.concepto = 'Simit'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    commit;
  
    -- actualiza informacion financiera FCM Polca
    update recaudo_local_disp r
       set (r.des_idbanco, r.des_tipocuenta, r.des_cuenta, r.des_nit) =
           (select c.cta_disp_pa_banco,
                   c.cta_disp_pa_tipo_cta,
                   c.cta_disp_pa_cta,
                   c.nit_fcm
              from cta_dispersion_fcm c
             where c.nit_fcm = '8000826650'
               and c.idbancorec = r.ori_idbanco)
     where r.fec_corte_ini = w_fec_cor_ini
       and r.fec_corte_fin = w_fec_cor_fin
       and r.indtipo = 'POLCA'
       and r.concepto = 'FCM Polca'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    -- actualiza cuenta financiera Concesionario
    update recaudo_local_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.idconcesionario
               and c.idconcepto = 9
               and r.ori_idbanco <> '52'
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and concepto = 'Concesionario'
       and indtipo = 'SIMIT'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.idconcesionario
               and c.idconcepto = 10
               and r.ori_idbanco <> '52'
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and concepto = 'Concesionario'
       and indtipo = 'POLCA'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set (r.des_idbanco, r.des_tipocuenta, r.des_cuenta, r.des_nit) =
           (select c.idbanco, c.tipocuenta, c.cuenta, c.nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.idconcesionario
               and c.idconcepto = 7
               and r.ori_idbanco = '52'
               and c.idbancorec = r.ori_idbanco)
     where r.fec_corte_ini = w_fec_cor_ini
       and r.fec_corte_fin = w_fec_cor_fin
       and r.concepto = 'Concesionario'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.idconcesionario
               and c.idconcepto = 5
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and indtipo = 'POLCA'
       and idconcesionario = '03'
       and concepto = 'Concesionario'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    -- actualiza cuenta financiera Fondo Cobertura
    update recaudo_local_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.idconcesionario
               and c.idconcepto = 2
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and concepto = 'Fondo Cobertura Concesionario'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    -- actualiza cuenta financiera Fondo Cobertura simit
    update recaudo_local_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.idconcesionario
               and c.idconcepto = 2
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and concepto = 'Fondo Cobertura Simit'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    -- actualiza cuenta financiera Equilibrio
    update recaudo_local_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.idconcesionario
               and c.idconcepto = 2
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and indtipo = 'SIMIT'
       and concepto = 'Equilibrio Economico'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    -- actualiza cuenta financiera Sevial
    update recaudo_local_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.idconcesionario
               and c.idconcepto = 5
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and indtipo = 'POLCA'
       and concepto = 'Sevial'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    -- actualiza cuenta financiera POLCA
    update recaudo_local_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.idconcesionario
               and c.idconcepto = 6
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and indtipo = 'POLCA'
       and concepto = 'Polca'
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    -- actualiza el tipo de cuenta origen
    update recaudo_local_disp r
       set r.ori_tipocuenta =
           (select c.tipocuenta
              from cta_recaudo_fcm c
             where c.cuenta = r.ori_cuenta
               and c.idbanco = r.ori_idbanco)
     where r.fec_corte_ini = w_fec_cor_ini
       and r.fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    delete from recaudo_local_disp
     where fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco
       and valor = 0;
  
    -- ajusta nombre conceptos   
    update recaudo_local_disp r
       set r.concepto = 'Liquidacion FCM'
     where r.concepto = 'Simit'
       and fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set r.concepto =
           (select 'Fondo Cobertura FCM -' || ' ' || c.nombre
              from concesionario c
             where c.idconcesionario = r.idconcesionario)
     where r.concepto = 'Fondo Cobertura Simit'
       and fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set r.concepto =
           (select 'Fondo Cobertura' || ' ' || c.nombre
              from concesionario c
             where c.idconcesionario = r.idconcesionario)
     where r.concepto = 'Fondo Cobertura Concesionario'
       and fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set r.concepto =
           (select 'Equilibrio Economico -' || ' ' || c.nombre
              from concesionario c
             where c.idconcesionario = r.idconcesionario)
     where r.concepto = 'Equilibrio Economico'
       and fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set r.concepto =
           (select 'POLCA SEVIAL'
              from concesionario c
             where c.idconcesionario = r.idconcesionario)
     where r.concepto = 'Sevial'
       and fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set r.concepto =
           (select 'POLCA FCM'
              from concesionario c
             where c.idconcesionario = r.idconcesionario)
     where r.concepto = 'FCM Polca'
       and fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set r.concepto =
           (select 'Liquidacion POLCA'
              from concesionario c
             where c.idconcesionario = r.idconcesionario)
     where r.concepto = 'Polca'
       and fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_local_disp r
       set r.concepto =
           (select 'Liquidacion ' || ' ' || c.nombre
              from concesionario c
             where c.idconcesionario = r.idconcesionario)
     where r.concepto = 'Concesionario'
       and fec_corte_ini = w_fec_cor_ini
       and fec_corte_fin = w_fec_cor_fin
       and decode(ori_idbanco, '52', '52', '99') = p_banco;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_local_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    p_error := 'Distribucion recaudo local OK. Registros procesados: ' ||
               w_registros;
  
    sp_log(p_usuario,
           'Dispersa Recaudo Local',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia || '-' ||
           p_fec_fin_ano || '-' || p_fec_fin_mes || '-' || p_fec_fin_dia);
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [dispersa_recaudo_local] ' || SQLERRM,
            p_error);
  END dispersa_recaudo_local;

  PROCEDURE dispersa_recaudo_externo(p_fec_ini_ano number,
                                     p_fec_ini_mes number,
                                     p_fec_ini_dia number,
                                     p_usuario     varchar2,
                                     p_error       OUT VARCHAR2) as
  
    w_fec_cor_ini    date;
    w_fec_cor_fin    date;
    w_fecmin_cor_ini date;
    w_fecmax_cor_fin date;
    w_registros      number;
  
  begin
    -- VALIDACIONES
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
    END IF;
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    delete from recaudo_externo_disp
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    commit;
  
    -- obtiene valor simit
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             5, -- orden
             sum(s_valor_3),
             'Liquidacion SIMIT', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- neto simit por polca
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             5, -- orden
             sum(p_valor_3 + p_valor_8),
             'Liquidacion SIMIT', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- obtiene valor concesionario
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             7, -- orden
             sum(s_valor_4),
             'Concesionario', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- neto concesionario por polca
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             7, -- orden
             sum(p_valor_4),
             'Concesionario', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- obtiene valor fondo cobertura concesionario
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             8, -- orden
             sum(s_valor_5),
             'Fondo Cobertura Concesionario', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- fondo cobertura concesionario
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             8, -- orden
             sum(p_valor_5),
             'Fondo Cobertura Concesionario', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- obtiene valor fondo cobertura simit
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             6, -- orden
             sum(s_valor_6),
             'Fondo Cobertura SIMIT', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- fondo cobertura simit
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             6, -- orden
             sum(p_valor_6),
             'Fondo Cobertura SIMIT', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- obtiene valor equilibrio economico
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             9, -- orden
             sum(s_valor_7),
             'Equilibrio Economico', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- equilibrio economico
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             9, -- orden
             sum(p_valor_7 + p_valor_10 +
                 decode(id_concesionario_liq, 5, p_valor_15, 0)),
             'Equilibrio Economico', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- equilibrio economico
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             9, -- orden
             sum(decode(id_concesionario_liq, 5, p_valor_13 - p_valor_15, 0)),
             'Impuestos SIMIT CAPITAL', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- valor del concecionario porpietario
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       id_concesionario_pro,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             id_concesionario_pro,
             13, -- orden
             sum(s_valor_11),
             'Concesionario Contravencional', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                id_concesionario_pro,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- valor del concesionario contravencional (propietario)
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       id_concesionario_pro,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             id_concesionario_pro,
             13, -- orden
             sum(p_valor_24),
             'Concesionario Contravencional', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                id_concesionario_pro,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- valor del fcm contravencional
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             14, -- orden
             sum(s_valor_12),
             'Contravencional FCM', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- valor del fcm contravencional
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             14, -- orden
             sum(p_valor_25),
             'Contravencional FCM', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- 100218
  
    -- valor del municipio
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             1, -- orden
             sum(s_valor_26),
             'Municipio', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion r
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
         and validador_fecha = '000'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del municipio
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             1, -- orden
             sum(p_valor_39),
             'Municipio', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and validador_fecha = '000'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del municipio con validador
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             1, -- orden
             sum(s_valor_26),
             'Validador', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion r
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
         and validador_fecha <> '000'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del municipio
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             2, -- orden
             sum(p_valor_39),
             'Validador', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
         and validador_fecha <> '000'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- 100218
  
    -- valor del acuerdo pago
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             15, -- orden
             sum(s_valor_10),
             'Acuerdo Pago', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del acuerdo pago
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             15, -- orden
             sum(p_valor_23),
             'Acuerdo Pago', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del tercero 1
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             2, -- orden
             sum(s_valor_19),
             'Tercero 1', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del tercero 1
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             2, -- orden
             sum(p_valor_32),
             'Tercero 1', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del tercero 2
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             3, -- orden
             sum(s_valor_21),
             'Tercero 2', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del tercero 2
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             3, -- orden
             sum(p_valor_34),
             'Tercero 2', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del tercero 3
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             4, -- orden
             sum(s_valor_23),
             'Tercero 3', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del tercero 3
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             4, -- orden
             sum(p_valor_36),
             'Tercero 3', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del tercero 4
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             4, -- orden
             sum(s_valor_25),
             'Tercero 4', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'SIMIT'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor del tercero 4
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       idmunicipio,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion,
             id_concesionario_liq,
             idmunicipio,
             4, -- orden
             sum(p_valor_38),
             'Tercero 4', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                idmunicipio,
                fec_dispersion,
                idbanco,
                cta_recaudo;
  
    -- valor de polca sevial
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             10, -- orden
             sum(p_valor_9 + p_valor_14),
             'POLCA SEVIAL', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- valor de polca fcm
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             11, -- orden
             sum(decode(id_concesionario_liq, 5, 0, p_valor_13)),
             'POLCA FCM', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- valor del polca
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             fec_dispersion_con,
             id_concesionario_liq,
             12, -- orden
             sum(p_valor_12 - p_valor_18 - p_valor_16),
             'Liquidacion POLCA', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             max(indtipo),
             p_usuario,
             sysdate
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 1
         and indtipo = 'POLCA'
       group by id_concesionario_liq,
                fec_dispersion_con,
                idbanco,
                cta_recaudo;
  
    -- valor no dispersados
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       valor,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso,
       idMunicipio)
      select w_fec_cor_ini,
             w_fec_cor_ini,
             w_fec_cor_ini,
             id_concesionario_liq,
             16, -- orden
             sum(valor_total),
             'Valor no distribuido', -- concepto,
             idbanco,
             'AHO',
             cta_recaudo,
             '8000826650',
             indtipo,
             p_usuario,
             sysdate,
             idmunicipio
      
        from recaudo_externo_liquidacion
       where fec_corte = w_fec_cor_ini
         and ind_proceso = 0
       group by id_concesionario_liq,
                idbanco,
                cta_recaudo,
                indtipo,
                idmunicipio;
  
    commit;
  
    /*
        -- TOTALIZA REGISTROS CON LA MISMA FECHA DE DISPERSION
        -- SE GENERAN VARIOS POR QUE LA FECHA DE DISPERSION ES LA DEL MUNICIIPIO
        -- Y SE CAMBIA A LA FUERZXA POR LA DE ICNICIO DE MES
    
        insert into recaudo_externo_disp
          (fec_corte_ini,
           fec_corte_fin,
           fec_dispersion,
           id_concesionario_liq,
           orden,
           concepto,
           ori_idbanco,
           ori_tipocuenta,
           ori_cuenta,
           ori_nit,
           des_idbanco,
           des_tipocuenta,
           des_cuenta,
           des_nit,
           indtipo,
           usuario_proceso,
           fecha_proceso,
           valor,
           id_concesionario_pro,
           idmunicipio)
          select w_fec_cor_ini,
                 w_fec_cor_fin,
                 fec_dispersion,
                 id_concesionario_liq,
                 orden,
                 concepto,
                 ori_idbanco,
                 ori_tipocuenta,
                 ori_cuenta,
                 ori_nit,
                 des_idbanco,
                 des_tipocuenta,
                 des_cuenta,
                 des_nit,
                 indtipo,
                 p_usuario,
                 sysdate,
                 sum(valor),
                 '',
                 idmunicipio
            from recaudo_externo_disp
            where fec_corte_ini >= w_fec_cor_ini
            and   fec_corte_fin <= w_fec_cor_fin
            and   id_concesionario_pro = '99'
           group by fec_dispersion,
                    id_concesionario_liq,
                    orden,
                    concepto,
                    ori_idbanco,
                    ori_tipocuenta,
                    ori_cuenta,
                    ori_nit,
                    des_idbanco,
                    des_tipocuenta,
                    des_cuenta,
                    des_nit,
                    indtipo,
                    id_concesionario_pro,
                    idmunicipio;
    
            delete
            from recaudo_externo_disp
            where fec_corte_ini >= w_fec_cor_ini
            and   fec_corte_fin <= w_fec_cor_fin
            and   id_concesionario_pro = '99';
    */
  
    -- actualiza cuenta BANCO simit
    update recaudo_externo_disp r
       set (r.des_idbanco, r.des_tipocuenta, r.des_cuenta, r.des_nit) =
           (select c.cta_disp_s_banco,
                   c.cta_disp_s_tipo_cta,
                   c.cta_disp_s_cta,
                   '8000826650'
              from cta_dispersion_fcm c
             where c.idbancorec = r.ori_idbanco)
     where r.fec_corte_ini >= w_fec_cor_ini
       and r.fec_corte_fin <= w_fec_cor_fin
       and r.indtipo = 'SIMIT'
       and r.concepto = 'Liquidacion SIMIT';
  
    update recaudo_externo_disp r
       set (r.des_idbanco, r.des_tipocuenta, r.des_cuenta, r.des_nit) =
           (select c.cta_disp_p_banco,
                   c.cta_disp_p_tipo_cta,
                   c.cta_disp_p_cta,
                   '8000826650'
              from cta_dispersion_fcm c
             where c.idbancorec = r.ori_idbanco)
     where r.fec_corte_ini >= w_fec_cor_ini
       and r.fec_corte_fin <= w_fec_cor_fin
       and indtipo = 'POLCA'
       and concepto = 'Liquidacion SIMIT';
  
    commit;
  
    -- actualiza cuenta BANCO Concesionario
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.id_concesionario_liq
               and c.idconcepto = 1
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Concesionario'
       and indtipo = 'SIMIT';
  
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.id_concesionario_liq
               and c.idconcepto = 8
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Concesionario'
       and indtipo = 'POLCA';
  
    -- actualiza cuenta BANCO Fondo Cobertura
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.id_concesionario_liq
               and c.idconcepto = 2
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Fondo Cobertura Concesionario';
  
    -- actualiza cuenta BANCO Fondo Cobertura simit
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.id_concesionario_liq
               and c.idconcepto = 2
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Fondo Cobertura SIMIT';
  
    -- actualiza cuenta BANCO Equilibrio
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.id_concesionario_liq
               and c.idconcepto = 2
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Equilibrio Economico';
  
    -- actualiza cuenta Impuestos SIMIT CAPITAL
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select c.cta_disp_pa_banco,
                   c.cta_disp_pa_tipo_cta,
                   c.cta_disp_pa_cta,
                   '8000826650'
              from cta_dispersion_fcm c
             where c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Impuestos SIMIT CAPITAL';
  
    -- actualiza cuenta BANCO Municipio
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_cta
              from municipio m
             where m.idmunicipio = r.idmunicipio)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Municipio';
  
    -- 100929
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_cta
              from municipio m
             where m.idmunicipio = '08001001')
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Validador'
       and r.idmunicipio = '08001000';
  
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_cta
              from municipio m
             where m.idmunicipio = '08000000')
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Validador'
       and r.idmunicipio in ('08296000', '08573000');
  
    -- 100929
  
    -- actualiza cuenta BANCO Tercero 1
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_t
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and num_tercero = 1)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Tercero 1';
  
    -- actualiza cuenta BANCO Tercero 2
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_t
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and num_tercero = 2)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Tercero 2';
  
    -- actualiza cuenta BANCO Tercero 3
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_t
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and num_tercero = 1)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Tercero 3';
  
    -- actualiza cuenta BANCO Tercero 4
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_t
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and num_tercero = 4)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Tercero 4';
  
    -- actualiza cuenta BANCO acuerdo de pago
    update recaudo_externo_disp r
       set (r.des_idbanco, r.des_tipocuenta, r.des_cuenta, r.des_nit) =
           (select c.cta_disp_Ac_banco,
                   c.cta_disp_Ac_tipo_cta,
                   c.cta_disp_Ac_cta,
                   '8000826650'
              from cta_dispersion_fcm c
             where c.idbancorec = r.ori_idbanco)
     where r.fec_corte_ini >= w_fec_cor_ini
       and r.fec_corte_fin <= w_fec_cor_fin
       and r.indtipo = 'SIMIT'
       and r.concepto = 'Acuerdo Pago';
  
    update recaudo_externo_disp r
       set (r.des_idbanco, r.des_tipocuenta, r.des_cuenta, r.des_nit) =
           (select c.cta_disp_ac_banco,
                   c.cta_disp_Ac_tipo_cta,
                   c.cta_disp_Ac_cta,
                   '8000826650'
              from cta_dispersion_fcm c
             where c.idbancorec = r.ori_idbanco)
     where r.fec_corte_ini >= w_fec_cor_ini
       and r.fec_corte_fin <= w_fec_cor_fin
       and r.indtipo = 'POLCA'
       and r.concepto = 'Acuerdo Pago';
  
    -- actualiza cuenta BANCO Concesionario Contravencional
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.id_concesionario_pro
               and c.idconcepto = 3
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Concesionario Contravencional';
  
    -- actualiza cuenta BANCO Fcm Contravencional
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.id_concesionario_liq
               and c.idconcepto = 4
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Contravencional FCM';
  
    -- actualiza cuenta BANCO POLCA
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.id_concesionario_liq
               and c.idconcepto = 6
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and indtipo = 'POLCA'
       and concepto = 'Liquidacion POLCA';
  
    -- actualiza cuenta BANCO Sevial
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select idbanco, tipocuenta, cuenta, nit_c
              from cta_dispersion_concesionario c
             where c.idconcesionario = r.id_concesionario_liq
               and c.idconcepto = 5
               and c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and indtipo = 'POLCA'
       and concepto = 'POLCA SEVIAL';
  
    -- actualiza cuenta BANCO POLCA FCM
    update recaudo_externo_disp r
       set (des_idbanco, des_tipocuenta, des_cuenta, des_nit) =
           (select c.cta_disp_pa_banco,
                   c.cta_disp_pa_tipo_cta,
                   c.cta_disp_pa_cta,
                   '8000826650'
              from cta_dispersion_fcm c
             where c.idbancorec = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and indtipo = 'POLCA'
       and concepto = 'POLCA FCM';
  
    -- actualiza el tipo de cuenta origen
    update recaudo_externo_disp r
       set r.ori_tipocuenta =
           (select c.tipocuenta
              from cta_recaudo_concesionario c
             where c.cuenta = r.ori_cuenta
               and c.idconcesionario = r.id_concesionario_liq
               AND r.indtipo = c.indtipo
               and c.idbanco = r.ori_idbanco)
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set des_idbanco    = ori_idbanco,
           des_tipocuenta = ori_tipocuenta,
           des_cuenta     = ori_cuenta,
           des_nit        = ori_nit
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and concepto = 'Valor no distribuido';
  
    commit;
  
    -- actualiza conceptos
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'Liquidacion FCM'
              from concesionario c
             where c.idconcesionario = r.id_concesionario_liq)
     where r.concepto = 'Liquidacion SIMIT'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'Fondo Cobertura FCM -' || ' ' || c.nombre
              from concesionario c
             where c.idconcesionario = r.id_concesionario_liq)
     where r.concepto = 'Fondo Cobertura SIMIT'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'Fondo Cobertura' || ' ' || c.nombre
              from concesionario c
             where c.idconcesionario = r.id_concesionario_liq)
     where r.concepto = 'Fondo Cobertura Concesionario'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto = 'Impuestos FCM'
     where r.concepto = 'Impuestos SIMIT CAPITAL'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'Equilibrio Economico -' || ' ' || c.nombre
              from concesionario c
             where c.idconcesionario = r.id_concesionario_liq)
     where r.concepto = 'Equilibrio Economico'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'POLCA SEVIAL'
              from concesionario c
             where c.idconcesionario = r.id_concesionario_liq)
     where r.concepto = 'POLCA SEVIAL'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'POLCA FCM'
              from concesionario c
             where c.idconcesionario = r.id_concesionario_liq)
     where r.concepto = 'POLCA FCM'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'Liquidacion POLCA'
              from concesionario c
             where c.idconcesionario = r.id_concesionario_liq)
     where r.concepto = 'Liquidacion POLCA'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'Liquidacion ' || ' ' || c.nombre
              from concesionario c
             where c.idconcesionario = r.id_concesionario_liq)
     where r.concepto = 'Concesionario'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select m.idmunicipio || ' Municipio ' || m.nombre
              from municipio m
             where m.idmunicipio = r.idmunicipio)
     where r.concepto = 'Municipio'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'No distribuido ' || m.idmunicipio || ' Municipio ' ||
                   m.nombre
              from municipio m
             where m.idmunicipio = r.idmunicipio)
     where r.concepto = 'Valor no distribuido'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    -- 100929
  
    update recaudo_externo_disp r
       set r.concepto = 'Metrotransito Barranquilla'
     where r.concepto = 'Validador'
       and r.idmunicipio = '08001000'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto = 'Galapa - Dptal Atlantico'
     where r.concepto = 'Validador'
       and r.idmunicipio in ('08296000')
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto = 'Puerto Colombia - Dptal Atlantico'
     where r.concepto = 'Validador'
       and r.idmunicipio in ('08573000')
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    -- 100929
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'Acuerdo Pago ' || m.idmunicipio || ' ' || m.nombre
              from municipio m
             where m.idmunicipio = r.idmunicipio)
     where r.concepto = 'Acuerdo Pago'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto =
           (select 'Contravencional ' || c.nombre
              from concesionario c
             where c.idconcesionario = r.id_concesionario_pro)
     where r.concepto = 'Concesionario Contravencional'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto            =
           (select t.nombre
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and t.num_tercero = 1),
           r.id_concesionario_pro = '98'
     where r.concepto = 'Tercero 1'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto            =
           (select t.nombre
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and t.num_tercero = 2),
           r.id_concesionario_pro = '98'
     where r.concepto = 'Tercero 2'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto            =
           (select t.nombre
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and t.num_tercero = 3),
           r.id_concesionario_pro = '98'
     where r.concepto = 'Tercero 3'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    update recaudo_externo_disp r
       set r.concepto            =
           (select t.nombre
              from tercero t
             where t.idmunicipio = r.idmunicipio
               and t.num_tercero = 4),
           r.id_concesionario_pro = '98'
     where r.concepto = 'Tercero 4'
       and fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin;
  
    commit;
  
    insert into recaudo_externo_disp
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       des_idbanco,
       des_tipocuenta,
       des_cuenta,
       des_nit,
       indtipo,
       usuario_proceso,
       fecha_proceso,
       valor,
       id_concesionario_pro,
       idmunicipio)
      select w_fec_cor_ini,
             w_fec_cor_fin,
             fec_dispersion,
             id_concesionario_liq,
             orden,
             concepto,
             ori_idbanco,
             ori_tipocuenta,
             ori_cuenta,
             ori_nit,
             des_idbanco,
             des_tipocuenta,
             des_cuenta,
             des_nit,
             indtipo,
             p_usuario,
             sysdate,
             sum(valor),
             '',
             '99999999'
        from recaudo_externo_disp
       where fec_corte_ini >= w_fec_cor_ini
         and fec_corte_fin <= w_fec_cor_fin
         and id_concesionario_pro = '98'
       group by fec_dispersion,
                id_concesionario_liq,
                orden,
                concepto,
                ori_idbanco,
                ori_tipocuenta,
                ori_cuenta,
                ori_nit,
                des_idbanco,
                des_tipocuenta,
                des_cuenta,
                des_nit,
                indtipo,
                id_concesionario_pro;
  
    delete from recaudo_externo_disp
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_fin <= w_fec_cor_fin
       and id_concesionario_pro = '98';
  
    delete from recaudo_externo_disp where valor = 0;
  
    -- actualiza datos null
    update recaudo_externo_disp r
       set idmunicipio = '99999999'
     where r.fec_corte_ini >= w_fec_cor_ini
       and r.fec_corte_ini <= w_fec_cor_fin
       and idmunicipio is null;
  
    update recaudo_externo_disp r
       set des_idbanco = ori_idbanco
     where fec_corte_ini >= w_fec_cor_ini
       and fec_corte_ini <= w_fec_cor_fin
       and des_idbanco is null;
  
    commit;
  
    sp_log(p_usuario,
           'Dispersa Recaudo Externo',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [dispersa_recaudo_externo] ' || SQLERRM,
            p_error);
  END dispersa_recaudo_externo;

  PROCEDURE generarArchivoAvvillas(p_fecha   date,
                                   p_usuario varchar2,
                                   p_error   OUT VARCHAR2) as
  
    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
  
    cadena   varchar(250);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
  
    longitud number;
  
    CURSOR tabla IS
      select fec_dispersion,
             id_concesionario_liq,
             orden,
             concepto,
             ori_idbanco,
             ori_tipocuenta,
             ori_cuenta,
             ori_nit,
             des_idbanco,
             des_tipocuenta,
             desencriptar(des_cuenta) as des_cuenta,
             des_nit,
             indtipo,
             valor,
             idmunicipio,
             referenciatrf
        from recaudo_externo_disp_tot
       where fec_dispersion = p_fecha
         and ori_idbanco = '52';
  
  begin
  
    aaaammdd := to_char(p_fecha, 'yyyymmdd');
    hhmmss   := to_char(sysdate, 'hhmmss');
  
    archivo  := utl_file.fopen('TRFAVVILLAS',
                               'CNJ650D.TRANSFER.' || aaaammdd || '.TXT',
                               'W');
    numreg   := 1;
    vlrTotal := 0;
  
    for registro in tabla loop
      cadena := '1'; -- tipo registro
      cadena := cadena || aaaammdd; -- fecha generacion
    
      strValor := trim(to_char(numreg, '00000000'));
      cadena   := cadena || strValor; -- numero registro
    
      strValor := trim(to_char(registro.referenciatrf, '0000000000000000'));
    
      cadena := cadena || strValor;
      cadena := cadena || '0' || registro.ori_idbanco; -- banco origen
    
      if (registro.ori_tipocuenta = 'AHO') then
        cadena := cadena || '1'; -- tipo cuenta origen
      end if;
    
      if (registro.ori_tipocuenta = 'CTE') then
        cadena := cadena || '2'; -- tipo cuenta origen
      end if;
    
      cadena := cadena || '0000000' || registro.ori_cuenta; -- cuenta origen
    
      strValor := trim(to_char(registro.valor * 100, '000000000000000000'));
      cadena   := cadena || strValor; -- valor
    
      if (registro.des_idbanco = '50') then
        cadena := cadena || '051'; -- banco destino
      else
        cadena := cadena || '0' || registro.des_idbanco; -- banco destino
      end if;
    
      if (registro.des_tipocuenta = 'AHO') then
        cadena := cadena || '1'; -- tipo cuenta destino
      end if;
    
      if (registro.des_tipocuenta = 'CTE') then
        cadena := cadena || '2'; -- tipo cuenta destino
      end if;
    
      cadena := cadena || registro.des_cuenta; -- cuenta destino
    
      longitud := LENGTH(registro.des_cuenta);
      longitud := 16 - longitud;
    
      if (longitud > 0) then
        for idx in 1 .. longitud loop
          cadena := cadena || ' ';
        end loop;
      end if;
    
      cadena := cadena || 'N'; -- tipo identificacion destino
      cadena := cadena || '000000' || registro.des_nit; -- identificacion destino
    
      -- mensaje respuesta
      for idx in 1 .. 100 loop
        cadena := cadena || ' ';
      end loop;
    
      cadena := cadena || '999'; -- codigo respuesta
    
      longitud := LENGTH(cadena);
      longitud := 250 - longitud;
    
      -- filler
      for idx in 1 .. longitud loop
        cadena := cadena || '0';
      end loop;
    
      utl_file.put_line(archivo, cadena, true);
      numreg   := numreg + 1;
      vlrTotal := vlrTotal + registro.valor;
    end loop;
  
    cadena := '9'; -- tipo registro
    cadena := cadena || aaaammdd; -- fecha generacion
  
    strValor := trim(to_char(numreg - 1, '00000000'));
    cadena   := cadena || strValor; -- numero registro
  
    strValor := trim(to_char(vlrTotal * 100, '000000000000000000'));
    cadena   := cadena || strValor; -- valor
  
    longitud := LENGTH(cadena);
    longitud := 250 - longitud;
  
    -- filler
    for idx in 1 .. longitud loop
      cadena := cadena || '0';
    end loop;
  
    utl_file.put_line(archivo, cadena, true);
  
    utl_file.fclose(archivo);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarArchivoAvvillas] ' || SQLERRM,
            p_error);
    
  end generarArchivoAvvillas;

  PROCEDURE generarArchivoBancafe(p_fecha   date,
                                  p_usuario varchar2,
                                  p_error   OUT VARCHAR2) as
  
    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
  
    cadena   varchar(170);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
    numTotal number;
  
    longitud number;
  
    CURSOR cuentas is
      select max(tipocuenta) as tipocuenta, cuenta
        from cta_recaudo_concesionario t
       where idbanco = '50'
         AND CUENTA NOT IN ('186992848', '186992830')
       group by cuenta;
  
  begin
  
    aaaammdd := to_char(p_fecha, 'yyyymmdd');
    hhmmss   := to_char(sysdate, 'hhmmss');
  
    for cta in cuentas loop
    
      select sum(valor)
        into vlrTotal
        from recaudo_externo_disp_tot
       where fec_dispersion = p_fecha
         and ori_idbanco = '50'
         and ori_cuenta = cta.cuenta;
    
      select count(*)
        into numTotal
        from recaudo_externo_disp_tot
       where fec_dispersion = p_fecha
         and ori_idbanco = '50'
         and ori_cuenta = cta.cuenta;
    
      archivo := utl_file.fopen('TRFDAVIVIENDA',
                                cta.cuenta || '_' || aaaammdd || '.TXT',
                                'W');
    
      --crear header
      cadena := 'RC'; -- tipo reg
      cadena := cadena || '000000' || '8000826650'; --nit empresa
      cadena := cadena || '0000'; --codigo-servicio
      cadena := cadena || '0000'; --codigo-subservicio
    
      strValor := trim(to_char(to_number(cta.cuenta), '0000000000000000'));
      cadena   := cadena || strValor;
    
      -- tipo cuenta origen
      if (cta.tipocuenta = 'AHO') then
        cadena := cadena || 'CA';
      end if;
    
      if (cta.tipocuenta = 'CTE') then
        cadena := cadena || 'CC';
      end if;
    
      -- banco origen
      cadena := cadena || '000050';
    
      -- valor
      if (vlrTotal is null) then
        vlrTotal := 0;
      end if;
    
      strValor := trim(to_char(vlrTotal * 100, '000000000000000000'));
      cadena   := cadena || strValor; -- valor
    
      -- numero registro
      strValor := trim(to_char(numTotal, '000000'));
      cadena   := cadena || strValor; -- valor
    
      cadena := cadena || aaaammdd; -- fecha proceso
    
      cadena := cadena || '000000'; -- hora proceso
      cadena := cadena || '0000'; -- codigo-operador
      cadena := cadena || '9999'; -- respuesta-proceso
    
      cadena := cadena || aaaammdd; -- fech-generacion
      cadena := cadena || '000000'; -- hora generacion
      cadena := cadena || '00'; -- ind-inscripcion
      cadena := cadena || '00'; -- tipo-identificacion
      cadena := cadena || '000000000000'; -- numero-cliente
      cadena := cadena || '0000'; -- oficina-rec-emp
      cadena := cadena || '0000'; -- actu-co
      cadena := cadena || '0'; -- ind-encripcion
      cadena := cadena || '01'; -- long-arch-s
      cadena := cadena || '0000000000000000'; -- cta-empresa-abono
      cadena := cadena || '000000'; -- talon-abono
      cadena := cadena || '00000000000'; -- filler
    
      utl_file.put_line(archivo, cadena, true);
      for reg in (select fec_dispersion,
                         id_concesionario_liq,
                         orden,
                         concepto,
                         ori_idbanco,
                         ori_tipocuenta,
                         ori_cuenta,
                         ori_nit,
                         des_idbanco,
                         des_tipocuenta,
                         desencriptar(des_cuenta) as des_cuenta,
                         des_nit,
                         indtipo,
                         valor,
                         idmunicipio,
                         referenciatrf
                    from recaudo_externo_disp_tot
                   where fec_dispersion = p_fecha
                     and ori_idbanco = '50'
                     and ori_cuenta = cta.cuenta)
      
       loop
        cadena := '55000000' || reg.des_nit; -- tipo registro
      
        -- nro referencia
        strValor := trim(to_char(reg.referenciatrf, '0000000000000000'));
        cadena   := cadena || strValor;
      
        -- cuenta destino
        strValor := trim(to_char(to_number(reg.des_cuenta),
                                 '0000000000000000'));
        cadena   := cadena || strValor;
      
        -- tipo cuenta destino
        if (reg.des_tipocuenta = 'AHO') then
          cadena := cadena || 'CA';
        end if;
      
        if (reg.des_tipocuenta = 'CTE') then
          cadena := cadena || 'CC';
        end if;
      
        cadena := cadena || '0000' || reg.des_idbanco; --banco destino
      
        strValor := trim(to_char(reg.valor * 100, '000000000000000000'));
        cadena   := cadena || strValor; -- valor
      
        cadena := cadena || '000000'; -- numero talon
        cadena := cadena || '03'; -- tipo ide destino
        cadena := cadena || '0'; -- valide ide
        cadena := cadena || '9999'; -- respuesta traslado
        cadena := cadena || '0000000000000000000000000000000000000000'; --mensaje
        cadena := cadena || '000000000000000000'; -- valor acumulado
        cadena := cadena || aaaammdd; --fecha a
        cadena := cadena || '0000'; -- oficina-rec-det
        cadena := cadena || '0000'; -- motivo-det
        cadena := cadena || '0000'; -- nvo-indalt-tarj
        cadena := cadena || '0'; -- indic-emerg
        cadena := cadena || '00'; -- indic-emerg
      
        utl_file.put_line(archivo, cadena, true);
      
      end loop;
    
      utl_file.fclose(archivo);
    end loop;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarArchivoAvvillas] ' || SQLERRM,
            p_error);
    
  end generarArchivoBancafe;

  PROCEDURE generarArchivoDavivienda(p_fecha   date,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2) as
  
    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
  
    cadena   varchar(170);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
    numTotal number;
  
    longitud number;
  
    CURSOR cuentas is
      select max(tipocuenta) as tipocuenta, cuenta
        from cta_recaudo_concesionario t
       where idbanco = '51'
         AND CUENTA NOT IN ('186992848', '186992830')
       group by cuenta;
  
  begin
  
    aaaammdd := to_char(p_fecha, 'yyyymmdd');
    hhmmss   := to_char(sysdate, 'hhmmss');
  
    for cta in cuentas loop
    
      select sum(valor)
        into vlrTotal
        from recaudo_externo_disp_tot
       where fec_dispersion = p_fecha
         and ori_idbanco in ('50', '51')
         and ori_cuenta = cta.cuenta;
    
      select count(*)
        into numTotal
        from recaudo_externo_disp_tot
       where fec_dispersion = p_fecha
         and ori_idbanco in ('50', '51')
         and ori_cuenta = cta.cuenta;
    
      archivo := utl_file.fopen('TRFDAVIVIENDA',
                                cta.cuenta || '_' || aaaammdd || '.TXT',
                                'W');
    
      --crear header
      cadena := 'RC'; -- tipo reg
      cadena := cadena || '000000' || '8000826650'; --nit empresa
      cadena := cadena || '0000'; --codigo-servicio
      cadena := cadena || '0000'; --codigo-subservicio
    
      strValor := trim(to_char(to_number(cta.cuenta), '0000000000000000'));
      cadena   := cadena || strValor;
    
      -- tipo cuenta origen
      if (cta.tipocuenta = 'AHO') then
        cadena := cadena || 'CA';
      end if;
    
      if (cta.tipocuenta = 'CTE') then
        cadena := cadena || 'CC';
      end if;
    
      -- banco origen
      cadena := cadena || '000051';
    
      -- valor
      if (vlrTotal is null) then
        vlrTotal := 0;
      end if;
    
      strValor := trim(to_char(vlrTotal * 100, '000000000000000000'));
      cadena   := cadena || strValor; -- valor
    
      -- numero registro
      strValor := trim(to_char(numTotal, '000000'));
      cadena   := cadena || strValor; -- valor
    
      cadena := cadena || aaaammdd; -- fecha proceso
    
      cadena := cadena || '000000'; -- hora proceso
      cadena := cadena || '0000'; -- codigo-operador
      cadena := cadena || '9999'; -- respuesta-proceso
    
      cadena := cadena || '00000000'; -- fech-generacion
      cadena := cadena || '000000'; -- hora generacion
      cadena := cadena || '00'; -- ind-inscripcion
      cadena := cadena || '01'; -- tipo-identificacion
      cadena := cadena || '000000000000'; -- numero-cliente
      cadena := cadena || '0000'; -- oficina-rec-emp
      cadena := cadena || '0000000000000000000000000000000000000000'; -- filler
    
      utl_file.put_line(archivo, cadena, true);
      for reg in (select fec_dispersion,
                         id_concesionario_liq,
                         orden,
                         concepto,
                         ori_idbanco,
                         ori_tipocuenta,
                         ori_cuenta,
                         ori_nit,
                         des_idbanco,
                         des_tipocuenta,
                         desencriptar(des_cuenta) as des_cuenta,
                         des_nit,
                         indtipo,
                         valor,
                         idmunicipio,
                         referenciatrf
                    from recaudo_externo_disp_tot
                   where fec_dispersion = p_fecha
                     and ori_idbanco in ('50', '51')
                     and ori_cuenta = cta.cuenta)
      
       loop
        cadena := 'TR000000' || reg.des_nit; -- tipo registro
      
        -- nro referencia
        cadena := cadena || '0000000000000000';
      
        -- cuenta destino
        strValor := trim(to_char(to_number(reg.des_cuenta),
                                 '0000000000000000'));
        cadena   := cadena || strValor;
      
        -- tipo cuenta destino
        if (reg.des_tipocuenta = 'AHO') then
          cadena := cadena || 'CA';
        end if;
      
        if (reg.des_tipocuenta = 'CTE') then
          cadena := cadena || 'CC';
        end if;
      
        if (reg.des_idbanco = '50') then
          cadena := cadena || '000051'; --banco davivienda
        else
          cadena := cadena || '0000' || reg.des_idbanco; --banco destino
        end if;
      
        strValor := trim(to_char(reg.valor * 100, '000000000000000000'));
        cadena   := cadena || strValor; -- valor
      
        cadena := cadena || '000000'; -- numero talon
        cadena := cadena || '01'; -- tipo ide destino
        cadena := cadena || '1'; -- Validar traslados a ACH
        cadena := cadena || '9999'; -- respuesta traslado
        cadena := cadena || '0000000000000000000000000000000000000000'; --mensaje
        cadena := cadena || '000000000000000000'; -- valor acumulado
        cadena := cadena || '00000000'; --fecha a
        cadena := cadena || '0000'; -- oficina-rec-det
        cadena := cadena || '0000'; -- motivo-det
        cadena := cadena || '0000000'; -- filler
      
        utl_file.put_line(archivo, cadena, true);
      
      end loop;
    
      utl_file.fclose(archivo);
    end loop;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarArchivoDavivienda] ' || SQLERRM,
            p_error);
    
  end generarArchivoDavivienda;

  PROCEDURE envio_Banco(p_fec_ini_ano number,
                        p_fec_ini_mes number,
                        p_fec_ini_dia number,
                        p_idbanco     varchar2,
                        p_usuario     varchar2,
                        p_error       OUT VARCHAR2,
                        p_log         out varchar2) as
  
    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
    p_fecha     date;
  
    cadena   varchar(250);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
  
    longitud number;
  
  begin
  
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
    END IF;
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into p_fecha
      from DUAL;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_externo_disp_tot
     where fec_corte_ini = p_fecha
       and enviadobanco = 1
       and ori_idbanco = decode(p_idbanco, '50', '51', p_idbanco);
  
    IF w_registros > 0 THEN
      p_error := 'PROCESO NO EJECUTADO. ARCHIVOS YA ENVIADOS A BANCO. SOLICITAR AUTORIZACION';
      -- ver log envio
      if p_idbanco = '52' then
        verLogEnvioAvvillas(p_log);
      end if;
      if p_idbanco = '50' then
        verLogEnvioDavivienda(p_log);
      end if;
      if p_idbanco = '51' then
        verLogEnvioDavivienda(p_log);
      end if;
    
      RETURN;
    END IF;
  
    if p_idbanco = '52' then
      -- generar archivo transferencia avvillas
      generarArchivoAvvillas(p_fecha, p_usuario, p_error);
    
      IF not P_ERROR is null THEN
        return;
      END IF;
    
      -- ejecutar script transferencia davivienda
      ejecutarScriptAvvillas(p_fecha, p_usuario, p_error);
      /*
      IF not P_ERROR is null THEN
        p_error := 'Error en script avvillas codigo ' ||
                   substr(p_error, 0, 3);
        verLogEnvioAvvillas(p_log);
        return;
      END IF;*/
      -- ver log envio
      verLogEnvioAvvillas(p_log);
      /*
            if (instr(p_log, 'Login failed') > 0) then
              p_error := 'Envio Avvillas. Fallo FTP:Login failed';
              return;
            end if;
      */
    end if;
  
    if (p_idbanco = '50') or (p_idbanco = '51') then
    
      -- generar archivo transferencia avvillas
      generarArchivoDavivienda(p_fecha, p_usuario, p_error);
    
      IF not P_ERROR is null THEN
        return;
      END IF;
    
      -- ejecutar script transferencia davivienda
      ejecutarScriptDavivienda(p_fecha, p_usuario, p_error);
    
      /*    IF not P_ERROR is null THEN
              p_error := 'Error en script Davivienda codigo ' ||
                         substr(p_error, 0, 3);
              verLogEnvioDavivienda(p_log);
              return;
            END IF;
      */
      -- ver log envio
      verLogEnvioDavivienda(p_log);
      /*
            if (instr(p_log, 'Login failed') > 0) then
              p_error := 'Envio Davivienda. Fallo FTP:Login failed';
              return;
            end if;
      */
    end if;
  
    update recaudo_externo_disp_tot
       set enviadobanco = 1, estadotrf = 'ENV', fechaenvio = sysdate
     where fec_corte_ini = p_fecha
       and ori_idbanco = decode(p_idbanco, '50', '51', p_idbanco);
  
    commit;
  
    p_error := 'Archivos enviados a banco OK';
  
    select count(*)
      into w_registros
      from recaudo_externo_disp_tot
     where fec_corte_ini = p_fecha
       and ori_idbanco = decode(p_idbanco, '50', '51', p_idbanco);
  
    IF w_registros = 0 THEN
      p_error := p_error ||
                 '.ADVERTENCIA: NO HAY TRANSFERENCIAS PROGRAMADASPARA LA FECHA DADA';
      RETURN;
    END IF;
  
    sp_log(p_usuario,
           'envio_Banco',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [envio_Banco] ' || SQLERRM, p_error);
    
  end envio_Banco;

  PROCEDURE generarScriptAvvillas(p_fecha   date,
                                  p_usuario varchar2,
                                  p_error   OUT VARCHAR2) as
    archivo  utl_file.file_type;
    aaaammdd varchar(8);
    cadena   varchar(250);
  
  begin
  
    aaaammdd := to_char(p_fecha, 'yyyymmdd');
  
    archivo := utl_file.fopen('TRFAVVILLAS', 'envioAvvillas.xx', 'W');
  
    cadena := 'gpg --batch --encrypt-files -r simitpruebas ' ||
              'CNJ650D.TRANSFER.' || aaaammdd || '.TXT';
  
    cadena := cadena || ' > logEnvioAvvillas.txt';
  
    utl_file.put_line(archivo, cadena, true);
  
    utl_file.fclose(archivo);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarScriptAvvillas] ' || SQLERRM,
            p_error);
    
  end generarScriptAvvillas;

  PROCEDURE generarScriptDavivienda(p_fecha   date,
                                    p_usuario varchar2,
                                    p_error   OUT VARCHAR2) as
    archivo  utl_file.file_type;
    aaaammdd varchar(8);
    cadena   varchar(250);
  
    CURSOR cuentas is
      select max(tipocuenta) as tipocuenta, cuenta
        from cta_recaudo_concesionario t
       where idbanco = '51'
       group by cuenta;
    --AND CUENTA NOT IN ('186992848','186992830'); ctascon recaudo especial
  
  begin
  
    aaaammdd := to_char(p_fecha, 'yyyymmdd');
  
    archivo := utl_file.fopen('TRFDAVIVIENDA', 'envioDavivienda.sh', 'W');
  
    for cta in cuentas loop
    
      cadena := 'gpg --batch --encrypt-files -r simitpruebas ' ||
                cta.cuenta || '_' || aaaammdd || '.TXT';
    
      utl_file.put_line(archivo, cadena, true);
    end loop;
  
    utl_file.fclose(archivo);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarScriptAvvillas] ' || SQLERRM,
            p_error);
    
  end generarScriptDavivienda;

  PROCEDURE ejecutarScriptAvvillas(p_fecha   date,
                                   p_usuario varchar2,
                                   p_error   OUT VARCHAR2) as
    aaaammdd varchar(8);
    comando  varchar(250);
    salida   varchar(250);
  
  begin
  
    aaaammdd := to_char(p_fecha, 'yyyymmdd');
  
    comando := '/bin/sh /trfavvillas/envioAvvillas2.sh&' || aaaammdd;
  
    salida := Shell_Run(comando);
  
    if (substr(salida, 0, 2) <> '0:') then
      p_error := salida;
      return;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [ejecutarScriptAvvillas] ' || SQLERRM,
            p_error);
    
  end ejecutarScriptAvvillas;

  PROCEDURE ejecutarScriptDavivienda(p_fecha   date,
                                     p_usuario varchar2,
                                     p_error   OUT VARCHAR2) as
    aaaammdd varchar(8);
    comando  varchar(250);
    salida   varchar(250);
  
  begin
  
    aaaammdd := to_char(p_fecha, 'yyyymmdd');
  
    comando := '/bin/sh /trfdavivienda/envioDavivienda.sh&' || aaaammdd;
  
    salida := Shell_Run(comando);
  
    if (substr(salida, 0, 2) <> '0:') then
      p_error := salida;
      return;
    end if;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [ejecutarScriptDavivienda] ' || SQLERRM,
            p_error);
    
  end ejecutarScriptDavivienda;

  PROCEDURE verLogEnvioAvvillas(salida OUT VARCHAR2) as
    archivo      utl_file.file_type;
    input_buffer varchar2(1000);
  
  begin
  
    archivo := utl_file.fopen('TRFAVVILLAS', 'envioAvvillas.sh.log', 'R');
  
    salida := '';
    LOOP
      BEGIN
        utl_file.get_line(archivo, input_buffer);
        salida := salida || input_buffer || chr(10);
      EXCEPTION
        when no_data_found then
          exit;
      END;
    END LOOP;
  
    utl_file.fclose(archivo);
  
  EXCEPTION
    WHEN OTHERS THEN
      salida := 'NO FUE POSIBLE LEER LOG envioAvvillas.sh.log: ' || SQLERRM;
    
  end verLogEnvioAvvillas;

  PROCEDURE verLogEnvioDavivienda(salida OUT VARCHAR2) as
    archivo      utl_file.file_type;
    input_buffer varchar2(1000);
  
  begin
  
    archivo := utl_file.fopen('TRFDAVIVIENDA',
                              'envioDavivienda.sh.log',
                              'R');
  
    salida := '';
    LOOP
      BEGIN
        utl_file.get_line(archivo, input_buffer);
        salida := salida || input_buffer || chr(10);
      EXCEPTION
        when no_data_found then
          exit;
      END;
    END LOOP;
  
    utl_file.fclose(archivo);
  EXCEPTION
    WHEN OTHERS THEN
      salida := 'NO FUE POSIBLE LEER LOG envioDavivienda.sh.log: ' ||
                SQLERRM;
    
  end verLogEnvioDavivienda;

  procedure aplicaNovedadesMunicipio(p_fecha date) is
    w_registros number;
  BEGIN
  
    -- aplica novedades de adicion
  
    select count(*)
      into w_registros
      from novmunicipio n
     where n.estadonov = 'VALIDADA'
       and n.fechaact <= p_fecha
       and n.fechaaplicacion is null
       and n.tiponov = '01';
  
    if (w_registros > 0) then
      /*
      n.idmunicipio,
                       n.nit_m,
                       n.nombre,
                       n.iddepartamento,
                       n.idconcesionario,
                       n.correo,
                       n.indretroactividad,
                       n.idbanco,
                       n.tipocuenta,
                       n.cuenta,
                       n.nit_cta,
                       n.indliq_s_ext,
                       n.indliq_s_local,
                       n.indliq_p_ext,
                       n.indliq_p_local,
                       n.indacuerdopago_2002
                 */
    
      DECLARE
        CURSOR cnov IS
          Select *
            from novmunicipio n
           where n.estadonov = 'VALIDADA'
             and n.fechaaplicacion is null
             and fechaact <= p_fecha
             and n.tiponov = '01'
           order by n.idmunicipio asc, n.fechanov asc;
        cnov_rec cnov%ROWTYPE;
      BEGIN
        FOR cnov_rec IN cnov LOOP
        
          select count(*)
            into w_registros
            from municipio
           where idMunicipio = cnov_rec.idmunicipio;
        
          if (w_registros = 0) then
          
            insert into municipio
              (idmunicipio,
               nit_m,
               nombre,
               iddepartamento,
               idconcesionario,
               correo,
               indretroactividad,
               idbanco,
               tipocuenta,
               cuenta,
               nit_cta,
               indliq_s_ext,
               indliq_s_local,
               indliq_p_ext,
               indliq_p_local,
               indacuerdopago_2002)
            values
              (cnov_rec.idmunicipio,
               cnov_rec.nit_m,
               cnov_rec.nombre,
               cnov_rec.iddepartamento,
               cnov_rec.idconcesionario,
               cnov_rec.correo,
               cnov_rec.indretroactividad,
               cnov_rec.idbanco,
               cnov_rec.tipocuenta,
               cnov_rec.cuenta,
               cnov_rec.nit_cta,
               cnov_rec.indliq_s_ext,
               cnov_rec.indliq_s_local,
               cnov_rec.indliq_p_ext,
               cnov_rec.indliq_p_local,
               cnov_rec.indacuerdopago_2002);
          
            insert into p_dispersion_municipio
              (idmunicipio,
               municipio_s,
               fcm_contravencional_s,
               conces_contravencional_s,
               acuerdopago_s,
               municipio_p,
               fcm_contravencional_p,
               conces_contravencional_p,
               acuerdopago_p)
            values
              (cnov_rec.idmunicipio,
               cnov_rec.municipio_s,
               cnov_rec.fcm_contravencional_s,
               cnov_rec.conces_contravencional_s,
               cnov_rec.acuerdopago_s,
               cnov_rec.municipio_p,
               cnov_rec.fcm_contravencional_p,
               cnov_rec.conces_contravencional_p,
               cnov_rec.acuerdopago_p);
            
            update novmunicipio set
              (fechaaplicacion, estadonov) =
              (select sysdate, 'ACTIVADA' from dual) where estadonov = 'VALIDADA' and fechaact <= p_fecha and fechaaplicacion is null and tiponov = '01' and numeronov = cnov_rec.numeronov;
          
            commit;
          
          end if;
        
        END LOOP;
      END;
    
    end if;
  
    -- aplica novedades de actualizacion
  
    select count(*)
      into w_registros
      from novmunicipio n
     where n.estadonov = 'VALIDADA'
       and n.fechaact <= p_fecha
       and n.fechaaplicacion is null
       and n.tiponov = '02';
  
    if (w_registros > 0) then
    
      DECLARE
        CURSOR cnov IS
          Select n.idmunicipio,
                 n.nit_m,
                 n.nombre,
                 n.iddepartamento,
                 n.idconcesionario,
                 n.correo,
                 n.indretroactividad,
                 n.idbanco,
                 n.tipocuenta,
                 n.cuenta,
                 n.nit_cta,
                 n.indliq_s_ext,
                 n.indliq_s_local,
                 n.indliq_p_ext,
                 n.indliq_p_local,
                 n.indacuerdopago_2002
            from novmunicipio n
           where n.estadonov = 'VALIDADA'
             and n.fechaaplicacion is null
             and fechaact <= p_fecha
             and n.tiponov = '02'
           order by n.idmunicipio asc, n.fechanov asc;
        cnov_rec cnov%ROWTYPE;
      BEGIN
        FOR cnov_rec IN cnov LOOP
          update municipio
             set idmunicipio         = cnov_rec.idmunicipio,
                 nit_m               = cnov_rec.nit_m,
                 nombre              = cnov_rec.nombre,
                 iddepartamento      = cnov_rec.iddepartamento,
                 idconcesionario     = cnov_rec.idconcesionario,
                 correo              = cnov_rec.correo,
                 indretroactividad   = cnov_rec.indretroactividad,
                 idbanco             = cnov_rec.idbanco,
                 tipocuenta          = cnov_rec.tipocuenta,
                 cuenta              = cnov_rec.cuenta,
                 nit_cta             = cnov_rec.nit_cta,
                 indliq_s_ext        = cnov_rec.indliq_s_ext,
                 indliq_s_local      = cnov_rec.indliq_s_local,
                 indliq_p_ext        = cnov_rec.indliq_p_ext,
                 indliq_p_local      = cnov_rec.indliq_p_local,
                 indacuerdopago_2002 = cnov_rec.indacuerdopago_2002
           where idmunicipio = cnov_rec.idmunicipio;
        END LOOP;
      END;
    
      DECLARE
        CURSOR cpor IS
          select n.idmunicipio,
                 n.municipio_s,
                 n.fcm_contravencional_s,
                 n.conces_contravencional_s,
                 n.acuerdopago_s,
                 n.municipio_p,
                 n.fcm_contravencional_p,
                 n.conces_contravencional_p,
                 n.acuerdopago_p
            from novmunicipio n
           where n.estadonov = 'VALIDADA'
             and n.fechaact <= p_fecha
             and n.fechaaplicacion is null
             and n.tiponov = '02'
           order by n.idmunicipio asc, n.fechanov asc;
      
        cnov_por cpor%ROWTYPE;
      BEGIN
        FOR cnov_por IN cpor LOOP
          update p_dispersion_municipio
             set idmunicipio              = cnov_por.idmunicipio,
                 municipio_s              = cnov_por.municipio_s,
                 fcm_contravencional_s    = cnov_por.fcm_contravencional_s,
                 conces_contravencional_s = cnov_por.conces_contravencional_s,
                 acuerdopago_s            = cnov_por.acuerdopago_s,
                 municipio_p              = cnov_por.municipio_p,
                 fcm_contravencional_p    = cnov_por.fcm_contravencional_p,
                 conces_contravencional_p = cnov_por.conces_contravencional_p,
                 acuerdopago_p            = cnov_por.acuerdopago_p
           where idmunicipio = cnov_por.idmunicipio;
        END LOOP;
      END;
    
      update novmunicipio
         set (fechaaplicacion, estadonov) =
             (select sysdate, 'ACTIVADA' from dual)
       where estadonov = 'VALIDADA'
         and fechaact <= p_fecha
         and fechaaplicacion is null
         and tiponov = '02';
    
      commit;
    
    end if;
  
  END aplicaNovedadesMunicipio;

  procedure aplicaNovedadesDiasMunicipio(p_fecha date) is
    w_registros number;
  BEGIN
  
    -- aplica novedades de adicion
  
    select count(*)
      into w_registros
      from novdias_dispersion n
     where n.estadonov = 'VALIDADA'
       and n.fechaact <= p_fecha
       and n.fechaaplicacion is null
       and n.tiponov = '06';
  
    if (w_registros > 0) then
    
      insert into dias_dispersion
        (idmunicipio,
         idbanco,
         dias_dispersion_sl,
         frec_dispersion_sl,
         dias_dispersion_pl,
         frec_dispersion_pl,
         dias_dispersion_se,
         frec_dispersion_se,
         dias_dispersion_pe,
         frec_dispersion_pe)
      
        select idmunicipio,
               idbanco,
               dias_dispersion_sl,
               frec_dispersion_sl,
               dias_dispersion_pl,
               frec_dispersion_pl,
               dias_dispersion_se,
               frec_dispersion_se,
               dias_dispersion_pe,
               frec_dispersion_pe
          from novdias_dispersion
         where estadonov = 'VALIDADA'
           and fechaact <= p_fecha
           and fechaaplicacion is null
           and tiponov = '06';
    
      update novdias_dispersion
         set (fechaaplicacion, estadonov) =
             (select sysdate, 'ACTIVADA' from dual)
       where estadonov = 'VALIDADA'
         and fechaact <= p_fecha
         and fechaaplicacion is null
         and tiponov = '06';
    
      commit;
    
    end if;
  
    -- aplica novedades de actualizacion
  
    select count(*)
      into w_registros
      from novdias_dispersion n
     where n.estadonov = 'VALIDADA'
       and n.fechaact <= p_fecha
       and n.fechaaplicacion is null
       and n.tiponov = '07';
  
    if (w_registros > 0) then
    
      DECLARE
        CURSOR cnov IS
          select idmunicipio,
                 idbanco,
                 dias_dispersion_sl,
                 frec_dispersion_sl,
                 dias_dispersion_pl,
                 frec_dispersion_pl,
                 dias_dispersion_se,
                 frec_dispersion_se,
                 dias_dispersion_pe,
                 frec_dispersion_pe
            from novdias_dispersion
           where estadonov = 'VALIDADA'
             and fechaaplicacion is null
             and fechaact <= p_fecha
             and tiponov = '07'
           order by idmunicipio asc, fechanov asc;
      
        cnov_rec cnov%ROWTYPE;
      
      BEGIN
        FOR cnov_rec IN cnov LOOP
        
          update dias_dispersion
             set idmunicipio        = cnov_rec.idmunicipio,
                 idbanco            = cnov_rec.idbanco,
                 dias_dispersion_sl = cnov_rec.dias_dispersion_sl,
                 frec_dispersion_sl = cnov_rec.frec_dispersion_sl,
                 dias_dispersion_pl = cnov_rec.dias_dispersion_pl,
                 frec_dispersion_pl = cnov_rec.frec_dispersion_pl,
                 dias_dispersion_se = cnov_rec.dias_dispersion_se,
                 frec_dispersion_se = cnov_rec.frec_dispersion_se,
                 dias_dispersion_pe = cnov_rec.dias_dispersion_pe,
                 frec_dispersion_pe = cnov_rec.frec_dispersion_pe
           where idmunicipio = cnov_rec.idmunicipio;
        
        END LOOP;
      END;
    
      update novdias_dispersion
         set (fechaaplicacion, estadonov) =
             (select sysdate, 'ACTIVADA' from dual)
       where estadonov = 'VALIDADA'
         and fechaact <= p_fecha
         and fechaaplicacion is null
         and tiponov = '07';
    
      commit;
    
    end if;
  
    -- aplica novedades de eliminacion
  
    select count(*)
      into w_registros
      from novdias_dispersion n
     where n.estadonov = 'VALIDADA'
       and n.fechaact <= p_fecha
       and n.fechaaplicacion is null
       and n.tiponov = '08';
  
    if (w_registros > 0) then
    
      DECLARE
        CURSOR cnov IS
          select idmunicipio,
                 idbanco,
                 dias_dispersion_sl,
                 frec_dispersion_sl,
                 dias_dispersion_pl,
                 frec_dispersion_pl,
                 dias_dispersion_se,
                 frec_dispersion_se,
                 dias_dispersion_pe,
                 frec_dispersion_pe
            from novdias_dispersion
           where estadonov = 'VALIDADA'
             and fechaaplicacion is null
             and fechaact <= p_fecha
             and tiponov = '08'
           order by idmunicipio asc, fechanov asc;
      
        cnov_rec cnov%ROWTYPE;
      
      BEGIN
        FOR cnov_rec IN cnov LOOP
        
          delete from dias_dispersion
           where idmunicipio = cnov_rec.idmunicipio
             and idbanco = cnov_rec.idbanco;
        
        END LOOP;
      END;
    
      update novdias_dispersion
         set (fechaaplicacion, estadonov) =
             (select sysdate, 'ACTIVADA' from dual)
       where estadonov = 'VALIDADA'
         and fechaact <= p_fecha
         and fechaaplicacion is null
         and tiponov = '08';
    
      commit;
    
    end if;
  
  END aplicaNovedadesDiasMunicipio;

  procedure aplicaNovedadesTercero(p_fecha date) is
    w_registros number;
  BEGIN
  
    -- aplica novedades de adicion
  
    select count(*)
      into w_registros
      from novTercero n
     where n.estadonov = 'VALIDADA'
       and n.fechaact <= p_fecha
       and n.fechaaplicacion is null
       and n.tiponov = '03';
  
    if (w_registros > 0) then
    
      insert into tercero
        (idmunicipio,
         nit_t,
         nombre,
         idbanco,
         tipocuenta,
         cuenta,
         base_s,
         base_p,
         ind_base,
         num_tercero,
         correotercero)
        select idmunicipio,
               nit_t,
               nombre,
               idbanco,
               tipocuenta,
               cuenta,
               base_s,
               base_p,
               ind_base,
               num_tercero,
               correotercero
          from novTercero
         where estadonov = 'VALIDADA'
           and fechaact <= p_fecha
           and fechaaplicacion is null
           and tiponov = '03';
    
      update novTercero
         set (fechaaplicacion, estadonov) =
             (select sysdate, 'ACTIVADA' from dual)
       where estadonov = 'VALIDADA'
         and fechaact <= p_fecha
         and fechaaplicacion is null
         and tiponov = '03';
    
      commit;
    
    end if;
  
    -- aplica novedades de actualizacion
  
    select count(*)
      into w_registros
      from novTercero n
     where n.estadonov = 'VALIDADA'
       and n.fechaact <= p_fecha
       and n.fechaaplicacion is null
       and n.tiponov = '04';
  
    if (w_registros > 0) then
    
      DECLARE
        CURSOR cnov IS
          select idmunicipio,
                 nit_t,
                 nombre,
                 idbanco,
                 tipocuenta,
                 cuenta,
                 base_s,
                 base_p,
                 ind_base,
                 num_tercero,
                 correotercero
            from novTercero
           where estadonov = 'VALIDADA'
             and fechaaplicacion is null
             and fechaact <= p_fecha
             and tiponov = '04'
           order by idmunicipio asc, fechanov asc;
      
        cnov_rec cnov%ROWTYPE;
      
      BEGIN
        FOR cnov_rec IN cnov LOOP
        
          update tercero
             set idmunicipio   = cnov_rec.idmunicipio,
                 nit_t         = cnov_rec.nit_t,
                 nombre        = cnov_rec.nombre,
                 idbanco       = cnov_rec.idbanco,
                 tipocuenta    = cnov_rec.tipocuenta,
                 cuenta        = cnov_rec.cuenta,
                 base_s        = cnov_rec.base_s,
                 base_p        = cnov_rec.base_p,
                 ind_base      = cnov_rec.ind_base,
                 num_tercero   = cnov_rec.num_tercero,
                 correotercero = cnov_rec.correotercero
           where idmunicipio = cnov_rec.idmunicipio
             and num_tercero = cnov_rec.num_tercero;
        
        END LOOP;
      END;
    
      update novTercero
         set (fechaaplicacion, estadonov) =
             (select sysdate, 'ACTIVADA' from dual)
       where estadonov = 'VALIDADA'
         and fechaact <= p_fecha
         and fechaaplicacion is null
         and tiponov = '04';
    
      commit;
    
    end if;
  
    -- aplica novedades de eliminacion
  
    select count(*)
      into w_registros
      from novTercero n
     where n.estadonov = 'VALIDADA'
       and n.fechaact <= p_fecha
       and n.fechaaplicacion is null
       and n.tiponov = '05';
  
    if (w_registros > 0) then
    
      DECLARE
        CURSOR cnov IS
          select idmunicipio,
                 nit_t,
                 nombre,
                 idbanco,
                 tipocuenta,
                 cuenta,
                 base_s,
                 base_p,
                 ind_base,
                 num_tercero,
                 correotercero
            from novTercero
           where estadonov = 'VALIDADA'
             and fechaaplicacion is null
             and fechaact <= p_fecha
             and tiponov = '05'
           order by idmunicipio asc, fechanov asc;
      
        cnov_rec cnov%ROWTYPE;
      
      BEGIN
        FOR cnov_rec IN cnov LOOP
        
          delete from tercero
           where idmunicipio = cnov_rec.idmunicipio
             and num_tercero = cnov_rec.num_tercero;
        
        END LOOP;
      END;
    
      update novTercero
         set (fechaaplicacion, estadonov) =
             (select sysdate, 'ACTIVADA' from dual)
       where estadonov = 'VALIDADA'
         and fechaact <= p_fecha
         and fechaaplicacion is null
         and tiponov = '05';
    
      commit;
    
    end if;
  
  END aplicaNovedadesTercero;

  PROCEDURE valida_transferencia(p_fec_ini_ano number,
                                 p_fec_ini_mes number,
                                 p_fec_ini_dia number,
                                 p_usuario     varchar2,
                                 p_error       OUT VARCHAR2) as
    w_fec_trf_ini date;
    w_registros   number;
  
  begin
    -- VALIDACIONES
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
    END IF;
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_trf_ini
      from DUAL;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_externo_disp_tot
     where fec_dispersion = w_fec_trf_ini;
  
    IF w_registros = 0 THEN
      p_error := 'NO SE HA REALIZADO EL PROCESO DE TRANSFERENCIA DE LA FECHA';
      RETURN;
    END IF;
  
    p_error := 'OK';
  
  END valida_transferencia;

  PROCEDURE ejecutarDesencripta(p_fecha   date,
                                p_usuario varchar2,
                                p_idbanco varchar2,
                                p_error   OUT VARCHAR2,
                                salida    OUT VARCHAR2) as
    aaaammdd     varchar(8);
    mmdd         varchar(4);
    aammdd       varchar(6);
    comando      varchar(250);
    archivo      utl_file.file_type;
    input_buffer varchar2(1000);
  
  begin
  
    aaaammdd := to_char(p_fecha, 'yyyymmdd');
    mmdd     := to_char(p_fecha, 'mmdd');
    aammdd   := to_char(p_fecha, 'yymmdd');
  
    if (p_idbanco = '52') then
      comando := 'sh /trfavvillas/desencriptar.sh ' || aaaammdd || ' ' || mmdd;
    else
      comando := 'sh /trfdavivienda/desencriptar.sh ' || aaaammdd || ' ' ||
                 aammdd;
    end if;
  
    salida := Shell_Run(comando);
  
    if (substr(salida, 0, 2) <> '0:') then
      p_error := salida;
      return;
    end if;
  
    p_error := 'DESENCRIPCION CORRECTA';
  
    verLogDesencripta(p_idbanco, salida);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [ejecutarDesencripta] ' || SQLERRM,
            p_error);
    
  end ejecutarDesencripta;

  PROCEDURE desencripta_Banco(p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_idbanco     varchar2,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2,
                              p_log         out varchar2) as
  
    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
    p_fecha     date;
  
    cadena   varchar(250);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
  
    longitud number;
  
  begin
  
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
    END IF;
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into p_fecha
      from DUAL;
  
    ejecutarDesencripta(p_fecha, p_usuario, p_idbanco, p_error, p_log);
  
    verLogDesencripta(p_idbanco, p_log);
  
    p_error := 'Se lanzo proceso OK';
  
    sp_log(p_usuario,
           'desencripta_Banco',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [desencripta_Banco] ' || SQLERRM,
            p_error);
    
  end desencripta_Banco;

  PROCEDURE verLogDesencripta(p_idbanco varchar2, salida OUT VARCHAR2) as
    archivo      utl_file.file_type;
    input_buffer varchar2(1000);
  
  begin
  
    if (p_idbanco = '52') then
      archivo := utl_file.fopen('TRFAVVILLAS', 'desencriptar.sh.log', 'R');
    else
      archivo := utl_file.fopen('TRFDAVIVIENDA', 'desencriptar.sh.log', 'R');
    end if;
  
    salida := '';
    LOOP
      BEGIN
        utl_file.get_line(archivo, input_buffer);
        salida := salida || input_buffer || chr(10);
      EXCEPTION
        when no_data_found then
          exit;
      END;
    END LOOP;
  
    utl_file.fclose(archivo);
  
  EXCEPTION
    WHEN OTHERS THEN
      salida := 'NO FUE POSIBLE LEER LOG desencriptar.sh.log: ' || SQLERRM;
    
  end verLogDesencripta;

  PROCEDURE envio_Banco_repro(p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_fec_fin_ano number,
                              p_fec_fin_mes number,
                              p_fec_fin_dia number,
                              p_idbanco     varchar2,
                              p_usuario     varchar2,
                              p_error       OUT VARCHAR2,
                              p_log         out varchar2) as
  
    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
    p_fecha_ini date;
    p_fecha_fin date;
  
    cadena   varchar(250);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
  
    longitud number;
  
  begin
  
    if (not p_usuario = '99999999') THEN
      sp_v_usuario(p_usuario, p_error, 'pk_proc');
    END IF;
  
    IF not P_ERROR is null THEN
      return;
    END IF;
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into p_fecha_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into p_fecha_fin
      from DUAL;
  
    -- obtiene cantidad de registros actualizados
    /*    select count(*)
          into w_registros
          from recaudo_externo_disp_tot
         where (fec_corte_ini >= p_fecha_ini and fec_corte_ini <= p_fecha_fin)
           and enviadobanco = 1
           and ori_idbanco = p_idbanco;
    
        IF w_registros > 0 THEN
          p_error := 'PROCESO NO EJECUTADO. ARCHIVOS YA ENVIADOS A BANCO. SOLICITAR AUTORIZACION';
          -- ver log envio
          if p_idbanco = '52' then
            verLogEnvioAvvillas(p_log);
          end if;
          if p_idbanco = '50' then
            verLogEnvioDavivienda(p_log);
          end if;
    
          RETURN;
        END IF;
    
    */
    if p_idbanco = '52' then
      -- generar archivo transferencia avvillas
      generarArchivoAvvillas_repro(p_fecha_ini,
                                   p_fecha_fin,
                                   p_usuario,
                                   p_error);
    
      IF not P_ERROR is null THEN
        return;
      END IF;
    
      -- ejecutar script transferencia avvillas
      ejecutarScriptAvvillas(sysdate, p_usuario, p_error);
    
      /*IF not P_ERROR is null THEN
        p_error := 'Error en script avvillas codigo ' ||
                   substr(p_error, 0, 3);
        verLogEnvioAvvillas(p_log);
        return;
      END IF;*/
    
      -- ver log envio
      verLogEnvioAvvillas(p_log);
    
      /*if (instr(p_log, 'Login failed') > 0) then
        p_error := 'Envio Avvillas. Fallo FTP:Login failed';
        return;
      end if;
      */
    end if;
  
    if (p_idbanco = '50') or (p_idbanco = '51') then
    
      -- generar archivo transferencia avvillas
      generarArchivoDavivienda_repro(p_fecha_ini,
                                     p_fecha_fin,
                                     p_usuario,
                                     p_error);
    
      IF not P_ERROR is null THEN
        return;
      END IF;
    
      -- ejecutar script transferencia davivienda
      ejecutarScriptDavivienda(sysdate, p_usuario, p_error);
    
      /*IF not P_ERROR is null THEN
        p_error := 'Error en script Davivienda codigo ' ||
                   substr(p_error, 0, 3);
        verLogEnvioDavivienda(p_log);
        return;
      END IF;*/
    
      -- ver log envio
      verLogEnvioDavivienda(p_log);
      /*
      if (instr(p_log, 'Login failed') > 0) then
        p_error := 'Envio Davivienda. Fallo FTP:Login failed';
        return;
      end if;
      */
    end if;
  
    update recaudo_externo_disp_tot
       set enviadobanco = 1, estadotrf = 'ENV', fechaenvio = sysdate
     where fec_corte_ini >= p_fecha_ini
       and fec_corte_ini <= p_fecha_fin
       and ori_idbanco = decode(p_idbanco, '50', '51', p_idbanco);
  
    commit;
  
    p_error := 'Archivos generados OK';
  
    select count(*)
      into w_registros
      from recaudo_externo_disp_tot
     where fec_corte_ini >= p_fecha_ini
       and fec_corte_ini <= p_fecha_fin
       and ori_idbanco = decode(p_idbanco, '50', '51', p_idbanco);
  
    IF w_registros = 0 THEN
      p_error := p_error ||
                 '.ADVERTENCIA: NO HAY TRANSFERENCIAS PROGRAMADASPARA LA FECHA DADA';
      RETURN;
    END IF;
  
    sp_log(p_usuario,
           'envio_Banco_repro',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia || ':' ||
           p_fec_fin_ano || '-' || p_fec_fin_mes || '-' || p_fec_fin_dia);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [envio_Banco_repro] ' || SQLERRM,
            p_error);
    
  end envio_Banco_repro;

  PROCEDURE generarArchivoAvvillas_repro(p_fecha_ini date,
                                         p_fecha_fin date,
                                         p_usuario   varchar2,
                                         p_error     OUT VARCHAR2) as
  
    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
  
    cadena   varchar(250);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
  
    longitud number;
  
    CURSOR tabla IS
      select fec_dispersion,
             id_concesionario_liq,
             orden,
             concepto,
             ori_idbanco,
             ori_tipocuenta,
             ori_cuenta,
             ori_nit,
             des_idbanco,
             des_tipocuenta,
             desencriptar(des_cuenta) as des_cuenta,
             des_nit,
             indtipo,
             valor,
             idmunicipio,
             referenciatrf
        from recaudo_externo_disp_tot
       where fec_dispersion >= p_fecha_ini
         and fec_dispersion <= p_fecha_fin
         and ori_idbanco = '52';
  
  begin
  
    aaaammdd := to_char(sysdate, 'yyyymmdd');
    hhmmss   := to_char(sysdate, 'hhmmss');
  
    archivo  := utl_file.fopen('TRFAVVILLAS',
                               'CNJ650D.TRANSFER.' || aaaammdd || '.TXT',
                               'W');
    numreg   := 1;
    vlrTotal := 0;
  
    for registro in tabla loop
      cadena := '1'; -- tipo registro
      cadena := cadena || aaaammdd; -- fecha generacion
    
      strValor := trim(to_char(numreg, '00000000'));
      cadena   := cadena || strValor; -- numero registro
    
      strValor := trim(to_char(registro.referenciatrf, '0000000000000000'));
    
      cadena := cadena || strValor;
      cadena := cadena || '0' || registro.ori_idbanco; -- banco origen
    
      if (registro.ori_tipocuenta = 'AHO') then
        cadena := cadena || '1'; -- tipo cuenta origen
      end if;
    
      if (registro.ori_tipocuenta = 'CTE') then
        cadena := cadena || '2'; -- tipo cuenta origen
      end if;
    
      cadena := cadena || '0000000' || registro.ori_cuenta; -- cuenta origen
    
      strValor := trim(to_char(registro.valor * 100, '000000000000000000'));
      cadena   := cadena || strValor; -- valor
    
      if (registro.des_idbanco = '50') then
        cadena := cadena || '051'; -- banco destino
      else
        cadena := cadena || '0' || registro.des_idbanco; -- banco destino
      end if;
    
      if (registro.des_tipocuenta = 'AHO') then
        cadena := cadena || '1'; -- tipo cuenta destino
      end if;
    
      if (registro.des_tipocuenta = 'CTE') then
        cadena := cadena || '2'; -- tipo cuenta destino
      end if;
    
      cadena := cadena || registro.des_cuenta; -- cuenta destino
    
      longitud := LENGTH(registro.des_cuenta);
      longitud := 16 - longitud;
    
      if (longitud > 0) then
        for idx in 1 .. longitud loop
          cadena := cadena || ' ';
        end loop;
      end if;
    
      cadena := cadena || 'N'; -- tipo identificacion destino
      cadena := cadena || '000000' || registro.des_nit; -- identificacion destino
    
      -- mensaje respuesta
      for idx in 1 .. 100 loop
        cadena := cadena || ' ';
      end loop;
    
      cadena := cadena || '999'; -- codigo respuesta
    
      longitud := LENGTH(cadena);
      longitud := 250 - longitud;
    
      -- filler
      for idx in 1 .. longitud loop
        cadena := cadena || '0';
      end loop;
    
      utl_file.put_line(archivo, cadena, true);
      numreg   := numreg + 1;
      vlrTotal := vlrTotal + registro.valor;
    end loop;
  
    cadena := '9'; -- tipo registro
    cadena := cadena || aaaammdd; -- fecha generacion
  
    strValor := trim(to_char(numreg - 1, '00000000'));
    cadena   := cadena || strValor; -- numero registro
  
    strValor := trim(to_char(vlrTotal * 100, '000000000000000000'));
    cadena   := cadena || strValor; -- valor
  
    longitud := LENGTH(cadena);
    longitud := 250 - longitud;
  
    -- filler
    for idx in 1 .. longitud loop
      cadena := cadena || '0';
    end loop;
  
    utl_file.put_line(archivo, cadena, true);
  
    utl_file.fclose(archivo);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarArchivoAvvillas_repro] ' || SQLERRM,
            p_error);
    
  end generarArchivoAvvillas_repro;

  PROCEDURE generarArchivoBancafe_repro(p_fecha_ini date,
                                        p_fecha_fin date,
                                        p_usuario   varchar2,
                                        p_error     OUT VARCHAR2) as
  
    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
  
    cadena   varchar(170);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
    numTotal number;
  
    longitud number;
  
    CURSOR cuentas is
      select max(tipocuenta) as tipocuenta, cuenta
        from cta_recaudo_concesionario t
       where idbanco = '50'
         AND CUENTA NOT IN ('186992848', '186992830')
       group by cuenta;
  
  begin
  
    aaaammdd := to_char(sysdate, 'yyyymmdd');
    hhmmss   := to_char(sysdate, 'hhmmss');
  
    for cta in cuentas loop
    
      select sum(valor)
        into vlrTotal
        from recaudo_externo_disp_tot
       where fec_dispersion >= p_fecha_ini
         and fec_dispersion <= p_fecha_fin
         and ori_idbanco = '50'
         and ori_cuenta = cta.cuenta;
    
      select count(*)
        into numTotal
        from recaudo_externo_disp_tot
       where fec_dispersion >= p_fecha_ini
         and fec_dispersion <= p_fecha_fin
         and ori_idbanco = '50'
         and ori_cuenta = cta.cuenta;
    
      archivo := utl_file.fopen('TRFDAVIVIENDA',
                                cta.cuenta || '_' || aaaammdd || '.TXT',
                                'W');
    
      --crear header
      cadena := 'RC'; -- tipo reg
      cadena := cadena || '000000' || '8000826650'; --nit empresa
      cadena := cadena || '0000'; --codigo-servicio
      cadena := cadena || '0000'; --codigo-subservicio
    
      strValor := trim(to_char(to_number(cta.cuenta), '0000000000000000'));
      cadena   := cadena || strValor;
    
      -- tipo cuenta origen
      if (cta.tipocuenta = 'AHO') then
        cadena := cadena || 'CA';
      end if;
    
      if (cta.tipocuenta = 'CTE') then
        cadena := cadena || 'CC';
      end if;
    
      -- banco origen
      cadena := cadena || '000050';
    
      -- valor
      if (vlrTotal is null) then
        vlrTotal := 0;
      end if;
    
      strValor := trim(to_char(vlrTotal * 100, '000000000000000000'));
      cadena   := cadena || strValor; -- valor
    
      -- numero registro
      strValor := trim(to_char(numTotal, '000000'));
      cadena   := cadena || strValor; -- valor
    
      cadena := cadena || aaaammdd; -- fecha proceso
    
      cadena := cadena || '000000'; -- hora proceso
      cadena := cadena || '0000'; -- codigo-operador
      cadena := cadena || '9999'; -- respuesta-proceso
    
      cadena := cadena || aaaammdd; -- fech-generacion
      cadena := cadena || '000000'; -- hora generacion
      cadena := cadena || '00'; -- ind-inscripcion
      cadena := cadena || '00'; -- tipo-identificacion
      cadena := cadena || '000000000000'; -- numero-cliente
      cadena := cadena || '0000'; -- oficina-rec-emp
      cadena := cadena || '0000'; -- actu-co
      cadena := cadena || '0'; -- ind-encripcion
      cadena := cadena || '01'; -- long-arch-s
      cadena := cadena || '0000000000000000'; -- cta-empresa-abono
      cadena := cadena || '000000'; -- talon-abono
      cadena := cadena || '00000000000'; -- filler
    
      utl_file.put_line(archivo, cadena, true);
      for reg in (select fec_dispersion,
                         id_concesionario_liq,
                         orden,
                         concepto,
                         ori_idbanco,
                         ori_tipocuenta,
                         ori_cuenta,
                         ori_nit,
                         des_idbanco,
                         des_tipocuenta,
                         desencriptar(des_cuenta) as des_cuenta,
                         des_nit,
                         indtipo,
                         valor,
                         idmunicipio,
                         referenciatrf
                    from recaudo_externo_disp_tot
                   where fec_dispersion >= p_fecha_ini
                     and fec_dispersion <= p_fecha_fin
                     and ori_idbanco = '50'
                     and ori_cuenta = cta.cuenta)
      
       loop
        cadena := '55000000' || reg.des_nit; -- tipo registro
      
        -- nro referencia
        strValor := trim(to_char(reg.referenciatrf, '0000000000000000'));
        cadena   := cadena || strValor;
      
        -- cuenta destino
        strValor := trim(to_char(to_number(reg.des_cuenta),
                                 '0000000000000000'));
        cadena   := cadena || strValor;
      
        -- tipo cuenta destino
        if (reg.des_tipocuenta = 'AHO') then
          cadena := cadena || 'CA';
        end if;
      
        if (reg.des_tipocuenta = 'CTE') then
          cadena := cadena || 'CC';
        end if;
      
        cadena := cadena || '0000' || reg.des_idbanco; --banco destino
      
        strValor := trim(to_char(reg.valor * 100, '000000000000000000'));
        cadena   := cadena || strValor; -- valor
      
        cadena := cadena || '000000'; -- numero talon
        cadena := cadena || '03'; -- tipo ide destino
        cadena := cadena || '0'; -- valide ide
        cadena := cadena || '9999'; -- respuesta traslado
        cadena := cadena || '0000000000000000000000000000000000000000'; --mensaje
        cadena := cadena || '000000000000000000'; -- valor acumulado
        cadena := cadena || aaaammdd; --fecha a
        cadena := cadena || '0000'; -- oficina-rec-det
        cadena := cadena || '0000'; -- motivo-det
        cadena := cadena || '0000'; -- nvo-indalt-tarj
        cadena := cadena || '0'; -- indic-emerg
        cadena := cadena || '00'; -- indic-emerg
      
        utl_file.put_line(archivo, cadena, true);
      
      end loop;
    
      utl_file.fclose(archivo);
    end loop;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarArchivoAvvillas] ' || SQLERRM,
            p_error);
    
  end generarArchivoBancafe_repro;

  PROCEDURE generarArchivoDavivienda_repro(p_fecha_ini date,
                                           p_fecha_fin date,
                                           p_usuario   varchar2,
                                           p_error     OUT VARCHAR2) as
  
    w_registros number;
    archivo     utl_file.file_type;
    aaaammdd    varchar(8);
    hhmmss      varchar(6);
  
    cadena   varchar(170);
    numreg   number;
    strValor varchar(250);
    vlrTotal number;
    numTotal number;
  
    longitud number;
  
    CURSOR cuentas is
      select max(tipocuenta) as tipocuenta, cuenta
        from cta_recaudo_concesionario t
       where idbanco = '51'
         AND CUENTA NOT IN ('186992848', '186992830')
       group by cuenta;
  
  begin
  
    aaaammdd := to_char(sysdate, 'yyyymmdd');
    hhmmss   := to_char(sysdate, 'hhmmss');
  
    for cta in cuentas loop
    
      select sum(valor)
        into vlrTotal
        from recaudo_externo_disp_tot
       where fec_dispersion >= p_fecha_ini
         and fec_dispersion <= p_fecha_fin
         and ori_idbanco in ('50', '51')
         and ori_cuenta = cta.cuenta;
    
      select count(*)
        into numTotal
        from recaudo_externo_disp_tot
       where fec_dispersion >= p_fecha_ini
         and fec_dispersion <= p_fecha_fin
         and ori_idbanco in ('50', '51')
         and ori_cuenta = cta.cuenta;
    
      archivo := utl_file.fopen('TRFDAVIVIENDA',
                                cta.cuenta || '_' || aaaammdd || '.TXT',
                                'W');
    
      --crear header
      cadena := 'RC'; -- tipo reg
      cadena := cadena || '000000' || '8000826650'; --nit empresa
      cadena := cadena || '0000'; --codigo-servicio
      cadena := cadena || '0000'; --codigo-subservicio
    
      strValor := trim(to_char(to_number(cta.cuenta), '0000000000000000'));
      cadena   := cadena || strValor;
    
      -- tipo cuenta origen
      if (cta.tipocuenta = 'AHO') then
        cadena := cadena || 'CA';
      end if;
    
      if (cta.tipocuenta = 'CTE') then
        cadena := cadena || 'CC';
      end if;
    
      -- banco origen
      cadena := cadena || '000051';
    
      -- valor
      if (vlrTotal is null) then
        vlrTotal := 0;
      end if;
    
      strValor := trim(to_char(vlrTotal * 100, '000000000000000000'));
      cadena   := cadena || strValor; -- valor
    
      -- numero registro
      strValor := trim(to_char(numTotal, '000000'));
      cadena   := cadena || strValor; -- valor
    
      cadena := cadena || aaaammdd; -- fecha proceso
    
      cadena := cadena || '000000'; -- hora proceso
      cadena := cadena || '0000'; -- codigo-operador
      cadena := cadena || '9999'; -- respuesta-proceso
    
      cadena := cadena || '00000000'; -- fech-generacion
      cadena := cadena || '000000'; -- hora generacion
      cadena := cadena || '00'; -- ind-inscripcion
      cadena := cadena || '01'; -- tipo-identificacion
      cadena := cadena || '000000000000'; -- numero-cliente
      cadena := cadena || '0000'; -- oficina-rec-emp
      cadena := cadena || '0000000000000000000000000000000000000000'; -- filler
    
      utl_file.put_line(archivo, cadena, true);
      for reg in (select fec_dispersion,
                         id_concesionario_liq,
                         orden,
                         concepto,
                         ori_idbanco,
                         ori_tipocuenta,
                         ori_cuenta,
                         ori_nit,
                         des_idbanco,
                         des_tipocuenta,
                         desencriptar(des_cuenta) as des_cuenta,
                         des_nit,
                         indtipo,
                         valor,
                         idmunicipio,
                         referenciatrf
                    from recaudo_externo_disp_tot
                   where fec_dispersion >= p_fecha_ini
                     and fec_dispersion <= p_fecha_fin
                     and ori_idbanco in ('50', '51')
                     and ori_cuenta = cta.cuenta)
      
       loop
        cadena := 'TR000000' || reg.des_nit; -- tipo registro
      
        -- nro referencia
        cadena := cadena || '0000000000000000';
      
        -- cuenta destino
        strValor := trim(to_char(to_number(reg.des_cuenta),
                                 '0000000000000000'));
        cadena   := cadena || strValor;
      
        -- tipo cuenta destino
        if (reg.des_tipocuenta = 'AHO') then
          cadena := cadena || 'CA';
        end if;
      
        if (reg.des_tipocuenta = 'CTE') then
          cadena := cadena || 'CC';
        end if;
      
        if (reg.des_idbanco = '50') then
          cadena := cadena || '000051'; --banco davivienda
        else
          cadena := cadena || '0000' || reg.des_idbanco; --banco destino
        end if;
      
        strValor := trim(to_char(reg.valor * 100, '000000000000000000'));
        cadena   := cadena || strValor; -- valor
      
        cadena := cadena || '000000'; -- numero talon
        cadena := cadena || '01'; -- tipo ide destino
        cadena := cadena || '1'; -- Validar traslados a ACH
        cadena := cadena || '9999'; -- respuesta traslado
        cadena := cadena || '0000000000000000000000000000000000000000'; --mensaje
        cadena := cadena || '000000000000000000'; -- valor acumulado
        cadena := cadena || '00000000'; --fecha a
        cadena := cadena || '0000'; -- oficina-rec-det
        cadena := cadena || '0000'; -- motivo-det
        cadena := cadena || '0000000'; -- filler
      
        utl_file.put_line(archivo, cadena, true);
      
      end loop;
    
      utl_file.fclose(archivo);
    end loop;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [generarArchivoAvvillas] ' || SQLERRM,
            p_error);
    
  end generarArchivoDavivienda_repro;

  PROCEDURE i_recaudo_local_ajustes(
                                    
                                    p_idbanco       char,
                                    p_cta_recaudo   varchar2,
                                    p_indtipo       char,
                                    p_fec_corte_ano number,
                                    p_fec_corte_mes number,
                                    p_fec_corte_dia number,
                                    p_fec_tran_ano  number,
                                    p_fec_tran_mes  number,
                                    p_fec_tran_dia  number,
                                    p_valor_total   number,
                                    p_idmunicipio   char,
                                    p_periodo       char,
                                    p_p_consignado  number,
                                    p_motivo        varchar2,
                                    p_usuario       varchar2,
                                    p_error         OUT VARCHAR2) AS
  
    w_fecha_cor recaudo_local_ajustes.fec_corte%TYPE;
    w_fecha_tra recaudo_local_ajustes.fec_tran%TYPE;
  
    w_operacion varchar2(250);
  
    w_registros number;
  BEGIN
  
    select TO_DATE(p_fec_corte_ano || '-' || p_fec_corte_mes || '-' ||
                   p_fec_corte_dia,
                   'YYYY-MM-DD')
      into w_fecha_cor
      from DUAL;
  
    select TO_DATE(p_fec_tran_ano || '-' || p_fec_tran_mes || '-' ||
                   p_fec_tran_dia,
                   'YYYY-MM-DD')
      into w_fecha_tra
      from DUAL;
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    select count(*)
      into w_registros
      from recaudo_local_liquidacion l
     where l.fec_corte = w_fecha_cor
       and l.cta_recaudo = p_cta_recaudo;
  
    IF w_registros > 0 THEN
      p_error := 'AJUSTE NO POSIBLE. CUENTA YA LIQUIDADA PARA ESA FECHA DE CORTE. SOLICITAR AUTORIZACION';
      RETURN;
    END IF;
  
    select count(*)
      into w_registros
      from cta_recaudo_fcm c
     where c.cuenta = p_cta_recaudo;
  
    IF w_registros = 0 THEN
      p_error := 'AJUSTE NO POSIBLE. CUENTA DE RECAUDO NO DEFINIDA';
      RETURN;
    END IF;
  
    select count(*)
      into w_registros
      from cta_recaudo_fcm c
     where c.cuenta = p_cta_recaudo
       AND C.IDBANCO = p_idbanco;
  
    IF w_registros = 0 THEN
      p_error := 'AJUSTE NO POSIBLE. CUENTA DE RECAUDO NO DEFINIDA PARA EL BANCO';
      RETURN;
    END IF;
  
    insert into recaudo_local_ajustes
      (idbanco,
       cta_recaudo,
       indtipo,
       fec_corte,
       fec_tran,
       valor_total,
       idmunicipio,
       periodo,
       id_recaudo_local_ajustes,
       p_consignado,
       motivo)
    values
      (p_idbanco,
       p_cta_recaudo,
       p_indtipo,
       w_fecha_cor,
       w_fecha_tra,
       p_valor_total,
       p_idmunicipio,
       p_periodo,
       SEQ_RECAUDO_LOCAL_AJUSTES.NEXTVAL,
       p_p_consignado,
       p_motivo);
  
    w_operacion := 'i_recaudo_local_ajustes';
    p_error     := 'Ajuste Recaudo Local Agregado Exitosamente. ';
  
    sp_log(p_usuario,
           w_operacion,
           p_idbanco || '-' || p_cta_recaudo || '-' || p_indtipo || '-' ||
           w_fecha_cor || '-' || w_fecha_tra || '-' || p_valor_total || '-' ||
           p_idmunicipio || '-' || p_periodo);
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_recaudo_local_ajustes] ' || SQLERRM,
            p_error);
    
  END i_recaudo_local_ajustes;

  PROCEDURE d_recaudo_local_ajustes(p_id_recaudo_local_ajustes number,
                                    p_usuario                  varchar2,
                                    p_error                    OUT VARCHAR2) is
  
    w_registros   number;
    p_cta_recaudo varchar2(16);
    w_fecha_cor   date;
  
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF not P_ERROR is null THEN
      return;
    end if;
  
    SELECT l.cta_recaudo, l.fec_corte
      into p_cta_recaudo, w_fecha_cor
      FROM recaudo_local_ajustes l
     where id_recaudo_local_ajustes = p_id_recaudo_local_ajustes;
  
    select count(*)
      into w_registros
      from recaudo_local_liquidacion l
     where l.fec_corte = w_fecha_cor
       and l.cta_recaudo = p_cta_recaudo;
  
    IF w_registros > 0 THEN
      p_error := 'AJUSTE NO POSIBLE. CUENTA YA LIQUIDADA PARA ESA FECHA DE CORTE. SOLICITAR AUTORIZACION';
      RETURN;
    END IF;
  
    IF P_ERROR is null THEN
      -- Si pasa todas las validaciones
      delete recaudo_local_ajustes
       where id_recaudo_local_ajustes = p_id_recaudo_local_ajustes;
    
      delete soporteajustesrecloc
       where id_recaudo_local_ajustes = p_id_recaudo_local_ajustes;
    
      sp_log(p_usuario,
             'd_recaudo_local_ajustes',
             p_id_recaudo_local_ajustes);
      commit;
    
      p_error := 'Ajuste Recaudo Local eliminado Exitosamente. ';
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [d_recaudo_local_ajustes] ' || SQLERRM,
            p_error);
  END d_recaudo_local_ajustes;

  PROCEDURE q_recaudo_local_ajustes(p_id_recaudo_local_ajustes number,
                                    p_idbanco                  out varchar2,
                                    p_cta_recaudo              out varchar2,
                                    p_indtipo                  out varchar2,
                                    p_fec_corte                out date,
                                    p_fec_tran                 out date,
                                    p_valor_total              out number,
                                    p_idmunicipio              out char,
                                    p_periodo                  out varchar2,
                                    p_p_consignado             out number,
                                    p_motivo                   out varchar2,
                                    p_usuario                  varchar2,
                                    p_error                    OUT VARCHAR2
                                    
                                    ) AS
  
    w_registros number;
  BEGIN
  
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    IF not P_ERROR is null THEN
      return;
    end if;
  
    select count(*)
      into w_registros
      from recaudo_local_ajustes l
     where l.id_recaudo_local_ajustes = p_id_recaudo_local_ajustes;
  
    IF w_registros = 0 THEN
      p_error := 'AJUSTE NO EXISTE';
      RETURN;
    END IF;
  
    select idbanco,
           cta_recaudo,
           indtipo,
           fec_corte,
           fec_tran,
           valor_total,
           idmunicipio,
           periodo,
           p_consignado,
           motivo
      into p_idbanco,
           p_cta_recaudo,
           p_indtipo,
           p_fec_corte,
           p_fec_tran,
           p_valor_total,
           p_idmunicipio,
           p_periodo,
           p_p_consignado,
           p_motivo
      from recaudo_local_ajustes
     where id_recaudo_local_ajustes = p_id_recaudo_local_ajustes;
  
    p_error := 'Consulta OK';
  
    sp_log(p_usuario,
           'q_recaudo_local_ajustes',
           '' || p_id_recaudo_local_ajustes);
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_recaudo_local_ajustes] ' || SQLERRM,
            p_error);
    
  END q_recaudo_local_ajustes;

  PROCEDURE i_archivoSoporte(p_id_recaudo_local_ajustes number,
                             p_filename                 varchar2,
                             p_nombreDocumento          varchar2,
                             p_extensionArchivo         varchar2,
                             p_bfile                    blob,
                             p_usuario                  varchar2,
                             p_error                    OUT VARCHAR2) is
    p_uploadid number;
    extension  varchar2(10);
  
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    if not P_ERROR is null then
      return;
    end if;
  
    select seq_uploads.nextval into p_uploadid from dual;
  
    insert into soporteajustesrecloc
      (id_recaudo_local_ajustes,
       id_documento,
       nombredocumento,
       nombrearchivo,
       extensionarchivo,
       datosarchivo,
       usuariocargue,
       fechacargue)
    values
      (p_id_recaudo_local_ajustes,
       p_uploadid,
       p_nombreDocumento,
       p_filename,
       p_extensionArchivo,
       p_bfile,
       p_usuario,
       sysdate);
  
    sp_log(p_usuario, 'i_archivoSoporte', p_filename);
  
    p_error := MSG_INS_OK;
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [i_archivoSoporte] ' || SQLERRM,
            p_error);
  END i_archivoSoporte;

  PROCEDURE q_archivoSoporte(p_id_documento     number,
                             p_usuario          varchar2,
                             p_nombrearchivo    out varchar2,
                             p_nombreDocumento  out varchar2,
                             p_extensionArchivo out varchar2,
                             p_datosarchivo     out blob,
                             p_error            OUT VARCHAR2) is
  
    w_registros number;
  
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    if not P_ERROR is null then
      return;
    end if;
  
    select count(*)
      into w_registros
      from soporteajustesrecloc
     where id_documento = p_id_documento;
  
    IF w_registros = 0 THEN
      p_error := 'Documento no existe';
      RETURN;
    END IF;
  
    select nombredocumento, nombrearchivo, extensionarchivo, datosarchivo
      into p_nombredocumento,
           p_nombrearchivo,
           p_extensionarchivo,
           p_datosarchivo
      from soporteajustesrecloc
     where id_documento = p_id_documento;
  
    sp_log(p_usuario, 'q_archivoSoporte', p_id_documento);
  
    p_error := 'Consulta OK';
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_archivoSoporte] ' || SQLERRM,
            p_error);
  END q_archivoSoporte;

  PROCEDURE d_archivoSoporte(p_id_documento number,
                             p_usuario      varchar2,
                             p_error        OUT VARCHAR2) is
  
    w_registros number;
  
  begin
    -- VALIDACIONES
    sp_v_usuario(p_usuario, p_error, 'pk_proc');
  
    if not P_ERROR is null then
      return;
    end if;
  
    select count(*)
      into w_registros
      from soporteajustesrecloc
     where id_documento = p_id_documento;
  
    IF w_registros = 0 THEN
      p_error := 'Documento no existe';
      RETURN;
    END IF;
  
    delete soporteajustesrecloc where id_documento = p_id_documento;
  
    sp_log(p_usuario, 'd_archivoSoporte', p_id_documento);
  
    p_error := MSG_DEL_OK;
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [q_archivoSoporte] ' || SQLERRM,
            p_error);
  END d_archivoSoporte;

end pk_proc;
/

prompt
prompt Creating package body PK_RECLOC
prompt ===============================
prompt
create or replace package body simit.PK_RECLOC is

  PROCEDURE q_concesFunc(p_usuario          varchar2,
                         p_idConcesionario  out varchar2,
                         p_nomConcesionario out varchar2,
                         p_error            out varchar2) is
    num_reg number;
  begin
  
    p_idCOncesionario  := '00';
    p_nomConcesionario := '';
  
    select count(*)
      into num_reg
      from person
     where idperson = to_number(p_usuario);
  
    if (num_reg = 0) then
      p_idCOncesionario  := '00';
      p_nomConcesionario := 'FUNCIONARIO EXISTE';
      return;
    end if;
  
    select count(*)
      into num_reg
      from funcionarios_concesionario
     where idperson = to_number(p_usuario);
  
    if (num_reg = 0) then
      p_idCOncesionario  := '00';
      p_nomConcesionario := 'FUNCIONARIO NO CONCESIONARIO';
      return;
    end if;
  
    select idConcesionario
      into p_idCOncesionario
      from funcionarios_concesionario
     where idperson = to_number(p_usuario);
  
    select count(*)
      into num_reg
      from concesionario
     where idconcesionario = p_idCOncesionario;
  
    if (num_reg = 0) then
      p_idCOncesionario  := '00';
      p_nomConcesionario := 'CONCESIONARIO FUNCIONARIO NO EXISTE';
      return;
    end if;
  
    select nombre
      into p_nomConcesionario
      from concesionario
     where idconcesionario = p_idCOncesionario;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [q_concesFunc] ' || SQLERRM, p_error);
  END q_concesFunc;

  PROCEDURE u_deposito(p_usuario          varchar2,
                       p_numSecuenciaReg  number,
                       p_indtipoiden      varchar2,
                       p_idmunicipioiden  varchar2,
                       p_p_consignadoiden number,
                       p_observaciones    varchar2,
                       p_error            out varchar2) is
    num_reg number;
  begin
  
    select count(*)
      into num_reg
      from trxsinidentificar
     where numSecuenciaReg = p_numSecuenciaReg;
  
    if (num_reg = 0) then
      p_error := 'No existe registro ' || to_char(p_numSecuenciaReg);
      return;
    end if;
  
    if (p_idmunicipioiden <> '00000001') then
      select count(*)
        into num_reg
        from municipio m
       where m.idmunicipio = p_idmunicipioiden
         and m.idmunicipio <> '00000000';
    
      if (num_reg = 0) then
        p_error := 'No existe municipio para registro ' ||
                   to_char(p_numSecuenciaReg);
        return;
      end if;
    
    end if;
  
    update trxsinidentificar
       set fechaidentificacion   = sysdate,
           usuarioidentificacion = to_number(p_usuario),
           indtipoiden           = p_indtipoiden,
           idmunicipioiden       = p_idmunicipioiden,
           p_consignadoiden      = p_p_consignadoiden,
           observaciones         = p_observaciones,
           estadoiden            = 'ID'
     where numsecuenciareg = p_numsecuenciareg;
  
    commit;
  
    p_error := PK_PROC.MSG_UPD_OK;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE, p_usuario || ' [u_deposito] ' || SQLERRM, p_error);
  END u_deposito;

  PROCEDURE aprobar_reproceso(p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_fec_fin_ano number,
                              p_fec_fin_mes number,
                              p_fec_fin_dia number,
                              
                              p_tipo    varchar2,
                              p_motivo  varchar2,
                              p_banco   varchar2,
                              p_usuario varchar2,
                              
                              p_error OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    w_registros   number;
    descTipo      varchar2(250);
  
  begin
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    descTipo := '';
  
    if p_tipo = 'L' then
      begin
      
        descTipo := 'REPROCESO DISTRIBUCION RECAUDO LOCAL';
      
        delete recaudo_local_causacion
         where fec_corte_ini >= w_fec_cor_ini
           and fec_corte_ini <= w_fec_cor_fin
           and decode(ori_idbanco, '52', '52', '99') = p_banco;
      
        delete recaudo_local_disp
         where fec_corte_ini = w_fec_cor_ini
           and fec_corte_fin = w_fec_cor_fin
           and decode(ori_idbanco, '52', '52', '99') = p_banco;
      
        delete recaudo_local_liquidacion
         where fec_corte >= w_fec_cor_ini
           and fec_corte <= w_fec_cor_fin
           and decode(idbanco, '52', '52', '99') = p_banco;
      
        update trxsinidentificar
           set fechaliq = null
         where estadoiden = 'ID'
           and fechaliq >= w_fec_cor_ini
           and fechaliq <= w_fec_cor_fin
           and decode(idbanco, '52', '52', '99') = p_banco;
      
      end;
    
    end if;
  
    if p_tipo = 'T' then
      begin
      
        descTipo := 'REPROCESO TRANSFERIR RECAUDO LOCAL';
      
        DELETE from recaudo_local_disp_tot
         where fec_dispersion = w_fec_cor_ini;
      
      end;
    
    end if;
  
    insert into reproceso
      (fechareg, fecha, tipo, usuario, motivo)
    values
      (sysdate, w_fec_cor_ini, p_tipo, p_usuario, p_motivo);
  
    commit;
  
    sp_envioNotificacion(grupoRecibe => 3,
                         grupoCopia  => 2,
                         asunto      => 'SDF - Notificacion ' || descTipo ||
                                        ' del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd') ||
                                        ' al dia ' ||
                                        to_char(w_fec_cor_fin, 'yyyy-MM-dd'),
                         mensaje     => 'El sistema SDF informa que autorizo el ' ||
                                        descTipo || ' del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd') ||
                                        ' al dia ' ||
                                        to_char(w_fec_cor_fin, 'yyyy-MM-dd') ||
                                        '. Por el siguiente motivo ' ||
                                        p_motivo,
                         p_usuario   => p_usuario);
  
    p_error := 'Aprobacion Correcta : ' || p_fec_ini_ano || '-' ||
               p_fec_ini_mes || '-' || p_fec_ini_dia || 'a ' ||
               p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
               p_fec_fin_dia;
  
    sp_log(p_usuario,
           'aprobar_reproceso',
           p_tipo || '-' || p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
           p_fec_ini_dia || ' a ' || p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
           p_fec_fin_dia);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [aprobar_reproceso] ' || SQLERRM,
            p_error);
    
  end aprobar_reproceso;

  PROCEDURE transferir_recaudo_local(p_fec_ini_ano number,
                                     p_fec_ini_mes number,
                                     p_fec_ini_dia number,
                                     p_usuario     varchar2,
                                     p_error       OUT VARCHAR2) as
  
    w_fec_trf_ini date;
    w_registros   number;
    p_ajuste      number;
  
  begin
    -- VALIDACIONES
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_trf_ini
      from DUAL;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_local_disp_tot
     where fec_dispersion = w_fec_trf_ini;
  
    IF w_registros > 0 THEN
      p_error := 'PROCESO NO EJECUTADO. PROCESO YA TRANSFERIDO. SOLICITAR AUTORIZACION';
      RETURN;
    END IF;
  
    insert into recaudo_local_disp_tot
      (fec_corte_ini,
       fec_corte_fin,
       fec_dispersion,
       id_concesionario_liq,
       orden,
       concepto,
       ori_idbanco,
       ori_tipocuenta,
       ori_cuenta,
       ori_nit,
       des_idbanco,
       des_tipocuenta,
       des_cuenta,
       des_nit,
       valor,
       indtipo)
      select w_fec_trf_ini,
             w_fec_trf_ini,
             w_fec_trf_ini,
             idconcesionario,
             orden,
             concepto,
             ori_idbanco,
             ori_tipocuenta,
             ori_cuenta,
             ori_nit,
             des_idbanco,
             des_tipocuenta,
             des_cuenta,
             des_nit,
             sum(valor),
             indtipo
        from recaudo_local_disp
       where fec_dispersion = w_fec_trf_ini
       group by fec_dispersion,
                idconcesionario,
                orden,
                concepto,
                ori_idbanco,
                ori_tipocuenta,
                ori_cuenta,
                ori_nit,
                des_idbanco,
                des_tipocuenta,
                des_cuenta,
                des_nit,
                indtipo;
  
    update recaudo_local_disp_tot
       set referenciatrf = seq_transferencia.nextval
     where fec_corte_ini = w_fec_trf_ini;
  
    update recaudo_local_disp_tot
       set enviadobanco = 0
     where fec_corte_ini = w_fec_trf_ini;
  
    -- confirma transferencias ach avvillas pasados 3 dias habiles
    update recaudo_local_disp_tot r
       set r.estadotrf = 'EXI', r.fechaconfirmada = sysdate
     where (r.estadotrf = 'ENV' or r.estadotrf is null)
       and r.fec_dispersion <=
           fn_fec_dispersion(w_fec_trf_ini, -3, 0, p_usuario);
  
    commit;
  
    contabiliza_pago_local(p_fec_ini_ano,
                           p_fec_ini_mes,
                           p_fec_ini_dia,
                           p_usuario,
                           p_error);
  
    -- obtiene cantidad de registros procesados
    select count(*)
      into w_registros
      from recaudo_local_disp_tot
     where fec_dispersion = w_fec_trf_ini;
  
    p_error := 'Transferencia generada OK. Registros: ' || w_registros || ': ' ||
               to_char(w_fec_trf_ini, 'yyyy-mm-dd');
  
    sp_envioNotificacion(grupoRecibe => 3,
                         grupoCopia  => 2,
                         asunto      => 'SDF - Proceso de transferencia RECAUDO LOCAL  del dia ' ||
                                        to_char(w_fec_trf_ini, 'yyyy-MM-dd'),
                         mensaje     => 'El sistema SDF informa que se ha ejecutado el proceso de transferencia RECAUDO LOCAL, del dia ' ||
                                        to_char(w_fec_trf_ini, 'yyyy-MM-dd') ||
                                        '. Favor verificar y dar su visto bueno. Se genero el siguiente mensaje en el proceso de transferencia ' ||
                                        p_error,
                         p_usuario   => p_usuario);
  
    sp_log(p_usuario,
           'transferir_recaudo_local',
           p_fec_ini_ano || '-' || p_fec_ini_mes || '-' || p_fec_ini_dia);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [transferir_recaudo_local] ' || SQLERRM,
            p_error);
    
  END transferir_recaudo_local;

  PROCEDURE contabiliza_recaudo_local(p_feccor_ini_ano number,
                                      p_feccor_ini_mes number,
                                      p_feccor_ini_dia number,
                                      p_feccor_fin_ano number,
                                      p_feccor_fin_mes number,
                                      p_feccor_fin_dia number,
                                      p_banco          varchar2,
                                      p_usuario        varchar2,
                                      p_error          OUT VARCHAR2) AS
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    w_registros   number;
  
    w_fec_cor_ini_s char(8);
    w_fec_cor_fin_s char(8);
  
    tipoCon char(3);
  
    w_concepto varchar(250);
  
    zt char(2);
    ze char(2);
  
    pfc1 char(4);
    fcm1 char(4);
    cop  char(3);
    c50  char(2);
    c40  char(2);
    c31  char(2);
    c01  char(2);
    c11  char(2);
    c21  char(2);
  
    v5 char(2);
  
    c20211 char(5);
    c20212 char(5);
    c20213 char(5);
    c20214 char(5);
  
    c20221 char(5);
    c20222 char(5);
    c20223 char(5);
    c20224 char(5);
  
    c202213 char(6);
    c200101 char(6);
  
    c200102 char(6);
    c100761 char(6);
  
    cZ000 char(4);
    cZ002 char(4);
  
    c1401020102 char(10);
    c8000826650 char(10);
    c5810900202 char(10);
    c4810900202 char(10);
    c2905901001 char(10);
    c2905901002 char(10);
    c2905901003 char(10);
    c2905901004 char(10);
    c1470909002 char(10);
    c5111110112 char(10);
  
  BEGIN
  
    zt := 'ZT';
    ze := 'ZE';
  
    pfc1 := 'PFC1';
    fcm1 := 'FCM1';
    cop  := 'COP';
  
    c50 := '50';
    c40 := '40';
    c31 := '31';
    c01 := '01';
    c11 := '11';
    c21 := '21';
  
    v5 := 'V5';
  
    c20211 := '20211';
    c20212 := '20212';
    c20213 := '20213';
    c20214 := '20214';
  
    c20221  := '20221';
    c20222  := '20222';
    c20223  := '20223';
    c20224  := '20224';
    c200101 := '200101';
    c200102 := '200102';
    c202213 := '202213';
    c100761 := '100761';
  
    cZ000 := 'Z000';
    cZ002 := 'Z002';
  
    c1401020102 := '1401020102';
    c8000826650 := '8000826650';
  
    c5810900202 := '5810900202';
    c4810900202 := '4810900202';
  
    c2905901001 := '2905901001';
    c2905901002 := '2905901002';
    c2905901003 := '2905901003';
    c2905901004 := '2905901004';
    c1470909002 := '1470909002';
    c5111110112 := '5111110112';
  
    -- Obtiene fecha de cierre en formato ddMMyyyy
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_feccor_fin_ano || '-' || p_feccor_fin_mes || '-' ||
                   p_feccor_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    select to_char(w_fec_cor_ini, 'ddMMyyyy')
      into w_fec_cor_ini_s
      from DUAL;
  
    select to_char(w_fec_cor_fin, 'ddMMyyyy')
      into w_fec_cor_fin_s
      from DUAL;
  
    select decode(p_banco, '52', 'LRA', 'LRO') into tipoCon from dual;
  
    -- elimina contabilizacion
    delete recaudo_externo_contabilidad
     where to_date(fechaDoc, 'ddMMyyyy') >= w_fec_cor_ini
       and to_date(fechaDoc, 'ddMMyyyy') <= w_fec_cor_fin
       and tipoContable = tipoCon;
  
    w_concepto := 'REC INGRESO PART CONCESIONARIO CONCESIONARIO 65%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    b.cuentacontable,
                    (case
                      when r.valor_total > 0 then
                       b.ctacontperiodoant
                      else
                       c.cta_cont_period_ant
                    end)) as cuenta,
             r.s_valor_2 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c200102
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c20211 || substr(r.idconcesionario, 2, 1),
                    (case
                      when r.valor_total > 0 then
                       c20211 || substr(r.idconcesionario, 2, 1)
                      else
                       ''
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(m.nit_m, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(m.nit_m, 0, 9)
                      else
                       substr(c.nit_c, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC INGRESO FONDO COB CONCESIONARIO 5%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    b.cuentacontable,
                    (case
                      when r.valor_total > 0 then
                       b.ctacontperiodoant
                      else
                       c.cta_cont_period_ant
                    end)) as cuenta,
             r.s_valor_3 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c200102
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c20212 || substr(r.idconcesionario, 2, 1),
                    (case
                      when r.valor_total > 0 then
                       c20212 || substr(r.idconcesionario, 2, 1)
                      else
                       ''
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(m.nit_m, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(m.nit_m, 0, 9)
                      else
                       substr(c.nit_c, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC INGRESO FCM 25%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    b.cuentacontable,
                    (case
                      when r.valor_total > 0 then
                       b.ctacontperiodoant
                      else
                       c.cta_cont_period_antfcm
                    end)) as cuenta,
             r.s_valor_1 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c200101
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c20213 || substr(r.idconcesionario, 2, 1),
                    (case
                      when r.valor_total > 0 then
                       c20213 || substr(r.idconcesionario, 2, 1)
                      else
                       ''
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC INGRESO FONDO COB FCM 5%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    b.cuentacontable,
                    (case
                      when r.valor_total > 0 then
                       b.ctacontperiodoant
                      else
                       c.cta_cont_period_antfcm
                    end)) as cuenta,
             r.s_valor_4 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c200101
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c20214 || substr(r.idconcesionario, 2, 1),
                    (case
                      when r.valor_total > 0 then
                       c20214 || substr(r.idconcesionario, 2, 1)
                      else
                       ''
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FONDO COB FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'NOMBRE BANCO CTA REC';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             decode(r.indorigen,
                    'IDE',
                    cr.cta_contable_ide,
                    cr.cta_contable) as cuenta,
             r.valor_total as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             decode(r.indorigen,
                    'IDE',
                    to_char(r.fec_tran, 'ddMMyyyy'),
                    to_char(r.fec_corte, 'ddMMyyyy')) as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             decode(r.indorigen,
                    'IDE',
                    b.nombre || ' ' || r.cta_recaudo || ' ' ||
                    to_char(r.fec_tran, 'ddMMyyyy'),
                    b.nombre || ' ' || r.cta_recaudo) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC GASTO PART CONCESIONARIO 65%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c.cta_contable_liquidacion,
                    (case
                      when r.valor_total > 0 then
                       c.cta_cont_period_ant
                      else
                       b.ctacontperiodoant
                    end)) as cuenta,
             r.s_valor_2 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c200102,
                    (case
                      when r.valor_total > 0 then
                       c200102
                      else
                       ''
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c20211 || substr(r.idconcesionario, 2, 1)
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(c.nit_c, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(c.nit_c, 0, 9)
                      else
                       substr(m.nit_m, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC GASTO FONDO COB CONCESIONARIO 5%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c.cta_contable_fondo,
                    (case
                      when r.valor_total > 0 then
                       c.cta_cont_period_ant
                      else
                       b.ctacontperiodoant
                    end)) as cuenta,
             r.s_valor_3 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c200102,
                    (case
                      when r.valor_total > 0 then
                       c200102
                      else
                       ''
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c20212 || substr(r.idconcesionario, 2, 1)
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(c.nit_c, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(c.nit_c, 0, 9)
                      else
                       substr(m.nit_m, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'OTRO ACREEDOR CONCESIONARIO 65% + 5%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c31
               else
                c21
             end) as clavecontable,
             substr(C.NIT_C, 0, 9) as cuenta,
             ROUND(R.s_valor_2, 0) + ROUND(R.s_valor_3, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('OTRO ACREEDOR ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(C.NIT_C, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             cZ000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'CXC 100% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c01
               else
                c11
             end) as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             r.valor_total as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXC 100% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             c1401020102 as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             cz000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'CXC 100% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c11
               else
                c01
             end) as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             r.valor_total as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXC 100% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             c1401020102 as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             cz000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'SIMIT'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC INGRESO PART CONCESIONARIO CONCESIONARIO  3,25%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    b.cuentacontable,
                    (case
                      when r.valor_total > 0 then
                       b.ctacontperiodoant
                      else
                       c.cta_cont_period_ant
                    end)) as cuenta,
             r.p_valor_8 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c200102
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c20221 || substr(r.idconcesionario, 2, 1),
                    (case
                      when r.valor_total > 0 then
                       c20221 || substr(r.idconcesionario, 2, 1)
                      else
                       ''
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(m.nit_m, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(m.nit_m, 0, 9)
                      else
                       substr(c.nit_c, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC INGRESO FONDO COB CONCESIONARIO 0,25%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    b.cuentacontable,
                    (case
                      when r.valor_total > 0 then
                       b.ctacontperiodoant
                      else
                       c.cta_cont_period_ant
                    end)) as cuenta,
             r.p_valor_9 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c200102
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c20222 || substr(r.idconcesionario, 2, 1),
                    (case
                      when r.valor_total > 0 then
                       c20222 || substr(r.idconcesionario, 2, 1)
                      else
                       ''
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(m.nit_m, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(m.nit_m, 0, 9)
                      else
                       substr(c.nit_c, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC INGRESO FCM 3,25%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    b.cuentacontable,
                    (case
                      when r.valor_total > 0 then
                       b.ctacontperiodoant
                      else
                       c.cta_cont_period_antfcm
                    end)) as cuenta,
             ROUND(r.p_valor_7 + r.p_valor_12, 0) as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c200101
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c20223 || substr(r.idconcesionario, 2, 1),
                    (case
                      when r.valor_total > 0 then
                       c20223 || substr(r.idconcesionario, 2, 1)
                      else
                       ''
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC INGRESO FONDO COB FCM ( 0,25%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    b.cuentacontable,
                    (case
                      when r.valor_total > 0 then
                       b.ctacontperiodoant
                      else
                       c.cta_cont_period_antfcm
                    end)) as cuenta,
             r.p_valor_10 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c200101
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c20224 || substr(r.idconcesionario, 2, 1),
                    (case
                      when r.valor_total > 0 then
                       c20224 || substr(r.idconcesionario, 2, 1)
                      else
                       ''
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING FONDO COB FCM ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC INGRESO PART CONCESIONARIO SEVIAL  3,0%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    b.cuentacontable,
                    (case
                      when r.valor_total > 0 then
                       b.ctacontperiodoant
                      else
                       c.cta_cont_period_ant
                    end)) as cuenta,
             r.p_valor_13 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c200102
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c202213,
                    (case
                      when r.valor_total > 0 then
                       c202213
                      else
                       ''
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC ING PART CONCES SEVIAL 3.0%') AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(m.nit_m, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(m.nit_m, 0, 9)
                      else
                       substr(f.nit_sevial, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'NOMBRE BANCO CTA REC';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             decode(r.indorigen,
                    'IDE',
                    cr.cta_contable_ide,
                    cr.cta_contable) as cuenta,
             r.valor_total as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             decode(r.indorigen,
                    'IDE',
                    to_char(r.fec_tran, 'ddMMyyyy'),
                    to_char(r.fec_corte, 'ddMMyyyy')) as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             decode(r.indorigen,
                    'IDE',
                    b.nombre || ' ' || r.cta_recaudo || ' ' ||
                    to_char(r.fec_tran, 'ddMMyyyy'),
                    b.nombre || ' ' || r.cta_recaudo) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipocon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'OTRO ACREEDOR POLCA 39,78';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c31
               else
                c21
             end) as clavecontable,
             substr(f.nit_polca, 0, 9) as cuenta,
             r.p_valor_15 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('OTRO ACREEDOR POLCA 39,78') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             cZ000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC GASTO PART CONCESIONARIO 3.25%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c.cta_contable_liquidacion,
                    (case
                      when r.valor_total > 0 then
                       c.cta_cont_period_ant
                      else
                       b.ctacontperiodoant
                    end)) as cuenta,
             r.p_valor_8 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c200102,
                    (case
                      when r.valor_total > 0 then
                       c200102
                      else
                       ''
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c20221 || substr(r.idconcesionario, 2, 1)
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(c.nit_c, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(c.nit_c, 0, 9)
                      else
                       substr(m.nit_m, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC GASTO PART CONCESIONARIO sevial (3.0%))';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             'COP' as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c.cta_contable_liquidacion,
                    (case
                      when r.valor_total > 0 then
                       c.cta_cont_period_ant
                      else
                       b.ctacontperiodoant
                    end)) as cuenta,
             r.p_valor_13 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c200102,
                    (case
                      when r.valor_total > 0 then
                       c200102
                      else
                       ''
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c202213
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO PART CONCES SEVIAL 3%') AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(f.nit_sevial, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(f.nit_sevial, 0, 9)
                      else
                       substr(m.nit_m, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'CXP PART SEVIAL 3%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c31
               else
                c21
             end) as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             r.p_valor_13 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXP PART SEVIAL 3%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             cZ000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'REC GASTO FONDO COB CONCESIONARIO ( 0,25%)';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c.cta_contable_fondo,
                    (case
                      when r.valor_total > 0 then
                       c.cta_cont_period_ant
                      else
                       b.ctacontperiodoant
                    end)) as cuenta,
             r.p_valor_9 as importe,
             '' as indicadorimpuesto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    c200102,
                    (case
                      when r.valor_total > 0 then
                       c200102
                      else
                       ''
                    end)) as centrocosto,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    '',
                    (case
                      when r.valor_total > 0 then
                       ''
                      else
                       c20222 || substr(r.idconcesionario, 2, 1)
                    end)) as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REC GASTO FONDO COB ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             decode(to_char(r.fec_corte, 'yyyy'),
                    to_char(r.fec_tran, 'yyyy'),
                    substr(c.nit_c, 0, 9),
                    (case
                      when r.valor_total > 0 then
                       substr(c.nit_c, 0, 9)
                      else
                       substr(m.nit_m, 0, 9)
                    end)) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'OTRO ACREEDOR CONCESIONARIO 3,25% + 0,25%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c31
               else
                c21
             end) as clavecontable,
             substr(C.NIT_C, 0, 9) as cuenta,
             ROUND(R.p_valor_8, 0) + ROUND(R.p_valor_9, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('OTRO ACREEDOR ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(C.NIT_C, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             cZ000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'PARTICIPACION 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c31
               else
                c21
             end) as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             r.p_valor_17 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION SEVIAL 2.7 ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             c2905901001 as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             cZ000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'PARTICIPACION IVA 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c31
               else
                c21
             end) as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             r.p_valor_20 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION IVA SEVIAL 2.7 ') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             c2905901002 as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             cZ000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'PARTICIPACION 1.8%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             c2905901003 as cuenta,
             r.p_valor_16 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION FCM 1.8') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'PARTICIPACION IVA 1.8%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             c2905901004 as cuenta,
             r.p_valor_19 as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PARTICIPACION IVA FCM 1.8') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'CXC 10% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             (to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'A') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c01
               else
                c11
             end) as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.p_valor_7 + ROUND(r.p_valor_8, 0) + ROUND(r.p_valor_9, 0) +
             round(r.p_valor_10, 0) + ROUND(r.p_valor_11, 0) +
             r.p_valor_12 + ROUND(r.p_valor_13, 0) +
             ROUND(r.p_valor_14, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXC 10% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             c1401020102 as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             cZ000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'CXC 10% AL MUNICIPIO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             (to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'A') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c11
               else
                c01
             end) as clavecontable,
             substr(m.nit_m, 0, 9) as cuenta,
             (r.p_valor_7 + ROUND(r.p_valor_8, 0) + ROUND(r.p_valor_9, 0) +
             round(r.p_valor_10, 0) + ROUND(r.p_valor_11, 0) +
             r.p_valor_12 + ROUND(r.p_valor_13, 0) +
             ROUND(r.p_valor_14, 0)) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXC 10% AL MUNICIPIO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(m.nit_m, 0, 9) as nittercero,
             c1401020102 as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             cZ000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'CXC A SIMIT 2.7%+1.8 + IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             fcm1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             c1470909002 as cuenta,
             
             -- 2.7 + IVA + 1.8 + IVA
             ROUND(round(r.p_valor_16, 0) + round(r.p_valor_19, 0) +
                   round(r.p_valor_17, 0) + round(r.p_valor_20, 0),
                   0) as importe,
             
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CRUCE CXC A SIMIT 2.7%+1.8%+IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'CXP A SIMIT 2.7%+1.8 + IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             fcm1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c31
               else
                c21
             end) as clavecontable,
             substr(f.nit_polca, 0, 9) as cuenta,
             
             -- 2.7 + IVA + 1.8 + IVA
             ROUND(round(r.p_valor_16, 0) + round(r.p_valor_19, 0) +
                   round(r.p_valor_17, 0) + round(r.p_valor_20, 0),
                   0) as importe,
             
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CRUCE CXP A SIMIT 2.7%+1.8%+IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_corte, 'ddMMyyyy') as fechabase,
             cZ002 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'GASTOS SEVIAL 2.7%+IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             ze as clasedoc,
             fcm1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'S' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             c5111110112 as cuenta,
             
             (r.p_valor_17 + r.p_valor_20) as importe,
             
             v5 as indicadorimpuesto,
             c100761 as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('GASTOS SEVIAL 2,7%+IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    w_concepto := 'CXP SEVIAL 2.7%+IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_corte, 'ddMMyyyy') as fechadoc,
             ze as clasedoc,
             fcm1 as sociedad,
             to_char(r.fec_corte, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_corte, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'S' as referencia,
             ('REC ' || to_char(r.fec_corte, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c31
               else
                c21
             end) as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             (r.p_valor_17 + r.p_valor_20) as importe,
             v5 as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_corte, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('CXP SEVIAL 2,7%+IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             cZ000 as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and r.fec_corte >= w_fec_cor_ini
         and r.fec_corte <= w_fec_cor_fin
         and r.indTipo = 'POLCA'
         and decode(r.idbanco, '52', '52', '99') = p_banco;
  
    update recaudo_externo_contabilidad r
       set r.importe = r.importe * -1
     where to_date(fechaDoc, 'ddMMyyyy') >= w_fec_cor_ini
       and to_date(fechaDoc, 'ddMMyyyy') <= w_fec_cor_fin
       and tipoContable = tipoCon
       and r.importe < 0;
  
    update recaudo_externo_contabilidad r
       set r.importe = ROUND(r.importe, 0)
     where to_date(fechaDoc, 'ddMMyyyy') >= w_fec_cor_ini
       and to_date(fechaDoc, 'ddMMyyyy') <= w_fec_cor_fin
       and tipoContable = tipoCon;
  
    delete recaudo_externo_contabilidad r
     where r.importe = 0
       AND to_date(fechaDoc, 'ddMMyyyy') >= w_fec_cor_ini
       and to_date(fechaDoc, 'ddMMyyyy') <= w_fec_cor_fin
       and tipoContable = tipoCon;
  
    w_concepto := 'AJUSTE PESOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select a.fechadoc as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             a.fechadoc as fechacontable,
             substr(a.fechadoc, 3, 2) as periodo,
             cop as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             (case
               when a.importe > 0 then
                c50
               else
                c40
             end) as clavecontable,
             (case
               when a.importe > 0 then
                c4810900202
               else
                c5810900202
             end) as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             a.fechadoc as fechavalor,
             a.asignacion AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from fcm f,
             (select c.referencia,
                     max(c.textocabezera) as textocabezera,
                     max(c.asignacion) as asignacion,
                     max(c.fechadoc) as fechadoc,
                     sum(case c.clavecontable
                           when c40 then
                            c.importe
                           when c01 then
                            c.importe
                           when c21 then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where to_date(c.fechadoc, 'ddMMyyyy') >= w_fec_cor_ini
                 and to_date(c.fechadoc, 'ddMMyyyy') <= w_fec_cor_fin
                 and c.sociedad = pfc1
                 and tipocontable = tipoCon
               group by c.referencia) a
       where f.nit_fcm = c8000826650
         and a.importe <> 0;
  
    w_concepto := 'AJUSTE PESOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select a.fechadoc as fechadoc,
             zt as clasedoc,
             fcm1 as sociedad,
             a.fechaDoc as fechacontable,
             substr(a.fechadoc, 3, 2) as periodo,
             cop as moneda,
             a.referencia as referencia,
             a.textocabezera as textocabezera,
             (case
               when a.importe > 0 then
                c50
               else
                c40
             end) as clavecontable,
             (case
               when a.importe > 0 then
                c4810900202
               else
                c5810900202
             end) as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(a.fechadoc, 'ddMMyyyy') as fechavalor,
             a.asignacion AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from fcm f,
             (select c.referencia,
                     max(c.textocabezera) as textocabezera,
                     max(c.asignacion) as asignacion,
                     max(c.fechadoc) as fechadoc,
                     sum(case c.clavecontable
                           when c40 then
                            c.importe
                           when c01 then
                            c.importe
                           when c21 then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where to_date(c.fechadoc, 'ddMMyyyy') >= w_fec_cor_ini
                 and to_date(c.fechadoc, 'ddMMyyyy') <= w_fec_cor_fin
                 and c.sociedad = fcm1
                 and tipocontable = tipoCon
               group by c.referencia) a
       where f.nit_fcm = c8000826650
         and a.importe <> 0;
  
    commit;
  
    -- obtiene cantidad de registros actualizados
    select count(*)
      into w_registros
      from recaudo_local_liquidacion
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and decode(idbanco, '52', '52', '99') = p_banco;
  
    p_error := 'Distribucion recaudo local OK. Registros procesados: ' ||
               w_registros;
  
    sp_log(p_usuario,
           'Contabiliza Recaudo local',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia || p_feccor_fin_ano || '-' || p_feccor_fin_mes || '-' ||
           p_feccor_fin_dia || p_banco);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [contabiliza_recaudo_local] ' || SQLERRM,
            p_error);
    
  END contabiliza_recaudo_local;

  PROCEDURE contabiliza_pago_local(p_feccor_ini_ano number,
                                   p_feccor_ini_mes number,
                                   p_feccor_ini_dia number,
                                   p_usuario        varchar2,
                                   p_error          OUT VARCHAR2) AS
    w_fec_cor_ini   date;
    w_fec_cor_ini_s date;
  
    w_registros number;
  
    w_concepto varchar(250);
  
    zt char(2);
    ze char(2);
    zd char(2);
  
    tipoCon char(3);
  
    pfc1 char(4);
    fcm1 char(4);
    cop  char(3);
    c50  char(2);
    c40  char(2);
    c31  char(2);
    c01  char(2);
    c11  char(2);
    c21  char(2);
  
    v5 char(2);
  
    c20211 char(5);
    c20212 char(5);
    c20213 char(5);
    c20214 char(5);
  
    c20221 char(5);
    c20222 char(5);
    c20223 char(5);
    c20224 char(5);
  
    c202213 char(6);
    c200101 char(6);
  
    c200102 char(6);
    c100761 char(6);
  
    cZ000 char(4);
    cZ002 char(4);
  
    c1401020102 char(10);
    c8000826650 char(10);
    c5810900202 char(10);
    c4810900202 char(10);
    c2905901001 char(10);
    c2905901002 char(10);
    c2905901003 char(10);
    c2905901004 char(10);
    c1470909002 char(10);
    c5111110112 char(10);
    c2905901012 char(10);
    c2905901007 char(10);
    c1470901106 char(10);
  
    aaaa0115 char(8);
  
  BEGIN
  
    zt := 'ZT';
    ze := 'ZE';
    zd := 'ZD';
  
    pfc1 := 'PFC1';
    fcm1 := 'FCM1';
    cop  := 'COP';
  
    c50 := '50';
    c40 := '40';
    c31 := '31';
    c01 := '01';
    c11 := '11';
    c21 := '21';
  
    v5 := 'V5';
  
    c20211 := '20211';
    c20212 := '20212';
    c20213 := '20213';
    c20214 := '20214';
  
    c20221  := '20221';
    c20222  := '20222';
    c20223  := '20223';
    c20224  := '20224';
    c200101 := '200101';
    c200102 := '200102';
    c202213 := '202213';
    c100761 := '100761';
  
    cZ000 := 'Z000';
    cZ002 := 'Z002';
  
    c1401020102 := '1401020102';
    c8000826650 := '8000826650';
  
    c5810900202 := '5810900202';
    c4810900202 := '4810900202';
  
    c2905901001 := '2905901001';
    c2905901002 := '2905901002';
    c2905901003 := '2905901003';
    c2905901004 := '2905901004';
    c1470909002 := '1470909002';
    c5111110112 := '5111110112';
    c2905901012 := '2905901012';
    c2905901007 := '2905901007';
    c1470901106 := '1470901106';
  
    tipoCon := 'PAL';
  
    -- Obtiene fecha de cierre en formato ddMMyyyy
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select to_char(w_fec_cor_ini, 'ddMMyyyy')
      into w_fec_cor_ini_s
      from DUAL;
  
    aaaa0115 := '1501' || trim(to_char(p_feccor_ini_ano + 1));
  
    -- elimina contabilizacion
    delete recaudo_externo_contabilidad
     where fechaDoc = w_fec_cor_ini_s
       and tipoContable = tipoCon;
  
    w_concepto := 'PAGO PART CONCES nomConcesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c21
               else
                c31
             end) as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             round(r.s_valor_6, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             (case
               when r.valor_total > 0 then
                ''
               else
                cz000
             end) as condicionpago,
             substr(r.NIT_CONCESIONARIO, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'PAGO PART FONDO CONCES nomConcesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c21
               else
                c31
             end) as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             round(r.s_valor_3, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('PAGO PART FONDO CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             (case
               when r.valor_total > 0 then
                ''
               else
                cz000
             end) as condicionpago,
             substr(r.NIT_FONDO, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'SIMIT';
  
    w_concepto := 'REG CTA PTE PAS DISP BCO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             c2905901012 as cuenta,
             round(r.s_valor_3, 0) + round(r.s_valor_6, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REG CTA PTE PAS DISP ' || B.NOMBRE) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'SIMIT'
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'DISP OTRO ACR POLCA 39.78';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c21
               else
                c31
             end) as clavecontable,
             substr(f.nit_polca, 0, 9) as cuenta,
             round(r.p_valor_15, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DISP OTRO ACR POLCA 39.78%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             (case
               when r.valor_total > 0 then
                ''
               else
                cz000
             end) as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr,
             fcm                       f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'PAGO PARTICIPACION SEVIAL 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             'COP' as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c21
               else
                c31
             end) as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             round(r.p_valor_17, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DISP PART SEVIAL 2.7%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             c2905901001 as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             (case
               when r.valor_total > 0 then
                ''
               else
                cz000
             end) as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr,
             fcm                       f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'DISP IVA PAR 2.7% SEVIAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c21
               else
                c31
             end) as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             round(r.p_valor_20, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DISP IVA PAR SEVIAL 2.7%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             c2905901002 as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             (case
               when r.valor_total > 0 then
                ''
               else
                cz000
             end) as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr,
             fcm                       f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'DISP PAR 1.8% FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             c2905901003 as cuenta,
             round(r.p_valor_16, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DSIP PAR 1.8% FCM') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr,
             fcm                       f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'DISP IVA PAR 1.8% FCM';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c40
               else
                c50
             end) as clavecontable,
             c2905901004 as cuenta,
             round(r.p_valor_19, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DISP IVA PAR 1,8% FCM') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr,
             fcm                       f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REG CTA PTE PAS DISP BCO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             c2905901012 as cuenta,
             round(r.p_valor_15, 0) + round(r.p_valor_16, 0) +
             round(r.p_valor_17, 0) + round(r.p_valor_19, 0) +
             round(r.p_valor_20, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REG CTA PTE PAS DISP BCO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr,
             fcm                       f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'DISP PAR 3% SEVIAL';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c21
               else
                c31
             end) as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             round(r.p_valor_13, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DISP PAR 3% SEVIAL') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             (case
               when r.valor_total > 0 then
                ''
               else
                cz000
             end) as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr,
             fcm                       f
       where r.idbanco = b.idbanco
         and f.nit_fcm = '8000826650'
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'DISP REC POLCA PART CONCES nomConcesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c21
               else
                c31
             end) as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             round(r.p_valor_25, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DISP REC POLCA PART CONCES ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             (case
               when r.valor_total > 0 then
                ''
               else
                cz000
             end) as condicionpago,
             substr(r.NIT_CONCESIONARIO, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'DISP REC POLCA PART OPER FDO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c21
               else
                c31
             end) as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             round(r.p_valor_9, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('DISP REC POLCA PART OPER FDO ' || c.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             (case
               when r.valor_total > 0 then
                ''
               else
                cz000
             end) as condicionpago,
             substr(r.NIT_FONDO, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.indTipo = 'POLCA';
  
    w_concepto := 'REG CTA PTE PAS DISP BCO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.idrecaudolocal_liquidacion, '0000000000') || 'G' as referencia,
             ('PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') || ' ' ||
             R.CTA_RECAUDO) as textocabezera,
             (case
               when r.valor_total > 0 then
                c50
               else
                c40
             end) as clavecontable,
             c2905901012 as cuenta,
             round(r.p_valor_13, 0) + round(r.p_valor_25, 0) +
             round(r.p_valor_9, 0) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             R.IDMUNICIPIO AS asignacion,
             ('REG CTA PTE PAS DISP BCO ' || b.nombre) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_liquidacion r,
             banco                     b,
             municipio                 m,
             concesionario             c,
             cta_recaudo_fcm           cr,
             fcm                       f
       where r.idbanco = b.idbanco
         and r.idmunicipio = m.idmunicipio
         and r.idconcesionario = c.idconcesionario
         and r.cta_recaudo = cr.cuenta
         and r.idbanco = cr.idbanco
         and r.indtipo = cr.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and r.indTipo = 'POLCA';
  
    -- Contabiliza pago realizado por el banco
  
    w_concepto := 'pago concesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c50 as clavecontable,
             cf.cta_contable_ing as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr(r.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(r.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r, cta_recaudo_fcm cf, concesionario c
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.orden = 2;
  
    w_concepto := 'pago fond concesioanrio';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c50 as clavecontable,
             cf.cta_contable_ing as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr(r.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(r.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r, cta_recaudo_fcm cf, concesionario c
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.orden = 3;
  
    w_concepto := 'Liquidacion polca';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c50 as clavecontable,
             cf.cta_contable_ing as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_polca, 0, 9) AS asignacion,
             substr(r.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_polca, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r,
             cta_recaudo_fcm        cf,
             concesionario          c,
             fcm                    f,
             cta_dispersion_fcm     cd
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and cd.idbancorec = r.ori_idbanco
         and r.orden = 7;
  
    w_concepto := 'Liquidacion Sevial';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c50 as clavecontable,
             cf.cta_contable_ing as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             substr(r.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r,
             cta_recaudo_fcm        cf,
             concesionario          c,
             fcm                    f,
             cta_dispersion_fcm     cd
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and cd.idbancorec = r.ori_idbanco
         and r.orden = 6;
  
    w_concepto := 'Fcm Polca';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c50 as clavecontable,
             cf.cta_contable_ing as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr(r.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r,
             cta_recaudo_fcm        cf,
             concesionario          c,
             fcm                    f,
             cta_dispersion_fcm     cd
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and cd.idbancorec = r.ori_idbanco
         and r.orden = 8;
  
    w_concepto := 'REG CTA PTE PAS DISP BCO';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c40 as clavecontable,
             c2905901012 as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('REG CTA PTE PAS DISP BCO') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r,
             cta_recaudo_fcm        cf,
             concesionario          c,
             fcm                    f
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and r.orden in (2, 3, 7, 6, 8);
  
    w_concepto := 'pago fond cobertura fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c50 as clavecontable,
             cf.cta_contable_ing as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr(r.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             substr(r.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r, cta_recaudo_fcm cf, concesionario c
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.orden = 4;
  
    w_concepto := 'PAGO fond cobertura fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c01 as clavecontable,
             substr(c.nit_c, 0, 9) as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(c.nit_c, 0, 9) AS asignacion,
             substr('PAGO FONDO COBERTURA FCM ' || c.nombre, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(c.nit_c, 0, 9) as nittercero,
             '' as cuentadivergente,
             aaaa0115 as fechabase,
             cz000 as condicionpago,
             substr(r.des_nit, 0, 9) as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r, cta_recaudo_fcm cf, concesionario c
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and r.orden = 4;
  
    w_concepto := 'Liquidacion fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c50 as clavecontable,
             cf.cta_contable_ing as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr(r.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r,
             cta_recaudo_fcm        cf,
             concesionario          c,
             fcm                    f
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and r.orden = 1;
  
    w_concepto := 'Liquidacion fcm';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(r.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(r.fec_dispersion, 'ddMMyyyy') as referencia,
             'BAN PAG ' || to_char(r.fec_dispersion, 'ddMMyyyy') as textocabezera,
             c40 as clavecontable,
             cd.cta_con_s as cuenta,
             r.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             substr(r.concepto, 0, 50) AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from recaudo_local_disp_tot r,
             cta_recaudo_fcm        cf,
             concesionario          c,
             fcm                    f,
             cta_dispersion_fcm     cd
       where r.id_concesionario_liq = c.idconcesionario
         and cf.idbanco = r.ori_idbanco
         and cf.cuenta = r.ori_cuenta
         and cf.indtipo = r.indtipo
         and r.fec_dispersion = w_fec_cor_ini
         and f.nit_fcm = '8000826650'
         and cd.idbancorec = r.ori_idbanco
         and r.orden = 1;
  
    w_concepto := 'RETENCIONES DE SEVIAL DEL 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             c50 as clavecontable,
             c2905901007 as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             ('RETENCIONES DE SEVIAL DEL 2,7%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from (select sum(r.p_valor_21 + r.p_valor_22) as valor,
                     max(r.fec_dispersion) as fec_dispersion,
                     idconcesionario,
                     cta_recaudo
                from recaudo_local_liquidacion r
               where r.fec_dispersion = w_fec_cor_ini
               group by r.idconcesionario, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'RETENCIONES DE SEVIAL DEL 2.7%';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             c40 as clavecontable,
             c2905901007 as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             ('PAG RETENCIONES DE SEVIAL DEL 2,7%') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from (select sum(r.p_valor_21 + r.p_valor_22) as valor,
                     max(r.fec_dispersion) as fec_dispersion,
                     idconcesionario,
                     cta_recaudo
                from recaudo_local_liquidacion r
               where r.fec_dispersion = w_fec_cor_ini
               group by r.idconcesionario, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'VALOR SEVIAL 2,7 CON IMPUESTOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             fcm1 as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             c21 as clavecontable,
             substr(f.nit_sevial, 0, 9) as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             ('VALOR SEVIAL 2,7 CON IMPUESTOS') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from (select sum(r.p_valor_17 + r.p_valor_20 - r.p_valor_21 -
                         r.p_valor_22) as valor,
                     r.idconcesionario,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion) as fec_dispersion,
                     max(r.nit_concesionario) as nitPago
                from recaudo_local_liquidacion r
               where r.fec_dispersion = w_fec_cor_ini
               group by r.idConcesionario, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.idConcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
    w_concepto := 'TRANF FCM 1.8% REC POLCA CON IMPUESTOS';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             fcm1 as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             c40 as clavecontable,
             ct.cta_con_pa as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_sevial, 0, 9) AS asignacion,
             ('TRANF FCM 1.8% REC POLCA CON IMPUESTOS') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_sevial, 0, 9) as nittercero,
             '' as cuentadivergente,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from (select sum(r.p_valor_16 + r.p_valor_19 + r.p_valor_21 +
                         r.p_valor_22) as valor,
                     r.idConcesionario as idConcesionario,
                     r.cta_recaudo as cta_recaudo,
                     max(r.fec_dispersion) as fec_dispersion,
                     max(r.nit_concesionario) as nitPago,
                     max(r.idbanco) as idbanco
                from recaudo_local_liquidacion r
               where r.fec_dispersion = w_fec_cor_ini
               group by r.idConcesionario, r.cta_recaudo) s,
             concesionario c,
             fcm f,
             cta_dispersion_fcm ct
       where s.idConcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650'
         and ct.nit_fcm = '8000826650'
         and ct.idbancorec = s.idbanco;
  
    w_concepto := 'CRUCE CXC A SIMIT 2,7% + 1,8% + IVA';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(s.fec_dispersion, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             fcm1 as sociedad,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechacontable,
             to_char(s.fec_dispersion, 'MM') as periodo,
             cop as moneda,
             to_char(s.fec_dispersion, 'ddMMyyyy') as referencia,
             ('BAN PAG ' || to_char(s.fec_dispersion, 'ddMMyyyy')) as textocabezera,
             c50 as clavecontable,
             c1470909002 as cuenta,
             s.valor as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(s.fec_dispersion, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('CRUCE CXC A SIMIT 2,7% + 1,8% + IVA') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from (select sum(r.p_valor_16 + r.p_valor_17 + r.p_valor_19 +
                         r.p_valor_20) as valor,
                     idconcesionario,
                     cta_recaudo,
                     max(r.fec_dispersion) as fec_dispersion
                from recaudo_local_liquidacion r
               where r.fec_dispersion = w_fec_cor_ini
               group by r.idconcesionario, r.cta_recaudo) s,
             concesionario c,
             fcm f
       where s.idconcesionario = c.idconcesionario
         and f.nit_fcm = '8000826650';
  
    update recaudo_externo_contabilidad r
       set r.importe = ROUND(r.importe, 0)
     where r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = tipoCon;
  
    update recaudo_externo_contabilidad r
       set r.importe = r.importe * -1
     where r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = tipoCon
       and r.importe < 0;
  
    delete recaudo_externo_contabilidad r
     where r.importe = 0
       and r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = tipoCon;
  
    update recaudo_externo_contabilidad r
       set r.receptoralternativo = ''
     where r.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
       and tipocontable = tipoCon
       and substr(r.nittercero, 0, 9) = substr(r.receptoralternativo, 0, 9);
  
    w_concepto := 'AJUSTE PESOS DETALLE pfc1';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             cop as moneda,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(w_fec_cor_ini, 'ddMMyyyy'), 0, 25) as textocabezera,
             (case
               when a.importe < 0 then
                c50
               else
                c40
             end) as clavecontable,
             (case
               when a.importe < 0 then
                c4810900202
               else
                c5810900202
             end) as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from fcm f,
             (select max(c.textocabezera) as textocabezera,
                     sum(case c.clavecontable
                           when c40 then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = pfc1
                 and c.tipocontable = tipoCon
                 and c.cuenta = c2905901012) a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    w_concepto := 'AJUSTE PESOS deatlle pfc1';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             pfc1 as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             cop as moneda,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(w_fec_cor_ini, 'ddMMyyyy'), 0, 25) as textocabezera,
             (case
               when a.importe < 0 then
                c40
               else
                c50
             end) as clavecontable,
             c2905901012 as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from fcm f,
             (select max(c.textocabezera) as textocabezera,
                     sum(case c.clavecontable
                           when c40 then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = pfc1
                 and c.tipocontable = tipoCon
                 and c.cuenta = c2905901012) a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    w_concepto := 'AJUSTE PESOS fcm1 ';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(w_fec_cor_ini, 'ddMMyyyy') as fechadoc,
             zd as clasedoc,
             fcm1 as sociedad,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechacontable,
             to_char(w_fec_cor_ini, 'MM') as periodo,
             cop as moneda,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as referencia,
             substr('BAN PAG ' || to_char(w_fec_cor_ini, 'ddMMyyyy'), 0, 25) as textocabezera,
             (case
               when a.importe > 0 then
                c50
               else
                c40
             end) as clavecontable,
             c1470901106 as cuenta,
             (case
               when a.importe > 0 then
                a.importe
               else
                a.importe * -1
             end) as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(w_fec_cor_ini, 'ddMMyyyy') as fechavalor,
             substr(f.nit_fcm, 0, 9) AS asignacion,
             ('AJUSTE PESOS') AS textocabezera2,
             'RECURSOPRO' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipoCon as tipocontable
        from fcm f,
             (select sum(case c.clavecontable
                           when c40 then
                            c.importe
                           when c01 then
                            c.importe
                           when c21 then
                            c.importe
                           else
                            c.importe * -1
                         end) as importe
                from recaudo_externo_contabilidad c
               where c.fechadoc = to_char(w_fec_cor_ini, 'ddMMyyyy')
                 and c.sociedad = fcm1
                 and tipocontable = tipoCon
               group by c.referencia) a
       where f.nit_fcm = '8000826650'
         and a.importe <> 0;
  
    commit;
  
    sp_log(p_usuario,
           'Contabiliza Pago Rec Local',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [contabiliza_pago_local] ' || SQLERRM,
            p_error);
    
  END contabiliza_pago_local;

  PROCEDURE contabiliza_trf_siniden(p_feccor_ini_ano number,
                                    p_feccor_ini_mes number,
                                    p_feccor_ini_dia number,
                                    p_feccor_fin_ano number,
                                    p_feccor_fin_mes number,
                                    p_feccor_fin_dia number,
                                    p_usuario        varchar2,
                                    p_error          OUT VARCHAR2) AS
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    w_registros   number;
  
    w_fec_cor_ini_s char(8);
    w_fec_cor_fin_s char(8);
  
    tipoCon char(3);
  
    w_concepto varchar(250);
  
    zt char(2);
    ze char(2);
  
    pfc1 char(4);
    fcm1 char(4);
    cop  char(3);
    c50  char(2);
    c40  char(2);
    c31  char(2);
    c01  char(2);
    c11  char(2);
    c21  char(2);
  
    v5 char(2);
  
    c20211 char(5);
    c20212 char(5);
    c20213 char(5);
    c20214 char(5);
  
    c20221 char(5);
    c20222 char(5);
    c20223 char(5);
    c20224 char(5);
  
    c202213 char(6);
  
    c200102 char(6);
    c100761 char(6);
  
    cZ000 char(4);
    cZ002 char(4);
  
    c1401020102 char(10);
    c8000826650 char(10);
    c5810900202 char(10);
    c4810900202 char(10);
    c2905901001 char(10);
    c2905901002 char(10);
    c2905901003 char(10);
    c2905901004 char(10);
    c1470909002 char(10);
    c5111110112 char(10);
  
  BEGIN
  
    zt := 'ZT';
    ze := 'ZE';
  
    pfc1 := 'PFC1';
    fcm1 := 'FCM1';
    cop  := 'COP';
  
    c50 := '50';
    c40 := '40';
    c31 := '31';
    c01 := '01';
    c11 := '11';
    c21 := '21';
  
    v5 := 'V5';
  
    c20211 := '20211';
    c20212 := '20212';
    c20213 := '20213';
    c20214 := '20214';
  
    c20221 := '20221';
    c20222 := '20222';
    c20223 := '20223';
    c20224 := '20224';
  
    c200102 := '200102';
    c202213 := '202213';
    c100761 := '100761';
  
    cZ000 := 'Z000';
    cZ002 := 'Z002';
  
    c1401020102 := '1401020102';
    c8000826650 := '8000826650';
  
    c5810900202 := '5810900202';
    c4810900202 := '4810900202';
  
    c2905901001 := '2905901001';
    c2905901002 := '2905901002';
    c2905901003 := '2905901003';
    c2905901004 := '2905901004';
    c1470909002 := '1470909002';
    c5111110112 := '5111110112';
  
    -- Obtiene fecha de cierre en formato ddMMyyyy
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_feccor_fin_ano || '-' || p_feccor_fin_mes || '-' ||
                   p_feccor_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    select to_char(w_fec_cor_ini, 'ddMMyyyy')
      into w_fec_cor_ini_s
      from DUAL;
  
    select to_char(w_fec_cor_fin, 'ddMMyyyy')
      into w_fec_cor_fin_s
      from DUAL;
  
    tipoCon := 'TSI';
  
    -- elimina contabilizacion
    delete recaudo_externo_contabilidad
     where to_date(fechaDoc, 'ddMMyyyy') >= w_fec_cor_ini
       and to_date(fechaDoc, 'ddMMyyyy') <= w_fec_cor_fin
       and tipoContable = tipoCon;
  
    w_concepto := 'NOMBRE BANCO CTA REC';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechatrx, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechatrx, 'ddMMyyyy') as fechacontable,
             to_char(r.fechatrx, 'MM') as periodo,
             cop as moneda,
             to_char(r.numsecuenciareg, '0000000000') as referencia,
             ('REC ' || to_char(r.fechatrx, 'ddMMyyyy') || ' ' || R.cuenta) as textocabezera,
             c40 as clavecontable,
             cr.cta_contable as cuenta,
             r.valortrx as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechatrx, 'ddMMyyyy') as fechavalor,
             to_char(r.fechatrx, 'ddMMyyyy') AS asignacion,
             b.nombre || ' ' || r.cuenta AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipocon as tipocontable
        from trxsinidentificar r, banco b, fcm f, cta_recaudo_fcm cr
       where r.idbanco = b.idbanco
         and r.fechatrx >= w_fec_cor_ini
         and r.fechatrx <= w_fec_cor_fin
         and r.estadoiden = 'SI'
         and cr.idbanco = r.idbanco
         and cr.cuenta = r.cuenta;
  
    w_concepto := 'NOMBRE BANCO CTA REC';
    insert into recaudo_externo_contabilidad
      (fechadoc,
       clasedoc,
       sociedad,
       fechacontable,
       periodo,
       moneda,
       referencia,
       textocabezera,
       clavecontable,
       cuenta,
       importe,
       indicadorimpuesto,
       centrocosto,
       centrobeneficio,
       fechavalor,
       asignacion,
       textocabezera2,
       segmento,
       nittercero,
       cuentadivergente,
       fechabase,
       condicionpago,
       receptoralternativo,
       fechageneracion,
       idperson,
       tipocontable)
      select to_char(r.fechatrx, 'ddMMyyyy') as fechadoc,
             zt as clasedoc,
             pfc1 as sociedad,
             to_char(r.fechatrx, 'ddMMyyyy') as fechacontable,
             to_char(r.fechatrx, 'MM') as periodo,
             cop as moneda,
             to_char(r.numsecuenciareg, '0000000000') as referencia,
             ('REC ' || to_char(r.fechatrx, 'ddMMyyyy') || ' ' || R.cuenta) as textocabezera,
             c50 as clavecontable,
             cr.cta_contable_ide as cuenta,
             r.valortrx as importe,
             '' as indicadorimpuesto,
             '' as centrocosto,
             '' as centrobeneficio,
             to_char(r.fechatrx, 'ddMMyyyy') as fechavalor,
             to_char(r.fechatrx, 'ddMMyyyy') AS asignacion,
             b.nombre || ' ' || r.cuenta AS textocabezera2,
             'SIMIT' AS segmento,
             substr(f.nit_fcm, 0, 9) as nittercero,
             '' as cuentadivergente,
             '' as fechabase,
             '' as condicionpago,
             '' as receptoralternativo,
             sysdate as fechageneracion,
             to_number(p_usuario) as idperson,
             tipocon as tipocontable
        from trxsinidentificar r, banco b, fcm f, cta_recaudo_fcm cr
       where r.idbanco = b.idbanco
         and r.idbanco = cr.idbanco
         and r.cuenta = cr.cuenta
         and r.fechatrx >= w_fec_cor_ini
         and r.fechatrx <= w_fec_cor_fin
         and r.estadoiden = 'SI';
  
    commit;
  
    select count(*)
      into w_registros
      from trxsinidentificar r
     where r.fechatrx >= w_fec_cor_ini
       and r.fechatrx <= w_fec_cor_fin
       and r.estadoiden = 'SI';
  
    p_error := 'Contabilidad Transacciones sin identificar OK. Registros procesados: ' ||
               w_registros;
  
    sp_log(p_usuario,
           'contabiliza_trf_siniden',
           p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
           p_feccor_ini_dia || p_feccor_fin_ano || '-' || p_feccor_fin_mes || '-' ||
           p_feccor_fin_dia);
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [contabiliza_trf_siniden] ' || SQLERRM,
            p_error);
    
  END contabiliza_trf_siniden;

end PK_RECLOC;
/

prompt
prompt Creating package body PK_REPROCESO
prompt ==================================
prompt
create or replace package body simit.pk_reproceso is

  PROCEDURE carga_recaudo_externo_repro( 
                                        p_idbanco        varchar2,
                                        p_feccor_ini_ano number,
                                        p_feccor_ini_mes number,
                                        p_feccor_ini_dia number,
                                        p_feccor_fin_ano number,
                                        p_feccor_fin_mes number,
                                        p_feccor_fin_dia number,
                                        V_USUARIO        VARCHAR2,
                                        p_error          OUT VARCHAR2) AS
  
    w_fec_cor_ini     recaudo_externo.fec_corte%TYPE;
    w_fec_cor_fin     recaudo_externo.fec_corte%TYPE;
  
  BEGIN
  
    select TO_DATE(p_feccor_ini_ano || '-' || p_feccor_ini_mes || '-' ||
                   p_feccor_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_feccor_fin_ano || '-' || p_feccor_fin_mes || '-' ||
                   p_feccor_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    delete recaudo_externo
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and idbanco = p_idbanco;
  
    commit;
    
    if (p_idbanco = '50' or p_idbanco = '51' or p_idbanco = '52' ) then
        insert into recaudo_externo
          (id_recaudo_externo,
           idbanco,
           cta_recaudo,
           fec_corte,
           fec_tran,
           valor_efectivo,
           valor_cheque,
           valor_total,
           num_liquidacion,
           identificacion,
           idmunicipio,
           valor_adicional,
           iddepartamento,
           validador_fecha,
           indfecha2002)
          SELECT SEQ_RECAUDO_EXTERNO.NEXTVAL,
                 SUBSTR(b.cod_banco, 1, 2) cod_banco,
                 SUBSTR(b.cuenta, 1, 12) cuenta,
                 trunc(a.fecha_contable),
                 trunc(a.fecha_transaccion),
                 a.total_recaudo,
                 0,
                 a.total_recaudo,
                 SUBSTR(a.numero_referencia, 1, 10) numero_referencia,
                 a.identificacion,
                 SUBSTR(a.id_secretaria_origen, 1, 8) id_secretaria_origen,
                 a.valor_adicional,
                 SUBSTR(a.id_secretaria_origen, 1, 2) iddepartamento,
                 SUBSTR(a.validador_fecha, 1, 3),
                 a.indicador_fecha
            FROM quipux.simit_recaudo_detalle a, quipux.simit_recaudo b
           where a.id_procedencia_pago in ('2', '11')
             and a.consecutivo_recaudo = b.consecutivo_recaudo
             and b.cod_banco = p_idbanco
             and a.fecha_contable >= w_fec_cor_ini
             and a.fecha_contable <= w_fec_cor_fin;
    end if;
    
    if not (p_idbanco = '50' or p_idbanco = '51' or p_idbanco = '52') then
    
        insert into recaudo_externo
          (id_recaudo_externo,
           idbanco,
           cta_recaudo,
           fec_corte,
           fec_tran,
           valor_efectivo,
           valor_cheque,
           valor_total,
           num_liquidacion,
           identificacion,
           idmunicipio,
           valor_adicional,
           iddepartamento,
           validador_fecha,
           indfecha2002)
          SELECT SEQ_RECAUDO_EXTERNO.NEXTVAL,
                 SUBSTR(b.cod_banco, 1, 2) cod_banco,
                 SUBSTR(b.cuenta, 1, 12) cuenta,
                 trunc(c.fecha_carga),
                 trunc(a.fecha_transaccion),
                 a.total_recaudo,
                 0,
                 a.total_recaudo,
                 SUBSTR(a.numero_referencia, 1, 10) numero_referencia,
                 a.identificacion,
                 SUBSTR(a.id_secretaria_origen, 1, 8) id_secretaria_origen,
                 a.valor_adicional,
                 SUBSTR(a.id_secretaria_origen, 1, 2) iddepartamento,
                 SUBSTR(a.validador_fecha, 1, 3),
                 a.indicador_fecha
            FROM quipux.simit_recaudo_detalle   a,
                 quipux.simit_recaudo           b,
                 quipux.simit_carga_informacion c
           where a.id_procedencia_pago = '2'
             and a.consecutivo_recaudo = b.consecutivo_recaudo
             and b.cod_banco = p_idbanco
             and b.id_proceso_carga = c.id_proceso_carga
             and c.id_tipo_archivo in (4, 8)
             and trunc(c.fecha_carga) >= w_fec_cor_ini
             and trunc(c.fecha_carga) <= w_fec_cor_fin;
    
    end if;
    
    commit;
    
    -- actualiza cuenta de avvillas para completar datoñ  update recaudo_externo
  
    update recaudo_externo
       set cta_recaudo = '0' || cta_recaudo
     where substr(cta_recaudo, 1, 2) = '86'
       and fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and idbanco = p_idbanco;
  
    -- actualiza banco basado en la cuenta de recaudo
    update recaudo_externo r
       set r.idbanco = (select max(c.idbanco)
                          from cta_recaudo_concesionario c
                         where c.cuenta = r.cta_recaudo)
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and idbanco = p_idbanco;
  
    -- actualiza validador si esta vacio
    update recaudo_externo
       set validador_fecha = '000'
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and validador_fecha is null
       and idbanco = p_idbanco;
  
    -- actualiza validador si esta vacio
    update recaudo_externo
       set indfecha2002 = '0'
     where fec_corte >= w_fec_cor_ini
       and fec_corte <= w_fec_cor_fin
       and indfecha2002 is null
       and idbanco = p_idbanco;
  
    commit;
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            V_USUARIO || ' [pk_reproceso.carga_recaudo_externo] ' ||
            SQLERRM,
            p_error);
    
  END carga_recaudo_externo_repro;

  PROCEDURE e_Reproceso(V_IDBANCO           VARCHAR2,
                        V_FECHA_COR_INI_ANO NUMBER,
                        V_FECHA_COR_INI_MES NUMBER,
                        V_FECHA_COR_INI_DIA NUMBER,
                        V_FECHA_COR_FIN_ANO NUMBER,
                        V_FECHA_COR_FIN_MES NUMBER,
                        V_FECHA_COR_FIN_DIA NUMBER,
                        V_USUARIO           VARCHAR2,
                        V_ERROR             OUT VARCHAR2,
                        V_LOG               OUT VARCHAR2) AS
  
    w_fecha_ini date;
    w_fecha_fin date;
    w_fecha_tra date;
    ano         number;
    mes         number;
    dia         number;
    
    v_finlinea VARCHAR2(2);
    v_numreg number;
    
    
    CURSOR tabla IS
     select distinct fec_dispersion
              from recaudo_externo_disp
             where fec_corte_ini >= w_fecha_ini
               and fec_corte_ini <= w_fecha_fin
               and ori_idbanco = V_IDBANCO;

    
  begin
     v_finlinea := chr(13) || chr(10);
   
     V_LOG := 'SE INICIA REPROCESO ' || v_finlinea;
     
  
    -- obtener fecha inicial y final del reproceso
    select TO_DATE(V_FECHA_COR_INI_ANO || '-' || V_FECHA_COR_INI_MES || '-' ||
                   V_FECHA_COR_INI_DIA,
                   'YYYY-MM-DD')
      into w_fecha_ini
      from DUAL;
  
    select TO_DATE(V_FECHA_COR_FIN_ANO || '-' || V_FECHA_COR_FIN_MES || '-' ||
                   V_FECHA_COR_FIN_DIA,
                   'YYYY-MM-DD')
      into w_fecha_fin
      from DUAL;
  
    -- verificar fecha dummy
    if (w_fecha_fin > sysdate + 365) then
      V_ERROR := 'Reproceso demasiado atras. Se debe ajustar proceso ';
      return;
    end if;
    
    -- verificar que no se tenga recaudo cargado para fecha dummy
    select count(*)
    into v_numreg
    from recaudo_externo
     where fec_corte >= w_fecha_ini + 365
       and fec_corte <= w_fecha_fin + 365;
 
    if (v_numreg > 0 ) then
      V_ERROR := 'Reproceso no posible. Ajsutar procedimiento. Aumentar fecha dummy ';
      return;
    end if;
    
  
    -- No mandar correos en el reproceso
    UPDATE FCM SET ENVIACORREO = 0;
    Commit;
  
    -- Cargar nuevamente recaudo para las fechas para el banco dado
    carga_recaudo_externo_repro(V_IDBANCO,
                                V_FECHA_COR_INI_ANO,
                                V_FECHA_COR_INI_MES,
                                V_FECHA_COR_INI_DIA,
                                V_FECHA_COR_FIN_ANO,
                                V_FECHA_COR_FIN_MES,
                                V_FECHA_COR_FIN_DIA,
                                V_USUARIO,
                                V_ERROR);
                                
                              
                                
    -- verificar error 
    if (v_error is not null) then
      return;
    end if;
  
    V_LOG := V_LOG || 'SE REPROCESO CARGUE OK ' || v_finlinea;

    -- borrar transferencias programadas generadas en la fecha de corte y del banco 
    delete from recaudo_externo_disp_tot
     where fec_dispersion in
           (select distinct fec_dispersion
              from recaudo_externo_disp
             where fec_corte_ini >= w_fecha_ini
               and fec_corte_ini <= w_fecha_fin
               and ori_idbanco = V_IDBANCO)
       and ori_idbanco = V_IDBANCO;
  
    -- borrar liquidaciones que se van a reprocesar 
    delete from recaudo_externo_liquidacion t
     where t.idbanco = V_IDBANCO
       and t.fec_corte >= w_fecha_ini
       and t.fec_corte <= w_fecha_fin;
       
    -- borar transferencias a realizar
    delete recaudo_externo_disp
     where fec_corte_ini >= w_fecha_ini
       and fec_corte_ini <= w_fecha_fin
       and ori_idbanco = V_IDBANCO;
  
    commit;

    V_LOG := V_LOG || 'SE ELIMINO INFORMACION OK ' || v_finlinea;
    
    -- duplicar recaudo con fecha de corte a un año para 
    -- ejecutar liquidacion sin afectar procesos actuales
    -- a la fecha de corte se le suma 365 dias
    insert into recaudo_externo
      (id_recaudo_externo,
       idbanco,
       cta_recaudo,
       fec_corte,
       fec_tran,
       oficina_origen,
       valor_efectivo,
       valor_cheque,
       valor_total,
       idmunicipio,
       valor_adicional,
       validador_fecha,
       indfecha2002,
       num_liquidacion,
       tipo_identificacion,
       identificacion,
       nombre_infractor,
       apellido_infractor,
       num_comparendo,
       fec_comparendo,
       num_resolucion,
       fec_resolucion,
       iddepartamento)
      select seq_recaudo_externo.nextval,
             idbanco,
             cta_recaudo,
             fec_corte + 365,
             fec_tran,
             oficina_origen,
             valor_efectivo,
             valor_cheque,
             valor_total,
             idmunicipio,
             valor_adicional,
             validador_fecha,
             indfecha2002,
             num_liquidacion,
             tipo_identificacion,
             identificacion,
             nombre_infractor,
             apellido_infractor,
             num_comparendo,
             fec_comparendo,
             num_resolucion,
             fec_resolucion,
             iddepartamento
        from recaudo_externo
       where idbanco = V_IDBANCO
         and fec_corte >= w_fecha_ini
         and fec_corte <= w_fecha_fin;
  
    commit;
  
    -- liquidar recaudos a reprocesar, los que tienen fecha dummy
    -- se liquida dia a dia 
    w_fecha_tra := w_fecha_ini + 365;
  
    while w_fecha_tra <= (w_fecha_fin + 365) loop
    
      V_ERROR := null;
    
      ano := to_number(to_char(w_fecha_tra, 'yyyy'));
      mes := to_number(to_char(w_fecha_tra, 'mm'));
      dia := to_number(to_char(w_fecha_tra, 'dd'));
    
      pk_proc.liquida_recaudo_externo(ano, mes, dia, V_USUARIO, V_ERROR);
   
      V_LOG := V_LOG || 'SE LIQUIDO : ' || TO_CHAR(w_fecha_tra,'yyyymmdd') || ':' || V_ERROR || v_finlinea;
    
      w_fecha_tra := w_fecha_tra + 1;
    
    end loop;
  
    V_ERROR := null;
    
    -- actualiza registros de liquidacion generados con fechas correctas
    update recaudo_externo_liquidacion
       set fec_corte          = fec_corte - 365,
           fec_dispersion     = fn_fec_dispersion(fec_dispersion - 365,0,0,V_USUARIO),
           fec_dispersion_con = fn_fec_dispersion(fec_dispersion_con - 365,0,0,V_USUARIO)
     where fec_corte >= w_fecha_ini
       and fec_corte <= w_fecha_fin
       and idbanco = V_IDBANCO;
  
    commit;
  
    -- actualiza registros de transferencia generados con fechas correctas
  
    update recaudo_externo_disp
       set fec_corte_ini  = fec_corte_ini - 365,
           fec_corte_fin  = fec_corte_fin - 365,
           fec_dispersion = fn_fec_dispersion( fec_dispersion - 3650,0,0,V_USUARIO)
     where fec_corte_ini >= w_fecha_ini + 365
       and fec_corte_fin <= w_fecha_fin + 365
       and ori_idbanco = V_IDBANCO;
  
    -- elimina registros duplicados para hacer el reproceso
    delete from recaudo_externo t
     where t.idbanco = V_IDBANCO
       and t.fec_corte = w_fecha_ini + 365
       and t.fec_corte = w_fecha_ini + 365;
    
    -- actualiza numero de recaudo externo asociado
    update recaudo_externo_liquidacion l
       set l.id_recaudo_externo = (select r.id_recaudo_externo
                                     from recaudo_externo r
                                    where r.num_liquidacion =
                                          l.num_liquidacion
                                      and r.idbanco = V_IDBANCO
                                      and r.fec_corte >= w_fecha_ini
                                      and r.fec_corte <= w_fecha_fin)
    
     where l.idbanco = V_IDBANCO
       and l.fec_corte >= w_fecha_ini
       and l.fec_corte <= w_fecha_fin;
  
    commit;
  
    V_LOG := V_LOG || 'SE AJUSTO INFORMACION OK ' || v_finlinea;
  
    -- reprocesa contabilidad
    w_fecha_tra := w_fecha_ini;
  
    while w_fecha_tra <= w_fecha_fin loop
    
      V_ERROR := null;
    
      ano := to_number(to_char(w_fecha_tra, 'yyyy'));
      mes := to_number(to_char(w_fecha_tra, 'mm'));
      dia := to_number(to_char(w_fecha_tra, 'dd'));
    
      pk_conta_ext.contabiliza_recaudo_externo(ano,
                                          mes,
                                          dia,
                                          V_USUARIO,
                                          V_ERROR);
      
      V_LOG := V_LOG || 'SE CONTABILIZO  : ' || TO_CHAR(w_fecha_tra,'yyyymmdd') || ':' || V_ERROR || v_finlinea;
 
      dbms_output.put_line(V_ERROR);
    
      w_fecha_tra := w_fecha_tra + 1;
    
    end loop;
  
    V_ERROR := null;
  
    -- reprocesa transferencias generadas
    for registro in tabla loop
    
       w_fecha_tra := registro.fec_dispersion;
       V_ERROR := null;
       
       ano := to_number(to_char(registro.fec_dispersion, 'yyyy'));
      mes := to_number(to_char(registro.fec_dispersion, 'mm'));
      dia := to_number(to_char(registro.fec_dispersion, 'dd'));
  
       pk_proc.transferir_recaudo_externo(ano,mes,dia,V_USUARIO,V_ERROR);
       V_LOG := V_LOG || 'SE TRANSFIERE  : ' || TO_CHAR(w_fecha_tra,'yyyymmdd') || ':' || V_ERROR || v_finlinea;
       dbms_output.put_line(V_ERROR);
 
    end loop; 
  
    -- activar correos
    
    UPDATE FCM SET ENVIACORREO = 1;
    
    COMMIT;
 
    V_ERROR := 'Reproceso ok';
    
    V_LOG := V_LOG || 'REPROCESOCOMPLETADO ' || v_finlinea;
 
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            V_USUARIO || ' [pk_reproceso.e_Reproceso] ' || SQLERRM,
            V_ERROR);
    
  END e_Reproceso;

end pk_reproceso;
/

prompt
prompt Creating package body PK_VISTO
prompt ==============================
prompt
create or replace package body simit.PK_VISTO is

                             

  PROCEDURE vistoBuenoS      (p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_fec_fin_ano number,
                              p_fec_fin_mes number,
                              p_fec_fin_dia number,
                              
                              p_tipoRec varchar2,
                              p_proceso varchar2,
                              p_banco   varchar2,
                              p_observaciones varchar2,
                              
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    w_registros   number;
    w_desc varchar2(250);
   
  begin
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    w_desc := '';
  
    if p_tipoRec = 'L' and p_proceso = 'D' then

        w_desc := ' RECAUDO LOCAL - DISTRIBUCION';
      
        SELECT COUNT(*)
        INTO w_registros
        FROM recaudo_local_liquidacion
         where fec_corte >= w_fec_cor_ini
           and fec_corte <= w_fec_cor_fin
           and idbanco = p_banco;
      
        if ( w_registros = 0 ) then
           p_error := 'No hay Recaudo local liquidado para el rango de fechas ingresado';
           return;
        end if; 
        
          
    end if;

    if p_tipoRec = 'L' and p_proceso = 'T' then
         w_desc := ' RECAUDO LOCAL - TRANSFERENCIA';
      
        SELECT COUNT(*)
        INTO w_registros
        from recaudo_local_disp_tot
        where fec_dispersion = w_fec_cor_ini
        and ori_idbanco = p_banco;
      
        if ( w_registros = 0 ) then
           p_error := 'No hay Recaudo local para transferir en la fecha ingresada';
           return;
        end if; 
          
    end if;

    insert into vistobueno
          (fecharegistro, usuarioregistro, tiporecaudo, tipoproceso, fechainicio, fechafin, banco, observaciones, interventoria)
    values
          (sysdate, p_usuario, p_tipoRec, p_proceso, w_fec_cor_ini, w_fec_cor_fin, p_banco, p_observaciones, 'S');
    commit;  
  
 
    sp_envioNotificacion(grupoRecibe => 3,
                         grupoCopia  => 2,
                         asunto      => 'SDF - Visto Bueno Interventoria SIMIT ' || w_desc ||
                                        ' del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd') ||
                                        ' al dia ' ||
                                        to_char(w_fec_cor_fin, 'yyyy-MM-dd'),
                         mensaje     => 'El sistema SDF informa que se dio el visto bueno de la Interventoria SIMIT del ' ||
                                        w_desc || ' del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd') ||
                                        ' al dia ' ||
                                        to_char(w_fec_cor_fin, 'yyyy-MM-dd') ||
                                        ' para el banco: ' || p_banco ||
                                        '. Con la siguiente observacion: ' ||
                                        p_observaciones,
                         p_usuario   => p_usuario);
  
    p_error := 'Visto bueno ingresado correctamente ';
  
    sp_log(p_usuario,
           'vistoBuenoS',
           p_tipoRec || '-' || p_proceso || '-' || p_banco || '-' || p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
           p_fec_ini_dia || ' a ' || p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
           p_fec_fin_dia);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [vistoBuenoS] ' || SQLERRM,
            p_error);
    
  end vistoBuenoS;

PROCEDURE vistoBuenoP      (p_fec_ini_ano number,
                              p_fec_ini_mes number,
                              p_fec_ini_dia number,
                              p_fec_fin_ano number,
                              p_fec_fin_mes number,
                              p_fec_fin_dia number,
                              
                              p_tipoRec varchar2,
                              p_proceso varchar2,
                              p_banco   varchar2,
                              p_observaciones varchar2,
                              
                              p_usuario varchar2,
                              p_error   OUT VARCHAR2) as
  
    w_fec_cor_ini date;
    w_fec_cor_fin date;
    w_registros   number;
    w_desc varchar2(250);
   
  begin
  
    select TO_DATE(p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
                   p_fec_ini_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_ini
      from DUAL;
  
    select TO_DATE(p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
                   p_fec_fin_dia,
                   'YYYY-MM-DD')
      into w_fec_cor_fin
      from DUAL;
  
    w_desc := '';
  
    if p_tipoRec = 'L' and p_proceso = 'D' then

        w_desc := ' RECAUDO LOCAL - DISTRIBUCION';
      
        SELECT COUNT(*)
        INTO w_registros
        FROM recaudo_local_liquidacion
         where fec_corte >= w_fec_cor_ini
           and fec_corte <= w_fec_cor_fin
           and idbanco = p_banco;
      
        if ( w_registros = 0 ) then
           p_error := 'No hay Recaudo local liquidado para el rango de fechas ingresado';
           return;
        end if; 
        
          
    end if;

    if p_tipoRec = 'L' and p_proceso = 'T' then
         w_desc := ' RECAUDO LOCAL - TRANSFERENCIA';
      
        SELECT COUNT(*)
        INTO w_registros
        from recaudo_local_disp_tot
        where fec_dispersion = w_fec_cor_ini
        and ori_idbanco = p_banco;
      
        if ( w_registros = 0 ) then
           p_error := 'No hay Recaudo local para transferir en la fecha ingresada';
           return;
        end if; 
          
    end if;

    insert into vistobueno
          (fecharegistro, usuarioregistro, tiporecaudo, tipoproceso, fechainicio, fechafin, banco, observaciones, interventoria)
    values
          (sysdate, p_usuario, p_tipoRec, p_proceso, w_fec_cor_ini, w_fec_cor_fin, p_banco, p_observaciones, 'P');
    commit;  
  
 
    sp_envioNotificacion(grupoRecibe => 3,
                         grupoCopia  => 2,
                         asunto      => 'SDF - Visto Bueno Interventoria POLCA ' || w_desc ||
                                        ' del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd') ||
                                        ' al dia ' ||
                                        to_char(w_fec_cor_fin, 'yyyy-MM-dd'),
                         mensaje     => 'El sistema SDF informa que se dio el visto bueno de la Interventoria POLCA del ' ||
                                        w_desc || ' del dia ' ||
                                        to_char(w_fec_cor_ini, 'yyyy-MM-dd') ||
                                        ' al dia ' ||
                                        to_char(w_fec_cor_fin, 'yyyy-MM-dd') ||
                                        ' para el banco: ' || p_banco ||
                                        '. Con la siguiente observacion: ' ||
                                        p_observaciones,
                         p_usuario   => p_usuario);
  
    p_error := 'Visto bueno ingresado correctamente ';
  
    sp_log(p_usuario,
           'vistoBuenoP',
           p_tipoRec || '-' || p_proceso || '-' || p_banco || '-' || p_fec_ini_ano || '-' || p_fec_ini_mes || '-' ||
           p_fec_ini_dia || ' a ' || p_fec_fin_ano || '-' || p_fec_fin_mes || '-' ||
           p_fec_fin_dia);
  
  EXCEPTION
    WHEN OTHERS THEN
      sp_ex(SQLCODE,
            p_usuario || ' [vistoBuenoP] ' || SQLERRM,
            p_error);
    
  end vistoBuenoP; 
                                 
end PK_VISTO;
/

prompt
prompt Creating trigger TRG_REC_LOC_HIST
prompt =================================
prompt
CREATE OR REPLACE TRIGGER "SIMIT"."TRG_REC_LOC_HIST" 
  BEFORE INSERT or UPDATE or DELETE on REC_LOC_HIST_1
  for each row
declare
  -- local variables here
begin
  :new.fecha_ejecucion := sysdate;
  IF insertING THEN
     :new.novedad := 'I';
     :new.X55 := 0;
     :new.XFCM := 0;
     :new.XMUN := 0;
  ELSIF updatING and :new.novedad = 'U' THEN
     :new.X55 := 0;
     :new.XFCM := 0;
     :new.XMUN := 0;
  ELSIF updatING and :new.novedad = 'D' THEN
     :new.X55 := :old.X55;
     :new.XFCM := :old.XFCM;
     :new.XMUN := :old.XMUN;
  ELSE
     :new.novedad := '?';
     :new.X55 := :old.X55;
     :new.XFCM := :old.XFCM;
     :new.XMUN := :old.XMUN;

  end if;
end trg_REC_LOC_HIST;
/

prompt
prompt Creating trigger TRG_RECLOC_LIQHIS
prompt ==================================
prompt
CREATE OR REPLACE TRIGGER "SIMIT"."TRG_RECLOC_LIQHIS" 
BEFORE INSERT OR DELETE OR UPDATE
ON RECAUDO_LOCAL_LIQ_HIS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE

  vVALORLLAVE  number(8);
  vOPERACION   VARCHAR2(20);
  vIPMAQUINA   VARCHAR2(20):='1.1.1.1';


BEGIN

   vVALORLLAVE:=:old.consecutivo_recaudo;

IF INSERTING or UPDATING THEN
   VOPERACION:='Insert/Update';
   :new.fecha_ins_upt := sysdate;
   :new.p_55 := null;
   :new.p_fcm := null;
   :new.p_mun := null;

else
   VOPERACION:='Delete';

end if;

--select SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15) into vipmaquina from dual;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END TRG_recloc_liqhis;
/

prompt
prompt Creating trigger TRG_TMP_VILLAS_091031
prompt ======================================
prompt
CREATE OR REPLACE TRIGGER "SIMIT"."TRG_TMP_VILLAS_091031" 
  BEFORE insert or UPDATE on recaudo_externo_liquidacion  
  for each row
declare
  -- local variables here
begin
  if to_char(:new.fec_corte, 'yymmdd') = '091031' and :new.idbanco = 52 then
     :new.fec_corte := to_date('091030','yymmdd');
  end if;
end trg_tmp_villas_091031;
/

prompt
prompt Creating trigger TR_NOTIFICA_CREACION_OT
prompt ========================================
prompt
create or replace trigger "SIMIT"."TR_NOTIFICA_CREACION_OT" 
  after insert or UPDATE on municipio  
  for each row
declare
  -- local variables here
  correoRecibe varchar2(250):='ricardo.buitrago@fcm.org.co';
  comando varchar(1000);
  salida  varchar(250); 
  ASUNTO varchar2(500);
  MENSAJE varchar2(500);

begin
                           
  ASUNTO := 'SDF - Se ha creado/modificado la autoridad de transito '||:new.NOMBRE || ' con DIVIPO: '||:new.IDMUNICIPIO;
  MENSAJE := to_char (SYSDATE, 'yyyy/mm/dd hh24:mi') || 'El sistema SDF informa que se ha creado/modificado la autoridad de transito en mencion ';

    comando := '/bin/sh /trfavvillas/envioCorreo.sh '||replace(MENSAJE,' ','_')||' '||replace(ASUNTO,' ','_')||' ' || correoRecibe  ;
    salida := Shell_Run(comando);
end TR_NOTIFICA_CREACION_OT;
/


spool off
